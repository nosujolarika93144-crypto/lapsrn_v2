LapSRN(
  (head_x8): Conv2d(2, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (head_x4): Conv2d(2, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (head_x2): Conv2d(2, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (feature_extractor_x4): FeatureExtraction(
    (body): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
  )
  (feature_extractor_x2): FeatureExtraction(
    (body): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
  )
  (upsample_block_x4): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(128, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(128, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (upsample_block_x2): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(128, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(128, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (upsample_block_x1): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(128, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(128, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 1]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0481][DIV: 0.0427][GRAD: 29.8016][Total: 29.8924]	120.9+15.0s
[1600/8000]	[L1: 0.0319][DIV: 0.0419][GRAD: 23.8393][Total: 23.9131]	119.4+3.2s
[2400/8000]	[L1: 0.0256][DIV: 0.0418][GRAD: 21.2162][Total: 21.2835]	120.6+3.1s
[3200/8000]	[L1: 0.0228][DIV: 0.0433][GRAD: 20.6300][Total: 20.6962]	120.8+3.2s
[4000/8000]	[L1: 0.0209][DIV: 0.0438][GRAD: 19.8566][Total: 19.9213]	120.1+3.3s
[4800/8000]	[L1: 0.0196][DIV: 0.0430][GRAD: 18.9644][Total: 19.0270]	116.7+3.3s
[5600/8000]	[L1: 0.0187][DIV: 0.0436][GRAD: 18.6476][Total: 18.7099]	117.8+3.4s
[6400/8000]	[L1: 0.0178][DIV: 0.0435][GRAD: 18.2314][Total: 18.2927]	116.6+3.4s
[7200/8000]	[L1: 0.0170][DIV: 0.0433][GRAD: 17.9633][Total: 18.0236]	116.3+3.5s
[8000/8000]	[L1: 0.0166][DIV: 0.0436][GRAD: 17.7441][Total: 17.8043]	116.4+3.5s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.038286	vorticity_error: 10.787004	mean_abs_divergence: 0.041698
[INFO] New best model found with rel_l2_error: 0.038286
Forward: 20.69s

Saving...
Total: 22.33s

[Epoch 2]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0109][DIV: 0.0426][GRAD: 15.3289][Total: 15.3823]	116.8+17.1s
[1600/8000]	[L1: 0.0105][DIV: 0.0421][GRAD: 14.8130][Total: 14.8656]	121.0+3.3s
[2400/8000]	[L1: 0.0108][DIV: 0.0445][GRAD: 15.2339][Total: 15.2892]	115.8+3.0s
[3200/8000]	[L1: 0.0106][DIV: 0.0445][GRAD: 15.1933][Total: 15.2483]	117.3+3.3s
[4000/8000]	[L1: 0.0106][DIV: 0.0444][GRAD: 15.0846][Total: 15.1396]	120.0+3.7s
[4800/8000]	[L1: 0.0106][DIV: 0.0449][GRAD: 15.1664][Total: 15.2220]	120.0+3.6s
[5600/8000]	[L1: 0.0106][DIV: 0.0453][GRAD: 15.2241][Total: 15.2800]	120.1+3.6s
[6400/8000]	[L1: 0.0105][DIV: 0.0456][GRAD: 15.3129][Total: 15.3690]	120.1+3.6s
[7200/8000]	[L1: 0.0103][DIV: 0.0453][GRAD: 15.1420][Total: 15.1975]	120.1+3.6s
[8000/8000]	[L1: 0.0103][DIV: 0.0454][GRAD: 15.1228][Total: 15.1785]	120.0+3.6s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.043180	vorticity_error: 16.192352	mean_abs_divergence: 0.033497
Forward: 18.37s

Saving...
Total: 19.65s

[Epoch 3]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0101][DIV: 0.0496][GRAD: 15.3858][Total: 15.4454]	119.9+14.8s
[1600/8000]	[L1: 0.0098][DIV: 0.0479][GRAD: 14.8636][Total: 14.9213]	120.0+3.6s
[2400/8000]	[L1: 0.0098][DIV: 0.0473][GRAD: 14.7238][Total: 14.7809]	120.0+3.6s
[3200/8000]	[L1: 0.0096][DIV: 0.0464][GRAD: 14.4827][Total: 14.5388]	120.0+3.6s
[4000/8000]	[L1: 0.0096][DIV: 0.0463][GRAD: 14.2759][Total: 14.3319]	120.0+3.6s
[4800/8000]	[L1: 0.0095][DIV: 0.0463][GRAD: 14.2543][Total: 14.3101]	120.0+3.6s
[5600/8000]	[L1: 0.0095][DIV: 0.0464][GRAD: 14.3133][Total: 14.3692]	120.1+3.6s
[6400/8000]	[L1: 0.0095][DIV: 0.0465][GRAD: 14.2813][Total: 14.3374]	120.1+3.7s
[7200/8000]	[L1: 0.0096][DIV: 0.0471][GRAD: 14.3394][Total: 14.3961]	120.2+3.5s
[8000/8000]	[L1: 0.0096][DIV: 0.0470][GRAD: 14.3287][Total: 14.3853]	120.0+3.6s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.035473	vorticity_error: 8.634132	mean_abs_divergence: 0.034495
[INFO] New best model found with rel_l2_error: 0.035473
Forward: 19.10s

Saving...
Total: 20.82s

[Epoch 4]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0091][DIV: 0.0440][GRAD: 13.1061][Total: 13.1591]	120.1+14.5s
[1600/8000]	[L1: 0.0089][DIV: 0.0445][GRAD: 12.8460][Total: 12.8994]	120.0+3.6s
[2400/8000]	[L1: 0.0087][DIV: 0.0444][GRAD: 12.8218][Total: 12.8749]	119.8+3.7s
[3200/8000]	[L1: 0.0089][DIV: 0.0440][GRAD: 12.9403][Total: 12.9932]	120.1+3.6s
[4000/8000]	[L1: 0.0088][DIV: 0.0443][GRAD: 13.0113][Total: 13.0644]	119.9+3.6s
[4800/8000]	[L1: 0.0088][DIV: 0.0442][GRAD: 13.0648][Total: 13.1178]	119.8+3.6s
[5600/8000]	[L1: 0.0088][DIV: 0.0443][GRAD: 12.9996][Total: 13.0526]	119.8+3.7s
[6400/8000]	[L1: 0.0089][DIV: 0.0452][GRAD: 13.1711][Total: 13.2251]	119.9+3.6s
[7200/8000]	[L1: 0.0088][DIV: 0.0452][GRAD: 13.1272][Total: 13.1812]	120.2+3.5s
[8000/8000]	[L1: 0.0088][DIV: 0.0455][GRAD: 13.1543][Total: 13.2086]	120.0+3.7s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.033966	vorticity_error: 6.909261	mean_abs_divergence: 0.022971
[INFO] New best model found with rel_l2_error: 0.033966
Forward: 18.61s

Saving...
Total: 20.20s

[Epoch 5]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0084][DIV: 0.0492][GRAD: 13.4744][Total: 13.5321]	120.0+14.8s
[1600/8000]	[L1: 0.0090][DIV: 0.0488][GRAD: 13.8991][Total: 13.9569]	120.1+3.6s
[2400/8000]	[L1: 0.0093][DIV: 0.0495][GRAD: 14.1732][Total: 14.2320]	120.0+3.7s
[3200/8000]	[L1: 0.0090][DIV: 0.0476][GRAD: 13.5952][Total: 13.6518]	120.0+3.6s
[4000/8000]	[L1: 0.0089][DIV: 0.0478][GRAD: 13.5084][Total: 13.5651]	120.2+3.5s
[4800/8000]	[L1: 0.0089][DIV: 0.0478][GRAD: 13.4506][Total: 13.5073]	120.1+3.6s
[5600/8000]	[L1: 0.0087][DIV: 0.0471][GRAD: 13.2064][Total: 13.2623]	120.1+3.7s
[6400/8000]	[L1: 0.0087][DIV: 0.0472][GRAD: 13.1529][Total: 13.2088]	120.0+3.6s
[7200/8000]	[L1: 0.0086][DIV: 0.0468][GRAD: 13.0674][Total: 13.1228]	120.0+3.6s
[8000/8000]	[L1: 0.0086][DIV: 0.0470][GRAD: 13.0815][Total: 13.1371]	119.8+3.6s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.034756	vorticity_error: 4.663626	mean_abs_divergence: 0.037038
Forward: 19.60s

Saving...
Total: 20.83s

[Epoch 6]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0081][DIV: 0.0467][GRAD: 12.3443][Total: 12.3991]	120.0+14.4s
[1600/8000]	[L1: 0.0082][DIV: 0.0479][GRAD: 12.6887][Total: 12.7449]	120.0+3.6s
[2400/8000]	[L1: 0.0082][DIV: 0.0486][GRAD: 12.8480][Total: 12.9048]	120.1+3.6s
[3200/8000]	[L1: 0.0082][DIV: 0.0480][GRAD: 12.8190][Total: 12.8752]	120.0+3.7s
[4000/8000]	[L1: 0.0080][DIV: 0.0475][GRAD: 12.5913][Total: 12.6468]	120.1+3.5s
[4800/8000]	[L1: 0.0079][DIV: 0.0462][GRAD: 12.3951][Total: 12.4492]	120.2+3.5s
[5600/8000]	[L1: 0.0079][DIV: 0.0459][GRAD: 12.3406][Total: 12.3944]	120.0+3.6s
[6400/8000]	[L1: 0.0079][DIV: 0.0462][GRAD: 12.3399][Total: 12.3939]	120.1+3.5s
[7200/8000]	[L1: 0.0079][DIV: 0.0460][GRAD: 12.3295][Total: 12.3835]	119.9+3.6s
[8000/8000]	[L1: 0.0079][DIV: 0.0460][GRAD: 12.3218][Total: 12.3757]	120.1+3.5s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.035748	vorticity_error: 4.389009	mean_abs_divergence: 0.028244
Forward: 18.33s

Saving...
Total: 19.54s

[Epoch 7]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0078][DIV: 0.0463][GRAD: 12.5632][Total: 12.6173]	119.8+14.9s
[1600/8000]	[L1: 0.0081][DIV: 0.0470][GRAD: 12.3491][Total: 12.4042]	120.0+3.6s
[2400/8000]	[L1: 0.0080][DIV: 0.0476][GRAD: 12.4531][Total: 12.5087]	120.1+3.6s
[3200/8000]	[L1: 0.0081][DIV: 0.0493][GRAD: 12.7256][Total: 12.7830]	120.1+3.5s
[4000/8000]	[L1: 0.0081][DIV: 0.0495][GRAD: 12.6419][Total: 12.6995]	120.2+3.6s
[4800/8000]	[L1: 0.0081][DIV: 0.0493][GRAD: 12.6488][Total: 12.7062]	120.0+3.7s
[5600/8000]	[L1: 0.0080][DIV: 0.0489][GRAD: 12.5273][Total: 12.5842]	120.0+3.6s
[6400/8000]	[L1: 0.0080][DIV: 0.0493][GRAD: 12.6448][Total: 12.7022]	119.9+3.7s
[7200/8000]	[L1: 0.0080][DIV: 0.0491][GRAD: 12.6269][Total: 12.6840]	120.0+3.6s
[8000/8000]	[L1: 0.0079][DIV: 0.0487][GRAD: 12.5005][Total: 12.5571]	119.9+3.6s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.040067	vorticity_error: 7.535689	mean_abs_divergence: 0.031208
Forward: 18.19s

Saving...
Total: 19.36s

[Epoch 8]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0079][DIV: 0.0492][GRAD: 12.6084][Total: 12.6656]	120.0+14.7s
[1600/8000]	[L1: 0.0077][DIV: 0.0483][GRAD: 12.4396][Total: 12.4957]	120.0+3.7s
[2400/8000]	[L1: 0.0080][DIV: 0.0492][GRAD: 12.8372][Total: 12.8944]	120.0+3.6s
[3200/8000]	[L1: 0.0080][DIV: 0.0500][GRAD: 12.8565][Total: 12.9144]	120.1+3.6s
[4000/8000]	[L1: 0.0078][DIV: 0.0491][GRAD: 12.5902][Total: 12.6471]	119.9+3.6s
[4800/8000]	[L1: 0.0078][DIV: 0.0497][GRAD: 12.6487][Total: 12.7062]	120.0+3.6s
[5600/8000]	[L1: 0.0077][DIV: 0.0495][GRAD: 12.5060][Total: 12.5632]	120.0+3.5s
[6400/8000]	[L1: 0.0077][DIV: 0.0492][GRAD: 12.3318][Total: 12.3886]	119.9+3.6s
[7200/8000]	[L1: 0.0076][DIV: 0.0488][GRAD: 12.2240][Total: 12.2803]	120.0+3.6s
[8000/8000]	[L1: 0.0077][DIV: 0.0491][GRAD: 12.2598][Total: 12.3166]	119.9+3.7s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.040875	vorticity_error: 4.822170	mean_abs_divergence: 0.042836
Forward: 18.84s

Saving...
Total: 20.15s

[Epoch 9]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0068][DIV: 0.0456][GRAD: 11.1522][Total: 11.2046]	119.8+15.0s
[1600/8000]	[L1: 0.0073][DIV: 0.0498][GRAD: 12.0685][Total: 12.1257]	120.1+3.6s
[2400/8000]	[L1: 0.0074][DIV: 0.0500][GRAD: 12.3415][Total: 12.3990]	120.0+3.6s
[3200/8000]	[L1: 0.0074][DIV: 0.0506][GRAD: 12.4014][Total: 12.4595]	120.0+3.6s
[4000/8000]	[L1: 0.0075][DIV: 0.0512][GRAD: 12.5497][Total: 12.6084]	119.9+3.5s
[4800/8000]	[L1: 0.0075][DIV: 0.0505][GRAD: 12.4082][Total: 12.4662]	120.0+3.6s
[5600/8000]	[L1: 0.0074][DIV: 0.0503][GRAD: 12.3329][Total: 12.3906]	120.0+3.6s
[6400/8000]	[L1: 0.0074][DIV: 0.0498][GRAD: 12.2452][Total: 12.3024]	120.0+3.7s
[7200/8000]	[L1: 0.0075][DIV: 0.0497][GRAD: 12.2730][Total: 12.3301]	120.3+3.5s
[8000/8000]	[L1: 0.0075][DIV: 0.0497][GRAD: 12.3285][Total: 12.3857]	120.0+3.6s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.032739	vorticity_error: 1.898594	mean_abs_divergence: 0.038294
[INFO] New best model found with rel_l2_error: 0.032739
Forward: 18.72s

Saving...
Total: 20.41s

[Epoch 10]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0070][DIV: 0.0471][GRAD: 11.5841][Total: 11.6382]	120.0+14.5s
[1600/8000]	[L1: 0.0071][DIV: 0.0482][GRAD: 11.7357][Total: 11.7910]	120.0+3.7s
[2400/8000]	[L1: 0.0072][DIV: 0.0477][GRAD: 11.7856][Total: 11.8405]	120.0+3.6s
[3200/8000]	[L1: 0.0071][DIV: 0.0474][GRAD: 11.8447][Total: 11.8992]	120.0+3.6s
[4000/8000]	[L1: 0.0070][DIV: 0.0463][GRAD: 11.6020][Total: 11.6553]	120.1+3.5s
[4800/8000]	[L1: 0.0069][DIV: 0.0463][GRAD: 11.5464][Total: 11.5996]	119.8+3.7s
[5600/8000]	[L1: 0.0069][DIV: 0.0461][GRAD: 11.4907][Total: 11.5437]	120.1+3.6s
[6400/8000]	[L1: 0.0069][DIV: 0.0457][GRAD: 11.4297][Total: 11.4823]	120.0+3.5s
[7200/8000]	[L1: 0.0069][DIV: 0.0460][GRAD: 11.4614][Total: 11.5143]	120.0+3.6s
[8000/8000]	[L1: 0.0070][DIV: 0.0461][GRAD: 11.5019][Total: 11.5550]	120.1+3.6s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.029633	vorticity_error: 3.019866	mean_abs_divergence: 0.034235
[INFO] New best model found with rel_l2_error: 0.029633
Forward: 18.62s

Saving...
Total: 20.14s

[Epoch 11]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0073][DIV: 0.0474][GRAD: 11.8030][Total: 11.8576]	119.9+15.0s
[1600/8000]	[L1: 0.0070][DIV: 0.0471][GRAD: 11.3743][Total: 11.4284]	119.9+3.6s
[2400/8000]	[L1: 0.0072][DIV: 0.0495][GRAD: 11.8801][Total: 11.9368]	120.0+3.6s
[3200/8000]	[L1: 0.0070][DIV: 0.0492][GRAD: 11.7765][Total: 11.8328]	120.1+3.6s
[4000/8000]	[L1: 0.0071][DIV: 0.0493][GRAD: 11.8705][Total: 11.9269]	120.1+3.5s
[4800/8000]	[L1: 0.0072][DIV: 0.0500][GRAD: 11.9760][Total: 12.0332]	120.0+3.5s
[5600/8000]	[L1: 0.0072][DIV: 0.0501][GRAD: 12.0013][Total: 12.0586]	120.0+3.6s
[6400/8000]	[L1: 0.0072][DIV: 0.0494][GRAD: 11.9250][Total: 11.9815]	120.2+3.5s
[7200/8000]	[L1: 0.0072][DIV: 0.0491][GRAD: 11.9300][Total: 11.9862]	120.0+3.6s
[8000/8000]	[L1: 0.0071][DIV: 0.0488][GRAD: 11.8570][Total: 11.9129]	120.1+3.5s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.028065	vorticity_error: 3.644510	mean_abs_divergence: 0.023103
[INFO] New best model found with rel_l2_error: 0.028065
Forward: 18.91s

Saving...
Total: 20.34s

[Epoch 12]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0065][DIV: 0.0474][GRAD: 10.8850][Total: 10.9389]	119.8+15.0s
[1600/8000]	[L1: 0.0071][DIV: 0.0505][GRAD: 11.9983][Total: 12.0559]	120.1+3.6s
[2400/8000]	[L1: 0.0071][DIV: 0.0496][GRAD: 12.0119][Total: 12.0686]	120.0+3.6s
[3200/8000]	[L1: 0.0070][DIV: 0.0487][GRAD: 11.8472][Total: 11.9029]	120.1+3.6s
[4000/8000]	[L1: 0.0072][DIV: 0.0500][GRAD: 12.1698][Total: 12.2270]	120.0+3.6s
[4800/8000]	[L1: 0.0072][DIV: 0.0504][GRAD: 12.2127][Total: 12.2703]	119.9+3.6s
[5600/8000]	[L1: 0.0071][DIV: 0.0495][GRAD: 12.0199][Total: 12.0766]	119.9+3.6s
[6400/8000]	[L1: 0.0071][DIV: 0.0495][GRAD: 11.9827][Total: 12.0393]	120.0+3.6s
[7200/8000]	[L1: 0.0071][DIV: 0.0502][GRAD: 12.0676][Total: 12.1249]	120.0+3.7s
[8000/8000]	[L1: 0.0071][DIV: 0.0497][GRAD: 12.0187][Total: 12.0755]	120.0+3.6s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.040520	vorticity_error: 6.695284	mean_abs_divergence: 0.033580
Forward: 18.71s

Saving...
Total: 19.87s

[Epoch 13]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0071][DIV: 0.0494][GRAD: 12.4946][Total: 12.5512]	119.8+15.1s
[1600/8000]	[L1: 0.0069][DIV: 0.0473][GRAD: 11.9688][Total: 12.0230]	120.1+3.6s
[2400/8000]	[L1: 0.0069][DIV: 0.0474][GRAD: 11.9187][Total: 11.9730]	120.1+3.6s
[3200/8000]	[L1: 0.0069][DIV: 0.0472][GRAD: 11.8555][Total: 11.9096]	120.0+3.6s
[4000/8000]	[L1: 0.0070][DIV: 0.0475][GRAD: 11.9126][Total: 11.9671]	120.0+3.6s
[4800/8000]	[L1: 0.0070][DIV: 0.0474][GRAD: 11.8618][Total: 11.9161]	119.9+3.6s
[5600/8000]	[L1: 0.0070][DIV: 0.0475][GRAD: 11.8164][Total: 11.8709]	119.9+3.6s
[6400/8000]	[L1: 0.0070][DIV: 0.0478][GRAD: 11.8495][Total: 11.9043]	120.1+3.5s
[7200/8000]	[L1: 0.0070][DIV: 0.0476][GRAD: 11.8153][Total: 11.8700]	119.9+3.6s
[8000/8000]	[L1: 0.0070][DIV: 0.0474][GRAD: 11.7675][Total: 11.8219]	120.0+3.5s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.032786	vorticity_error: 1.084974	mean_abs_divergence: 0.030860
Forward: 18.63s

Saving...
Total: 19.80s

[Epoch 14]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0073][DIV: 0.0508][GRAD: 12.6069][Total: 12.6650]	120.1+14.7s
[1600/8000]	[L1: 0.0075][DIV: 0.0502][GRAD: 12.5057][Total: 12.5634]	120.0+3.6s
[2400/8000]	[L1: 0.0074][DIV: 0.0513][GRAD: 12.5594][Total: 12.6182]	119.9+3.6s
[3200/8000]	[L1: 0.0072][DIV: 0.0511][GRAD: 12.3170][Total: 12.3754]	120.0+3.6s
[4000/8000]	[L1: 0.0072][DIV: 0.0505][GRAD: 12.1647][Total: 12.2223]	119.9+3.6s
[4800/8000]	[L1: 0.0071][DIV: 0.0505][GRAD: 12.1527][Total: 12.2103]	120.0+3.7s
[5600/8000]	[L1: 0.0071][DIV: 0.0502][GRAD: 12.1242][Total: 12.1814]	119.9+3.6s
[6400/8000]	[L1: 0.0070][DIV: 0.0501][GRAD: 12.0672][Total: 12.1243]	119.9+3.5s
[7200/8000]	[L1: 0.0069][DIV: 0.0495][GRAD: 11.9176][Total: 11.9740]	119.8+3.7s
[8000/8000]	[L1: 0.0068][DIV: 0.0487][GRAD: 11.6923][Total: 11.7477]	119.9+3.6s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.037225	vorticity_error: 2.212904	mean_abs_divergence: 0.033932
Forward: 18.47s

Saving...
Total: 19.79s

[Epoch 15]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0067][DIV: 0.0477][GRAD: 11.6636][Total: 11.7181]	119.8+15.1s
[1600/8000]	[L1: 0.0064][DIV: 0.0454][GRAD: 11.0199][Total: 11.0717]	119.9+3.7s
[2400/8000]	[L1: 0.0064][DIV: 0.0451][GRAD: 10.8778][Total: 10.9292]	120.1+3.5s
[3200/8000]	[L1: 0.0063][DIV: 0.0455][GRAD: 10.9584][Total: 11.0102]	120.1+3.6s
[4000/8000]	[L1: 0.0064][DIV: 0.0459][GRAD: 11.0769][Total: 11.1292]	119.9+3.6s
[4800/8000]	[L1: 0.0065][DIV: 0.0464][GRAD: 11.1352][Total: 11.1880]	119.9+3.6s
[5600/8000]	[L1: 0.0065][DIV: 0.0462][GRAD: 11.1237][Total: 11.1764]	120.1+3.6s
[6400/8000]	[L1: 0.0065][DIV: 0.0466][GRAD: 11.1955][Total: 11.2486]	120.0+3.6s
[7200/8000]	[L1: 0.0065][DIV: 0.0466][GRAD: 11.1672][Total: 11.2203]	120.2+3.6s
[8000/8000]	[L1: 0.0066][DIV: 0.0473][GRAD: 11.2842][Total: 11.3381]	120.0+3.6s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.043603	vorticity_error: 2.684078	mean_abs_divergence: 0.035652
Forward: 18.30s

Saving...
Total: 19.52s

[Epoch 16]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0067][DIV: 0.0492][GRAD: 11.5593][Total: 11.6152]	119.9+15.5s
[1600/8000]	[L1: 0.0066][DIV: 0.0498][GRAD: 11.3772][Total: 11.4335]	120.1+3.6s
[2400/8000]	[L1: 0.0066][DIV: 0.0487][GRAD: 11.3148][Total: 11.3701]	120.1+3.6s
[3200/8000]	[L1: 0.0067][DIV: 0.0499][GRAD: 11.5664][Total: 11.6230]	120.0+3.6s
[4000/8000]	[L1: 0.0066][DIV: 0.0490][GRAD: 11.4974][Total: 11.5530]	119.9+3.6s
[4800/8000]	[L1: 0.0067][DIV: 0.0493][GRAD: 11.5896][Total: 11.6456]	120.0+3.6s
[5600/8000]	[L1: 0.0067][DIV: 0.0498][GRAD: 11.6505][Total: 11.7070]	120.1+3.6s
[6400/8000]	[L1: 0.0068][DIV: 0.0499][GRAD: 11.7785][Total: 11.8351]	120.0+3.5s
[7200/8000]	[L1: 0.0068][DIV: 0.0495][GRAD: 11.7140][Total: 11.7703]	120.0+3.5s
[8000/8000]	[L1: 0.0068][DIV: 0.0495][GRAD: 11.7024][Total: 11.7587]	119.8+3.6s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.034620	vorticity_error: 1.836786	mean_abs_divergence: 0.026105
Forward: 19.06s

Saving...
Total: 20.11s

[Epoch 17]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0066][DIV: 0.0515][GRAD: 11.6827][Total: 11.7408]	119.8+15.0s
[1600/8000]	[L1: 0.0068][DIV: 0.0519][GRAD: 11.9091][Total: 11.9678]	120.0+3.6s
[2400/8000]	[L1: 0.0068][DIV: 0.0518][GRAD: 11.9259][Total: 11.9845]	120.1+3.6s
[3200/8000]	[L1: 0.0068][DIV: 0.0521][GRAD: 11.9389][Total: 11.9977]	120.0+3.6s
[4000/8000]	[L1: 0.0068][DIV: 0.0519][GRAD: 11.9706][Total: 12.0292]	120.2+3.6s
[4800/8000]	[L1: 0.0066][DIV: 0.0510][GRAD: 11.7391][Total: 11.7968]	119.9+3.7s
[5600/8000]	[L1: 0.0066][DIV: 0.0503][GRAD: 11.6010][Total: 11.6579]	120.1+3.6s
[6400/8000]	[L1: 0.0065][DIV: 0.0498][GRAD: 11.5052][Total: 11.5615]	120.0+3.6s
[7200/8000]	[L1: 0.0066][DIV: 0.0502][GRAD: 11.5892][Total: 11.6460]	120.2+3.5s
[8000/8000]	[L1: 0.0066][DIV: 0.0503][GRAD: 11.5912][Total: 11.6481]	120.0+3.5s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.045848	vorticity_error: 3.848986	mean_abs_divergence: 0.033439
Forward: 19.52s

Saving...
Total: 20.88s

[Epoch 18]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0069][DIV: 0.0523][GRAD: 12.2893][Total: 12.3485]	119.8+14.7s
[1600/8000]	[L1: 0.0069][DIV: 0.0530][GRAD: 12.1683][Total: 12.2281]	119.9+3.7s
[2400/8000]	[L1: 0.0070][DIV: 0.0539][GRAD: 12.4800][Total: 12.5408]	120.1+3.5s
[3200/8000]	[L1: 0.0069][DIV: 0.0527][GRAD: 12.2224][Total: 12.2820]	120.2+3.6s
[4000/8000]	[L1: 0.0068][DIV: 0.0529][GRAD: 12.1411][Total: 12.2008]	119.9+3.7s
[4800/8000]	[L1: 0.0069][DIV: 0.0523][GRAD: 12.0815][Total: 12.1407]	120.1+3.5s
[5600/8000]	[L1: 0.0069][DIV: 0.0519][GRAD: 12.0009][Total: 12.0596]	119.9+3.7s
[6400/8000]	[L1: 0.0069][DIV: 0.0517][GRAD: 11.9972][Total: 12.0557]	120.1+3.6s
[7200/8000]	[L1: 0.0068][DIV: 0.0510][GRAD: 11.8607][Total: 11.9185]	120.1+3.6s
[8000/8000]	[L1: 0.0068][DIV: 0.0507][GRAD: 11.8677][Total: 11.9253]	120.1+3.5s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.039355	vorticity_error: 1.320295	mean_abs_divergence: 0.033652
Forward: 18.77s

Saving...
Total: 20.03s

[Epoch 19]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0069][DIV: 0.0515][GRAD: 12.0550][Total: 12.1135]	119.9+14.8s
[1600/8000]	[L1: 0.0066][DIV: 0.0490][GRAD: 11.5694][Total: 11.6250]	120.1+3.6s
[2400/8000]	[L1: 0.0064][DIV: 0.0480][GRAD: 11.3755][Total: 11.4299]	119.9+3.7s
[3200/8000]	[L1: 0.0064][DIV: 0.0487][GRAD: 11.4801][Total: 11.5352]	120.0+3.5s
[4000/8000]	[L1: 0.0063][DIV: 0.0480][GRAD: 11.2752][Total: 11.3295]	120.1+3.6s
[4800/8000]	[L1: 0.0063][DIV: 0.0475][GRAD: 11.2100][Total: 11.2638]	119.9+3.6s
[5600/8000]	[L1: 0.0064][DIV: 0.0488][GRAD: 11.4328][Total: 11.4880]	119.9+3.7s
[6400/8000]	[L1: 0.0064][DIV: 0.0489][GRAD: 11.4369][Total: 11.4921]	119.9+3.6s
[7200/8000]	[L1: 0.0064][DIV: 0.0489][GRAD: 11.4394][Total: 11.4947]	120.0+3.6s
[8000/8000]	[L1: 0.0064][DIV: 0.0487][GRAD: 11.3815][Total: 11.4366]	120.0+3.6s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.039126	vorticity_error: 1.871088	mean_abs_divergence: 0.034612
Forward: 18.75s

Saving...
Total: 19.96s

[Epoch 20]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0059][DIV: 0.0486][GRAD: 10.5452][Total: 10.5997]	119.8+15.2s
[1600/8000]	[L1: 0.0061][DIV: 0.0479][GRAD: 10.9158][Total: 10.9699]	120.0+3.6s
[2400/8000]	[L1: 0.0062][DIV: 0.0478][GRAD: 11.0449][Total: 11.0988]	120.2+3.6s
[3200/8000]	[L1: 0.0066][DIV: 0.0481][GRAD: 11.6235][Total: 11.6782]	120.0+3.5s
[4000/8000]	[L1: 0.0066][DIV: 0.0483][GRAD: 11.6631][Total: 11.7181]	120.0+3.6s
[4800/8000]	[L1: 0.0066][DIV: 0.0485][GRAD: 11.6327][Total: 11.6878]	120.0+3.6s
[5600/8000]	[L1: 0.0066][DIV: 0.0485][GRAD: 11.6163][Total: 11.6713]	120.1+3.5s
[6400/8000]	[L1: 0.0066][DIV: 0.0487][GRAD: 11.6020][Total: 11.6573]	120.0+3.5s
[7200/8000]	[L1: 0.0065][DIV: 0.0485][GRAD: 11.5075][Total: 11.5625]	120.0+3.6s
[8000/8000]	[L1: 0.0065][DIV: 0.0488][GRAD: 11.5005][Total: 11.5558]	120.1+3.6s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.035740	vorticity_error: 1.531226	mean_abs_divergence: 0.034322
Forward: 19.19s

Saving...
Total: 20.55s

[Epoch 21]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0062][DIV: 0.0500][GRAD: 11.3546][Total: 11.4108]	119.9+15.4s
[1600/8000]	[L1: 0.0065][DIV: 0.0511][GRAD: 11.7484][Total: 11.8060]	120.0+3.7s
[2400/8000]	[L1: 0.0066][DIV: 0.0516][GRAD: 11.9348][Total: 11.9930]	119.9+3.7s
[3200/8000]	[L1: 0.0066][DIV: 0.0517][GRAD: 11.8295][Total: 11.8878]	120.1+3.6s
[4000/8000]	[L1: 0.0066][DIV: 0.0517][GRAD: 11.8273][Total: 11.8855]	120.0+3.6s
[4800/8000]	[L1: 0.0066][DIV: 0.0511][GRAD: 11.7548][Total: 11.8124]	119.9+3.6s
[5600/8000]	[L1: 0.0065][DIV: 0.0505][GRAD: 11.7480][Total: 11.8051]	119.9+3.6s
[6400/8000]	[L1: 0.0065][DIV: 0.0502][GRAD: 11.6301][Total: 11.6868]	120.3+3.5s
[7200/8000]	[L1: 0.0065][DIV: 0.0501][GRAD: 11.6089][Total: 11.6655]	120.0+3.7s
[8000/8000]	[L1: 0.0064][DIV: 0.0497][GRAD: 11.5106][Total: 11.5667]	120.1+3.5s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.040865	vorticity_error: 2.460884	mean_abs_divergence: 0.030163
Forward: 18.82s

Saving...
Total: 20.22s

[Epoch 22]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0069][DIV: 0.0545][GRAD: 12.3023][Total: 12.3637]	119.8+15.0s
[1600/8000]	[L1: 0.0061][DIV: 0.0476][GRAD: 10.7866][Total: 10.8403]	120.2+3.6s
[2400/8000]	[L1: 0.0063][DIV: 0.0481][GRAD: 11.0803][Total: 11.1347]	120.0+3.6s
[3200/8000]	[L1: 0.0063][DIV: 0.0478][GRAD: 11.0681][Total: 11.1223]	120.1+3.6s
[4000/8000]	[L1: 0.0062][DIV: 0.0467][GRAD: 10.9024][Total: 10.9553]	119.9+3.6s
[4800/8000]	[L1: 0.0062][DIV: 0.0470][GRAD: 10.8952][Total: 10.9484]	120.0+3.5s
[5600/8000]	[L1: 0.0062][DIV: 0.0479][GRAD: 11.0213][Total: 11.0754]	120.1+3.5s
[6400/8000]	[L1: 0.0062][DIV: 0.0480][GRAD: 11.0483][Total: 11.1026]	120.0+3.6s
[7200/8000]	[L1: 0.0063][DIV: 0.0483][GRAD: 11.1640][Total: 11.2185]	120.1+3.5s
[8000/8000]	[L1: 0.0063][DIV: 0.0486][GRAD: 11.2259][Total: 11.2808]	120.1+3.6s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.044632	vorticity_error: 2.392349	mean_abs_divergence: 0.043118
Forward: 18.33s

Saving...
Total: 19.55s

[Epoch 23]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0062][DIV: 0.0455][GRAD: 10.9425][Total: 10.9942]	119.8+15.3s
[1600/8000]	[L1: 0.0061][DIV: 0.0461][GRAD: 10.8085][Total: 10.8606]	120.0+3.6s
[2400/8000]	[L1: 0.0064][DIV: 0.0489][GRAD: 11.3897][Total: 11.4450]	119.9+3.7s
[3200/8000]	[L1: 0.0062][DIV: 0.0485][GRAD: 11.1660][Total: 11.2208]	120.0+3.6s
[4000/8000]	[L1: 0.0064][DIV: 0.0492][GRAD: 11.4182][Total: 11.4739]	120.3+3.5s
[4800/8000]	[L1: 0.0065][DIV: 0.0494][GRAD: 11.6022][Total: 11.6581]	120.0+3.6s
[5600/8000]	[L1: 0.0066][DIV: 0.0500][GRAD: 11.8263][Total: 11.8829]	120.2+3.5s
[6400/8000]	[L1: 0.0066][DIV: 0.0499][GRAD: 11.8288][Total: 11.8854]	120.0+3.6s
[7200/8000]	[L1: 0.0066][DIV: 0.0498][GRAD: 11.7904][Total: 11.8468]	119.9+3.6s
[8000/8000]	[L1: 0.0066][DIV: 0.0494][GRAD: 11.6810][Total: 11.7370]	120.0+3.7s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.044540	vorticity_error: 2.931256	mean_abs_divergence: 0.035715
Forward: 18.94s

Saving...
Total: 20.19s

[Epoch 24]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0059][DIV: 0.0481][GRAD: 10.7235][Total: 10.7775]	120.0+15.6s
[1600/8000]	[L1: 0.0063][DIV: 0.0505][GRAD: 11.4166][Total: 11.4734]	120.1+3.6s
[2400/8000]	[L1: 0.0063][DIV: 0.0501][GRAD: 11.4952][Total: 11.5516]	120.0+3.6s
[3200/8000]	[L1: 0.0062][DIV: 0.0489][GRAD: 11.2082][Total: 11.2634]	120.0+3.6s
[4000/8000]	[L1: 0.0063][DIV: 0.0495][GRAD: 11.3115][Total: 11.3673]	120.0+3.6s
[4800/8000]	[L1: 0.0062][DIV: 0.0489][GRAD: 11.2559][Total: 11.3111]	120.0+3.5s
[5600/8000]	[L1: 0.0062][DIV: 0.0486][GRAD: 11.1893][Total: 11.2441]	119.9+3.6s
[6400/8000]	[L1: 0.0062][DIV: 0.0487][GRAD: 11.2482][Total: 11.3031]	120.1+3.5s
[7200/8000]	[L1: 0.0063][DIV: 0.0492][GRAD: 11.3748][Total: 11.4303]	120.1+3.5s
[8000/8000]	[L1: 0.0063][DIV: 0.0489][GRAD: 11.3334][Total: 11.3886]	120.0+3.6s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.032800	vorticity_error: 1.007854	mean_abs_divergence: 0.023890
Forward: 18.50s

Saving...
Total: 19.64s

[Epoch 25]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0059][DIV: 0.0477][GRAD: 10.7582][Total: 10.8119]	119.8+15.1s
[1600/8000]	[L1: 0.0063][DIV: 0.0518][GRAD: 11.6148][Total: 11.6729]	120.1+3.6s
[2400/8000]	[L1: 0.0063][DIV: 0.0513][GRAD: 11.5909][Total: 11.6485]	120.3+3.5s
[3200/8000]	[L1: 0.0062][DIV: 0.0502][GRAD: 11.4082][Total: 11.4646]	120.1+3.5s
[4000/8000]	[L1: 0.0061][DIV: 0.0492][GRAD: 11.2660][Total: 11.3214]	120.1+3.5s
[4800/8000]	[L1: 0.0062][DIV: 0.0499][GRAD: 11.4089][Total: 11.4650]	120.1+3.5s
[5600/8000]	[L1: 0.0062][DIV: 0.0500][GRAD: 11.4388][Total: 11.4950]	119.9+3.7s
[6400/8000]	[L1: 0.0063][DIV: 0.0504][GRAD: 11.5114][Total: 11.5680]	120.0+3.7s
[7200/8000]	[L1: 0.0063][DIV: 0.0501][GRAD: 11.5092][Total: 11.5655]	120.2+3.5s
[8000/8000]	[L1: 0.0063][DIV: 0.0502][GRAD: 11.5539][Total: 11.6103]	120.0+3.6s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.036301	vorticity_error: 1.989274	mean_abs_divergence: 0.033859
Forward: 18.53s

Saving...
Total: 19.93s

[Epoch 26]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0060][DIV: 0.0484][GRAD: 10.9655][Total: 11.0198]	120.0+15.0s
[1600/8000]	[L1: 0.0063][DIV: 0.0502][GRAD: 11.4451][Total: 11.5016]	120.1+3.5s
[2400/8000]	[L1: 0.0063][DIV: 0.0500][GRAD: 11.2617][Total: 11.3180]	119.9+3.6s
[3200/8000]	[L1: 0.0063][DIV: 0.0501][GRAD: 11.3544][Total: 11.4108]	120.0+3.6s
[4000/8000]	[L1: 0.0063][DIV: 0.0496][GRAD: 11.3405][Total: 11.3964]	120.2+3.5s
[4800/8000]	[L1: 0.0064][DIV: 0.0502][GRAD: 11.5128][Total: 11.5694]	119.9+3.6s
[5600/8000]	[L1: 0.0064][DIV: 0.0500][GRAD: 11.4653][Total: 11.5217]	120.1+3.5s
[6400/8000]	[L1: 0.0065][DIV: 0.0503][GRAD: 11.5726][Total: 11.6294]	120.1+3.5s
[7200/8000]	[L1: 0.0065][DIV: 0.0510][GRAD: 11.6432][Total: 11.7007]	120.0+3.6s
[8000/8000]	[L1: 0.0065][DIV: 0.0513][GRAD: 11.6890][Total: 11.7468]	120.1+3.6s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.035840	vorticity_error: 2.573062	mean_abs_divergence: 0.033854
Forward: 18.53s

Saving...
Total: 19.86s

[Epoch 27]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0064][DIV: 0.0528][GRAD: 12.1368][Total: 12.1960]	120.1+15.3s
[1600/8000]	[L1: 0.0065][DIV: 0.0514][GRAD: 11.8116][Total: 11.8695]	120.0+3.6s
[2400/8000]	[L1: 0.0063][DIV: 0.0500][GRAD: 11.3662][Total: 11.4225]	120.0+3.6s
[3200/8000]	[L1: 0.0064][DIV: 0.0519][GRAD: 11.7359][Total: 11.7942]	120.0+3.6s
[4000/8000]	[L1: 0.0064][DIV: 0.0516][GRAD: 11.7045][Total: 11.7626]	120.0+3.6s
[4800/8000]	[L1: 0.0063][DIV: 0.0508][GRAD: 11.5238][Total: 11.5809]	120.0+3.6s
[5600/8000]	[L1: 0.0063][DIV: 0.0506][GRAD: 11.4557][Total: 11.5125]	120.0+3.6s
[6400/8000]	[L1: 0.0063][DIV: 0.0511][GRAD: 11.5026][Total: 11.5600]	120.0+3.5s
[7200/8000]	[L1: 0.0063][DIV: 0.0514][GRAD: 11.5974][Total: 11.6551]	120.0+3.6s
[8000/8000]	[L1: 0.0063][DIV: 0.0512][GRAD: 11.5558][Total: 11.6133]	120.1+3.6s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.034645	vorticity_error: 1.743797	mean_abs_divergence: 0.028383
Forward: 18.58s

Saving...
Total: 19.75s

[Epoch 28]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0059][DIV: 0.0499][GRAD: 10.8088][Total: 10.8646]	119.8+15.2s
[1600/8000]	[L1: 0.0061][DIV: 0.0505][GRAD: 11.2986][Total: 11.3552]	120.0+3.6s
[2400/8000]	[L1: 0.0062][DIV: 0.0499][GRAD: 11.3771][Total: 11.4332]	119.9+3.7s
[3200/8000]	[L1: 0.0062][DIV: 0.0495][GRAD: 11.3644][Total: 11.4201]	120.0+3.6s
[4000/8000]	[L1: 0.0060][DIV: 0.0481][GRAD: 11.0287][Total: 11.0829]	119.9+3.7s
[4800/8000]	[L1: 0.0060][DIV: 0.0478][GRAD: 11.0088][Total: 11.0626]	119.9+3.6s
[5600/8000]	[L1: 0.0060][DIV: 0.0476][GRAD: 10.9358][Total: 10.9894]	120.0+3.5s
[6400/8000]	[L1: 0.0060][DIV: 0.0474][GRAD: 10.9377][Total: 10.9911]	120.1+3.6s
[7200/8000]	[L1: 0.0061][DIV: 0.0470][GRAD: 10.9246][Total: 10.9777]	120.2+3.4s
[8000/8000]	[L1: 0.0061][DIV: 0.0474][GRAD: 10.9968][Total: 11.0503]	119.8+3.7s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.046837	vorticity_error: 1.077368	mean_abs_divergence: 0.036841
Forward: 18.52s

Saving...
Total: 19.80s

[Epoch 29]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0063][DIV: 0.0528][GRAD: 11.4500][Total: 11.5091]	119.9+15.2s
[1600/8000]	[L1: 0.0064][DIV: 0.0527][GRAD: 11.8046][Total: 11.8637]	119.9+3.7s
[2400/8000]	[L1: 0.0063][DIV: 0.0523][GRAD: 11.6597][Total: 11.7183]	119.8+3.7s
[3200/8000]	[L1: 0.0062][DIV: 0.0502][GRAD: 11.3328][Total: 11.3892]	120.0+3.6s
[4000/8000]	[L1: 0.0062][DIV: 0.0507][GRAD: 11.3560][Total: 11.4128]	119.9+3.6s
[4800/8000]	[L1: 0.0062][DIV: 0.0510][GRAD: 11.3888][Total: 11.4460]	120.0+3.6s
[5600/8000]	[L1: 0.0061][DIV: 0.0498][GRAD: 11.1882][Total: 11.2441]	120.0+3.6s
[6400/8000]	[L1: 0.0061][DIV: 0.0501][GRAD: 11.2190][Total: 11.2752]	119.9+3.6s
[7200/8000]	[L1: 0.0062][DIV: 0.0506][GRAD: 11.3163][Total: 11.3731]	120.0+3.6s
[8000/8000]	[L1: 0.0061][DIV: 0.0502][GRAD: 11.2291][Total: 11.2853]	120.1+3.4s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.034546	vorticity_error: 2.222647	mean_abs_divergence: 0.030997
Forward: 19.34s

Saving...
Total: 20.77s

[Epoch 30]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0063][DIV: 0.0515][GRAD: 11.9036][Total: 11.9614]	120.0+14.5s
[1600/8000]	[L1: 0.0063][DIV: 0.0515][GRAD: 11.8439][Total: 11.9017]	120.1+3.6s
[2400/8000]	[L1: 0.0063][DIV: 0.0517][GRAD: 11.6983][Total: 11.7563]	120.2+3.5s
[3200/8000]	[L1: 0.0062][DIV: 0.0507][GRAD: 11.5387][Total: 11.5957]	120.1+3.5s
[4000/8000]	[L1: 0.0063][DIV: 0.0512][GRAD: 11.5737][Total: 11.6312]	120.1+3.6s
[4800/8000]	[L1: 0.0062][DIV: 0.0507][GRAD: 11.3924][Total: 11.4493]	120.0+3.6s
[5600/8000]	[L1: 0.0062][DIV: 0.0504][GRAD: 11.4006][Total: 11.4572]	120.0+3.6s
[6400/8000]	[L1: 0.0062][DIV: 0.0496][GRAD: 11.3256][Total: 11.3814]	120.1+3.5s
[7200/8000]	[L1: 0.0062][DIV: 0.0502][GRAD: 11.4739][Total: 11.5304]	120.0+3.6s
[8000/8000]	[L1: 0.0063][DIV: 0.0506][GRAD: 11.5658][Total: 11.6226]	119.9+3.6s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.032933	vorticity_error: 0.815804	mean_abs_divergence: 0.028346
Forward: 19.16s

Saving...
Total: 20.42s

[Epoch 31]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0059][DIV: 0.0470][GRAD: 10.6144][Total: 10.6673]	119.9+15.2s
[1600/8000]	[L1: 0.0060][DIV: 0.0490][GRAD: 10.9850][Total: 11.0400]	120.1+3.6s
[2400/8000]	[L1: 0.0060][DIV: 0.0491][GRAD: 10.9825][Total: 11.0375]	120.0+3.7s
[3200/8000]	[L1: 0.0060][DIV: 0.0486][GRAD: 11.0460][Total: 11.1006]	120.0+3.5s
[4000/8000]	[L1: 0.0061][DIV: 0.0498][GRAD: 11.2304][Total: 11.2863]	119.8+3.7s
[4800/8000]	[L1: 0.0062][DIV: 0.0506][GRAD: 11.4030][Total: 11.4598]	120.1+3.6s
[5600/8000]	[L1: 0.0061][DIV: 0.0500][GRAD: 11.3248][Total: 11.3810]	119.9+3.6s
[6400/8000]	[L1: 0.0062][DIV: 0.0498][GRAD: 11.3732][Total: 11.4292]	120.0+3.6s
[7200/8000]	[L1: 0.0062][DIV: 0.0495][GRAD: 11.3336][Total: 11.3893]	120.1+3.6s
[8000/8000]	[L1: 0.0062][DIV: 0.0500][GRAD: 11.4067][Total: 11.4628]	120.0+3.6s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.044644	vorticity_error: 1.105536	mean_abs_divergence: 0.027818
Forward: 18.73s

Saving...
Total: 20.05s

[Epoch 32]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0059][DIV: 0.0501][GRAD: 11.0115][Total: 11.0675]	120.0+15.0s
[1600/8000]	[L1: 0.0060][DIV: 0.0497][GRAD: 11.2749][Total: 11.3306]	120.2+3.5s
[2400/8000]	[L1: 0.0061][DIV: 0.0489][GRAD: 11.2624][Total: 11.3174]	120.0+3.6s
[3200/8000]	[L1: 0.0060][DIV: 0.0480][GRAD: 11.0291][Total: 11.0831]	119.8+3.7s
[4000/8000]	[L1: 0.0061][DIV: 0.0493][GRAD: 11.2306][Total: 11.2859]	120.1+3.6s
[4800/8000]	[L1: 0.0061][DIV: 0.0498][GRAD: 11.3064][Total: 11.3624]	120.0+3.5s
[5600/8000]	[L1: 0.0061][DIV: 0.0497][GRAD: 11.2695][Total: 11.3253]	120.0+3.6s
[6400/8000]	[L1: 0.0061][DIV: 0.0499][GRAD: 11.3178][Total: 11.3738]	120.1+3.5s
[7200/8000]	[L1: 0.0061][DIV: 0.0499][GRAD: 11.3382][Total: 11.3943]	120.1+3.6s
[8000/8000]	[L1: 0.0061][DIV: 0.0497][GRAD: 11.3150][Total: 11.3709]	119.9+3.6s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.029625	vorticity_error: 1.217901	mean_abs_divergence: 0.029860
Forward: 18.39s

Saving...
Total: 19.75s

[Epoch 33]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0061][DIV: 0.0484][GRAD: 11.3169][Total: 11.3713]	119.9+15.3s
[1600/8000]	[L1: 0.0060][DIV: 0.0481][GRAD: 11.1472][Total: 11.2013]	120.0+3.6s
[2400/8000]	[L1: 0.0062][DIV: 0.0485][GRAD: 11.3339][Total: 11.3886]	119.9+3.7s
[3200/8000]	[L1: 0.0061][DIV: 0.0483][GRAD: 11.1820][Total: 11.2363]	120.0+3.6s
[4000/8000]	[L1: 0.0062][DIV: 0.0488][GRAD: 11.3005][Total: 11.3554]	119.8+3.6s
[4800/8000]	[L1: 0.0061][DIV: 0.0487][GRAD: 11.1935][Total: 11.2483]	119.9+3.6s
[5600/8000]	[L1: 0.0060][DIV: 0.0480][GRAD: 11.0740][Total: 11.1281]	120.0+3.7s
[6400/8000]	[L1: 0.0061][DIV: 0.0479][GRAD: 11.0603][Total: 11.1143]	120.0+3.6s
[7200/8000]	[L1: 0.0061][DIV: 0.0482][GRAD: 11.0865][Total: 11.1408]	119.9+3.7s
[8000/8000]	[L1: 0.0061][DIV: 0.0484][GRAD: 11.1364][Total: 11.1909]	120.0+3.5s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.027458	vorticity_error: 0.656322	mean_abs_divergence: 0.024537
[INFO] New best model found with rel_l2_error: 0.027458
Forward: 19.14s

Saving...
Total: 20.77s

[Epoch 34]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0064][DIV: 0.0558][GRAD: 12.2913][Total: 12.3535]	119.9+15.6s
[1600/8000]	[L1: 0.0061][DIV: 0.0513][GRAD: 11.5245][Total: 11.5820]	120.1+3.6s
[2400/8000]	[L1: 0.0062][DIV: 0.0511][GRAD: 11.6967][Total: 11.7540]	120.0+3.6s
[3200/8000]	[L1: 0.0062][DIV: 0.0512][GRAD: 11.7117][Total: 11.7692]	119.9+3.7s
[4000/8000]	[L1: 0.0064][DIV: 0.0516][GRAD: 11.7932][Total: 11.8512]	119.9+3.7s
[4800/8000]	[L1: 0.0064][DIV: 0.0503][GRAD: 11.5898][Total: 11.6464]	120.0+3.6s
[5600/8000]	[L1: 0.0063][DIV: 0.0491][GRAD: 11.3891][Total: 11.4445]	120.0+3.6s
[6400/8000]	[L1: 0.0064][DIV: 0.0498][GRAD: 11.4860][Total: 11.5421]	120.1+3.5s
[7200/8000]	[L1: 0.0063][DIV: 0.0499][GRAD: 11.4734][Total: 11.5296]	120.2+3.6s
[8000/8000]	[L1: 0.0063][DIV: 0.0500][GRAD: 11.4333][Total: 11.4896]	120.0+3.6s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.037885	vorticity_error: 1.027275	mean_abs_divergence: 0.032907
Forward: 18.23s

Saving...
Total: 19.52s

[Epoch 35]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0058][DIV: 0.0487][GRAD: 10.9422][Total: 10.9967]	119.7+15.3s
[1600/8000]	[L1: 0.0062][DIV: 0.0524][GRAD: 11.6017][Total: 11.6603]	120.2+3.5s
[2400/8000]	[L1: 0.0061][DIV: 0.0512][GRAD: 11.3762][Total: 11.4334]	120.0+3.6s
[3200/8000]	[L1: 0.0061][DIV: 0.0511][GRAD: 11.4230][Total: 11.4802]	120.1+3.6s
[4000/8000]	[L1: 0.0061][DIV: 0.0505][GRAD: 11.3300][Total: 11.3866]	119.9+3.7s
[4800/8000]	[L1: 0.0061][DIV: 0.0505][GRAD: 11.3266][Total: 11.3832]	120.0+3.6s
[5600/8000]	[L1: 0.0061][DIV: 0.0505][GRAD: 11.4078][Total: 11.4643]	120.0+3.6s
[6400/8000]	[L1: 0.0061][DIV: 0.0503][GRAD: 11.3706][Total: 11.4270]	120.6+3.5s
[7200/8000]	[L1: 0.0061][DIV: 0.0504][GRAD: 11.3750][Total: 11.4315]	119.7+3.7s
[8000/8000]	[L1: 0.0061][DIV: 0.0499][GRAD: 11.2941][Total: 11.3501]	119.9+3.7s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.041353	vorticity_error: 1.005440	mean_abs_divergence: 0.031300
Forward: 17.65s

Saving...
Total: 18.62s

[Epoch 36]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0062][DIV: 0.0539][GRAD: 11.5673][Total: 11.6275]	119.7+14.6s
[1600/8000]	[L1: 0.0061][DIV: 0.0517][GRAD: 11.3730][Total: 11.4308]	119.8+3.6s
[2400/8000]	[L1: 0.0063][DIV: 0.0532][GRAD: 11.7760][Total: 11.8354]	119.9+3.6s
[3200/8000]	[L1: 0.0061][DIV: 0.0516][GRAD: 11.3738][Total: 11.4315]	119.8+3.6s
[4000/8000]	[L1: 0.0060][DIV: 0.0510][GRAD: 11.2191][Total: 11.2761]	119.7+3.7s
[4800/8000]	[L1: 0.0060][DIV: 0.0502][GRAD: 11.1316][Total: 11.1878]	120.1+3.5s
[5600/8000]	[L1: 0.0060][DIV: 0.0501][GRAD: 11.0719][Total: 11.1279]	119.9+3.7s
[6400/8000]	[L1: 0.0061][DIV: 0.0502][GRAD: 11.1252][Total: 11.1814]	120.1+3.6s
[7200/8000]	[L1: 0.0061][DIV: 0.0502][GRAD: 11.1524][Total: 11.2087]	123.5+3.7s
[8000/8000]	[L1: 0.0060][DIV: 0.0499][GRAD: 11.0856][Total: 11.1415]	122.4+3.7s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.028459	vorticity_error: 0.983654	mean_abs_divergence: 0.026384
Forward: 18.23s

Saving...
Total: 19.33s

[Epoch 37]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0059][DIV: 0.0474][GRAD: 10.7422][Total: 10.7955]	121.5+15.1s
[1600/8000]	[L1: 0.0060][DIV: 0.0481][GRAD: 11.0464][Total: 11.1005]	119.8+3.5s
[2400/8000]	[L1: 0.0059][DIV: 0.0476][GRAD: 10.8327][Total: 10.8862]	121.1+3.5s
[3200/8000]	[L1: 0.0060][DIV: 0.0484][GRAD: 11.0198][Total: 11.0742]	121.4+3.7s
[4000/8000]	[L1: 0.0060][DIV: 0.0486][GRAD: 11.0764][Total: 11.1311]	121.5+3.7s
[4800/8000]	[L1: 0.0059][DIV: 0.0475][GRAD: 10.8308][Total: 10.8843]	121.3+3.7s
[5600/8000]	[L1: 0.0059][DIV: 0.0475][GRAD: 10.7920][Total: 10.8454]	122.7+3.6s
[6400/8000]	[L1: 0.0060][DIV: 0.0484][GRAD: 10.9668][Total: 11.0211]	123.2+3.7s
[7200/8000]	[L1: 0.0060][DIV: 0.0492][GRAD: 11.1559][Total: 11.2111]	122.1+3.9s
[8000/8000]	[L1: 0.0060][DIV: 0.0493][GRAD: 11.1836][Total: 11.2390]	120.0+3.8s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.036452	vorticity_error: 0.358373	mean_abs_divergence: 0.038514
Forward: 18.82s

Saving...
Total: 20.09s

[Epoch 38]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0060][DIV: 0.0515][GRAD: 11.1621][Total: 11.2196]	119.6+15.0s
[1600/8000]	[L1: 0.0061][DIV: 0.0511][GRAD: 11.3083][Total: 11.3655]	120.2+3.9s
[2400/8000]	[L1: 0.0060][DIV: 0.0515][GRAD: 11.3227][Total: 11.3802]	119.5+3.9s
[3200/8000]	[L1: 0.0060][DIV: 0.0512][GRAD: 11.3136][Total: 11.3709]	121.1+3.8s
[4000/8000]	[L1: 0.0060][DIV: 0.0507][GRAD: 11.1656][Total: 11.2222]	120.3+3.9s
[4800/8000]	[L1: 0.0059][DIV: 0.0499][GRAD: 11.0091][Total: 11.0649]	121.0+3.8s
[5600/8000]	[L1: 0.0059][DIV: 0.0497][GRAD: 10.9249][Total: 10.9805]	119.8+3.8s
[6400/8000]	[L1: 0.0059][DIV: 0.0501][GRAD: 11.0342][Total: 11.0902]	119.8+3.9s
[7200/8000]	[L1: 0.0059][DIV: 0.0502][GRAD: 11.0642][Total: 11.1204]	120.3+3.8s
[8000/8000]	[L1: 0.0059][DIV: 0.0501][GRAD: 11.0415][Total: 11.0975]	119.7+3.9s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.031304	vorticity_error: 0.602815	mean_abs_divergence: 0.031265
Forward: 18.55s

Saving...
Total: 19.81s

[Epoch 39]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0058][DIV: 0.0483][GRAD: 10.8494][Total: 10.9035]	119.6+14.8s
[1600/8000]	[L1: 0.0059][DIV: 0.0482][GRAD: 11.0623][Total: 11.1164]	119.7+3.8s
[2400/8000]	[L1: 0.0059][DIV: 0.0487][GRAD: 10.9921][Total: 11.0467]	119.4+4.0s
[3200/8000]	[L1: 0.0059][DIV: 0.0483][GRAD: 10.9743][Total: 11.0285]	119.6+3.8s
[4000/8000]	[L1: 0.0060][DIV: 0.0487][GRAD: 11.0780][Total: 11.1327]	119.5+3.9s
[4800/8000]	[L1: 0.0059][DIV: 0.0477][GRAD: 10.9286][Total: 10.9823]	119.4+3.9s
[5600/8000]	[L1: 0.0058][DIV: 0.0470][GRAD: 10.8056][Total: 10.8585]	119.6+3.9s
[6400/8000]	[L1: 0.0059][DIV: 0.0476][GRAD: 10.9283][Total: 10.9817]	120.4+3.9s
[7200/8000]	[L1: 0.0059][DIV: 0.0482][GRAD: 11.0511][Total: 11.1052]	123.4+3.8s
[8000/8000]	[L1: 0.0059][DIV: 0.0476][GRAD: 10.9614][Total: 11.0150]	136.2+4.2s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.039799	vorticity_error: 1.676395	mean_abs_divergence: 0.026333
Forward: 20.76s

Saving...
Total: 22.02s

[Epoch 40]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0063][DIV: 0.0472][GRAD: 11.0485][Total: 11.1020]	138.4+17.6s
[1600/8000]	[L1: 0.0061][DIV: 0.0483][GRAD: 10.9497][Total: 11.0041]	161.5+5.5s
[2400/8000]	[L1: 0.0060][DIV: 0.0482][GRAD: 10.9303][Total: 10.9846]	138.9+4.3s
[3200/8000]	[L1: 0.0060][DIV: 0.0494][GRAD: 11.0626][Total: 11.1180]	138.6+4.4s
[4000/8000]	[L1: 0.0061][DIV: 0.0497][GRAD: 11.1907][Total: 11.2465]	130.1+4.0s
[4800/8000]	[L1: 0.0060][DIV: 0.0494][GRAD: 11.0841][Total: 11.1395]	132.6+4.1s
[5600/8000]	[L1: 0.0060][DIV: 0.0500][GRAD: 11.2182][Total: 11.2742]	131.6+4.0s
[6400/8000]	[L1: 0.0060][DIV: 0.0497][GRAD: 11.1013][Total: 11.1570]	132.5+4.2s
[7200/8000]	[L1: 0.0060][DIV: 0.0504][GRAD: 11.1870][Total: 11.2434]	126.4+3.8s
[8000/8000]	[L1: 0.0060][DIV: 0.0505][GRAD: 11.2155][Total: 11.2721]	119.8+3.6s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.037853	vorticity_error: 1.417485	mean_abs_divergence: 0.034257
Forward: 17.65s

Saving...
Total: 18.67s

[Epoch 41]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0055][DIV: 0.0467][GRAD: 10.0460][Total: 10.0981]	119.6+14.8s
[1600/8000]	[L1: 0.0058][DIV: 0.0498][GRAD: 10.8100][Total: 10.8656]	119.7+3.7s
[2400/8000]	[L1: 0.0059][DIV: 0.0497][GRAD: 10.9578][Total: 11.0134]	119.8+3.6s
[3200/8000]	[L1: 0.0059][DIV: 0.0492][GRAD: 10.8891][Total: 10.9442]	119.7+3.6s
[4000/8000]	[L1: 0.0058][DIV: 0.0490][GRAD: 10.7912][Total: 10.8460]	119.7+3.7s
[4800/8000]	[L1: 0.0058][DIV: 0.0491][GRAD: 10.8209][Total: 10.8758]	121.3+3.6s
[5600/8000]	[L1: 0.0058][DIV: 0.0489][GRAD: 10.7994][Total: 10.8541]	121.6+3.7s
[6400/8000]	[L1: 0.0058][DIV: 0.0490][GRAD: 10.8401][Total: 10.8950]	120.1+3.7s
[7200/8000]	[L1: 0.0059][DIV: 0.0491][GRAD: 10.9143][Total: 10.9693]	119.7+3.7s
[8000/8000]	[L1: 0.0059][DIV: 0.0495][GRAD: 10.9912][Total: 11.0466]	119.9+3.6s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.038434	vorticity_error: 0.820095	mean_abs_divergence: 0.038156
Forward: 17.91s

Saving...
Total: 18.97s

[Epoch 42]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0057][DIV: 0.0470][GRAD: 10.5082][Total: 10.5609]	120.3+14.5s
[1600/8000]	[L1: 0.0056][DIV: 0.0470][GRAD: 10.3372][Total: 10.3898]	121.0+3.7s
[2400/8000]	[L1: 0.0056][DIV: 0.0478][GRAD: 10.4207][Total: 10.4740]	121.6+3.8s
[3200/8000]	[L1: 0.0056][DIV: 0.0475][GRAD: 10.4569][Total: 10.5101]	120.5+3.6s
[4000/8000]	[L1: 0.0058][DIV: 0.0486][GRAD: 10.7521][Total: 10.8065]	120.8+3.7s
[4800/8000]	[L1: 0.0058][DIV: 0.0483][GRAD: 10.7199][Total: 10.7740]	120.8+3.6s
[5600/8000]	[L1: 0.0058][DIV: 0.0484][GRAD: 10.8032][Total: 10.8574]	120.9+3.6s
[6400/8000]	[L1: 0.0058][DIV: 0.0488][GRAD: 10.8679][Total: 10.9226]	120.8+3.7s
[7200/8000]	[L1: 0.0059][DIV: 0.0489][GRAD: 10.9211][Total: 10.9759]	120.9+3.6s
[8000/8000]	[L1: 0.0059][DIV: 0.0485][GRAD: 10.9080][Total: 10.9624]	120.9+3.6s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.042879	vorticity_error: 0.863495	mean_abs_divergence: 0.037914
Forward: 18.85s

Saving...
Total: 19.97s

[Epoch 43]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0063][DIV: 0.0518][GRAD: 11.8351][Total: 11.8932]	121.0+15.6s
[1600/8000]	[L1: 0.0061][DIV: 0.0507][GRAD: 11.3082][Total: 11.3650]	121.0+3.6s
[2400/8000]	[L1: 0.0061][DIV: 0.0500][GRAD: 11.2377][Total: 11.2937]	121.0+3.6s
[3200/8000]	[L1: 0.0061][DIV: 0.0501][GRAD: 11.3591][Total: 11.4153]	120.9+3.6s
[4000/8000]	[L1: 0.0061][DIV: 0.0504][GRAD: 11.2850][Total: 11.3414]	120.8+3.6s
[4800/8000]	[L1: 0.0061][DIV: 0.0499][GRAD: 11.2456][Total: 11.3015]	120.9+3.5s
[5600/8000]	[L1: 0.0061][DIV: 0.0499][GRAD: 11.3930][Total: 11.4490]	120.9+3.6s
[6400/8000]	[L1: 0.0062][DIV: 0.0497][GRAD: 11.4112][Total: 11.4670]	122.4+3.6s
[7200/8000]	[L1: 0.0062][DIV: 0.0503][GRAD: 11.5250][Total: 11.5815]	131.6+4.0s
[8000/8000]	[L1: 0.0062][DIV: 0.0508][GRAD: 11.5559][Total: 11.6130]	151.5+5.0s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.032799	vorticity_error: 0.708070	mean_abs_divergence: 0.030584
Forward: 21.65s

Saving...
Total: 22.98s

[Epoch 44]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0060][DIV: 0.0469][GRAD: 11.3667][Total: 11.4197]	136.8+18.7s
[1600/8000]	[L1: 0.0062][DIV: 0.0501][GRAD: 11.5338][Total: 11.5901]	136.5+4.3s
[2400/8000]	[L1: 0.0062][DIV: 0.0509][GRAD: 11.5289][Total: 11.5859]	130.9+4.0s
[3200/8000]	[L1: 0.0061][DIV: 0.0506][GRAD: 11.4824][Total: 11.5392]	131.8+4.1s
[4000/8000]	[L1: 0.0061][DIV: 0.0507][GRAD: 11.5064][Total: 11.5632]	134.0+4.1s
[4800/8000]	[L1: 0.0061][DIV: 0.0507][GRAD: 11.4465][Total: 11.5034]	134.8+4.1s
[5600/8000]	[L1: 0.0060][DIV: 0.0501][GRAD: 11.2887][Total: 11.3448]	135.0+4.2s
[6400/8000]	[L1: 0.0061][DIV: 0.0507][GRAD: 11.4585][Total: 11.5153]	131.1+4.0s
[7200/8000]	[L1: 0.0060][DIV: 0.0501][GRAD: 11.3419][Total: 11.3980]	130.9+4.1s
[8000/8000]	[L1: 0.0060][DIV: 0.0501][GRAD: 11.3669][Total: 11.4230]	131.9+4.1s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.032483	vorticity_error: 1.598075	mean_abs_divergence: 0.040514
Forward: 21.73s

Saving...
Total: 23.07s

[Epoch 45]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0059][DIV: 0.0488][GRAD: 11.1880][Total: 11.2426]	132.5+17.7s
[1600/8000]	[L1: 0.0060][DIV: 0.0499][GRAD: 11.4248][Total: 11.4807]	135.0+3.9s
[2400/8000]	[L1: 0.0060][DIV: 0.0504][GRAD: 11.4132][Total: 11.4697]	120.0+3.6s
[3200/8000]	[L1: 0.0060][DIV: 0.0503][GRAD: 11.2841][Total: 11.3404]	114.9+3.2s
[4000/8000]	[L1: 0.0061][DIV: 0.0512][GRAD: 11.3892][Total: 11.4465]	113.1+3.4s
[4800/8000]	[L1: 0.0060][DIV: 0.0507][GRAD: 11.3047][Total: 11.3614]	115.2+3.5s
[5600/8000]	[L1: 0.0060][DIV: 0.0500][GRAD: 11.1750][Total: 11.2310]	121.5+3.6s
[6400/8000]	[L1: 0.0060][DIV: 0.0498][GRAD: 11.1486][Total: 11.2044]	120.8+3.6s
[7200/8000]	[L1: 0.0059][DIV: 0.0498][GRAD: 11.1510][Total: 11.2068]	121.2+3.5s
[8000/8000]	[L1: 0.0060][DIV: 0.0499][GRAD: 11.1819][Total: 11.2378]	121.9+3.6s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.037205	vorticity_error: 0.623683	mean_abs_divergence: 0.026803
Forward: 21.49s

Saving...
Total: 22.64s

[Epoch 46]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0063][DIV: 0.0523][GRAD: 11.6134][Total: 11.6719]	121.4+17.3s
[1600/8000]	[L1: 0.0061][DIV: 0.0515][GRAD: 11.4388][Total: 11.4964]	121.2+3.7s
[2400/8000]	[L1: 0.0060][DIV: 0.0502][GRAD: 11.2071][Total: 11.2634]	120.8+3.6s
[3200/8000]	[L1: 0.0061][DIV: 0.0504][GRAD: 11.2924][Total: 11.3489]	120.9+3.6s
[4000/8000]	[L1: 0.0060][DIV: 0.0497][GRAD: 11.0841][Total: 11.1397]	121.0+3.6s
[4800/8000]	[L1: 0.0060][DIV: 0.0504][GRAD: 11.1395][Total: 11.1959]	120.8+3.6s
[5600/8000]	[L1: 0.0060][DIV: 0.0507][GRAD: 11.1588][Total: 11.2155]	120.5+3.6s
[6400/8000]	[L1: 0.0059][DIV: 0.0501][GRAD: 11.0672][Total: 11.1232]	120.8+3.5s
[7200/8000]	[L1: 0.0060][DIV: 0.0507][GRAD: 11.1722][Total: 11.2289]	121.1+3.6s
[8000/8000]	[L1: 0.0060][DIV: 0.0509][GRAD: 11.1743][Total: 11.2312]	120.5+3.7s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.039415	vorticity_error: 1.546322	mean_abs_divergence: 0.032868
Forward: 20.29s

Saving...
Total: 21.47s

[Epoch 47]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0061][DIV: 0.0549][GRAD: 11.6047][Total: 11.6657]	120.5+17.4s
[1600/8000]	[L1: 0.0059][DIV: 0.0525][GRAD: 11.1409][Total: 11.1992]	121.0+3.5s
[2400/8000]	[L1: 0.0059][DIV: 0.0518][GRAD: 11.1229][Total: 11.1805]	120.6+3.6s
[3200/8000]	[L1: 0.0059][DIV: 0.0520][GRAD: 11.1622][Total: 11.2201]	120.9+3.6s
[4000/8000]	[L1: 0.0059][DIV: 0.0524][GRAD: 11.1970][Total: 11.2554]	120.8+3.6s
[4800/8000]	[L1: 0.0059][DIV: 0.0515][GRAD: 11.0891][Total: 11.1464]	115.5+3.5s
[5600/8000]	[L1: 0.0059][DIV: 0.0514][GRAD: 11.0939][Total: 11.1512]	114.2+3.3s
[6400/8000]	[L1: 0.0059][DIV: 0.0513][GRAD: 11.1675][Total: 11.2247]	115.5+3.3s
[7200/8000]	[L1: 0.0060][DIV: 0.0518][GRAD: 11.2591][Total: 11.3168]	114.2+3.3s
[8000/8000]	[L1: 0.0059][DIV: 0.0513][GRAD: 11.1757][Total: 11.2329]	116.0+3.2s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.050528	vorticity_error: 0.825371	mean_abs_divergence: 0.031079
Forward: 22.26s

Saving...
Total: 24.27s

[Epoch 48]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0063][DIV: 0.0514][GRAD: 11.4927][Total: 11.5503]	116.0+14.8s
[1600/8000]	[L1: 0.0062][DIV: 0.0515][GRAD: 11.4755][Total: 11.5332]	116.7+3.3s
[2400/8000]	[L1: 0.0062][DIV: 0.0524][GRAD: 11.5571][Total: 11.6157]	113.9+3.4s
[3200/8000]	[L1: 0.0063][DIV: 0.0536][GRAD: 11.6910][Total: 11.7509]	114.7+3.4s
[4000/8000]	[L1: 0.0062][DIV: 0.0520][GRAD: 11.4867][Total: 11.5448]	114.6+3.4s
[4800/8000]	[L1: 0.0061][DIV: 0.0512][GRAD: 11.3026][Total: 11.3599]	114.6+3.3s
[5600/8000]	[L1: 0.0060][DIV: 0.0505][GRAD: 11.1611][Total: 11.2176]	114.1+3.4s
[6400/8000]	[L1: 0.0060][DIV: 0.0510][GRAD: 11.1820][Total: 11.2391]	112.3+3.4s
[7200/8000]	[L1: 0.0060][DIV: 0.0513][GRAD: 11.1944][Total: 11.2518]	112.5+3.3s
[8000/8000]	[L1: 0.0060][DIV: 0.0510][GRAD: 11.1549][Total: 11.2120]	112.5+3.3s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.034289	vorticity_error: 1.070096	mean_abs_divergence: 0.032280
Forward: 14.52s

Saving...
Total: 15.33s

[Epoch 49]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0056][DIV: 0.0457][GRAD: 10.5730][Total: 10.6243]	112.4+11.9s
[1600/8000]	[L1: 0.0057][DIV: 0.0472][GRAD: 10.7660][Total: 10.8190]	112.4+3.4s
[2400/8000]	[L1: 0.0057][DIV: 0.0470][GRAD: 10.6195][Total: 10.6722]	112.5+3.3s
[3200/8000]	[L1: 0.0056][DIV: 0.0467][GRAD: 10.5124][Total: 10.5647]	112.5+3.3s
[4000/8000]	[L1: 0.0057][DIV: 0.0475][GRAD: 10.7596][Total: 10.8128]	113.2+3.3s
[4800/8000]	[L1: 0.0058][DIV: 0.0480][GRAD: 10.8566][Total: 10.9103]	112.9+3.3s
[5600/8000]	[L1: 0.0058][DIV: 0.0484][GRAD: 10.9062][Total: 10.9603]	112.3+3.4s
[6400/8000]	[L1: 0.0058][DIV: 0.0487][GRAD: 10.9818][Total: 11.0364]	114.9+3.3s
[7200/8000]	[L1: 0.0059][DIV: 0.0488][GRAD: 10.9913][Total: 11.0459]	120.4+3.5s
[8000/8000]	[L1: 0.0058][DIV: 0.0490][GRAD: 10.9664][Total: 11.0213]	125.8+3.9s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.034608	vorticity_error: 1.283555	mean_abs_divergence: 0.027737
Forward: 20.45s

Saving...
Total: 21.61s

[Epoch 50]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0058][DIV: 0.0500][GRAD: 10.8832][Total: 10.9390]	128.1+17.5s
[1600/8000]	[L1: 0.0061][DIV: 0.0512][GRAD: 11.4266][Total: 11.4839]	128.9+3.9s
[2400/8000]	[L1: 0.0060][DIV: 0.0510][GRAD: 11.3516][Total: 11.4086]	129.5+3.9s
[3200/8000]	[L1: 0.0061][DIV: 0.0524][GRAD: 11.5840][Total: 11.6425]	128.9+3.9s
[4000/8000]	[L1: 0.0061][DIV: 0.0526][GRAD: 11.5689][Total: 11.6276]	129.5+4.0s
[4800/8000]	[L1: 0.0061][DIV: 0.0525][GRAD: 11.5316][Total: 11.5901]	129.4+4.0s
[5600/8000]	[L1: 0.0061][DIV: 0.0526][GRAD: 11.5494][Total: 11.6081]	127.9+4.0s
[6400/8000]	[L1: 0.0061][DIV: 0.0524][GRAD: 11.5134][Total: 11.5719]	129.5+4.0s
[7200/8000]	[L1: 0.0061][DIV: 0.0522][GRAD: 11.5452][Total: 11.6035]	129.4+3.9s
[8000/8000]	[L1: 0.0061][DIV: 0.0519][GRAD: 11.4840][Total: 11.5419]	129.5+3.9s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.047962	vorticity_error: 1.805982	mean_abs_divergence: 0.040075
Forward: 21.85s

Saving...
Total: 23.11s

[Epoch 51]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0055][DIV: 0.0452][GRAD: 10.1947][Total: 10.2454]	128.6+17.6s
[1600/8000]	[L1: 0.0056][DIV: 0.0462][GRAD: 10.3934][Total: 10.4452]	129.8+4.0s
[2400/8000]	[L1: 0.0056][DIV: 0.0466][GRAD: 10.4128][Total: 10.4650]	129.2+3.9s
[3200/8000]	[L1: 0.0056][DIV: 0.0469][GRAD: 10.4090][Total: 10.4614]	128.1+3.9s
[4000/8000]	[L1: 0.0056][DIV: 0.0473][GRAD: 10.4283][Total: 10.4811]	128.9+4.0s
[4800/8000]	[L1: 0.0057][DIV: 0.0483][GRAD: 10.6968][Total: 10.7507]	128.7+3.9s
[5600/8000]	[L1: 0.0057][DIV: 0.0489][GRAD: 10.8150][Total: 10.8696]	128.6+4.0s
[6400/8000]	[L1: 0.0058][DIV: 0.0492][GRAD: 10.8532][Total: 10.9081]	128.3+3.9s
[7200/8000]	[L1: 0.0058][DIV: 0.0494][GRAD: 10.9348][Total: 10.9899]	128.4+4.0s
[8000/8000]	[L1: 0.0058][DIV: 0.0497][GRAD: 10.9697][Total: 11.0252]	129.1+4.0s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.038138	vorticity_error: 0.991629	mean_abs_divergence: 0.039926
Forward: 20.88s

Saving...
Total: 22.05s

[Epoch 52]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0056][DIV: 0.0473][GRAD: 10.5184][Total: 10.5714]	128.9+17.5s
[1600/8000]	[L1: 0.0058][DIV: 0.0478][GRAD: 10.7755][Total: 10.8291]	129.2+3.9s
[2400/8000]	[L1: 0.0058][DIV: 0.0488][GRAD: 10.7242][Total: 10.7788]	129.4+3.9s
[3200/8000]	[L1: 0.0059][DIV: 0.0502][GRAD: 10.9670][Total: 11.0231]	128.8+3.9s
[4000/8000]	[L1: 0.0059][DIV: 0.0495][GRAD: 10.9270][Total: 10.9823]	127.7+3.9s
[4800/8000]	[L1: 0.0059][DIV: 0.0502][GRAD: 11.0368][Total: 11.0929]	128.2+3.9s
[5600/8000]	[L1: 0.0059][DIV: 0.0507][GRAD: 11.1242][Total: 11.1808]	128.3+3.9s
[6400/8000]	[L1: 0.0059][DIV: 0.0507][GRAD: 11.1589][Total: 11.2155]	128.8+3.8s
[7200/8000]	[L1: 0.0059][DIV: 0.0505][GRAD: 11.1444][Total: 11.2007]	128.5+3.9s
[8000/8000]	[L1: 0.0059][DIV: 0.0505][GRAD: 11.1692][Total: 11.2255]	128.7+3.9s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.037620	vorticity_error: 1.213066	mean_abs_divergence: 0.024279
Forward: 21.34s

Saving...
Total: 22.68s

[Epoch 53]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0058][DIV: 0.0524][GRAD: 10.9856][Total: 11.0438]	128.3+17.5s
[1600/8000]	[L1: 0.0059][DIV: 0.0525][GRAD: 11.0546][Total: 11.1130]	128.1+4.0s
[2400/8000]	[L1: 0.0056][DIV: 0.0483][GRAD: 10.5257][Total: 10.5797]	128.4+3.9s
[3200/8000]	[L1: 0.0056][DIV: 0.0474][GRAD: 10.4629][Total: 10.5159]	128.4+4.0s
[4000/8000]	[L1: 0.0056][DIV: 0.0467][GRAD: 10.4321][Total: 10.4843]	128.8+3.9s
[4800/8000]	[L1: 0.0056][DIV: 0.0478][GRAD: 10.5253][Total: 10.5786]	128.7+4.0s
[5600/8000]	[L1: 0.0056][DIV: 0.0486][GRAD: 10.6503][Total: 10.7045]	128.9+4.0s
[6400/8000]	[L1: 0.0057][DIV: 0.0491][GRAD: 10.7915][Total: 10.8464]	128.4+3.9s
[7200/8000]	[L1: 0.0057][DIV: 0.0489][GRAD: 10.7851][Total: 10.8398]	128.3+4.0s
[8000/8000]	[L1: 0.0057][DIV: 0.0492][GRAD: 10.8438][Total: 10.8988]	123.0+3.6s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.037372	vorticity_error: 1.527493	mean_abs_divergence: 0.031732
Forward: 18.44s

Saving...
Total: 19.51s

[Epoch 54]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0061][DIV: 0.0504][GRAD: 11.5028][Total: 11.5593]	119.7+14.0s
[1600/8000]	[L1: 0.0059][DIV: 0.0481][GRAD: 11.0528][Total: 11.1068]	119.9+3.7s
[2400/8000]	[L1: 0.0059][DIV: 0.0498][GRAD: 11.0463][Total: 11.1020]	119.6+3.7s
[3200/8000]	[L1: 0.0058][DIV: 0.0493][GRAD: 10.8751][Total: 10.9302]	119.8+3.6s
[4000/8000]	[L1: 0.0058][DIV: 0.0495][GRAD: 10.9442][Total: 10.9995]	120.1+3.5s
[4800/8000]	[L1: 0.0058][DIV: 0.0498][GRAD: 11.0169][Total: 11.0726]	120.1+3.5s
[5600/8000]	[L1: 0.0058][DIV: 0.0493][GRAD: 10.8766][Total: 10.9317]	119.9+3.6s
[6400/8000]	[L1: 0.0058][DIV: 0.0497][GRAD: 10.9211][Total: 10.9766]	120.1+3.5s
[7200/8000]	[L1: 0.0058][DIV: 0.0499][GRAD: 10.9877][Total: 11.0435]	120.0+3.6s
[8000/8000]	[L1: 0.0059][DIV: 0.0502][GRAD: 11.0651][Total: 11.1212]	119.9+3.6s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.033950	vorticity_error: 0.807628	mean_abs_divergence: 0.032536
Forward: 18.38s

Saving...
Total: 19.68s

[Epoch 55]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0057][DIV: 0.0499][GRAD: 10.8233][Total: 10.8789]	119.8+14.3s
[1600/8000]	[L1: 0.0059][DIV: 0.0504][GRAD: 11.2712][Total: 11.3275]	120.0+3.6s
[2400/8000]	[L1: 0.0059][DIV: 0.0502][GRAD: 11.2232][Total: 11.2793]	120.1+3.5s
[3200/8000]	[L1: 0.0058][DIV: 0.0493][GRAD: 10.9160][Total: 10.9710]	120.0+3.5s
[4000/8000]	[L1: 0.0058][DIV: 0.0500][GRAD: 11.0063][Total: 11.0621]	120.0+3.6s
[4800/8000]	[L1: 0.0058][DIV: 0.0500][GRAD: 11.0102][Total: 11.0660]	119.8+3.7s
[5600/8000]	[L1: 0.0058][DIV: 0.0494][GRAD: 10.9151][Total: 10.9702]	120.1+3.6s
[6400/8000]	[L1: 0.0058][DIV: 0.0498][GRAD: 10.9629][Total: 11.0184]	119.8+3.6s
[7200/8000]	[L1: 0.0058][DIV: 0.0499][GRAD: 10.9497][Total: 11.0053]	119.9+3.5s
[8000/8000]	[L1: 0.0057][DIV: 0.0495][GRAD: 10.8728][Total: 10.9280]	119.9+3.6s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.030797	vorticity_error: 1.467593	mean_abs_divergence: 0.039820
Forward: 18.41s

Saving...
Total: 19.42s

[Epoch 56]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0058][DIV: 0.0516][GRAD: 10.8743][Total: 10.9317]	119.9+14.2s
[1600/8000]	[L1: 0.0060][DIV: 0.0522][GRAD: 11.2873][Total: 11.3455]	120.0+3.6s
[2400/8000]	[L1: 0.0060][DIV: 0.0516][GRAD: 11.2964][Total: 11.3539]	120.0+3.5s
[3200/8000]	[L1: 0.0060][DIV: 0.0504][GRAD: 11.2882][Total: 11.3446]	119.9+3.6s
[4000/8000]	[L1: 0.0060][DIV: 0.0503][GRAD: 11.3148][Total: 11.3712]	119.9+3.6s
[4800/8000]	[L1: 0.0060][DIV: 0.0508][GRAD: 11.3354][Total: 11.3923]	119.9+3.6s
[5600/8000]	[L1: 0.0060][DIV: 0.0508][GRAD: 11.3474][Total: 11.4043]	119.9+3.6s
[6400/8000]	[L1: 0.0060][DIV: 0.0503][GRAD: 11.2632][Total: 11.3196]	119.9+3.6s
[7200/8000]	[L1: 0.0060][DIV: 0.0503][GRAD: 11.2834][Total: 11.3398]	119.8+3.6s
[8000/8000]	[L1: 0.0061][DIV: 0.0507][GRAD: 11.4119][Total: 11.4687]	120.1+3.6s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.034229	vorticity_error: 1.409379	mean_abs_divergence: 0.020529
Forward: 18.67s

Saving...
Total: 19.66s

[Epoch 57]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0061][DIV: 0.0454][GRAD: 10.9714][Total: 11.0229]	121.1+13.7s
[1600/8000]	[L1: 0.0058][DIV: 0.0465][GRAD: 10.6212][Total: 10.6735]	120.7+3.4s
[2400/8000]	[L1: 0.0058][DIV: 0.0470][GRAD: 10.7429][Total: 10.7958]	120.1+3.5s
[3200/8000]	[L1: 0.0058][DIV: 0.0479][GRAD: 10.7673][Total: 10.8210]	119.9+3.6s
[4000/8000]	[L1: 0.0058][DIV: 0.0483][GRAD: 10.8534][Total: 10.9075]	119.9+3.5s
[4800/8000]	[L1: 0.0058][DIV: 0.0478][GRAD: 10.7781][Total: 10.8317]	120.0+3.5s
[5600/8000]	[L1: 0.0058][DIV: 0.0482][GRAD: 10.8462][Total: 10.9002]	120.0+3.6s
[6400/8000]	[L1: 0.0058][DIV: 0.0487][GRAD: 10.8763][Total: 10.9307]	119.7+3.6s
[7200/8000]	[L1: 0.0058][DIV: 0.0493][GRAD: 10.9532][Total: 11.0083]	120.0+3.6s
[8000/8000]	[L1: 0.0058][DIV: 0.0493][GRAD: 10.8971][Total: 10.9521]	119.8+3.6s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.034683	vorticity_error: 1.094801	mean_abs_divergence: 0.040947
Forward: 18.02s

Saving...
Total: 19.25s

[Epoch 58]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0057][DIV: 0.0516][GRAD: 10.8793][Total: 10.9366]	120.0+15.0s
[1600/8000]	[L1: 0.0055][DIV: 0.0495][GRAD: 10.5590][Total: 10.6140]	120.0+3.6s
[2400/8000]	[L1: 0.0056][DIV: 0.0492][GRAD: 10.7741][Total: 10.8290]	119.9+3.6s
[3200/8000]	[L1: 0.0057][DIV: 0.0493][GRAD: 10.8518][Total: 10.9068]	120.0+3.5s
[4000/8000]	[L1: 0.0057][DIV: 0.0484][GRAD: 10.7386][Total: 10.7927]	119.9+3.6s
[4800/8000]	[L1: 0.0057][DIV: 0.0487][GRAD: 10.7841][Total: 10.8385]	120.0+3.6s
[5600/8000]	[L1: 0.0057][DIV: 0.0491][GRAD: 10.8566][Total: 10.9115]	119.9+3.6s
[6400/8000]	[L1: 0.0058][DIV: 0.0495][GRAD: 10.9210][Total: 10.9762]	120.0+3.5s
[7200/8000]	[L1: 0.0058][DIV: 0.0499][GRAD: 10.9768][Total: 11.0324]	119.8+3.7s
[8000/8000]	[L1: 0.0058][DIV: 0.0495][GRAD: 10.8895][Total: 10.9448]	119.9+3.6s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.035544	vorticity_error: 0.710317	mean_abs_divergence: 0.034708
Forward: 17.95s

Saving...
Total: 19.22s

[Epoch 59]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0057][DIV: 0.0506][GRAD: 10.8902][Total: 10.9464]	119.8+14.6s
[1600/8000]	[L1: 0.0056][DIV: 0.0492][GRAD: 10.6257][Total: 10.6804]	119.8+3.7s
[2400/8000]	[L1: 0.0056][DIV: 0.0486][GRAD: 10.6496][Total: 10.7038]	120.0+3.5s
[3200/8000]	[L1: 0.0056][DIV: 0.0487][GRAD: 10.7107][Total: 10.7650]	120.1+3.5s
[4000/8000]	[L1: 0.0056][DIV: 0.0483][GRAD: 10.6552][Total: 10.7091]	120.0+3.5s
[4800/8000]	[L1: 0.0057][DIV: 0.0487][GRAD: 10.7717][Total: 10.8261]	119.8+3.6s
[5600/8000]	[L1: 0.0057][DIV: 0.0488][GRAD: 10.7884][Total: 10.8428]	119.9+3.7s
[6400/8000]	[L1: 0.0057][DIV: 0.0490][GRAD: 10.8338][Total: 10.8884]	120.0+3.6s
[7200/8000]	[L1: 0.0057][DIV: 0.0492][GRAD: 10.8007][Total: 10.8556]	120.1+3.6s
[8000/8000]	[L1: 0.0056][DIV: 0.0487][GRAD: 10.6995][Total: 10.7539]	120.0+3.6s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.040576	vorticity_error: 0.984035	mean_abs_divergence: 0.034025
Forward: 17.92s

Saving...
Total: 19.00s

[Epoch 60]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0061][DIV: 0.0498][GRAD: 11.5078][Total: 11.5637]	120.0+14.7s
[1600/8000]	[L1: 0.0059][DIV: 0.0498][GRAD: 11.2044][Total: 11.2601]	119.9+3.6s
[2400/8000]	[L1: 0.0059][DIV: 0.0497][GRAD: 11.2362][Total: 11.2918]	120.1+3.5s
[3200/8000]	[L1: 0.0059][DIV: 0.0496][GRAD: 11.2066][Total: 11.2621]	119.9+3.6s
[4000/8000]	[L1: 0.0058][DIV: 0.0497][GRAD: 11.1354][Total: 11.1909]	119.8+3.7s
[4800/8000]	[L1: 0.0058][DIV: 0.0486][GRAD: 10.9847][Total: 11.0390]	119.9+3.6s
[5600/8000]	[L1: 0.0058][DIV: 0.0488][GRAD: 11.0473][Total: 11.1018]	119.8+3.7s
[6400/8000]	[L1: 0.0058][DIV: 0.0489][GRAD: 10.9838][Total: 11.0385]	119.9+3.6s
[7200/8000]	[L1: 0.0058][DIV: 0.0491][GRAD: 11.0515][Total: 11.1064]	119.8+3.6s
[8000/8000]	[L1: 0.0058][DIV: 0.0492][GRAD: 11.0765][Total: 11.1316]	120.0+3.5s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.042754	vorticity_error: 1.592513	mean_abs_divergence: 0.039489
Forward: 18.33s

Saving...
Total: 19.50s

[Epoch 61]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0061][DIV: 0.0503][GRAD: 11.5950][Total: 11.6514]	120.0+14.9s
[1600/8000]	[L1: 0.0059][DIV: 0.0492][GRAD: 11.3103][Total: 11.3654]	120.1+3.6s
[2400/8000]	[L1: 0.0060][DIV: 0.0503][GRAD: 11.4377][Total: 11.4940]	120.0+3.6s
[3200/8000]	[L1: 0.0059][DIV: 0.0497][GRAD: 11.2692][Total: 11.3249]	119.9+3.6s
[4000/8000]	[L1: 0.0058][DIV: 0.0486][GRAD: 11.0280][Total: 11.0824]	119.8+3.6s
[4800/8000]	[L1: 0.0058][DIV: 0.0487][GRAD: 11.0529][Total: 11.1075]	119.8+3.6s
[5600/8000]	[L1: 0.0058][DIV: 0.0485][GRAD: 10.9609][Total: 11.0152]	119.9+3.6s
[6400/8000]	[L1: 0.0058][DIV: 0.0492][GRAD: 10.9912][Total: 11.0462]	119.9+3.6s
[7200/8000]	[L1: 0.0058][DIV: 0.0491][GRAD: 10.9712][Total: 11.0261]	119.8+3.7s
[8000/8000]	[L1: 0.0057][DIV: 0.0489][GRAD: 10.8975][Total: 10.9521]	120.0+3.6s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.044591	vorticity_error: 1.120213	mean_abs_divergence: 0.027070
Forward: 18.51s

Saving...
Total: 19.77s

[Epoch 62]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0062][DIV: 0.0515][GRAD: 11.8415][Total: 11.8992]	120.0+14.5s
[1600/8000]	[L1: 0.0061][DIV: 0.0521][GRAD: 11.6691][Total: 11.7272]	120.0+3.6s
[2400/8000]	[L1: 0.0059][DIV: 0.0509][GRAD: 11.2358][Total: 11.2925]	119.9+3.6s
[3200/8000]	[L1: 0.0059][DIV: 0.0509][GRAD: 11.3425][Total: 11.3993]	119.9+3.6s
[4000/8000]	[L1: 0.0059][DIV: 0.0511][GRAD: 11.3208][Total: 11.3779]	119.8+3.6s
[4800/8000]	[L1: 0.0059][DIV: 0.0516][GRAD: 11.3700][Total: 11.4275]	120.0+3.6s
[5600/8000]	[L1: 0.0059][DIV: 0.0515][GRAD: 11.3451][Total: 11.4025]	119.8+3.7s
[6400/8000]	[L1: 0.0059][DIV: 0.0510][GRAD: 11.1994][Total: 11.2562]	120.0+3.6s
[7200/8000]	[L1: 0.0058][DIV: 0.0510][GRAD: 11.1791][Total: 11.2359]	120.0+3.6s
[8000/8000]	[L1: 0.0058][DIV: 0.0505][GRAD: 11.0679][Total: 11.1242]	119.8+3.7s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.035570	vorticity_error: 2.909397	mean_abs_divergence: 0.033413
Forward: 17.74s

Saving...
Total: 18.93s

[Epoch 63]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0060][DIV: 0.0514][GRAD: 11.2446][Total: 11.3019]	120.1+13.9s
[1600/8000]	[L1: 0.0060][DIV: 0.0503][GRAD: 11.0559][Total: 11.1121]	119.9+3.6s
[2400/8000]	[L1: 0.0059][DIV: 0.0502][GRAD: 10.9159][Total: 10.9719]	120.0+3.6s
[3200/8000]	[L1: 0.0058][DIV: 0.0488][GRAD: 10.7525][Total: 10.8071]	120.0+3.6s
[4000/8000]	[L1: 0.0058][DIV: 0.0500][GRAD: 10.9045][Total: 10.9603]	120.0+3.6s
[4800/8000]	[L1: 0.0059][DIV: 0.0509][GRAD: 11.1235][Total: 11.1803]	120.0+3.5s
[5600/8000]	[L1: 0.0059][DIV: 0.0514][GRAD: 11.1958][Total: 11.2531]	120.1+3.5s
[6400/8000]	[L1: 0.0059][DIV: 0.0517][GRAD: 11.2542][Total: 11.3119]	119.8+3.6s
[7200/8000]	[L1: 0.0060][DIV: 0.0522][GRAD: 11.3888][Total: 11.4469]	120.1+3.5s
[8000/8000]	[L1: 0.0059][DIV: 0.0518][GRAD: 11.2970][Total: 11.3548]	119.9+3.5s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.041921	vorticity_error: 1.918443	mean_abs_divergence: 0.036487
Forward: 17.53s

Saving...
Total: 18.45s

[Epoch 64]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0054][DIV: 0.0469][GRAD: 10.3580][Total: 10.4103]	119.9+14.3s
[1600/8000]	[L1: 0.0056][DIV: 0.0482][GRAD: 10.6806][Total: 10.7344]	119.9+3.6s
[2400/8000]	[L1: 0.0056][DIV: 0.0481][GRAD: 10.6860][Total: 10.7397]	120.1+3.6s
[3200/8000]	[L1: 0.0057][DIV: 0.0488][GRAD: 10.8330][Total: 10.8874]	120.1+3.5s
[4000/8000]	[L1: 0.0057][DIV: 0.0489][GRAD: 10.8563][Total: 10.9108]	120.1+3.5s
[4800/8000]	[L1: 0.0056][DIV: 0.0486][GRAD: 10.8039][Total: 10.8581]	120.0+3.6s
[5600/8000]	[L1: 0.0056][DIV: 0.0494][GRAD: 10.8470][Total: 10.9020]	120.2+3.5s
[6400/8000]	[L1: 0.0057][DIV: 0.0495][GRAD: 10.8562][Total: 10.9114]	120.0+3.6s
[7200/8000]	[L1: 0.0056][DIV: 0.0494][GRAD: 10.8271][Total: 10.8821]	119.8+3.6s
[8000/8000]	[L1: 0.0056][DIV: 0.0491][GRAD: 10.7818][Total: 10.8365]	119.9+3.6s

Evaluation:
[DIV2K x8]	rel_l2_error: 0.040318	vorticity_error: 0.822257	mean_abs_divergence: 0.023203
Forward: 18.02s

Saving...
Total: 19.04s

[Epoch 65]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0054][DIV: 0.0452][GRAD: 10.3602][Total: 10.4109]	120.0+14.9s
[1600/8000]	[L1: 0.0057][DIV: 0.0496][GRAD: 10.9408][Total: 10.9961]	120.0+3.6s
LapSRN(
  (head_x8): Conv2d(2, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (head_x4): Conv2d(2, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (head_x2): Conv2d(2, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (feature_extractor_x4): FeatureExtraction(
    (body): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
  )
  (feature_extractor_x2): FeatureExtraction(
    (body): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
  )
  (upsample_block_x4): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(128, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(128, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (upsample_block_x2): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(128, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(128, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (upsample_block_x1): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(128, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(128, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)