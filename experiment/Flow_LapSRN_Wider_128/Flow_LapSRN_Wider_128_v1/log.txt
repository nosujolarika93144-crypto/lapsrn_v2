LapSRN(
  (head_x8): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (head_x4): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (head_x2): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (feature_extractor_x4): FeatureExtraction(
    (body): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
  )
  (feature_extractor_x2): FeatureExtraction(
    (body): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
  )
  (upsample_block_x4): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(32, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (upsample_block_x2): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(32, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (upsample_block_x1): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(32, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 1]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.4430][DIV: 0.1387][GRAD: 0.4848][VORT: 0.8272][Total: 1.8937]	4.9+7.4s
[1600/8000]	[L1: 0.3206][DIV: 0.1321][GRAD: 0.4007][VORT: 0.6481][Total: 1.5015]	4.4+3.1s
[2400/8000]	[L1: 0.2715][DIV: 0.1262][GRAD: 0.3549][VORT: 0.5653][Total: 1.3178]	4.4+3.0s
[3200/8000]	[L1: 0.2450][DIV: 0.1272][GRAD: 0.3335][VORT: 0.5242][Total: 1.2299]	4.4+3.0s
[4000/8000]	[L1: 0.2284][DIV: 0.1267][GRAD: 0.3179][VORT: 0.4987][Total: 1.1717]	4.4+3.1s
[4800/8000]	[L1: 0.2171][DIV: 0.1281][GRAD: 0.3079][VORT: 0.4812][Total: 1.1343]	4.4+3.0s
[5600/8000]	[L1: 0.2077][DIV: 0.1290][GRAD: 0.2993][VORT: 0.4656][Total: 1.1017]	4.4+3.1s
[6400/8000]	[L1: 0.2013][DIV: 0.1297][GRAD: 0.2927][VORT: 0.4543][Total: 1.0780]	4.5+3.0s
[7200/8000]	[L1: 0.1937][DIV: 0.1286][GRAD: 0.2847][VORT: 0.4423][Total: 1.0493]	4.4+3.1s
[8000/8000]	[L1: 0.1881][DIV: 0.1285][GRAD: 0.2795][VORT: 0.4350][Total: 1.0310]	4.4+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.077181	vorticity_error: 1.397092	mean_abs_divergence: 0.126371
[DIV2K x2]	rel_l2_error: 0.059329	vorticity_error: 1.452599	mean_abs_divergence: 0.075621
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.055024	vorticity_error: 1.374924	mean_abs_divergence: 0.043536
[INFO] New best model found with rel_l2_error on final output: 0.055024
Forward: 5.95s

Saving...
Total: 6.43s

[Epoch 2]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.1413][DIV: 0.1281][GRAD: 0.2266][VORT: 0.3498][Total: 0.8458]	4.6+7.4s
[1600/8000]	[L1: 0.1389][DIV: 0.1280][GRAD: 0.2269][VORT: 0.3474][Total: 0.8412]	4.4+3.1s
[2400/8000]	[L1: 0.1385][DIV: 0.1279][GRAD: 0.2255][VORT: 0.3416][Total: 0.8335]	4.5+3.0s
[3200/8000]	[L1: 0.1392][DIV: 0.1256][GRAD: 0.2226][VORT: 0.3394][Total: 0.8268]	4.5+3.0s
[4000/8000]	[L1: 0.1380][DIV: 0.1269][GRAD: 0.2243][VORT: 0.3432][Total: 0.8324]	4.4+3.0s
[4800/8000]	[L1: 0.1395][DIV: 0.1279][GRAD: 0.2267][VORT: 0.3482][Total: 0.8423]	4.4+3.1s
[5600/8000]	[L1: 0.1397][DIV: 0.1284][GRAD: 0.2276][VORT: 0.3503][Total: 0.8460]	4.5+3.0s
[6400/8000]	[L1: 0.1384][DIV: 0.1278][GRAD: 0.2255][VORT: 0.3469][Total: 0.8386]	4.5+3.0s
[7200/8000]	[L1: 0.1377][DIV: 0.1273][GRAD: 0.2241][VORT: 0.3450][Total: 0.8341]	4.4+3.1s
[8000/8000]	[L1: 0.1367][DIV: 0.1265][GRAD: 0.2223][VORT: 0.3428][Total: 0.8283]	4.4+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.071639	vorticity_error: 4.587242	mean_abs_divergence: 0.107560
[DIV2K x2]	rel_l2_error: 0.054483	vorticity_error: 8.781494	mean_abs_divergence: 0.063090
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.049951	vorticity_error: 8.462713	mean_abs_divergence: 0.033303
[INFO] New best model found with rel_l2_error on final output: 0.049951
Forward: 5.76s

Saving...
Total: 6.11s

[Epoch 3]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.1335][DIV: 0.1281][GRAD: 0.2167][VORT: 0.3295][Total: 0.8078]	4.6+7.6s
[1600/8000]	[L1: 0.1287][DIV: 0.1288][GRAD: 0.2184][VORT: 0.3303][Total: 0.8062]	4.5+3.0s
[2400/8000]	[L1: 0.1277][DIV: 0.1281][GRAD: 0.2192][VORT: 0.3352][Total: 0.8102]	4.4+3.1s
[3200/8000]	[L1: 0.1270][DIV: 0.1272][GRAD: 0.2184][VORT: 0.3350][Total: 0.8076]	4.4+3.1s
[4000/8000]	[L1: 0.1273][DIV: 0.1276][GRAD: 0.2186][VORT: 0.3339][Total: 0.8074]	4.5+3.0s
[4800/8000]	[L1: 0.1262][DIV: 0.1265][GRAD: 0.2159][VORT: 0.3292][Total: 0.7978]	4.4+3.1s
[5600/8000]	[L1: 0.1267][DIV: 0.1255][GRAD: 0.2153][VORT: 0.3297][Total: 0.7973]	4.5+3.0s
[6400/8000]	[L1: 0.1256][DIV: 0.1246][GRAD: 0.2134][VORT: 0.3268][Total: 0.7903]	4.4+3.1s
[7200/8000]	[L1: 0.1242][DIV: 0.1233][GRAD: 0.2102][VORT: 0.3219][Total: 0.7796]	4.5+3.0s
[8000/8000]	[L1: 0.1236][DIV: 0.1232][GRAD: 0.2092][VORT: 0.3194][Total: 0.7754]	4.5+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.089493	vorticity_error: 8.921808	mean_abs_divergence: 0.123416
[DIV2K x2]	rel_l2_error: 0.068816	vorticity_error: 14.575702	mean_abs_divergence: 0.072826
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.055869	vorticity_error: 17.291698	mean_abs_divergence: 0.037926
Forward: 5.97s

Saving...
Total: 6.37s

[Epoch 4]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.1166][DIV: 0.1226][GRAD: 0.2032][VORT: 0.3112][Total: 0.7535]	4.7+7.4s
[1600/8000]	[L1: 0.1223][DIV: 0.1294][GRAD: 0.2163][VORT: 0.3266][Total: 0.7946]	4.5+3.0s
[2400/8000]	[L1: 0.1249][DIV: 0.1323][GRAD: 0.2218][VORT: 0.3368][Total: 0.8158]	4.5+3.0s
[3200/8000]	[L1: 0.1253][DIV: 0.1319][GRAD: 0.2225][VORT: 0.3376][Total: 0.8172]	4.5+3.0s
[4000/8000]	[L1: 0.1240][DIV: 0.1290][GRAD: 0.2181][VORT: 0.3321][Total: 0.8031]	4.5+3.0s
[4800/8000]	[L1: 0.1250][DIV: 0.1283][GRAD: 0.2175][VORT: 0.3308][Total: 0.8016]	4.5+3.0s
[5600/8000]	[L1: 0.1271][DIV: 0.1289][GRAD: 0.2193][VORT: 0.3342][Total: 0.8095]	4.4+3.0s
[6400/8000]	[L1: 0.1267][DIV: 0.1285][GRAD: 0.2190][VORT: 0.3354][Total: 0.8095]	4.5+3.0s
[7200/8000]	[L1: 0.1263][DIV: 0.1280][GRAD: 0.2181][VORT: 0.3341][Total: 0.8066]	4.5+3.0s
[8000/8000]	[L1: 0.1259][DIV: 0.1281][GRAD: 0.2174][VORT: 0.3328][Total: 0.8042]	4.4+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.084975	vorticity_error: 11.668758	mean_abs_divergence: 0.132082
[DIV2K x2]	rel_l2_error: 0.062440	vorticity_error: 13.616108	mean_abs_divergence: 0.076305
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.053378	vorticity_error: 19.353518	mean_abs_divergence: 0.039356
Forward: 5.89s

Saving...
Total: 6.21s

[Epoch 5]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.1186][DIV: 0.1258][GRAD: 0.2114][VORT: 0.3198][Total: 0.7756]	4.6+7.5s
[1600/8000]	[L1: 0.1226][DIV: 0.1262][GRAD: 0.2154][VORT: 0.3267][Total: 0.7909]	4.4+3.1s
[2400/8000]	[L1: 0.1262][DIV: 0.1295][GRAD: 0.2198][VORT: 0.3309][Total: 0.8064]	4.4+3.1s
[3200/8000]	[L1: 0.1245][DIV: 0.1282][GRAD: 0.2177][VORT: 0.3295][Total: 0.7999]	4.4+3.1s
[4000/8000]	[L1: 0.1241][DIV: 0.1261][GRAD: 0.2139][VORT: 0.3247][Total: 0.7890]	4.4+3.1s
[4800/8000]	[L1: 0.1246][DIV: 0.1271][GRAD: 0.2158][VORT: 0.3275][Total: 0.7950]	4.4+3.1s
[5600/8000]	[L1: 0.1240][DIV: 0.1271][GRAD: 0.2147][VORT: 0.3254][Total: 0.7913]	4.5+3.0s
[6400/8000]	[L1: 0.1239][DIV: 0.1278][GRAD: 0.2147][VORT: 0.3237][Total: 0.7901]	4.5+3.0s
[7200/8000]	[L1: 0.1239][DIV: 0.1280][GRAD: 0.2147][VORT: 0.3235][Total: 0.7901]	4.4+3.0s
[8000/8000]	[L1: 0.1222][DIV: 0.1271][GRAD: 0.2128][VORT: 0.3208][Total: 0.7829]	4.4+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.086147	vorticity_error: 3.650218	mean_abs_divergence: 0.130630
[DIV2K x2]	rel_l2_error: 0.067715	vorticity_error: 5.354163	mean_abs_divergence: 0.075211
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.056482	vorticity_error: 5.730867	mean_abs_divergence: 0.037594
Forward: 5.89s

Saving...
Total: 6.23s

[Epoch 6]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.1131][DIV: 0.1236][GRAD: 0.2010][VORT: 0.2987][Total: 0.7364]	4.6+7.5s
[1600/8000]	[L1: 0.1185][DIV: 0.1285][GRAD: 0.2080][VORT: 0.3052][Total: 0.7601]	4.5+3.0s
[2400/8000]	[L1: 0.1152][DIV: 0.1265][GRAD: 0.2028][VORT: 0.2982][Total: 0.7427]	4.4+3.1s
[3200/8000]	[L1: 0.1168][DIV: 0.1258][GRAD: 0.2032][VORT: 0.3009][Total: 0.7467]	4.5+3.0s
[4000/8000]	[L1: 0.1189][DIV: 0.1262][GRAD: 0.2058][VORT: 0.3047][Total: 0.7556]	4.4+3.1s
[4800/8000]	[L1: 0.1186][DIV: 0.1249][GRAD: 0.2048][VORT: 0.3054][Total: 0.7537]	4.5+3.0s
[5600/8000]	[L1: 0.1187][DIV: 0.1250][GRAD: 0.2051][VORT: 0.3064][Total: 0.7553]	4.4+3.1s
[6400/8000]	[L1: 0.1179][DIV: 0.1248][GRAD: 0.2048][VORT: 0.3066][Total: 0.7541]	4.5+3.0s
[7200/8000]	[L1: 0.1186][DIV: 0.1256][GRAD: 0.2068][VORT: 0.3101][Total: 0.7611]	4.4+3.1s
[8000/8000]	[L1: 0.1177][DIV: 0.1251][GRAD: 0.2056][VORT: 0.3080][Total: 0.7564]	4.4+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.093143	vorticity_error: 7.169578	mean_abs_divergence: 0.146438
[DIV2K x2]	rel_l2_error: 0.064287	vorticity_error: 7.112780	mean_abs_divergence: 0.080663
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.052325	vorticity_error: 9.958794	mean_abs_divergence: 0.040093
Forward: 5.80s

Saving...
Total: 6.12s

[Epoch 7]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.1168][DIV: 0.1264][GRAD: 0.2113][VORT: 0.3193][Total: 0.7739]	4.6+7.5s
[1600/8000]	[L1: 0.1228][DIV: 0.1328][GRAD: 0.2193][VORT: 0.3264][Total: 0.8012]	4.4+3.1s
[2400/8000]	[L1: 0.1228][DIV: 0.1314][GRAD: 0.2158][VORT: 0.3177][Total: 0.7876]	4.5+3.0s
[3200/8000]	[L1: 0.1221][DIV: 0.1306][GRAD: 0.2142][VORT: 0.3151][Total: 0.7819]	4.4+3.1s
[4000/8000]	[L1: 0.1201][DIV: 0.1288][GRAD: 0.2112][VORT: 0.3130][Total: 0.7731]	4.4+3.1s
[4800/8000]	[L1: 0.1197][DIV: 0.1281][GRAD: 0.2107][VORT: 0.3132][Total: 0.7717]	4.5+3.0s
[5600/8000]	[L1: 0.1176][DIV: 0.1265][GRAD: 0.2077][VORT: 0.3106][Total: 0.7625]	4.4+3.1s
[6400/8000]	[L1: 0.1170][DIV: 0.1263][GRAD: 0.2077][VORT: 0.3106][Total: 0.7616]	4.5+3.1s
[7200/8000]	[L1: 0.1167][DIV: 0.1264][GRAD: 0.2080][VORT: 0.3113][Total: 0.7625]	4.4+3.0s
[8000/8000]	[L1: 0.1161][DIV: 0.1262][GRAD: 0.2072][VORT: 0.3098][Total: 0.7592]	4.5+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.070811	vorticity_error: 5.187884	mean_abs_divergence: 0.111138
[DIV2K x2]	rel_l2_error: 0.053229	vorticity_error: 11.088824	mean_abs_divergence: 0.059605
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044519	vorticity_error: 17.001886	mean_abs_divergence: 0.030397
[INFO] New best model found with rel_l2_error on final output: 0.044519
Forward: 6.05s

Saving...
Total: 6.45s

[Epoch 8]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.1198][DIV: 0.1338][GRAD: 0.2175][VORT: 0.3178][Total: 0.7889]	4.6+7.7s
[1600/8000]	[L1: 0.1155][DIV: 0.1299][GRAD: 0.2088][VORT: 0.3091][Total: 0.7634]	4.4+3.1s
[2400/8000]	[L1: 0.1177][DIV: 0.1299][GRAD: 0.2108][VORT: 0.3122][Total: 0.7706]	4.5+3.0s
[3200/8000]	[L1: 0.1142][DIV: 0.1258][GRAD: 0.2038][VORT: 0.3031][Total: 0.7470]	4.4+3.1s
[4000/8000]	[L1: 0.1136][DIV: 0.1256][GRAD: 0.2028][VORT: 0.3019][Total: 0.7439]	4.4+3.1s
[4800/8000]	[L1: 0.1138][DIV: 0.1256][GRAD: 0.2027][VORT: 0.3014][Total: 0.7435]	4.4+3.1s
[5600/8000]	[L1: 0.1139][DIV: 0.1258][GRAD: 0.2031][VORT: 0.3017][Total: 0.7444]	4.4+3.0s
[6400/8000]	[L1: 0.1147][DIV: 0.1264][GRAD: 0.2043][VORT: 0.3029][Total: 0.7484]	4.4+3.1s
[7200/8000]	[L1: 0.1151][DIV: 0.1269][GRAD: 0.2053][VORT: 0.3041][Total: 0.7515]	4.5+3.0s
[8000/8000]	[L1: 0.1149][DIV: 0.1270][GRAD: 0.2053][VORT: 0.3044][Total: 0.7516]	4.4+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.069821	vorticity_error: 6.698832	mean_abs_divergence: 0.111690
[DIV2K x2]	rel_l2_error: 0.055525	vorticity_error: 11.841470	mean_abs_divergence: 0.060008
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042174	vorticity_error: 21.980850	mean_abs_divergence: 0.030293
[INFO] New best model found with rel_l2_error on final output: 0.042174
Forward: 5.98s

Saving...
Total: 6.37s

[Epoch 9]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.1137][DIV: 0.1308][GRAD: 0.2072][VORT: 0.3036][Total: 0.7552]	4.7+7.5s
[1600/8000]	[L1: 0.1137][DIV: 0.1315][GRAD: 0.2081][VORT: 0.3041][Total: 0.7574]	4.5+3.0s
[2400/8000]	[L1: 0.1151][DIV: 0.1310][GRAD: 0.2091][VORT: 0.3090][Total: 0.7643]	4.4+3.0s
[3200/8000]	[L1: 0.1143][DIV: 0.1318][GRAD: 0.2089][VORT: 0.3070][Total: 0.7620]	4.5+3.0s
[4000/8000]	[L1: 0.1130][DIV: 0.1313][GRAD: 0.2074][VORT: 0.3052][Total: 0.7569]	4.5+3.0s
[4800/8000]	[L1: 0.1118][DIV: 0.1305][GRAD: 0.2057][VORT: 0.3028][Total: 0.7508]	4.5+3.0s
[5600/8000]	[L1: 0.1125][DIV: 0.1303][GRAD: 0.2060][VORT: 0.3033][Total: 0.7521]	4.4+3.0s
[6400/8000]	[L1: 0.1124][DIV: 0.1297][GRAD: 0.2054][VORT: 0.3026][Total: 0.7500]	4.5+3.0s
[7200/8000]	[L1: 0.1126][DIV: 0.1296][GRAD: 0.2051][VORT: 0.3023][Total: 0.7496]	4.5+3.0s
[8000/8000]	[L1: 0.1133][DIV: 0.1302][GRAD: 0.2068][VORT: 0.3050][Total: 0.7552]	4.5+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.088347	vorticity_error: 5.006666	mean_abs_divergence: 0.137635
[DIV2K x2]	rel_l2_error: 0.068961	vorticity_error: 9.231380	mean_abs_divergence: 0.075402
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.053228	vorticity_error: 19.865482	mean_abs_divergence: 0.038179
Forward: 5.90s

Saving...
Total: 6.24s

[Epoch 10]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.1176][DIV: 0.1269][GRAD: 0.2094][VORT: 0.3227][Total: 0.7767]	4.6+7.6s
[1600/8000]	[L1: 0.1155][DIV: 0.1305][GRAD: 0.2107][VORT: 0.3151][Total: 0.7718]	4.5+3.0s
[2400/8000]	[L1: 0.1163][DIV: 0.1320][GRAD: 0.2128][VORT: 0.3155][Total: 0.7765]	4.5+3.0s
[3200/8000]	[L1: 0.1162][DIV: 0.1306][GRAD: 0.2114][VORT: 0.3147][Total: 0.7729]	4.5+3.0s
[4000/8000]	[L1: 0.1150][DIV: 0.1298][GRAD: 0.2097][VORT: 0.3123][Total: 0.7668]	4.5+3.0s
[4800/8000]	[L1: 0.1139][DIV: 0.1292][GRAD: 0.2076][VORT: 0.3071][Total: 0.7578]	4.4+3.1s
[5600/8000]	[L1: 0.1135][DIV: 0.1295][GRAD: 0.2073][VORT: 0.3048][Total: 0.7552]	4.5+3.0s
[6400/8000]	[L1: 0.1131][DIV: 0.1295][GRAD: 0.2067][VORT: 0.3038][Total: 0.7531]	4.4+3.0s
[7200/8000]	[L1: 0.1124][DIV: 0.1289][GRAD: 0.2056][VORT: 0.3019][Total: 0.7487]	4.5+3.0s
[8000/8000]	[L1: 0.1118][DIV: 0.1283][GRAD: 0.2044][VORT: 0.3010][Total: 0.7455]	4.4+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.075475	vorticity_error: 1.107538	mean_abs_divergence: 0.114009
[DIV2K x2]	rel_l2_error: 0.055028	vorticity_error: 2.423452	mean_abs_divergence: 0.062829
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.040945	vorticity_error: 3.964728	mean_abs_divergence: 0.031231
[INFO] New best model found with rel_l2_error on final output: 0.040945
Forward: 5.95s

Saving...
Total: 6.29s

[Epoch 11]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.1150][DIV: 0.1323][GRAD: 0.2088][VORT: 0.3021][Total: 0.7582]	4.6+7.5s
[1600/8000]	[L1: 0.1112][DIV: 0.1279][GRAD: 0.2045][VORT: 0.3014][Total: 0.7450]	4.5+3.0s
[2400/8000]	[L1: 0.1090][DIV: 0.1275][GRAD: 0.2004][VORT: 0.2943][Total: 0.7313]	4.4+3.1s
[3200/8000]	[L1: 0.1109][DIV: 0.1307][GRAD: 0.2052][VORT: 0.3004][Total: 0.7471]	4.5+3.0s
[4000/8000]	[L1: 0.1110][DIV: 0.1312][GRAD: 0.2061][VORT: 0.3012][Total: 0.7495]	4.4+3.0s
[4800/8000]	[L1: 0.1106][DIV: 0.1309][GRAD: 0.2050][VORT: 0.3004][Total: 0.7468]	4.5+3.0s
[5600/8000]	[L1: 0.1091][DIV: 0.1285][GRAD: 0.2009][VORT: 0.2949][Total: 0.7334]	4.4+3.0s
[6400/8000]	[L1: 0.1099][DIV: 0.1300][GRAD: 0.2028][VORT: 0.2967][Total: 0.7395]	4.5+3.0s
[7200/8000]	[L1: 0.1103][DIV: 0.1302][GRAD: 0.2034][VORT: 0.2973][Total: 0.7412]	4.5+3.0s
[8000/8000]	[L1: 0.1104][DIV: 0.1301][GRAD: 0.2031][VORT: 0.2969][Total: 0.7405]	4.6+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.061974	vorticity_error: 1.651936	mean_abs_divergence: 0.098339
[DIV2K x2]	rel_l2_error: 0.047168	vorticity_error: 6.422765	mean_abs_divergence: 0.054842
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.041928	vorticity_error: 11.421980	mean_abs_divergence: 0.027813
Forward: 6.33s

Saving...
Total: 6.74s

[Epoch 12]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.1118][DIV: 0.1304][GRAD: 0.2021][VORT: 0.2970][Total: 0.7412]	4.9+8.1s
[1600/8000]	[L1: 0.1094][DIV: 0.1262][GRAD: 0.1987][VORT: 0.2986][Total: 0.7329]	4.7+2.9s
[2400/8000]	[L1: 0.1110][DIV: 0.1294][GRAD: 0.2039][VORT: 0.3047][Total: 0.7489]	4.6+2.9s
[3200/8000]	[L1: 0.1132][DIV: 0.1319][GRAD: 0.2064][VORT: 0.3033][Total: 0.7549]	4.7+2.9s
[4000/8000]	[L1: 0.1117][DIV: 0.1312][GRAD: 0.2046][VORT: 0.2994][Total: 0.7469]	4.6+2.9s
[4800/8000]	[L1: 0.1117][DIV: 0.1308][GRAD: 0.2041][VORT: 0.2983][Total: 0.7449]	4.4+3.0s
[5600/8000]	[L1: 0.1118][DIV: 0.1308][GRAD: 0.2039][VORT: 0.2979][Total: 0.7444]	4.4+3.0s
[6400/8000]	[L1: 0.1113][DIV: 0.1306][GRAD: 0.2038][VORT: 0.2982][Total: 0.7439]	4.5+3.0s
[7200/8000]	[L1: 0.1108][DIV: 0.1302][GRAD: 0.2023][VORT: 0.2952][Total: 0.7385]	4.4+3.0s
[8000/8000]	[L1: 0.1103][DIV: 0.1301][GRAD: 0.2018][VORT: 0.2938][Total: 0.7360]	4.4+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.073758	vorticity_error: 9.785729	mean_abs_divergence: 0.122776
[DIV2K x2]	rel_l2_error: 0.061980	vorticity_error: 4.598001	mean_abs_divergence: 0.067720
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045217	vorticity_error: 14.591282	mean_abs_divergence: 0.033458
Forward: 6.00s

Saving...
Total: 6.38s

[Epoch 13]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.1084][DIV: 0.1294][GRAD: 0.2019][VORT: 0.2955][Total: 0.7353]	4.6+7.5s
[1600/8000]	[L1: 0.1058][DIV: 0.1267][GRAD: 0.1968][VORT: 0.2872][Total: 0.7165]	4.4+3.0s
[2400/8000]	[L1: 0.1063][DIV: 0.1280][GRAD: 0.1980][VORT: 0.2881][Total: 0.7204]	4.4+3.0s
[3200/8000]	[L1: 0.1065][DIV: 0.1272][GRAD: 0.1970][VORT: 0.2848][Total: 0.7156]	4.4+3.1s
[4000/8000]	[L1: 0.1060][DIV: 0.1273][GRAD: 0.1961][VORT: 0.2850][Total: 0.7144]	4.4+3.0s
[4800/8000]	[L1: 0.1057][DIV: 0.1270][GRAD: 0.1956][VORT: 0.2845][Total: 0.7127]	4.4+3.1s
[5600/8000]	[L1: 0.1072][DIV: 0.1296][GRAD: 0.1989][VORT: 0.2868][Total: 0.7225]	4.4+3.0s
[6400/8000]	[L1: 0.1075][DIV: 0.1306][GRAD: 0.1999][VORT: 0.2880][Total: 0.7260]	4.4+3.1s
[7200/8000]	[L1: 0.1083][DIV: 0.1315][GRAD: 0.2015][VORT: 0.2906][Total: 0.7319]	4.5+3.0s
[8000/8000]	[L1: 0.1071][DIV: 0.1304][GRAD: 0.1994][VORT: 0.2875][Total: 0.7244]	4.4+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.088135	vorticity_error: 3.825710	mean_abs_divergence: 0.129634
[DIV2K x2]	rel_l2_error: 0.067612	vorticity_error: 7.423181	mean_abs_divergence: 0.071552
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.055017	vorticity_error: 15.884502	mean_abs_divergence: 0.036254
Forward: 6.06s

Saving...
Total: 6.39s

[Epoch 14]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.1063][DIV: 0.1257][GRAD: 0.1936][VORT: 0.2837][Total: 0.7093]	4.6+7.4s
[1600/8000]	[L1: 0.1085][DIV: 0.1294][GRAD: 0.1988][VORT: 0.2875][Total: 0.7242]	4.4+3.0s
[2400/8000]	[L1: 0.1108][DIV: 0.1340][GRAD: 0.2048][VORT: 0.2932][Total: 0.7428]	4.4+3.0s
[3200/8000]	[L1: 0.1135][DIV: 0.1374][GRAD: 0.2107][VORT: 0.3007][Total: 0.7623]	4.5+3.0s
[4000/8000]	[L1: 0.1117][DIV: 0.1349][GRAD: 0.2072][VORT: 0.2958][Total: 0.7497]	4.4+3.0s
[4800/8000]	[L1: 0.1098][DIV: 0.1327][GRAD: 0.2037][VORT: 0.2918][Total: 0.7380]	4.5+3.0s
[5600/8000]	[L1: 0.1094][DIV: 0.1323][GRAD: 0.2032][VORT: 0.2915][Total: 0.7363]	4.4+3.0s
[6400/8000]	[L1: 0.1098][DIV: 0.1334][GRAD: 0.2043][VORT: 0.2921][Total: 0.7395]	4.4+3.0s
[7200/8000]	[L1: 0.1097][DIV: 0.1330][GRAD: 0.2042][VORT: 0.2919][Total: 0.7387]	4.4+3.1s
[8000/8000]	[L1: 0.1094][DIV: 0.1330][GRAD: 0.2036][VORT: 0.2907][Total: 0.7367]	4.5+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.075708	vorticity_error: 3.293561	mean_abs_divergence: 0.101337
[DIV2K x2]	rel_l2_error: 0.057249	vorticity_error: 15.615059	mean_abs_divergence: 0.052829
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.052764	vorticity_error: 20.868563	mean_abs_divergence: 0.025267
Forward: 5.99s

Saving...
Total: 6.31s

[Epoch 15]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.1056][DIV: 0.1298][GRAD: 0.1972][VORT: 0.2786][Total: 0.7112]	4.6+7.4s
[1600/8000]	[L1: 0.1052][DIV: 0.1271][GRAD: 0.1935][VORT: 0.2765][Total: 0.7023]	4.4+3.0s
[2400/8000]	[L1: 0.1088][DIV: 0.1324][GRAD: 0.2024][VORT: 0.2856][Total: 0.7293]	4.4+3.1s
[3200/8000]	[L1: 0.1096][DIV: 0.1340][GRAD: 0.2047][VORT: 0.2882][Total: 0.7366]	4.4+3.0s
[4000/8000]	[L1: 0.1097][DIV: 0.1338][GRAD: 0.2051][VORT: 0.2894][Total: 0.7380]	4.4+3.1s
[4800/8000]	[L1: 0.1089][DIV: 0.1331][GRAD: 0.2040][VORT: 0.2889][Total: 0.7349]	4.4+3.1s
[5600/8000]	[L1: 0.1068][DIV: 0.1313][GRAD: 0.2002][VORT: 0.2843][Total: 0.7226]	4.4+3.0s
[6400/8000]	[L1: 0.1061][DIV: 0.1306][GRAD: 0.1991][VORT: 0.2830][Total: 0.7188]	4.4+3.0s
[7200/8000]	[L1: 0.1066][DIV: 0.1313][GRAD: 0.2003][VORT: 0.2844][Total: 0.7225]	4.4+3.0s
[8000/8000]	[L1: 0.1068][DIV: 0.1316][GRAD: 0.2010][VORT: 0.2856][Total: 0.7250]	4.4+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.066024	vorticity_error: 5.916844	mean_abs_divergence: 0.097831
[DIV2K x2]	rel_l2_error: 0.054800	vorticity_error: 1.985260	mean_abs_divergence: 0.051930
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042734	vorticity_error: 7.540852	mean_abs_divergence: 0.024978
Forward: 5.98s

Saving...
Total: 6.30s

[Epoch 16]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.1013][DIV: 0.1264][GRAD: 0.1887][VORT: 0.2590][Total: 0.6753]	4.6+7.5s
[1600/8000]	[L1: 0.1084][DIV: 0.1330][GRAD: 0.2012][VORT: 0.2776][Total: 0.7203]	4.5+3.0s
[2400/8000]	[L1: 0.1045][DIV: 0.1289][GRAD: 0.1947][VORT: 0.2714][Total: 0.6995]	4.4+3.0s
[3200/8000]	[L1: 0.1048][DIV: 0.1293][GRAD: 0.1951][VORT: 0.2725][Total: 0.7017]	4.4+3.0s
[4000/8000]	[L1: 0.1051][DIV: 0.1298][GRAD: 0.1961][VORT: 0.2774][Total: 0.7084]	4.4+3.0s
[4800/8000]	[L1: 0.1053][DIV: 0.1306][GRAD: 0.1970][VORT: 0.2784][Total: 0.7113]	4.4+3.0s
[5600/8000]	[L1: 0.1062][DIV: 0.1315][GRAD: 0.1989][VORT: 0.2806][Total: 0.7173]	4.4+3.0s
[6400/8000]	[L1: 0.1064][DIV: 0.1312][GRAD: 0.1983][VORT: 0.2796][Total: 0.7155]	4.4+3.0s
[7200/8000]	[L1: 0.1072][DIV: 0.1321][GRAD: 0.1996][VORT: 0.2817][Total: 0.7206]	4.5+3.0s
[8000/8000]	[L1: 0.1063][DIV: 0.1316][GRAD: 0.1986][VORT: 0.2806][Total: 0.7171]	4.4+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.068212	vorticity_error: 1.134822	mean_abs_divergence: 0.102050
[DIV2K x2]	rel_l2_error: 0.056251	vorticity_error: 1.697863	mean_abs_divergence: 0.059091
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.041344	vorticity_error: 6.649146	mean_abs_divergence: 0.029998
Forward: 6.05s

Saving...
Total: 6.43s

[Epoch 17]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0948][DIV: 0.1178][GRAD: 0.1754][VORT: 0.2531][Total: 0.6411]	4.6+7.5s
[1600/8000]	[L1: 0.1009][DIV: 0.1256][GRAD: 0.1886][VORT: 0.2688][Total: 0.6840]	4.4+3.1s
[2400/8000]	[L1: 0.0997][DIV: 0.1239][GRAD: 0.1860][VORT: 0.2649][Total: 0.6745]	4.4+3.1s
[3200/8000]	[L1: 0.1008][DIV: 0.1262][GRAD: 0.1892][VORT: 0.2705][Total: 0.6867]	4.4+3.0s
[4000/8000]	[L1: 0.1028][DIV: 0.1290][GRAD: 0.1938][VORT: 0.2754][Total: 0.7009]	4.4+3.1s
[4800/8000]	[L1: 0.1035][DIV: 0.1291][GRAD: 0.1944][VORT: 0.2756][Total: 0.7026]	4.4+3.0s
[5600/8000]	[L1: 0.1036][DIV: 0.1291][GRAD: 0.1944][VORT: 0.2745][Total: 0.7016]	4.4+3.1s
[6400/8000]	[L1: 0.1035][DIV: 0.1289][GRAD: 0.1944][VORT: 0.2748][Total: 0.7017]	4.4+3.0s
[7200/8000]	[L1: 0.1033][DIV: 0.1290][GRAD: 0.1946][VORT: 0.2756][Total: 0.7025]	4.4+3.1s
[8000/8000]	[L1: 0.1040][DIV: 0.1295][GRAD: 0.1957][VORT: 0.2769][Total: 0.7061]	4.4+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.078062	vorticity_error: 1.875283	mean_abs_divergence: 0.131244
[DIV2K x2]	rel_l2_error: 0.063761	vorticity_error: 2.525409	mean_abs_divergence: 0.070900
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.051299	vorticity_error: 7.540257	mean_abs_divergence: 0.034546
Forward: 5.90s

Saving...
Total: 6.23s

[Epoch 18]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.1059][DIV: 0.1314][GRAD: 0.1984][VORT: 0.2855][Total: 0.7211]	4.6+7.4s
[1600/8000]	[L1: 0.1040][DIV: 0.1307][GRAD: 0.1972][VORT: 0.2823][Total: 0.7142]	4.4+3.1s
[2400/8000]	[L1: 0.1065][DIV: 0.1327][GRAD: 0.2017][VORT: 0.2878][Total: 0.7287]	4.4+3.0s
[3200/8000]	[L1: 0.1069][DIV: 0.1333][GRAD: 0.2021][VORT: 0.2884][Total: 0.7306]	4.4+3.1s
[4000/8000]	[L1: 0.1044][DIV: 0.1308][GRAD: 0.1974][VORT: 0.2818][Total: 0.7144]	4.4+3.0s
[4800/8000]	[L1: 0.1046][DIV: 0.1309][GRAD: 0.1976][VORT: 0.2824][Total: 0.7156]	4.4+3.1s
[5600/8000]	[L1: 0.1049][DIV: 0.1313][GRAD: 0.1985][VORT: 0.2837][Total: 0.7184]	4.4+3.0s
[6400/8000]	[L1: 0.1039][DIV: 0.1306][GRAD: 0.1964][VORT: 0.2802][Total: 0.7111]	4.6+2.9s
[7200/8000]	[L1: 0.1035][DIV: 0.1302][GRAD: 0.1960][VORT: 0.2793][Total: 0.7090]	4.5+3.0s
[8000/8000]	[L1: 0.1041][DIV: 0.1311][GRAD: 0.1973][VORT: 0.2809][Total: 0.7134]	4.4+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.094527	vorticity_error: 3.364025	mean_abs_divergence: 0.135312
[DIV2K x2]	rel_l2_error: 0.070683	vorticity_error: 2.378341	mean_abs_divergence: 0.073752
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.054617	vorticity_error: 6.270261	mean_abs_divergence: 0.036973
Forward: 5.96s

Saving...
Total: 6.28s

[Epoch 19]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.1076][DIV: 0.1356][GRAD: 0.2061][VORT: 0.2856][Total: 0.7348]	4.6+7.6s
[1600/8000]	[L1: 0.1073][DIV: 0.1353][GRAD: 0.2030][VORT: 0.2811][Total: 0.7267]	4.4+3.0s
[2400/8000]	[L1: 0.1022][DIV: 0.1297][GRAD: 0.1940][VORT: 0.2730][Total: 0.6989]	4.4+3.0s
[3200/8000]	[L1: 0.1032][DIV: 0.1318][GRAD: 0.1962][VORT: 0.2739][Total: 0.7052]	4.5+3.0s
[4000/8000]	[L1: 0.1016][DIV: 0.1287][GRAD: 0.1923][VORT: 0.2713][Total: 0.6939]	4.4+3.0s
[4800/8000]	[L1: 0.1015][DIV: 0.1287][GRAD: 0.1924][VORT: 0.2718][Total: 0.6944]	4.5+3.0s
[5600/8000]	[L1: 0.1013][DIV: 0.1287][GRAD: 0.1921][VORT: 0.2716][Total: 0.6937]	4.4+3.0s
[6400/8000]	[L1: 0.1014][DIV: 0.1290][GRAD: 0.1920][VORT: 0.2709][Total: 0.6933]	4.5+3.0s
[7200/8000]	[L1: 0.1013][DIV: 0.1286][GRAD: 0.1916][VORT: 0.2710][Total: 0.6925]	4.5+3.0s
[8000/8000]	[L1: 0.1017][DIV: 0.1290][GRAD: 0.1926][VORT: 0.2731][Total: 0.6963]	4.4+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.068625	vorticity_error: 1.659070	mean_abs_divergence: 0.108488
[DIV2K x2]	rel_l2_error: 0.060013	vorticity_error: 2.778855	mean_abs_divergence: 0.059304
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045210	vorticity_error: 9.282269	mean_abs_divergence: 0.029136
Forward: 5.97s

Saving...
Total: 6.29s

[Epoch 20]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0957][DIV: 0.1217][GRAD: 0.1813][VORT: 0.2553][Total: 0.6540]	4.6+7.5s
[1600/8000]	[L1: 0.0932][DIV: 0.1196][GRAD: 0.1772][VORT: 0.2510][Total: 0.6409]	4.4+3.0s
[2400/8000]	[L1: 0.0940][DIV: 0.1217][GRAD: 0.1789][VORT: 0.2519][Total: 0.6465]	4.5+3.0s
[3200/8000]	[L1: 0.0944][DIV: 0.1226][GRAD: 0.1797][VORT: 0.2530][Total: 0.6497]	4.5+3.0s
[4000/8000]	[L1: 0.0964][DIV: 0.1245][GRAD: 0.1835][VORT: 0.2602][Total: 0.6646]	4.5+3.0s
[4800/8000]	[L1: 0.0971][DIV: 0.1254][GRAD: 0.1850][VORT: 0.2622][Total: 0.6696]	4.5+3.0s
[5600/8000]	[L1: 0.0987][DIV: 0.1265][GRAD: 0.1874][VORT: 0.2644][Total: 0.6770]	4.5+3.0s
[6400/8000]	[L1: 0.0987][DIV: 0.1263][GRAD: 0.1867][VORT: 0.2638][Total: 0.6755]	4.5+3.0s
[7200/8000]	[L1: 0.0997][DIV: 0.1278][GRAD: 0.1890][VORT: 0.2670][Total: 0.6834]	4.4+3.0s
[8000/8000]	[L1: 0.1008][DIV: 0.1289][GRAD: 0.1914][VORT: 0.2698][Total: 0.6909]	4.4+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.088426	vorticity_error: 0.970503	mean_abs_divergence: 0.133962
[DIV2K x2]	rel_l2_error: 0.069668	vorticity_error: 1.317967	mean_abs_divergence: 0.076847
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.049930	vorticity_error: 1.346829	mean_abs_divergence: 0.038164
Forward: 5.97s

Saving...
Total: 6.29s

[Epoch 21]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.1008][DIV: 0.1278][GRAD: 0.1918][VORT: 0.2770][Total: 0.6975]	4.6+7.4s
[1600/8000]	[L1: 0.1020][DIV: 0.1292][GRAD: 0.1927][VORT: 0.2739][Total: 0.6978]	4.5+3.0s
[2400/8000]	[L1: 0.1009][DIV: 0.1277][GRAD: 0.1916][VORT: 0.2748][Total: 0.6950]	4.5+3.0s
[3200/8000]	[L1: 0.1005][DIV: 0.1281][GRAD: 0.1917][VORT: 0.2747][Total: 0.6950]	4.4+3.1s
[4000/8000]	[L1: 0.0999][DIV: 0.1270][GRAD: 0.1904][VORT: 0.2721][Total: 0.6894]	4.4+3.0s
[4800/8000]	[L1: 0.0993][DIV: 0.1267][GRAD: 0.1896][VORT: 0.2708][Total: 0.6864]	4.4+3.0s
[5600/8000]	[L1: 0.0995][DIV: 0.1275][GRAD: 0.1901][VORT: 0.2711][Total: 0.6882]	4.4+3.0s
[6400/8000]	[L1: 0.0994][DIV: 0.1274][GRAD: 0.1896][VORT: 0.2706][Total: 0.6870]	4.4+3.0s
[7200/8000]	[L1: 0.0997][DIV: 0.1278][GRAD: 0.1898][VORT: 0.2703][Total: 0.6876]	4.4+3.0s
[8000/8000]	[L1: 0.0993][DIV: 0.1271][GRAD: 0.1890][VORT: 0.2694][Total: 0.6848]	4.4+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.086841	vorticity_error: 1.221152	mean_abs_divergence: 0.145109
[DIV2K x2]	rel_l2_error: 0.068150	vorticity_error: 1.507320	mean_abs_divergence: 0.079742
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.047389	vorticity_error: 4.949373	mean_abs_divergence: 0.039652
Forward: 5.95s

Saving...
Total: 6.33s

[Epoch 22]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.1024][DIV: 0.1335][GRAD: 0.1967][VORT: 0.2735][Total: 0.7061]	4.6+7.5s
[1600/8000]	[L1: 0.1016][DIV: 0.1347][GRAD: 0.1964][VORT: 0.2743][Total: 0.7070]	4.4+3.0s
[2400/8000]	[L1: 0.1023][DIV: 0.1337][GRAD: 0.1964][VORT: 0.2749][Total: 0.7072]	4.4+3.1s
[3200/8000]	[L1: 0.1009][DIV: 0.1313][GRAD: 0.1928][VORT: 0.2700][Total: 0.6950]	4.4+3.1s
[4000/8000]	[L1: 0.1029][DIV: 0.1335][GRAD: 0.1960][VORT: 0.2740][Total: 0.7064]	4.4+3.1s
[4800/8000]	[L1: 0.1028][DIV: 0.1336][GRAD: 0.1962][VORT: 0.2753][Total: 0.7078]	4.4+3.0s
[5600/8000]	[L1: 0.1023][DIV: 0.1333][GRAD: 0.1953][VORT: 0.2733][Total: 0.7041]	4.5+3.0s
[6400/8000]	[L1: 0.1027][DIV: 0.1338][GRAD: 0.1961][VORT: 0.2738][Total: 0.7063]	4.4+3.0s
[7200/8000]	[L1: 0.1029][DIV: 0.1339][GRAD: 0.1965][VORT: 0.2732][Total: 0.7066]	4.4+3.1s
[8000/8000]	[L1: 0.1027][DIV: 0.1334][GRAD: 0.1959][VORT: 0.2734][Total: 0.7054]	4.5+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.060078	vorticity_error: 0.836054	mean_abs_divergence: 0.090425
[DIV2K x2]	rel_l2_error: 0.045075	vorticity_error: 1.212488	mean_abs_divergence: 0.047362
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.036150	vorticity_error: 3.633848	mean_abs_divergence: 0.022056
[INFO] New best model found with rel_l2_error on final output: 0.036150
Forward: 5.95s

Saving...
Total: 6.29s

[Epoch 23]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.1047][DIV: 0.1353][GRAD: 0.2028][VORT: 0.2883][Total: 0.7311]	4.6+7.4s
[1600/8000]	[L1: 0.1034][DIV: 0.1341][GRAD: 0.1977][VORT: 0.2790][Total: 0.7143]	4.4+3.0s
[2400/8000]	[L1: 0.1027][DIV: 0.1325][GRAD: 0.1954][VORT: 0.2746][Total: 0.7052]	4.4+3.0s
[3200/8000]	[L1: 0.1027][DIV: 0.1319][GRAD: 0.1954][VORT: 0.2750][Total: 0.7051]	4.4+3.0s
[4000/8000]	[L1: 0.1025][DIV: 0.1324][GRAD: 0.1958][VORT: 0.2759][Total: 0.7067]	4.5+3.0s
[4800/8000]	[L1: 0.1010][DIV: 0.1303][GRAD: 0.1932][VORT: 0.2729][Total: 0.6974]	4.4+3.0s
[5600/8000]	[L1: 0.1019][DIV: 0.1312][GRAD: 0.1943][VORT: 0.2733][Total: 0.7007]	4.4+3.0s
[6400/8000]	[L1: 0.1030][DIV: 0.1325][GRAD: 0.1965][VORT: 0.2766][Total: 0.7087]	4.5+3.0s
[7200/8000]	[L1: 0.1028][DIV: 0.1321][GRAD: 0.1963][VORT: 0.2766][Total: 0.7077]	4.4+3.0s
[8000/8000]	[L1: 0.1034][DIV: 0.1333][GRAD: 0.1981][VORT: 0.2786][Total: 0.7134]	4.4+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.074533	vorticity_error: 1.207868	mean_abs_divergence: 0.115572
[DIV2K x2]	rel_l2_error: 0.057050	vorticity_error: 1.711457	mean_abs_divergence: 0.063397
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.041314	vorticity_error: 5.471220	mean_abs_divergence: 0.032254
Forward: 5.85s

Saving...
Total: 6.15s

[Epoch 24]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.1072][DIV: 0.1403][GRAD: 0.2068][VORT: 0.2878][Total: 0.7421]	4.6+7.6s
[1600/8000]	[L1: 0.1025][DIV: 0.1330][GRAD: 0.1970][VORT: 0.2784][Total: 0.7108]	4.4+3.0s
[2400/8000]	[L1: 0.1044][DIV: 0.1360][GRAD: 0.2005][VORT: 0.2794][Total: 0.7203]	4.4+3.0s
[3200/8000]	[L1: 0.1038][DIV: 0.1352][GRAD: 0.1994][VORT: 0.2784][Total: 0.7168]	4.4+3.0s
[4000/8000]	[L1: 0.1034][DIV: 0.1341][GRAD: 0.1982][VORT: 0.2765][Total: 0.7122]	4.5+3.0s
[4800/8000]	[L1: 0.1035][DIV: 0.1342][GRAD: 0.1988][VORT: 0.2785][Total: 0.7150]	4.5+3.0s
[5600/8000]	[L1: 0.1028][DIV: 0.1336][GRAD: 0.1979][VORT: 0.2776][Total: 0.7120]	4.5+3.0s
[6400/8000]	[L1: 0.1028][DIV: 0.1335][GRAD: 0.1980][VORT: 0.2785][Total: 0.7129]	4.4+3.0s
[7200/8000]	[L1: 0.1028][DIV: 0.1335][GRAD: 0.1980][VORT: 0.2787][Total: 0.7130]	4.5+3.0s
[8000/8000]	[L1: 0.1032][DIV: 0.1336][GRAD: 0.1983][VORT: 0.2783][Total: 0.7134]	4.4+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.089040	vorticity_error: 6.001676	mean_abs_divergence: 0.124074
[DIV2K x2]	rel_l2_error: 0.070296	vorticity_error: 1.752439	mean_abs_divergence: 0.066350
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.051436	vorticity_error: 6.889057	mean_abs_divergence: 0.032876
Forward: 6.02s

Saving...
Total: 6.33s

[Epoch 25]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.1072][DIV: 0.1395][GRAD: 0.2021][VORT: 0.2806][Total: 0.7294]	4.6+7.4s
[1600/8000]	[L1: 0.1054][DIV: 0.1375][GRAD: 0.2006][VORT: 0.2788][Total: 0.7223]	4.4+3.1s
[2400/8000]	[L1: 0.1002][DIV: 0.1313][GRAD: 0.1911][VORT: 0.2671][Total: 0.6897]	4.4+3.1s
[3200/8000]	[L1: 0.1011][DIV: 0.1322][GRAD: 0.1933][VORT: 0.2719][Total: 0.6986]	4.5+3.0s
[4000/8000]	[L1: 0.1011][DIV: 0.1323][GRAD: 0.1938][VORT: 0.2710][Total: 0.6983]	4.4+3.1s
[4800/8000]	[L1: 0.1009][DIV: 0.1320][GRAD: 0.1932][VORT: 0.2708][Total: 0.6969]	4.4+3.1s
[5600/8000]	[L1: 0.1006][DIV: 0.1312][GRAD: 0.1924][VORT: 0.2696][Total: 0.6939]	4.4+3.1s
[6400/8000]	[L1: 0.1012][DIV: 0.1317][GRAD: 0.1933][VORT: 0.2709][Total: 0.6971]	4.4+3.1s
[7200/8000]	[L1: 0.1008][DIV: 0.1313][GRAD: 0.1926][VORT: 0.2700][Total: 0.6946]	4.4+3.1s
[8000/8000]	[L1: 0.1007][DIV: 0.1308][GRAD: 0.1919][VORT: 0.2697][Total: 0.6931]	4.4+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.075785	vorticity_error: 2.291556	mean_abs_divergence: 0.117553
[DIV2K x2]	rel_l2_error: 0.058867	vorticity_error: 1.628152	mean_abs_divergence: 0.064253
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.039493	vorticity_error: 5.892267	mean_abs_divergence: 0.031041
Forward: 5.97s

Saving...
Total: 6.27s

[Epoch 26]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0979][DIV: 0.1269][GRAD: 0.1843][VORT: 0.2547][Total: 0.6638]	4.7+7.4s
[1600/8000]	[L1: 0.0986][DIV: 0.1304][GRAD: 0.1882][VORT: 0.2594][Total: 0.6766]	4.4+3.0s
[2400/8000]	[L1: 0.1027][DIV: 0.1349][GRAD: 0.1967][VORT: 0.2727][Total: 0.7071]	4.5+3.0s
[3200/8000]	[L1: 0.1026][DIV: 0.1345][GRAD: 0.1970][VORT: 0.2743][Total: 0.7084]	4.5+3.0s
[4000/8000]	[L1: 0.1012][DIV: 0.1324][GRAD: 0.1941][VORT: 0.2711][Total: 0.6988]	4.5+3.0s
[4800/8000]	[L1: 0.1003][DIV: 0.1310][GRAD: 0.1921][VORT: 0.2686][Total: 0.6921]	4.4+3.0s
[5600/8000]	[L1: 0.0988][DIV: 0.1294][GRAD: 0.1894][VORT: 0.2649][Total: 0.6824]	4.5+3.0s
[6400/8000]	[L1: 0.0990][DIV: 0.1295][GRAD: 0.1901][VORT: 0.2662][Total: 0.6848]	4.4+3.0s
[7200/8000]	[L1: 0.1002][DIV: 0.1309][GRAD: 0.1925][VORT: 0.2692][Total: 0.6928]	4.4+3.0s
[8000/8000]	[L1: 0.1001][DIV: 0.1307][GRAD: 0.1923][VORT: 0.2690][Total: 0.6920]	4.4+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.064806	vorticity_error: 1.071913	mean_abs_divergence: 0.100651
[DIV2K x2]	rel_l2_error: 0.051119	vorticity_error: 1.650162	mean_abs_divergence: 0.058408
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.038635	vorticity_error: 5.125185	mean_abs_divergence: 0.030187
Forward: 6.02s

Saving...
Total: 6.33s

[Epoch 27]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0982][DIV: 0.1266][GRAD: 0.1885][VORT: 0.2651][Total: 0.6784]	4.6+7.6s
[1600/8000]	[L1: 0.0952][DIV: 0.1248][GRAD: 0.1837][VORT: 0.2610][Total: 0.6646]	4.4+3.0s
[2400/8000]	[L1: 0.0929][DIV: 0.1217][GRAD: 0.1785][VORT: 0.2499][Total: 0.6430]	4.4+3.0s
[3200/8000]	[L1: 0.0941][DIV: 0.1233][GRAD: 0.1809][VORT: 0.2541][Total: 0.6526]	4.4+3.0s
[4000/8000]	[L1: 0.0943][DIV: 0.1238][GRAD: 0.1813][VORT: 0.2547][Total: 0.6541]	4.4+3.1s
[4800/8000]	[L1: 0.0959][DIV: 0.1261][GRAD: 0.1849][VORT: 0.2588][Total: 0.6657]	4.4+3.1s
[5600/8000]	[L1: 0.0960][DIV: 0.1261][GRAD: 0.1850][VORT: 0.2594][Total: 0.6664]	4.4+3.0s
[6400/8000]	[L1: 0.0971][DIV: 0.1276][GRAD: 0.1872][VORT: 0.2620][Total: 0.6739]	4.4+3.1s
[7200/8000]	[L1: 0.0981][DIV: 0.1292][GRAD: 0.1892][VORT: 0.2645][Total: 0.6811]	4.5+3.0s
[8000/8000]	[L1: 0.0982][DIV: 0.1291][GRAD: 0.1893][VORT: 0.2646][Total: 0.6812]	4.4+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.076203	vorticity_error: 0.784471	mean_abs_divergence: 0.116036
[DIV2K x2]	rel_l2_error: 0.052956	vorticity_error: 0.839864	mean_abs_divergence: 0.061162
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.041000	vorticity_error: 1.480418	mean_abs_divergence: 0.029914
Forward: 6.06s

Saving...
Total: 6.42s

[Epoch 28]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.1013][DIV: 0.1314][GRAD: 0.1980][VORT: 0.2821][Total: 0.7129]	4.6+7.5s
[1600/8000]	[L1: 0.1022][DIV: 0.1341][GRAD: 0.1983][VORT: 0.2780][Total: 0.7128]	4.4+3.0s
[2400/8000]	[L1: 0.1017][DIV: 0.1331][GRAD: 0.1969][VORT: 0.2756][Total: 0.7073]	4.4+3.0s
[3200/8000]	[L1: 0.0993][DIV: 0.1301][GRAD: 0.1921][VORT: 0.2682][Total: 0.6896]	4.4+3.0s
[4000/8000]	[L1: 0.0986][DIV: 0.1292][GRAD: 0.1899][VORT: 0.2649][Total: 0.6826]	4.4+3.0s
[4800/8000]	[L1: 0.0985][DIV: 0.1296][GRAD: 0.1901][VORT: 0.2648][Total: 0.6831]	4.4+3.0s
[5600/8000]	[L1: 0.0987][DIV: 0.1300][GRAD: 0.1903][VORT: 0.2644][Total: 0.6833]	4.4+3.0s
[6400/8000]	[L1: 0.0987][DIV: 0.1301][GRAD: 0.1904][VORT: 0.2646][Total: 0.6837]	4.4+3.0s
[7200/8000]	[L1: 0.0984][DIV: 0.1298][GRAD: 0.1901][VORT: 0.2653][Total: 0.6836]	4.4+3.0s
[8000/8000]	[L1: 0.0985][DIV: 0.1300][GRAD: 0.1904][VORT: 0.2664][Total: 0.6853]	4.5+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.070148	vorticity_error: 1.719488	mean_abs_divergence: 0.116625
[DIV2K x2]	rel_l2_error: 0.054516	vorticity_error: 2.213504	mean_abs_divergence: 0.063004
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.041793	vorticity_error: 8.742957	mean_abs_divergence: 0.030751
Forward: 5.90s

Saving...
Total: 6.20s

[Epoch 29]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0966][DIV: 0.1276][GRAD: 0.1863][VORT: 0.2604][Total: 0.6709]	4.6+7.5s
[1600/8000]	[L1: 0.0993][DIV: 0.1309][GRAD: 0.1915][VORT: 0.2656][Total: 0.6873]	4.5+3.0s
[2400/8000]	[L1: 0.0996][DIV: 0.1306][GRAD: 0.1916][VORT: 0.2646][Total: 0.6865]	4.6+3.0s
[3200/8000]	[L1: 0.0983][DIV: 0.1298][GRAD: 0.1893][VORT: 0.2611][Total: 0.6786]	4.4+3.0s
[4000/8000]	[L1: 0.0962][DIV: 0.1272][GRAD: 0.1854][VORT: 0.2566][Total: 0.6655]	4.5+3.0s
[4800/8000]	[L1: 0.0966][DIV: 0.1276][GRAD: 0.1860][VORT: 0.2576][Total: 0.6679]	4.4+3.0s
[5600/8000]	[L1: 0.0973][DIV: 0.1284][GRAD: 0.1874][VORT: 0.2606][Total: 0.6736]	4.6+3.0s
[6400/8000]	[L1: 0.0969][DIV: 0.1281][GRAD: 0.1866][VORT: 0.2595][Total: 0.6711]	4.6+3.0s
[7200/8000]	[L1: 0.0970][DIV: 0.1283][GRAD: 0.1868][VORT: 0.2593][Total: 0.6713]	4.5+3.0s
[8000/8000]	[L1: 0.0965][DIV: 0.1279][GRAD: 0.1861][VORT: 0.2587][Total: 0.6692]	4.5+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.075968	vorticity_error: 0.811647	mean_abs_divergence: 0.117857
[DIV2K x2]	rel_l2_error: 0.060268	vorticity_error: 1.011482	mean_abs_divergence: 0.066110
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042718	vorticity_error: 2.839675	mean_abs_divergence: 0.032133
Forward: 6.01s

Saving...
Total: 6.32s

[Epoch 30]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.1003][DIV: 0.1310][GRAD: 0.1952][VORT: 0.2731][Total: 0.6996]	4.7+7.6s
[1600/8000]	[L1: 0.0986][DIV: 0.1298][GRAD: 0.1909][VORT: 0.2684][Total: 0.6878]	4.5+3.1s
[2400/8000]	[L1: 0.0969][DIV: 0.1272][GRAD: 0.1866][VORT: 0.2635][Total: 0.6743]	4.5+3.1s
[3200/8000]	[L1: 0.0988][DIV: 0.1296][GRAD: 0.1907][VORT: 0.2692][Total: 0.6884]	4.5+3.1s
[4000/8000]	[L1: 0.0981][DIV: 0.1297][GRAD: 0.1898][VORT: 0.2681][Total: 0.6857]	4.5+3.1s
[4800/8000]	[L1: 0.0984][DIV: 0.1307][GRAD: 0.1903][VORT: 0.2673][Total: 0.6867]	4.6+3.1s
[5600/8000]	[L1: 0.0998][DIV: 0.1320][GRAD: 0.1929][VORT: 0.2705][Total: 0.6953]	4.5+3.1s
[6400/8000]	[L1: 0.0996][DIV: 0.1321][GRAD: 0.1927][VORT: 0.2700][Total: 0.6944]	4.5+3.1s
[7200/8000]	[L1: 0.0993][DIV: 0.1320][GRAD: 0.1923][VORT: 0.2691][Total: 0.6927]	4.5+3.1s
[8000/8000]	[L1: 0.0998][DIV: 0.1325][GRAD: 0.1932][VORT: 0.2698][Total: 0.6953]	4.5+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.081798	vorticity_error: 1.107765	mean_abs_divergence: 0.126283
[DIV2K x2]	rel_l2_error: 0.062281	vorticity_error: 1.599673	mean_abs_divergence: 0.067629
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.046631	vorticity_error: 2.746557	mean_abs_divergence: 0.032845
Forward: 6.04s

Saving...
Total: 6.35s

[Epoch 31]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0938][DIV: 0.1240][GRAD: 0.1788][VORT: 0.2469][Total: 0.6434]	4.7+7.4s
[1600/8000]	[L1: 0.0960][DIV: 0.1278][GRAD: 0.1851][VORT: 0.2531][Total: 0.6621]	4.5+3.1s
[2400/8000]	[L1: 0.0961][DIV: 0.1274][GRAD: 0.1851][VORT: 0.2559][Total: 0.6644]	4.5+3.1s
[3200/8000]	[L1: 0.0981][DIV: 0.1309][GRAD: 0.1894][VORT: 0.2623][Total: 0.6807]	4.5+3.1s
[4000/8000]	[L1: 0.0994][DIV: 0.1327][GRAD: 0.1920][VORT: 0.2651][Total: 0.6893]	4.5+3.1s
[4800/8000]	[L1: 0.0990][DIV: 0.1324][GRAD: 0.1918][VORT: 0.2659][Total: 0.6892]	4.5+3.1s
[5600/8000]	[L1: 0.0981][DIV: 0.1311][GRAD: 0.1897][VORT: 0.2643][Total: 0.6832]	4.5+3.1s
[6400/8000]	[L1: 0.0984][DIV: 0.1313][GRAD: 0.1906][VORT: 0.2655][Total: 0.6858]	4.5+3.1s
[7200/8000]	[L1: 0.0980][DIV: 0.1308][GRAD: 0.1897][VORT: 0.2642][Total: 0.6827]	4.5+3.1s
[8000/8000]	[L1: 0.0979][DIV: 0.1305][GRAD: 0.1894][VORT: 0.2642][Total: 0.6819]	4.5+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.061292	vorticity_error: 1.284852	mean_abs_divergence: 0.094455
[DIV2K x2]	rel_l2_error: 0.050099	vorticity_error: 1.485321	mean_abs_divergence: 0.051234
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.038779	vorticity_error: 4.740847	mean_abs_divergence: 0.024932
Forward: 6.03s

Saving...
Total: 6.34s

[Epoch 32]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0955][DIV: 0.1277][GRAD: 0.1855][VORT: 0.2614][Total: 0.6700]	4.7+7.6s
[1600/8000]	[L1: 0.0936][DIV: 0.1255][GRAD: 0.1812][VORT: 0.2521][Total: 0.6523]	4.6+3.0s
[2400/8000]	[L1: 0.0926][DIV: 0.1238][GRAD: 0.1793][VORT: 0.2510][Total: 0.6467]	4.5+3.1s
[3200/8000]	[L1: 0.0930][DIV: 0.1246][GRAD: 0.1805][VORT: 0.2544][Total: 0.6525]	4.5+3.1s
[4000/8000]	[L1: 0.0927][DIV: 0.1250][GRAD: 0.1799][VORT: 0.2533][Total: 0.6508]	4.5+3.1s
[4800/8000]	[L1: 0.0933][DIV: 0.1253][GRAD: 0.1809][VORT: 0.2543][Total: 0.6538]	4.5+3.0s
[5600/8000]	[L1: 0.0938][DIV: 0.1260][GRAD: 0.1816][VORT: 0.2549][Total: 0.6564]	4.5+3.1s
[6400/8000]	[L1: 0.0933][DIV: 0.1253][GRAD: 0.1804][VORT: 0.2532][Total: 0.6521]	4.5+3.1s
[7200/8000]	[L1: 0.0948][DIV: 0.1274][GRAD: 0.1835][VORT: 0.2565][Total: 0.6622]	4.5+3.1s
[8000/8000]	[L1: 0.0947][DIV: 0.1271][GRAD: 0.1831][VORT: 0.2561][Total: 0.6609]	4.5+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.091655	vorticity_error: 0.855202	mean_abs_divergence: 0.102240
[DIV2K x2]	rel_l2_error: 0.066912	vorticity_error: 1.131129	mean_abs_divergence: 0.056586
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.052989	vorticity_error: 1.742686	mean_abs_divergence: 0.028082
Forward: 6.09s

Saving...
Total: 6.46s

[Epoch 33]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.1015][DIV: 0.1337][GRAD: 0.1957][VORT: 0.2730][Total: 0.7039]	4.7+7.4s
[1600/8000]	[L1: 0.1029][DIV: 0.1355][GRAD: 0.1995][VORT: 0.2780][Total: 0.7159]	4.5+3.1s
[2400/8000]	[L1: 0.1042][DIV: 0.1361][GRAD: 0.2018][VORT: 0.2826][Total: 0.7247]	4.5+3.1s
[3200/8000]	[L1: 0.1024][DIV: 0.1339][GRAD: 0.1988][VORT: 0.2800][Total: 0.7152]	4.5+3.1s
[4000/8000]	[L1: 0.1012][DIV: 0.1328][GRAD: 0.1960][VORT: 0.2744][Total: 0.7044]	4.5+3.1s
[4800/8000]	[L1: 0.1013][DIV: 0.1330][GRAD: 0.1962][VORT: 0.2744][Total: 0.7048]	4.5+3.1s
[5600/8000]	[L1: 0.1011][DIV: 0.1331][GRAD: 0.1961][VORT: 0.2749][Total: 0.7051]	4.5+3.1s
[6400/8000]	[L1: 0.0996][DIV: 0.1315][GRAD: 0.1931][VORT: 0.2711][Total: 0.6954]	4.5+3.1s
[7200/8000]	[L1: 0.0989][DIV: 0.1309][GRAD: 0.1918][VORT: 0.2689][Total: 0.6905]	4.5+3.1s
[8000/8000]	[L1: 0.0997][DIV: 0.1318][GRAD: 0.1931][VORT: 0.2700][Total: 0.6947]	4.5+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.073323	vorticity_error: 5.589125	mean_abs_divergence: 0.118816
[DIV2K x2]	rel_l2_error: 0.059028	vorticity_error: 1.758792	mean_abs_divergence: 0.065489
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044955	vorticity_error: 5.938550	mean_abs_divergence: 0.032064
Forward: 6.02s

Saving...
Total: 6.39s

[Epoch 34]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0972][DIV: 0.1318][GRAD: 0.1886][VORT: 0.2641][Total: 0.6817]	4.7+7.5s
[1600/8000]	[L1: 0.0940][DIV: 0.1278][GRAD: 0.1828][VORT: 0.2545][Total: 0.6591]	4.5+3.0s
[2400/8000]	[L1: 0.0982][DIV: 0.1323][GRAD: 0.1900][VORT: 0.2608][Total: 0.6814]	4.6+3.0s
[3200/8000]	[L1: 0.0975][DIV: 0.1308][GRAD: 0.1882][VORT: 0.2586][Total: 0.6751]	4.6+3.0s
[4000/8000]	[L1: 0.0981][DIV: 0.1310][GRAD: 0.1899][VORT: 0.2622][Total: 0.6813]	4.5+3.1s
[4800/8000]	[L1: 0.0973][DIV: 0.1305][GRAD: 0.1884][VORT: 0.2603][Total: 0.6765]	4.5+3.0s
[5600/8000]	[L1: 0.0966][DIV: 0.1298][GRAD: 0.1872][VORT: 0.2590][Total: 0.6726]	4.5+3.0s
[6400/8000]	[L1: 0.0965][DIV: 0.1301][GRAD: 0.1871][VORT: 0.2582][Total: 0.6719]	4.5+3.1s
[7200/8000]	[L1: 0.0974][DIV: 0.1314][GRAD: 0.1889][VORT: 0.2592][Total: 0.6769]	4.6+3.0s
[8000/8000]	[L1: 0.0975][DIV: 0.1313][GRAD: 0.1890][VORT: 0.2593][Total: 0.6772]	4.5+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.085433	vorticity_error: 1.821194	mean_abs_divergence: 0.142102
[DIV2K x2]	rel_l2_error: 0.063579	vorticity_error: 1.646006	mean_abs_divergence: 0.074610
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.049494	vorticity_error: 4.830758	mean_abs_divergence: 0.035650
Forward: 6.11s

Saving...
Total: 6.44s

[Epoch 35]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.1017][DIV: 0.1339][GRAD: 0.1967][VORT: 0.2684][Total: 0.7007]	4.6+7.7s
[1600/8000]	[L1: 0.1054][DIV: 0.1395][GRAD: 0.2046][VORT: 0.2799][Total: 0.7293]	4.5+3.1s
[2400/8000]	[L1: 0.1036][DIV: 0.1374][GRAD: 0.2011][VORT: 0.2749][Total: 0.7169]	4.5+3.1s
[3200/8000]	[L1: 0.1031][DIV: 0.1366][GRAD: 0.2003][VORT: 0.2759][Total: 0.7160]	4.5+3.1s
[4000/8000]	[L1: 0.1023][DIV: 0.1355][GRAD: 0.1990][VORT: 0.2762][Total: 0.7130]	4.5+3.1s
[4800/8000]	[L1: 0.1011][DIV: 0.1339][GRAD: 0.1964][VORT: 0.2728][Total: 0.7042]	4.5+3.1s
[5600/8000]	[L1: 0.1010][DIV: 0.1339][GRAD: 0.1962][VORT: 0.2723][Total: 0.7034]	4.5+3.1s
[6400/8000]	[L1: 0.1016][DIV: 0.1349][GRAD: 0.1974][VORT: 0.2741][Total: 0.7079]	4.5+3.0s
[7200/8000]	[L1: 0.1005][DIV: 0.1338][GRAD: 0.1951][VORT: 0.2702][Total: 0.6996]	4.6+3.0s
[8000/8000]	[L1: 0.0999][DIV: 0.1330][GRAD: 0.1938][VORT: 0.2684][Total: 0.6952]	4.5+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.066849	vorticity_error: 0.621716	mean_abs_divergence: 0.105739
[DIV2K x2]	rel_l2_error: 0.048963	vorticity_error: 0.615287	mean_abs_divergence: 0.053251
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.039111	vorticity_error: 1.709554	mean_abs_divergence: 0.024594
Forward: 6.04s

Saving...
Total: 6.36s

[Epoch 36]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.1013][DIV: 0.1336][GRAD: 0.1970][VORT: 0.2747][Total: 0.7066]	4.7+7.6s
[1600/8000]	[L1: 0.1048][DIV: 0.1393][GRAD: 0.2048][VORT: 0.2795][Total: 0.7283]	4.5+3.1s
[2400/8000]	[L1: 0.1036][DIV: 0.1377][GRAD: 0.2024][VORT: 0.2811][Total: 0.7249]	4.5+3.1s
[3200/8000]	[L1: 0.1009][DIV: 0.1344][GRAD: 0.1972][VORT: 0.2759][Total: 0.7084]	4.5+3.1s
[4000/8000]	[L1: 0.1015][DIV: 0.1355][GRAD: 0.1984][VORT: 0.2779][Total: 0.7133]	4.6+3.1s
[4800/8000]	[L1: 0.1013][DIV: 0.1355][GRAD: 0.1980][VORT: 0.2779][Total: 0.7127]	4.5+3.1s
[5600/8000]	[L1: 0.1006][DIV: 0.1347][GRAD: 0.1962][VORT: 0.2744][Total: 0.7059]	4.5+3.1s
[6400/8000]	[L1: 0.0995][DIV: 0.1333][GRAD: 0.1941][VORT: 0.2719][Total: 0.6988]	4.4+3.1s
[7200/8000]	[L1: 0.0988][DIV: 0.1327][GRAD: 0.1927][VORT: 0.2692][Total: 0.6934]	4.5+3.1s
[8000/8000]	[L1: 0.0989][DIV: 0.1327][GRAD: 0.1929][VORT: 0.2695][Total: 0.6941]	4.5+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.079946	vorticity_error: 2.317692	mean_abs_divergence: 0.136761
[DIV2K x2]	rel_l2_error: 0.062345	vorticity_error: 2.027497	mean_abs_divergence: 0.072156
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.049630	vorticity_error: 10.738258	mean_abs_divergence: 0.035589
Forward: 6.09s

Saving...
Total: 6.41s

[Epoch 37]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0891][DIV: 0.1221][GRAD: 0.1731][VORT: 0.2363][Total: 0.6206]	4.8+7.5s
[1600/8000]	[L1: 0.0889][DIV: 0.1217][GRAD: 0.1733][VORT: 0.2407][Total: 0.6246]	4.5+3.1s
[2400/8000]	[L1: 0.0925][DIV: 0.1264][GRAD: 0.1801][VORT: 0.2511][Total: 0.6501]	4.5+3.0s
[3200/8000]	[L1: 0.0934][DIV: 0.1262][GRAD: 0.1814][VORT: 0.2520][Total: 0.6529]	4.5+3.1s
[4000/8000]	[L1: 0.0921][DIV: 0.1245][GRAD: 0.1788][VORT: 0.2492][Total: 0.6445]	4.5+3.1s
[4800/8000]	[L1: 0.0938][DIV: 0.1267][GRAD: 0.1822][VORT: 0.2529][Total: 0.6556]	4.5+3.1s
[5600/8000]	[L1: 0.0948][DIV: 0.1281][GRAD: 0.1847][VORT: 0.2563][Total: 0.6639]	4.5+3.1s
[6400/8000]	[L1: 0.0960][DIV: 0.1294][GRAD: 0.1869][VORT: 0.2599][Total: 0.6722]	4.5+3.1s
[7200/8000]	[L1: 0.0959][DIV: 0.1294][GRAD: 0.1869][VORT: 0.2601][Total: 0.6724]	4.5+3.1s
[8000/8000]	[L1: 0.0964][DIV: 0.1299][GRAD: 0.1877][VORT: 0.2607][Total: 0.6747]	4.5+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.098213	vorticity_error: 2.275614	mean_abs_divergence: 0.133797
[DIV2K x2]	rel_l2_error: 0.073178	vorticity_error: 1.612062	mean_abs_divergence: 0.071369
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.062180	vorticity_error: 4.124416	mean_abs_divergence: 0.033995
Forward: 6.00s

Saving...
Total: 6.32s

[Epoch 38]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.1034][DIV: 0.1373][GRAD: 0.2027][VORT: 0.2826][Total: 0.7259]	4.6+7.4s
[1600/8000]	[L1: 0.1045][DIV: 0.1398][GRAD: 0.2044][VORT: 0.2817][Total: 0.7305]	4.5+3.1s
[2400/8000]	[L1: 0.1008][DIV: 0.1348][GRAD: 0.1967][VORT: 0.2724][Total: 0.7047]	4.5+3.1s
[3200/8000]	[L1: 0.0982][DIV: 0.1321][GRAD: 0.1911][VORT: 0.2622][Total: 0.6836]	4.5+3.1s
[4000/8000]	[L1: 0.0974][DIV: 0.1310][GRAD: 0.1891][VORT: 0.2608][Total: 0.6783]	4.5+3.1s
[4800/8000]	[L1: 0.0978][DIV: 0.1319][GRAD: 0.1901][VORT: 0.2622][Total: 0.6820]	4.5+3.1s
[5600/8000]	[L1: 0.0974][DIV: 0.1313][GRAD: 0.1890][VORT: 0.2607][Total: 0.6784]	4.5+3.1s
[6400/8000]	[L1: 0.0973][DIV: 0.1312][GRAD: 0.1889][VORT: 0.2603][Total: 0.6777]	4.5+3.1s
[7200/8000]	[L1: 0.0984][DIV: 0.1325][GRAD: 0.1910][VORT: 0.2630][Total: 0.6849]	4.5+3.1s
[8000/8000]	[L1: 0.0977][DIV: 0.1317][GRAD: 0.1896][VORT: 0.2615][Total: 0.6805]	4.5+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.065826	vorticity_error: 1.076691	mean_abs_divergence: 0.120725
[DIV2K x2]	rel_l2_error: 0.053824	vorticity_error: 2.390016	mean_abs_divergence: 0.063774
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042424	vorticity_error: 7.961538	mean_abs_divergence: 0.030982
Forward: 5.95s

Saving...
Total: 6.33s

[Epoch 39]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0983][DIV: 0.1304][GRAD: 0.1920][VORT: 0.2745][Total: 0.6952]	4.6+7.5s
[1600/8000]	[L1: 0.1013][DIV: 0.1342][GRAD: 0.1968][VORT: 0.2780][Total: 0.7103]	4.6+3.0s
[2400/8000]	[L1: 0.1004][DIV: 0.1333][GRAD: 0.1951][VORT: 0.2743][Total: 0.7031]	4.5+3.1s
[3200/8000]	[L1: 0.0994][DIV: 0.1319][GRAD: 0.1929][VORT: 0.2728][Total: 0.6970]	4.5+3.1s
[4000/8000]	[L1: 0.0982][DIV: 0.1305][GRAD: 0.1908][VORT: 0.2688][Total: 0.6884]	4.5+3.1s
[4800/8000]	[L1: 0.0973][DIV: 0.1296][GRAD: 0.1892][VORT: 0.2652][Total: 0.6813]	4.5+3.0s
[5600/8000]	[L1: 0.0965][DIV: 0.1292][GRAD: 0.1877][VORT: 0.2632][Total: 0.6767]	4.5+3.1s
[6400/8000]	[L1: 0.0965][DIV: 0.1292][GRAD: 0.1875][VORT: 0.2626][Total: 0.6757]	4.5+3.1s
[7200/8000]	[L1: 0.0964][DIV: 0.1292][GRAD: 0.1874][VORT: 0.2627][Total: 0.6756]	4.5+3.1s
[8000/8000]	[L1: 0.0962][DIV: 0.1286][GRAD: 0.1868][VORT: 0.2616][Total: 0.6731]	4.5+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.080725	vorticity_error: 1.477605	mean_abs_divergence: 0.136132
[DIV2K x2]	rel_l2_error: 0.060258	vorticity_error: 3.002260	mean_abs_divergence: 0.074297
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048206	vorticity_error: 8.175719	mean_abs_divergence: 0.036455
Forward: 6.00s

Saving...
Total: 6.33s

[Epoch 40]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0954][DIV: 0.1270][GRAD: 0.1859][VORT: 0.2615][Total: 0.6698]	4.7+7.4s
[1600/8000]	[L1: 0.0928][DIV: 0.1247][GRAD: 0.1800][VORT: 0.2537][Total: 0.6511]	4.5+3.1s
[2400/8000]	[L1: 0.0938][DIV: 0.1260][GRAD: 0.1822][VORT: 0.2569][Total: 0.6590]	4.5+3.0s
[3200/8000]	[L1: 0.0951][DIV: 0.1288][GRAD: 0.1851][VORT: 0.2575][Total: 0.6664]	4.5+3.1s
[4000/8000]	[L1: 0.0961][DIV: 0.1299][GRAD: 0.1871][VORT: 0.2593][Total: 0.6725]	4.5+3.1s
[4800/8000]	[L1: 0.0949][DIV: 0.1280][GRAD: 0.1844][VORT: 0.2559][Total: 0.6631]	4.5+3.1s
[5600/8000]	[L1: 0.0954][DIV: 0.1287][GRAD: 0.1858][VORT: 0.2585][Total: 0.6683]	4.6+3.0s
[6400/8000]	[L1: 0.0961][DIV: 0.1293][GRAD: 0.1873][VORT: 0.2607][Total: 0.6735]	4.6+3.0s
[7200/8000]	[L1: 0.0967][DIV: 0.1302][GRAD: 0.1888][VORT: 0.2630][Total: 0.6787]	4.5+3.0s
[8000/8000]	[L1: 0.0962][DIV: 0.1296][GRAD: 0.1878][VORT: 0.2617][Total: 0.6753]	4.6+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.076094	vorticity_error: 3.810939	mean_abs_divergence: 0.110953
[DIV2K x2]	rel_l2_error: 0.062868	vorticity_error: 1.806816	mean_abs_divergence: 0.059519
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.047068	vorticity_error: 6.516911	mean_abs_divergence: 0.029456
Forward: 5.98s

Saving...
Total: 6.31s

[Epoch 41]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0949][DIV: 0.1321][GRAD: 0.1849][VORT: 0.2512][Total: 0.6632]	4.7+7.5s
[1600/8000]	[L1: 0.0958][DIV: 0.1309][GRAD: 0.1863][VORT: 0.2548][Total: 0.6679]	4.5+3.1s
[2400/8000]	[L1: 0.0972][DIV: 0.1319][GRAD: 0.1889][VORT: 0.2577][Total: 0.6757]	4.5+3.1s
[3200/8000]	[L1: 0.0970][DIV: 0.1314][GRAD: 0.1890][VORT: 0.2612][Total: 0.6787]	4.5+3.0s
[4000/8000]	[L1: 0.0968][DIV: 0.1313][GRAD: 0.1888][VORT: 0.2612][Total: 0.6781]	4.5+3.1s
[4800/8000]	[L1: 0.0972][DIV: 0.1316][GRAD: 0.1897][VORT: 0.2623][Total: 0.6808]	4.6+3.0s
[5600/8000]	[L1: 0.0973][DIV: 0.1321][GRAD: 0.1901][VORT: 0.2616][Total: 0.6810]	4.5+3.1s
[6400/8000]	[L1: 0.0972][DIV: 0.1319][GRAD: 0.1900][VORT: 0.2613][Total: 0.6804]	4.5+3.0s
[7200/8000]	[L1: 0.0973][DIV: 0.1320][GRAD: 0.1905][VORT: 0.2623][Total: 0.6821]	4.5+3.0s
[8000/8000]	[L1: 0.0979][DIV: 0.1325][GRAD: 0.1915][VORT: 0.2643][Total: 0.6860]	4.5+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.086010	vorticity_error: 2.422899	mean_abs_divergence: 0.106498
[DIV2K x2]	rel_l2_error: 0.071840	vorticity_error: 1.806011	mean_abs_divergence: 0.058252
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.053360	vorticity_error: 8.085267	mean_abs_divergence: 0.029022
Forward: 6.08s

Saving...
Total: 6.40s

[Epoch 42]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.1029][DIV: 0.1396][GRAD: 0.2007][VORT: 0.2702][Total: 0.7135]	4.8+7.5s
[1600/8000]	[L1: 0.1020][DIV: 0.1369][GRAD: 0.1992][VORT: 0.2724][Total: 0.7106]	4.5+3.1s
[2400/8000]	[L1: 0.1009][DIV: 0.1356][GRAD: 0.1966][VORT: 0.2704][Total: 0.7035]	4.6+3.0s
[3200/8000]	[L1: 0.0982][DIV: 0.1329][GRAD: 0.1909][VORT: 0.2627][Total: 0.6846]	4.5+3.1s
[4000/8000]	[L1: 0.0970][DIV: 0.1313][GRAD: 0.1884][VORT: 0.2608][Total: 0.6775]	4.5+3.1s
[4800/8000]	[L1: 0.0964][DIV: 0.1303][GRAD: 0.1873][VORT: 0.2597][Total: 0.6738]	4.5+3.1s
[5600/8000]	[L1: 0.0973][DIV: 0.1318][GRAD: 0.1893][VORT: 0.2608][Total: 0.6791]	4.5+3.1s
[6400/8000]	[L1: 0.0973][DIV: 0.1319][GRAD: 0.1897][VORT: 0.2617][Total: 0.6806]	4.5+3.1s
[7200/8000]	[L1: 0.0969][DIV: 0.1313][GRAD: 0.1890][VORT: 0.2606][Total: 0.6778]	4.5+3.1s
[8000/8000]	[L1: 0.0968][DIV: 0.1315][GRAD: 0.1890][VORT: 0.2604][Total: 0.6777]	4.5+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.077956	vorticity_error: 1.284291	mean_abs_divergence: 0.127918
[DIV2K x2]	rel_l2_error: 0.062671	vorticity_error: 1.287760	mean_abs_divergence: 0.068692
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.040859	vorticity_error: 4.427793	mean_abs_divergence: 0.034167
Forward: 6.02s

Saving...
Total: 6.33s

[Epoch 43]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0937][DIV: 0.1303][GRAD: 0.1850][VORT: 0.2576][Total: 0.6666]	4.7+7.6s
[1600/8000]	[L1: 0.0970][DIV: 0.1324][GRAD: 0.1904][VORT: 0.2668][Total: 0.6866]	4.6+3.0s
[2400/8000]	[L1: 0.0964][DIV: 0.1318][GRAD: 0.1881][VORT: 0.2598][Total: 0.6760]	4.5+3.0s
[3200/8000]	[L1: 0.0959][DIV: 0.1309][GRAD: 0.1872][VORT: 0.2593][Total: 0.6732]	4.5+3.1s
[4000/8000]	[L1: 0.0947][DIV: 0.1296][GRAD: 0.1846][VORT: 0.2565][Total: 0.6654]	4.5+3.0s
[4800/8000]	[L1: 0.0935][DIV: 0.1277][GRAD: 0.1821][VORT: 0.2526][Total: 0.6559]	4.5+3.1s
[5600/8000]	[L1: 0.0938][DIV: 0.1279][GRAD: 0.1824][VORT: 0.2522][Total: 0.6563]	4.5+3.0s
[6400/8000]	[L1: 0.0942][DIV: 0.1285][GRAD: 0.1834][VORT: 0.2528][Total: 0.6589]	4.5+3.1s
[7200/8000]	[L1: 0.0954][DIV: 0.1298][GRAD: 0.1858][VORT: 0.2559][Total: 0.6669]	4.5+3.0s
[8000/8000]	[L1: 0.0953][DIV: 0.1296][GRAD: 0.1855][VORT: 0.2554][Total: 0.6659]	4.5+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.074941	vorticity_error: 1.470091	mean_abs_divergence: 0.129239
[DIV2K x2]	rel_l2_error: 0.064741	vorticity_error: 1.234765	mean_abs_divergence: 0.068471
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.046687	vorticity_error: 4.413491	mean_abs_divergence: 0.033512
Forward: 6.08s

Saving...
Total: 6.44s

[Epoch 44]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0877][DIV: 0.1224][GRAD: 0.1693][VORT: 0.2255][Total: 0.6049]	4.8+7.5s
[1600/8000]	[L1: 0.0948][DIV: 0.1306][GRAD: 0.1856][VORT: 0.2535][Total: 0.6644]	4.5+3.0s
[2400/8000]	[L1: 0.0947][DIV: 0.1299][GRAD: 0.1854][VORT: 0.2549][Total: 0.6650]	4.5+3.0s
[3200/8000]	[L1: 0.0973][DIV: 0.1331][GRAD: 0.1906][VORT: 0.2613][Total: 0.6822]	4.5+3.0s
[4000/8000]	[L1: 0.0966][DIV: 0.1316][GRAD: 0.1890][VORT: 0.2596][Total: 0.6768]	4.5+3.0s
[4800/8000]	[L1: 0.0949][DIV: 0.1295][GRAD: 0.1854][VORT: 0.2556][Total: 0.6654]	4.5+3.1s
[5600/8000]	[L1: 0.0939][DIV: 0.1282][GRAD: 0.1836][VORT: 0.2532][Total: 0.6589]	4.5+3.1s
[6400/8000]	[L1: 0.0944][DIV: 0.1291][GRAD: 0.1847][VORT: 0.2545][Total: 0.6627]	4.5+3.0s
[7200/8000]	[L1: 0.0948][DIV: 0.1293][GRAD: 0.1855][VORT: 0.2565][Total: 0.6661]	4.5+3.1s
[8000/8000]	[L1: 0.0946][DIV: 0.1292][GRAD: 0.1852][VORT: 0.2563][Total: 0.6653]	4.5+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.077805	vorticity_error: 1.170203	mean_abs_divergence: 0.131950
[DIV2K x2]	rel_l2_error: 0.060052	vorticity_error: 0.965235	mean_abs_divergence: 0.072546
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.040344	vorticity_error: 3.097447	mean_abs_divergence: 0.036289
Forward: 6.00s

Saving...
Total: 6.35s

[Epoch 45]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0937][DIV: 0.1284][GRAD: 0.1835][VORT: 0.2513][Total: 0.6569]	4.7+7.4s
[1600/8000]	[L1: 0.0961][DIV: 0.1329][GRAD: 0.1895][VORT: 0.2586][Total: 0.6771]	4.5+3.1s
[2400/8000]	[L1: 0.0944][DIV: 0.1303][GRAD: 0.1859][VORT: 0.2558][Total: 0.6665]	4.5+3.0s
[3200/8000]	[L1: 0.0958][DIV: 0.1314][GRAD: 0.1884][VORT: 0.2609][Total: 0.6765]	4.5+3.0s
[4000/8000]	[L1: 0.0959][DIV: 0.1315][GRAD: 0.1884][VORT: 0.2604][Total: 0.6762]	4.5+3.0s
[4800/8000]	[L1: 0.0946][DIV: 0.1296][GRAD: 0.1857][VORT: 0.2572][Total: 0.6672]	4.5+3.1s
[5600/8000]	[L1: 0.0939][DIV: 0.1285][GRAD: 0.1842][VORT: 0.2552][Total: 0.6618]	4.5+3.1s
[6400/8000]	[L1: 0.0939][DIV: 0.1285][GRAD: 0.1841][VORT: 0.2552][Total: 0.6617]	4.5+3.1s
[7200/8000]	[L1: 0.0931][DIV: 0.1276][GRAD: 0.1824][VORT: 0.2535][Total: 0.6566]	4.5+3.0s
[8000/8000]	[L1: 0.0934][DIV: 0.1277][GRAD: 0.1829][VORT: 0.2537][Total: 0.6576]	4.5+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.063643	vorticity_error: 1.044748	mean_abs_divergence: 0.094403
[DIV2K x2]	rel_l2_error: 0.052432	vorticity_error: 1.047063	mean_abs_divergence: 0.051174
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.038155	vorticity_error: 2.456496	mean_abs_divergence: 0.025157
Forward: 5.96s

Saving...
Total: 6.26s

[Epoch 46]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0851][DIV: 0.1166][GRAD: 0.1647][VORT: 0.2258][Total: 0.5922]	4.7+7.5s
[1600/8000]	[L1: 0.0892][DIV: 0.1218][GRAD: 0.1740][VORT: 0.2424][Total: 0.6275]	4.5+3.1s
[2400/8000]	[L1: 0.0906][DIV: 0.1234][GRAD: 0.1771][VORT: 0.2457][Total: 0.6368]	4.5+3.1s
[3200/8000]	[L1: 0.0927][DIV: 0.1261][GRAD: 0.1810][VORT: 0.2502][Total: 0.6500]	4.5+3.0s
[4000/8000]	[L1: 0.0914][DIV: 0.1248][GRAD: 0.1783][VORT: 0.2476][Total: 0.6420]	4.5+3.1s
[4800/8000]	[L1: 0.0924][DIV: 0.1268][GRAD: 0.1806][VORT: 0.2490][Total: 0.6489]	4.5+3.0s
[5600/8000]	[L1: 0.0941][DIV: 0.1289][GRAD: 0.1841][VORT: 0.2544][Total: 0.6615]	4.5+3.1s
[6400/8000]	[L1: 0.0929][DIV: 0.1275][GRAD: 0.1815][VORT: 0.2503][Total: 0.6522]	4.6+3.0s
[7200/8000]	[L1: 0.0930][DIV: 0.1277][GRAD: 0.1818][VORT: 0.2504][Total: 0.6528]	4.5+3.1s
[8000/8000]	[L1: 0.0927][DIV: 0.1273][GRAD: 0.1812][VORT: 0.2503][Total: 0.6516]	4.5+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.071037	vorticity_error: 1.114987	mean_abs_divergence: 0.105953
[DIV2K x2]	rel_l2_error: 0.057593	vorticity_error: 1.200366	mean_abs_divergence: 0.055178
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042458	vorticity_error: 3.750228	mean_abs_divergence: 0.026689
Forward: 6.02s

Saving...
Total: 6.34s

[Epoch 47]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0956][DIV: 0.1308][GRAD: 0.1876][VORT: 0.2600][Total: 0.6740]	4.8+7.4s
[1600/8000]	[L1: 0.1026][DIV: 0.1387][GRAD: 0.2018][VORT: 0.2787][Total: 0.7217]	4.5+3.0s
[2400/8000]	[L1: 0.1019][DIV: 0.1378][GRAD: 0.2003][VORT: 0.2773][Total: 0.7172]	4.5+3.1s
[3200/8000]	[L1: 0.1000][DIV: 0.1354][GRAD: 0.1963][VORT: 0.2718][Total: 0.7035]	4.5+3.1s
[4000/8000]	[L1: 0.0997][DIV: 0.1352][GRAD: 0.1958][VORT: 0.2707][Total: 0.7014]	4.5+3.0s
[4800/8000]	[L1: 0.0997][DIV: 0.1354][GRAD: 0.1955][VORT: 0.2690][Total: 0.6996]	4.5+3.0s
[5600/8000]	[L1: 0.0995][DIV: 0.1355][GRAD: 0.1950][VORT: 0.2683][Total: 0.6982]	4.5+3.1s
[6400/8000]	[L1: 0.0998][DIV: 0.1358][GRAD: 0.1956][VORT: 0.2680][Total: 0.6993]	4.5+3.1s
[7200/8000]	[L1: 0.0994][DIV: 0.1355][GRAD: 0.1949][VORT: 0.2668][Total: 0.6967]	4.5+3.1s
[8000/8000]	[L1: 0.0990][DIV: 0.1347][GRAD: 0.1940][VORT: 0.2664][Total: 0.6942]	4.5+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.058698	vorticity_error: 1.063296	mean_abs_divergence: 0.089395
[DIV2K x2]	rel_l2_error: 0.046160	vorticity_error: 1.363380	mean_abs_divergence: 0.050257
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.038951	vorticity_error: 4.016427	mean_abs_divergence: 0.025515
Forward: 6.02s

Saving...
Total: 6.33s

[Epoch 48]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0922][DIV: 0.1240][GRAD: 0.1802][VORT: 0.2530][Total: 0.6494]	4.7+7.6s
[1600/8000]	[L1: 0.0962][DIV: 0.1317][GRAD: 0.1890][VORT: 0.2614][Total: 0.6783]	4.5+3.1s
[2400/8000]	[L1: 0.0958][DIV: 0.1312][GRAD: 0.1884][VORT: 0.2592][Total: 0.6745]	4.5+3.1s
[3200/8000]	[L1: 0.0937][DIV: 0.1291][GRAD: 0.1845][VORT: 0.2550][Total: 0.6624]	4.5+3.1s
[4000/8000]	[L1: 0.0938][DIV: 0.1297][GRAD: 0.1848][VORT: 0.2536][Total: 0.6620]	4.5+3.0s
[4800/8000]	[L1: 0.0938][DIV: 0.1297][GRAD: 0.1844][VORT: 0.2534][Total: 0.6614]	4.5+3.1s
[5600/8000]	[L1: 0.0949][DIV: 0.1310][GRAD: 0.1866][VORT: 0.2567][Total: 0.6693]	4.5+3.1s
[6400/8000]	[L1: 0.0964][DIV: 0.1326][GRAD: 0.1897][VORT: 0.2611][Total: 0.6798]	4.5+3.1s
[7200/8000]	[L1: 0.0959][DIV: 0.1319][GRAD: 0.1886][VORT: 0.2592][Total: 0.6756]	4.5+3.1s
[8000/8000]	[L1: 0.0958][DIV: 0.1319][GRAD: 0.1883][VORT: 0.2588][Total: 0.6748]	4.5+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.082212	vorticity_error: 1.300166	mean_abs_divergence: 0.116689
[DIV2K x2]	rel_l2_error: 0.066703	vorticity_error: 1.526528	mean_abs_divergence: 0.061432
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.046762	vorticity_error: 6.122402	mean_abs_divergence: 0.029973
Forward: 6.07s

Saving...
Total: 6.37s

[Epoch 49]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0926][DIV: 0.1294][GRAD: 0.1827][VORT: 0.2526][Total: 0.6573]	4.6+7.4s
[1600/8000]	[L1: 0.0975][DIV: 0.1334][GRAD: 0.1905][VORT: 0.2578][Total: 0.6792]	4.5+3.0s
[2400/8000]	[L1: 0.1002][DIV: 0.1362][GRAD: 0.1956][VORT: 0.2645][Total: 0.6965]	4.7+3.0s
[3200/8000]	[L1: 0.0993][DIV: 0.1348][GRAD: 0.1943][VORT: 0.2642][Total: 0.6926]	4.5+3.1s
[4000/8000]	[L1: 0.0991][DIV: 0.1350][GRAD: 0.1941][VORT: 0.2621][Total: 0.6903]	4.5+3.0s
[4800/8000]	[L1: 0.0998][DIV: 0.1357][GRAD: 0.1958][VORT: 0.2646][Total: 0.6960]	4.6+3.0s
[5600/8000]	[L1: 0.0972][DIV: 0.1322][GRAD: 0.1907][VORT: 0.2605][Total: 0.6806]	4.5+3.1s
[6400/8000]	[L1: 0.0958][DIV: 0.1302][GRAD: 0.1878][VORT: 0.2572][Total: 0.6711]	4.5+3.1s
[7200/8000]	[L1: 0.0954][DIV: 0.1299][GRAD: 0.1870][VORT: 0.2565][Total: 0.6689]	4.5+3.1s
[8000/8000]	[L1: 0.0953][DIV: 0.1299][GRAD: 0.1868][VORT: 0.2561][Total: 0.6681]	4.5+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.105950	vorticity_error: 2.127845	mean_abs_divergence: 0.161213
[DIV2K x2]	rel_l2_error: 0.082174	vorticity_error: 1.567770	mean_abs_divergence: 0.088667
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.057352	vorticity_error: 2.137163	mean_abs_divergence: 0.043228
Forward: 5.99s

Saving...
Total: 6.30s

[Epoch 50]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0936][DIV: 0.1287][GRAD: 0.1845][VORT: 0.2597][Total: 0.6666]	4.9+7.4s
[1600/8000]	[L1: 0.0999][DIV: 0.1359][GRAD: 0.1961][VORT: 0.2680][Total: 0.6999]	4.5+3.1s
[2400/8000]	[L1: 0.0992][DIV: 0.1355][GRAD: 0.1941][VORT: 0.2653][Total: 0.6940]	4.5+3.1s
[3200/8000]	[L1: 0.0980][DIV: 0.1344][GRAD: 0.1918][VORT: 0.2624][Total: 0.6866]	4.4+3.1s
[4000/8000]	[L1: 0.0966][DIV: 0.1320][GRAD: 0.1888][VORT: 0.2592][Total: 0.6767]	4.5+3.1s
[4800/8000]	[L1: 0.0979][DIV: 0.1332][GRAD: 0.1917][VORT: 0.2635][Total: 0.6862]	4.5+3.1s
[5600/8000]	[L1: 0.0971][DIV: 0.1323][GRAD: 0.1902][VORT: 0.2610][Total: 0.6806]	4.5+3.1s
[6400/8000]	[L1: 0.0975][DIV: 0.1329][GRAD: 0.1911][VORT: 0.2625][Total: 0.6840]	4.5+3.1s
[7200/8000]	[L1: 0.0971][DIV: 0.1323][GRAD: 0.1902][VORT: 0.2611][Total: 0.6807]	4.5+3.1s
[8000/8000]	[L1: 0.0967][DIV: 0.1318][GRAD: 0.1893][VORT: 0.2601][Total: 0.6780]	4.4+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.090924	vorticity_error: 1.779332	mean_abs_divergence: 0.143450
[DIV2K x2]	rel_l2_error: 0.072447	vorticity_error: 1.637115	mean_abs_divergence: 0.078063
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.049431	vorticity_error: 6.287824	mean_abs_divergence: 0.038629
Forward: 6.12s

Saving...
Total: 6.49s

[Epoch 51]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0996][DIV: 0.1357][GRAD: 0.1958][VORT: 0.2609][Total: 0.6920]	4.7+7.6s
[1600/8000]	[L1: 0.1018][DIV: 0.1378][GRAD: 0.2005][VORT: 0.2736][Total: 0.7138]	4.5+3.1s
[2400/8000]	[L1: 0.0997][DIV: 0.1359][GRAD: 0.1967][VORT: 0.2705][Total: 0.7027]	4.4+3.1s
[3200/8000]	[L1: 0.0997][DIV: 0.1351][GRAD: 0.1956][VORT: 0.2691][Total: 0.6996]	4.5+3.1s
[4000/8000]	[L1: 0.0976][DIV: 0.1324][GRAD: 0.1914][VORT: 0.2649][Total: 0.6863]	4.5+3.1s
[4800/8000]	[L1: 0.0962][DIV: 0.1304][GRAD: 0.1887][VORT: 0.2621][Total: 0.6775]	4.5+3.1s
[5600/8000]	[L1: 0.0954][DIV: 0.1297][GRAD: 0.1871][VORT: 0.2598][Total: 0.6720]	4.4+3.1s
[6400/8000]	[L1: 0.0950][DIV: 0.1292][GRAD: 0.1864][VORT: 0.2581][Total: 0.6687]	4.5+3.1s
[7200/8000]	[L1: 0.0951][DIV: 0.1293][GRAD: 0.1865][VORT: 0.2587][Total: 0.6697]	4.5+3.1s
[8000/8000]	[L1: 0.0947][DIV: 0.1294][GRAD: 0.1858][VORT: 0.2576][Total: 0.6676]	4.5+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.087697	vorticity_error: 0.911474	mean_abs_divergence: 0.133911
[DIV2K x2]	rel_l2_error: 0.069336	vorticity_error: 1.211103	mean_abs_divergence: 0.073640
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.051442	vorticity_error: 3.167886	mean_abs_divergence: 0.036049
Forward: 5.92s

Saving...
Total: 6.23s

[Epoch 52]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0904][DIV: 0.1269][GRAD: 0.1775][VORT: 0.2366][Total: 0.6315]	4.8+7.5s
[1600/8000]	[L1: 0.0949][DIV: 0.1327][GRAD: 0.1868][VORT: 0.2506][Total: 0.6649]	4.5+3.0s
[2400/8000]	[L1: 0.0957][DIV: 0.1327][GRAD: 0.1886][VORT: 0.2552][Total: 0.6723]	4.5+3.1s
[3200/8000]	[L1: 0.0943][DIV: 0.1304][GRAD: 0.1858][VORT: 0.2536][Total: 0.6642]	4.5+3.1s
[4000/8000]	[L1: 0.0959][DIV: 0.1318][GRAD: 0.1887][VORT: 0.2578][Total: 0.6743]	4.5+3.1s
[4800/8000]	[L1: 0.0957][DIV: 0.1318][GRAD: 0.1884][VORT: 0.2580][Total: 0.6739]	4.5+3.1s
[5600/8000]	[L1: 0.0971][DIV: 0.1335][GRAD: 0.1913][VORT: 0.2622][Total: 0.6841]	4.5+3.0s
[6400/8000]	[L1: 0.0970][DIV: 0.1333][GRAD: 0.1909][VORT: 0.2613][Total: 0.6825]	4.5+3.1s
[7200/8000]	[L1: 0.0969][DIV: 0.1333][GRAD: 0.1905][VORT: 0.2603][Total: 0.6809]	4.5+3.1s
[8000/8000]	[L1: 0.0974][DIV: 0.1340][GRAD: 0.1918][VORT: 0.2628][Total: 0.6860]	4.5+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.082865	vorticity_error: 0.864275	mean_abs_divergence: 0.115469
[DIV2K x2]	rel_l2_error: 0.059011	vorticity_error: 1.227449	mean_abs_divergence: 0.059729
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.040825	vorticity_error: 3.946439	mean_abs_divergence: 0.028453
Forward: 6.06s

Saving...
Total: 6.38s

[Epoch 53]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0983][DIV: 0.1350][GRAD: 0.1948][VORT: 0.2762][Total: 0.7042]	4.7+7.6s
[1600/8000]	[L1: 0.0976][DIV: 0.1343][GRAD: 0.1929][VORT: 0.2708][Total: 0.6957]	4.5+3.0s
[2400/8000]	[L1: 0.1005][DIV: 0.1370][GRAD: 0.1985][VORT: 0.2766][Total: 0.7127]	4.5+3.1s
[3200/8000]	[L1: 0.0978][DIV: 0.1341][GRAD: 0.1927][VORT: 0.2693][Total: 0.6940]	4.5+3.1s
[4000/8000]	[L1: 0.0976][DIV: 0.1336][GRAD: 0.1919][VORT: 0.2659][Total: 0.6890]	4.5+3.0s
[4800/8000]	[L1: 0.0976][DIV: 0.1339][GRAD: 0.1921][VORT: 0.2669][Total: 0.6905]	4.5+3.1s
[5600/8000]	[L1: 0.0974][DIV: 0.1338][GRAD: 0.1916][VORT: 0.2671][Total: 0.6898]	4.5+3.1s
[6400/8000]	[L1: 0.0971][DIV: 0.1336][GRAD: 0.1909][VORT: 0.2656][Total: 0.6871]	4.5+3.1s
[7200/8000]	[L1: 0.0968][DIV: 0.1328][GRAD: 0.1900][VORT: 0.2648][Total: 0.6844]	4.5+3.1s
[8000/8000]	[L1: 0.0970][DIV: 0.1330][GRAD: 0.1905][VORT: 0.2648][Total: 0.6853]	4.5+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.077161	vorticity_error: 1.281281	mean_abs_divergence: 0.119349
[DIV2K x2]	rel_l2_error: 0.061432	vorticity_error: 1.652214	mean_abs_divergence: 0.063343
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.041885	vorticity_error: 4.941953	mean_abs_divergence: 0.030432
Forward: 6.02s

Saving...
Total: 6.34s

[Epoch 54]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0942][DIV: 0.1274][GRAD: 0.1850][VORT: 0.2572][Total: 0.6638]	4.7+7.6s
[1600/8000]	[L1: 0.0969][DIV: 0.1316][GRAD: 0.1915][VORT: 0.2652][Total: 0.6851]	4.4+3.1s
[2400/8000]	[L1: 0.0948][DIV: 0.1303][GRAD: 0.1871][VORT: 0.2592][Total: 0.6715]	4.6+3.0s
[3200/8000]	[L1: 0.0947][DIV: 0.1303][GRAD: 0.1873][VORT: 0.2596][Total: 0.6720]	4.5+3.1s
[4000/8000]	[L1: 0.0940][DIV: 0.1296][GRAD: 0.1859][VORT: 0.2573][Total: 0.6669]	4.5+3.1s
[4800/8000]	[L1: 0.0937][DIV: 0.1294][GRAD: 0.1853][VORT: 0.2570][Total: 0.6654]	4.5+3.1s
[5600/8000]	[L1: 0.0943][DIV: 0.1300][GRAD: 0.1862][VORT: 0.2580][Total: 0.6684]	4.5+3.1s
[6400/8000]	[L1: 0.0943][DIV: 0.1303][GRAD: 0.1864][VORT: 0.2582][Total: 0.6692]	4.4+3.1s
[7200/8000]	[L1: 0.0943][DIV: 0.1303][GRAD: 0.1863][VORT: 0.2577][Total: 0.6686]	4.5+3.1s
[8000/8000]	[L1: 0.0940][DIV: 0.1298][GRAD: 0.1854][VORT: 0.2563][Total: 0.6655]	4.5+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.089170	vorticity_error: 1.078145	mean_abs_divergence: 0.147220
[DIV2K x2]	rel_l2_error: 0.071480	vorticity_error: 1.325863	mean_abs_divergence: 0.080761
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.050151	vorticity_error: 2.770010	mean_abs_divergence: 0.040170
Forward: 6.06s

Saving...
Total: 6.38s

[Epoch 55]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0978][DIV: 0.1339][GRAD: 0.1906][VORT: 0.2549][Total: 0.6773]	4.8+7.5s
[1600/8000]	[L1: 0.0996][DIV: 0.1348][GRAD: 0.1939][VORT: 0.2629][Total: 0.6911]	4.7+3.0s
[2400/8000]	[L1: 0.0988][DIV: 0.1344][GRAD: 0.1932][VORT: 0.2612][Total: 0.6875]	4.5+3.1s
[3200/8000]	[L1: 0.0992][DIV: 0.1353][GRAD: 0.1943][VORT: 0.2646][Total: 0.6934]	4.5+3.0s
[4000/8000]	[L1: 0.0978][DIV: 0.1343][GRAD: 0.1921][VORT: 0.2620][Total: 0.6861]	4.5+3.0s
[4800/8000]	[L1: 0.0966][DIV: 0.1327][GRAD: 0.1900][VORT: 0.2581][Total: 0.6775]	4.5+3.0s
[5600/8000]	[L1: 0.0950][DIV: 0.1310][GRAD: 0.1865][VORT: 0.2542][Total: 0.6667]	4.5+3.1s
[6400/8000]	[L1: 0.0941][DIV: 0.1297][GRAD: 0.1848][VORT: 0.2530][Total: 0.6616]	4.6+3.0s
[7200/8000]	[L1: 0.0933][DIV: 0.1285][GRAD: 0.1833][VORT: 0.2515][Total: 0.6565]	4.5+3.1s
[8000/8000]	[L1: 0.0927][DIV: 0.1278][GRAD: 0.1822][VORT: 0.2506][Total: 0.6534]	4.5+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.096249	vorticity_error: 1.682569	mean_abs_divergence: 0.121606
[DIV2K x2]	rel_l2_error: 0.075922	vorticity_error: 2.453486	mean_abs_divergence: 0.065065
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.054531	vorticity_error: 8.474151	mean_abs_divergence: 0.032568
Forward: 6.08s

Saving...
Total: 6.46s

[Epoch 56]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0914][DIV: 0.1278][GRAD: 0.1799][VORT: 0.2380][Total: 0.6372]	4.6+7.4s
[1600/8000]	[L1: 0.0925][DIV: 0.1290][GRAD: 0.1835][VORT: 0.2505][Total: 0.6554]	4.5+3.1s
[2400/8000]	[L1: 0.0952][DIV: 0.1318][GRAD: 0.1886][VORT: 0.2583][Total: 0.6739]	4.5+3.1s
[3200/8000]	[L1: 0.0959][DIV: 0.1319][GRAD: 0.1893][VORT: 0.2596][Total: 0.6767]	4.5+3.1s
[4000/8000]	[L1: 0.0960][DIV: 0.1320][GRAD: 0.1895][VORT: 0.2611][Total: 0.6785]	4.5+3.1s
[4800/8000]	[L1: 0.0950][DIV: 0.1310][GRAD: 0.1877][VORT: 0.2598][Total: 0.6735]	4.5+3.1s
[5600/8000]	[L1: 0.0956][DIV: 0.1316][GRAD: 0.1889][VORT: 0.2601][Total: 0.6762]	4.5+3.1s
[6400/8000]	[L1: 0.0956][DIV: 0.1317][GRAD: 0.1886][VORT: 0.2594][Total: 0.6753]	4.5+3.1s
[7200/8000]	[L1: 0.0947][DIV: 0.1306][GRAD: 0.1866][VORT: 0.2568][Total: 0.6686]	4.5+3.1s
[8000/8000]	[L1: 0.0952][DIV: 0.1308][GRAD: 0.1874][VORT: 0.2582][Total: 0.6716]	4.5+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.107341	vorticity_error: 1.387375	mean_abs_divergence: 0.150136
[DIV2K x2]	rel_l2_error: 0.080339	vorticity_error: 1.589584	mean_abs_divergence: 0.082774
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.058362	vorticity_error: 3.294021	mean_abs_divergence: 0.040454
Forward: 6.03s

Saving...
Total: 6.35s

[Epoch 57]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.1021][DIV: 0.1389][GRAD: 0.2017][VORT: 0.2860][Total: 0.7287]	4.7+7.6s
[1600/8000]	[L1: 0.0958][DIV: 0.1334][GRAD: 0.1893][VORT: 0.2636][Total: 0.6820]	4.5+3.1s
[2400/8000]	[L1: 0.0963][DIV: 0.1333][GRAD: 0.1903][VORT: 0.2655][Total: 0.6854]	4.5+3.0s
[3200/8000]	[L1: 0.0971][DIV: 0.1339][GRAD: 0.1918][VORT: 0.2656][Total: 0.6884]	4.5+3.0s
[4000/8000]	[L1: 0.0981][DIV: 0.1346][GRAD: 0.1937][VORT: 0.2668][Total: 0.6932]	4.5+3.1s
[4800/8000]	[L1: 0.0987][DIV: 0.1351][GRAD: 0.1946][VORT: 0.2674][Total: 0.6958]	4.5+3.1s
[5600/8000]	[L1: 0.0979][DIV: 0.1339][GRAD: 0.1929][VORT: 0.2644][Total: 0.6891]	4.5+3.1s
[6400/8000]	[L1: 0.0982][DIV: 0.1345][GRAD: 0.1934][VORT: 0.2657][Total: 0.6918]	4.6+3.0s
[7200/8000]	[L1: 0.0979][DIV: 0.1345][GRAD: 0.1928][VORT: 0.2646][Total: 0.6899]	4.6+3.0s
[8000/8000]	[L1: 0.0981][DIV: 0.1348][GRAD: 0.1930][VORT: 0.2642][Total: 0.6901]	4.5+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.077496	vorticity_error: 1.401780	mean_abs_divergence: 0.118301
[DIV2K x2]	rel_l2_error: 0.062855	vorticity_error: 1.752818	mean_abs_divergence: 0.062361
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.047308	vorticity_error: 5.560147	mean_abs_divergence: 0.030608
Forward: 6.10s

Saving...
Total: 6.41s

[Epoch 58]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0918][DIV: 0.1286][GRAD: 0.1815][VORT: 0.2507][Total: 0.6527]	4.7+7.6s
[1600/8000]	[L1: 0.0943][DIV: 0.1316][GRAD: 0.1857][VORT: 0.2545][Total: 0.6660]	4.5+3.1s
[2400/8000]	[L1: 0.0959][DIV: 0.1330][GRAD: 0.1898][VORT: 0.2610][Total: 0.6796]	4.4+3.1s
[3200/8000]	[L1: 0.0968][DIV: 0.1339][GRAD: 0.1920][VORT: 0.2632][Total: 0.6858]	4.5+3.1s
[4000/8000]	[L1: 0.0948][DIV: 0.1319][GRAD: 0.1881][VORT: 0.2579][Total: 0.6727]	4.5+3.1s
[4800/8000]	[L1: 0.0949][DIV: 0.1317][GRAD: 0.1881][VORT: 0.2577][Total: 0.6724]	4.5+3.1s
[5600/8000]	[L1: 0.0948][DIV: 0.1315][GRAD: 0.1881][VORT: 0.2588][Total: 0.6731]	4.5+3.1s
[6400/8000]	[L1: 0.0948][DIV: 0.1314][GRAD: 0.1879][VORT: 0.2574][Total: 0.6715]	4.5+3.1s
[7200/8000]	[L1: 0.0942][DIV: 0.1304][GRAD: 0.1863][VORT: 0.2560][Total: 0.6668]	4.4+3.1s
[8000/8000]	[L1: 0.0942][DIV: 0.1306][GRAD: 0.1863][VORT: 0.2558][Total: 0.6668]	4.5+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.076249	vorticity_error: 1.004439	mean_abs_divergence: 0.117804
[DIV2K x2]	rel_l2_error: 0.058420	vorticity_error: 1.141422	mean_abs_divergence: 0.063521
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043972	vorticity_error: 1.457752	mean_abs_divergence: 0.032013
Forward: 5.93s

Saving...
Total: 6.25s

[Epoch 59]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0925][DIV: 0.1269][GRAD: 0.1826][VORT: 0.2573][Total: 0.6593]	4.7+7.6s
[1600/8000]	[L1: 0.0950][DIV: 0.1313][GRAD: 0.1876][VORT: 0.2622][Total: 0.6761]	4.5+3.0s
[2400/8000]	[L1: 0.0957][DIV: 0.1320][GRAD: 0.1887][VORT: 0.2637][Total: 0.6801]	4.5+3.1s
[3200/8000]	[L1: 0.0947][DIV: 0.1307][GRAD: 0.1871][VORT: 0.2615][Total: 0.6740]	4.5+3.0s
[4000/8000]	[L1: 0.0945][DIV: 0.1303][GRAD: 0.1864][VORT: 0.2597][Total: 0.6709]	4.5+3.1s
[4800/8000]	[L1: 0.0941][DIV: 0.1301][GRAD: 0.1857][VORT: 0.2586][Total: 0.6686]	4.5+3.1s
[5600/8000]	[L1: 0.0938][DIV: 0.1294][GRAD: 0.1851][VORT: 0.2582][Total: 0.6665]	4.5+3.0s
[6400/8000]	[L1: 0.0935][DIV: 0.1290][GRAD: 0.1843][VORT: 0.2565][Total: 0.6632]	4.4+3.1s
[7200/8000]	[L1: 0.0936][DIV: 0.1290][GRAD: 0.1846][VORT: 0.2573][Total: 0.6645]	4.5+3.1s
[8000/8000]	[L1: 0.0938][DIV: 0.1293][GRAD: 0.1848][VORT: 0.2561][Total: 0.6640]	4.5+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.075232	vorticity_error: 4.455102	mean_abs_divergence: 0.087248
[DIV2K x2]	rel_l2_error: 0.060437	vorticity_error: 1.094491	mean_abs_divergence: 0.047034
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.039781	vorticity_error: 6.257231	mean_abs_divergence: 0.023846
Forward: 6.02s

Saving...
Total: 6.35s

[Epoch 60]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0974][DIV: 0.1351][GRAD: 0.1909][VORT: 0.2542][Total: 0.6776]	4.7+7.5s
[1600/8000]	[L1: 0.0932][DIV: 0.1292][GRAD: 0.1832][VORT: 0.2505][Total: 0.6561]	4.5+3.0s
[2400/8000]	[L1: 0.0917][DIV: 0.1280][GRAD: 0.1804][VORT: 0.2471][Total: 0.6472]	4.5+3.0s
[3200/8000]	[L1: 0.0932][DIV: 0.1295][GRAD: 0.1832][VORT: 0.2503][Total: 0.6562]	4.5+3.1s
[4000/8000]	[L1: 0.0942][DIV: 0.1299][GRAD: 0.1855][VORT: 0.2539][Total: 0.6635]	4.5+3.1s
[4800/8000]	[L1: 0.0950][DIV: 0.1316][GRAD: 0.1873][VORT: 0.2546][Total: 0.6685]	4.5+3.1s
[5600/8000]	[L1: 0.0946][DIV: 0.1310][GRAD: 0.1868][VORT: 0.2556][Total: 0.6681]	4.5+3.1s
[6400/8000]	[L1: 0.0954][DIV: 0.1318][GRAD: 0.1885][VORT: 0.2585][Total: 0.6742]	4.5+3.1s
[7200/8000]	[L1: 0.0947][DIV: 0.1312][GRAD: 0.1871][VORT: 0.2562][Total: 0.6693]	4.4+3.1s
[8000/8000]	[L1: 0.0938][DIV: 0.1301][GRAD: 0.1849][VORT: 0.2528][Total: 0.6616]	4.5+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.099440	vorticity_error: 1.775440	mean_abs_divergence: 0.137097
[DIV2K x2]	rel_l2_error: 0.072306	vorticity_error: 2.537703	mean_abs_divergence: 0.072805
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.055929	vorticity_error: 5.598815	mean_abs_divergence: 0.036078
Forward: 5.91s

Saving...
Total: 6.28s

[Epoch 61]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0915][DIV: 0.1277][GRAD: 0.1810][VORT: 0.2472][Total: 0.6474]	4.7+7.5s
[1600/8000]	[L1: 0.0898][DIV: 0.1253][GRAD: 0.1772][VORT: 0.2444][Total: 0.6367]	4.5+3.0s
[2400/8000]	[L1: 0.0914][DIV: 0.1266][GRAD: 0.1800][VORT: 0.2459][Total: 0.6438]	4.5+3.0s
[3200/8000]	[L1: 0.0927][DIV: 0.1286][GRAD: 0.1828][VORT: 0.2488][Total: 0.6529]	4.5+3.0s
[4000/8000]	[L1: 0.0935][DIV: 0.1294][GRAD: 0.1845][VORT: 0.2513][Total: 0.6588]	4.5+3.0s
[4800/8000]	[L1: 0.0936][DIV: 0.1296][GRAD: 0.1846][VORT: 0.2518][Total: 0.6595]	4.5+3.1s
[5600/8000]	[L1: 0.0946][DIV: 0.1309][GRAD: 0.1865][VORT: 0.2531][Total: 0.6650]	4.6+3.0s
[6400/8000]	[L1: 0.0943][DIV: 0.1307][GRAD: 0.1858][VORT: 0.2523][Total: 0.6632]	4.5+3.1s
[7200/8000]	[L1: 0.0938][DIV: 0.1301][GRAD: 0.1848][VORT: 0.2513][Total: 0.6599]	4.5+3.0s
[8000/8000]	[L1: 0.0947][DIV: 0.1313][GRAD: 0.1869][VORT: 0.2540][Total: 0.6669]	4.5+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.064426	vorticity_error: 0.742003	mean_abs_divergence: 0.097899
[DIV2K x2]	rel_l2_error: 0.051189	vorticity_error: 1.077112	mean_abs_divergence: 0.054557
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.040215	vorticity_error: 2.527978	mean_abs_divergence: 0.027570
Forward: 6.05s

Saving...
Total: 6.42s

[Epoch 62]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0921][DIV: 0.1283][GRAD: 0.1821][VORT: 0.2506][Total: 0.6531]	4.9+7.5s
[1600/8000]	[L1: 0.0946][DIV: 0.1304][GRAD: 0.1874][VORT: 0.2581][Total: 0.6705]	4.5+3.1s
[2400/8000]	[L1: 0.0934][DIV: 0.1298][GRAD: 0.1849][VORT: 0.2525][Total: 0.6607]	4.4+3.1s
[3200/8000]	[L1: 0.0922][DIV: 0.1280][GRAD: 0.1826][VORT: 0.2526][Total: 0.6555]	4.5+3.1s
[4000/8000]	[L1: 0.0911][DIV: 0.1265][GRAD: 0.1797][VORT: 0.2484][Total: 0.6456]	4.4+3.1s
[4800/8000]	[L1: 0.0918][DIV: 0.1276][GRAD: 0.1811][VORT: 0.2512][Total: 0.6517]	4.5+3.1s
[5600/8000]	[L1: 0.0920][DIV: 0.1282][GRAD: 0.1813][VORT: 0.2503][Total: 0.6518]	4.5+3.1s
[6400/8000]	[L1: 0.0924][DIV: 0.1285][GRAD: 0.1821][VORT: 0.2506][Total: 0.6535]	4.5+3.1s
[7200/8000]	[L1: 0.0928][DIV: 0.1287][GRAD: 0.1827][VORT: 0.2515][Total: 0.6556]	4.5+3.1s
[8000/8000]	[L1: 0.0934][DIV: 0.1294][GRAD: 0.1837][VORT: 0.2520][Total: 0.6586]	4.5+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.072843	vorticity_error: 1.099942	mean_abs_divergence: 0.101367
[DIV2K x2]	rel_l2_error: 0.054831	vorticity_error: 1.919618	mean_abs_divergence: 0.054142
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045063	vorticity_error: 3.563259	mean_abs_divergence: 0.026663
Forward: 6.00s

Saving...
Total: 6.33s

[Epoch 63]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.1004][DIV: 0.1411][GRAD: 0.1968][VORT: 0.2611][Total: 0.6994]	4.7+7.5s
[1600/8000]	[L1: 0.1002][DIV: 0.1385][GRAD: 0.1980][VORT: 0.2674][Total: 0.7042]	4.5+3.1s
[2400/8000]	[L1: 0.0964][DIV: 0.1336][GRAD: 0.1905][VORT: 0.2620][Total: 0.6825]	4.5+3.1s
[3200/8000]	[L1: 0.0957][DIV: 0.1330][GRAD: 0.1890][VORT: 0.2584][Total: 0.6761]	4.4+3.1s
[4000/8000]	[L1: 0.0954][DIV: 0.1321][GRAD: 0.1884][VORT: 0.2591][Total: 0.6750]	4.5+3.1s
[4800/8000]	[L1: 0.0953][DIV: 0.1321][GRAD: 0.1878][VORT: 0.2577][Total: 0.6729]	4.4+3.1s
[5600/8000]	[L1: 0.0955][DIV: 0.1322][GRAD: 0.1881][VORT: 0.2576][Total: 0.6734]	4.5+3.0s
[6400/8000]	[L1: 0.0954][DIV: 0.1322][GRAD: 0.1882][VORT: 0.2581][Total: 0.6740]	4.5+3.1s
[7200/8000]	[L1: 0.0955][DIV: 0.1323][GRAD: 0.1882][VORT: 0.2571][Total: 0.6730]	4.4+3.1s
[8000/8000]	[L1: 0.0950][DIV: 0.1317][GRAD: 0.1872][VORT: 0.2561][Total: 0.6701]	4.5+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.076318	vorticity_error: 1.784669	mean_abs_divergence: 0.118822
[DIV2K x2]	rel_l2_error: 0.060449	vorticity_error: 1.838123	mean_abs_divergence: 0.063774
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045946	vorticity_error: 7.453413	mean_abs_divergence: 0.031660
Forward: 5.98s

Saving...
Total: 6.30s

[Epoch 64]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0823][DIV: 0.1140][GRAD: 0.1608][VORT: 0.2245][Total: 0.5815]	4.7+7.5s
[1600/8000]	[L1: 0.0822][DIV: 0.1166][GRAD: 0.1615][VORT: 0.2243][Total: 0.5846]	4.5+3.0s
[2400/8000]	[L1: 0.0864][DIV: 0.1215][GRAD: 0.1698][VORT: 0.2349][Total: 0.6125]	4.4+3.1s
[3200/8000]	[L1: 0.0900][DIV: 0.1264][GRAD: 0.1775][VORT: 0.2439][Total: 0.6378]	4.5+3.1s
[4000/8000]	[L1: 0.0907][DIV: 0.1268][GRAD: 0.1786][VORT: 0.2461][Total: 0.6421]	4.5+3.0s
[4800/8000]	[L1: 0.0920][DIV: 0.1283][GRAD: 0.1815][VORT: 0.2505][Total: 0.6524]	4.5+3.1s
[5600/8000]	[L1: 0.0925][DIV: 0.1290][GRAD: 0.1824][VORT: 0.2504][Total: 0.6544]	4.5+3.1s
[6400/8000]	[L1: 0.0927][DIV: 0.1293][GRAD: 0.1828][VORT: 0.2510][Total: 0.6558]	4.5+3.0s
[7200/8000]	[L1: 0.0936][DIV: 0.1301][GRAD: 0.1845][VORT: 0.2529][Total: 0.6611]	4.5+3.1s
[8000/8000]	[L1: 0.0943][DIV: 0.1310][GRAD: 0.1859][VORT: 0.2548][Total: 0.6661]	4.5+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.072508	vorticity_error: 0.603851	mean_abs_divergence: 0.110723
[DIV2K x2]	rel_l2_error: 0.055230	vorticity_error: 0.668593	mean_abs_divergence: 0.060078
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.037812	vorticity_error: 0.532162	mean_abs_divergence: 0.029326
Forward: 6.08s

Saving...
Total: 6.41s

[Epoch 65]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0887][DIV: 0.1258][GRAD: 0.1749][VORT: 0.2392][Total: 0.6286]	4.7+7.4s
[1600/8000]	[L1: 0.0928][DIV: 0.1304][GRAD: 0.1831][VORT: 0.2526][Total: 0.6588]	4.5+3.0s
[2400/8000]	[L1: 0.0923][DIV: 0.1297][GRAD: 0.1825][VORT: 0.2523][Total: 0.6569]	4.5+3.0s
[3200/8000]	[L1: 0.0921][DIV: 0.1296][GRAD: 0.1821][VORT: 0.2503][Total: 0.6541]	4.5+3.0s
[4000/8000]	[L1: 0.0925][DIV: 0.1304][GRAD: 0.1828][VORT: 0.2514][Total: 0.6572]	4.5+3.1s
[4800/8000]	[L1: 0.0938][DIV: 0.1319][GRAD: 0.1854][VORT: 0.2544][Total: 0.6655]	4.5+3.0s
[5600/8000]	[L1: 0.0934][DIV: 0.1316][GRAD: 0.1846][VORT: 0.2522][Total: 0.6618]	4.5+3.1s
[6400/8000]	[L1: 0.0939][DIV: 0.1316][GRAD: 0.1852][VORT: 0.2539][Total: 0.6646]	4.6+3.0s
[7200/8000]	[L1: 0.0943][DIV: 0.1322][GRAD: 0.1861][VORT: 0.2547][Total: 0.6674]	4.5+3.0s
[8000/8000]	[L1: 0.0943][DIV: 0.1323][GRAD: 0.1861][VORT: 0.2546][Total: 0.6674]	4.5+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.100938	vorticity_error: 1.034474	mean_abs_divergence: 0.128131
[DIV2K x2]	rel_l2_error: 0.075378	vorticity_error: 1.110361	mean_abs_divergence: 0.066943
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.051383	vorticity_error: 1.343317	mean_abs_divergence: 0.032511
Forward: 5.90s

Saving...
Total: 6.22s

[Epoch 66]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0973][DIV: 0.1336][GRAD: 0.1926][VORT: 0.2627][Total: 0.6862]	4.8+7.5s
[1600/8000]	[L1: 0.0926][DIV: 0.1285][GRAD: 0.1830][VORT: 0.2502][Total: 0.6542]	4.5+3.0s
[2400/8000]	[L1: 0.0928][DIV: 0.1290][GRAD: 0.1838][VORT: 0.2512][Total: 0.6568]	4.5+3.0s
[3200/8000]	[L1: 0.0941][DIV: 0.1310][GRAD: 0.1862][VORT: 0.2531][Total: 0.6644]	4.5+3.1s
[4000/8000]	[L1: 0.0946][DIV: 0.1318][GRAD: 0.1878][VORT: 0.2569][Total: 0.6710]	4.5+3.0s
[4800/8000]	[L1: 0.0939][DIV: 0.1309][GRAD: 0.1863][VORT: 0.2551][Total: 0.6662]	4.5+3.1s
[5600/8000]	[L1: 0.0938][DIV: 0.1306][GRAD: 0.1859][VORT: 0.2555][Total: 0.6659]	4.5+3.0s
[6400/8000]	[L1: 0.0936][DIV: 0.1305][GRAD: 0.1853][VORT: 0.2536][Total: 0.6630]	4.5+3.0s
[7200/8000]	[L1: 0.0926][DIV: 0.1294][GRAD: 0.1834][VORT: 0.2511][Total: 0.6564]	4.5+3.0s
[8000/8000]	[L1: 0.0931][DIV: 0.1302][GRAD: 0.1845][VORT: 0.2519][Total: 0.6597]	4.5+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.072385	vorticity_error: 0.751842	mean_abs_divergence: 0.104382
[DIV2K x2]	rel_l2_error: 0.055099	vorticity_error: 0.894392	mean_abs_divergence: 0.055419
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.041246	vorticity_error: 1.715075	mean_abs_divergence: 0.026747
Forward: 6.09s

Saving...
Total: 6.46s

[Epoch 67]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0919][DIV: 0.1268][GRAD: 0.1799][VORT: 0.2418][Total: 0.6404]	4.7+7.5s
[1600/8000]	[L1: 0.0977][DIV: 0.1350][GRAD: 0.1934][VORT: 0.2616][Total: 0.6877]	4.5+3.0s
[2400/8000]	[L1: 0.0970][DIV: 0.1337][GRAD: 0.1915][VORT: 0.2599][Total: 0.6822]	4.5+3.1s
[3200/8000]	[L1: 0.0976][DIV: 0.1348][GRAD: 0.1933][VORT: 0.2623][Total: 0.6880]	4.5+3.1s
[4000/8000]	[L1: 0.0950][DIV: 0.1314][GRAD: 0.1877][VORT: 0.2561][Total: 0.6703]	4.5+3.1s
[4800/8000]	[L1: 0.0965][DIV: 0.1336][GRAD: 0.1909][VORT: 0.2608][Total: 0.6818]	4.5+3.1s
[5600/8000]	[L1: 0.0953][DIV: 0.1324][GRAD: 0.1886][VORT: 0.2577][Total: 0.6741]	4.5+3.1s
[6400/8000]	[L1: 0.0953][DIV: 0.1325][GRAD: 0.1884][VORT: 0.2574][Total: 0.6735]	4.5+3.0s
[7200/8000]	[L1: 0.0946][DIV: 0.1317][GRAD: 0.1869][VORT: 0.2551][Total: 0.6683]	4.5+3.1s
[8000/8000]	[L1: 0.0940][DIV: 0.1309][GRAD: 0.1857][VORT: 0.2543][Total: 0.6650]	4.6+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.072903	vorticity_error: 1.607394	mean_abs_divergence: 0.119430
[DIV2K x2]	rel_l2_error: 0.056183	vorticity_error: 1.797869	mean_abs_divergence: 0.060927
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045055	vorticity_error: 6.010276	mean_abs_divergence: 0.029339
Forward: 5.99s

Saving...
Total: 6.31s

[Epoch 68]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0997][DIV: 0.1390][GRAD: 0.1980][VORT: 0.2713][Total: 0.7080]	4.7+7.4s
[1600/8000]	[L1: 0.0957][DIV: 0.1329][GRAD: 0.1894][VORT: 0.2622][Total: 0.6803]	4.5+3.0s
[2400/8000]	[L1: 0.0945][DIV: 0.1318][GRAD: 0.1867][VORT: 0.2552][Total: 0.6683]	4.5+3.0s
[3200/8000]	[L1: 0.0944][DIV: 0.1318][GRAD: 0.1860][VORT: 0.2544][Total: 0.6666]	4.5+3.1s
[4000/8000]	[L1: 0.0941][DIV: 0.1313][GRAD: 0.1854][VORT: 0.2543][Total: 0.6651]	4.6+3.0s
[4800/8000]	[L1: 0.0936][DIV: 0.1302][GRAD: 0.1842][VORT: 0.2534][Total: 0.6615]	4.5+3.0s
[5600/8000]	[L1: 0.0925][DIV: 0.1288][GRAD: 0.1817][VORT: 0.2505][Total: 0.6535]	4.5+3.1s
[6400/8000]	[L1: 0.0921][DIV: 0.1282][GRAD: 0.1811][VORT: 0.2499][Total: 0.6514]	4.5+3.1s
[7200/8000]	[L1: 0.0918][DIV: 0.1280][GRAD: 0.1808][VORT: 0.2489][Total: 0.6495]	4.5+3.1s
[8000/8000]	[L1: 0.0923][DIV: 0.1282][GRAD: 0.1816][VORT: 0.2504][Total: 0.6525]	4.5+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.082470	vorticity_error: 0.781890	mean_abs_divergence: 0.103549
[DIV2K x2]	rel_l2_error: 0.066776	vorticity_error: 1.029423	mean_abs_divergence: 0.057902
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.055530	vorticity_error: 1.734377	mean_abs_divergence: 0.028597
Forward: 6.01s

Saving...
Total: 6.34s

[Epoch 69]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0948][DIV: 0.1317][GRAD: 0.1874][VORT: 0.2551][Total: 0.6689]	4.7+7.5s
[1600/8000]	[L1: 0.0949][DIV: 0.1323][GRAD: 0.1874][VORT: 0.2544][Total: 0.6690]	4.5+3.1s
[2400/8000]	[L1: 0.0921][DIV: 0.1288][GRAD: 0.1824][VORT: 0.2505][Total: 0.6538]	4.5+3.1s
[3200/8000]	[L1: 0.0928][DIV: 0.1290][GRAD: 0.1836][VORT: 0.2535][Total: 0.6589]	4.6+3.0s
[4000/8000]	[L1: 0.0928][DIV: 0.1290][GRAD: 0.1830][VORT: 0.2520][Total: 0.6569]	4.5+3.1s
[4800/8000]	[L1: 0.0941][DIV: 0.1308][GRAD: 0.1860][VORT: 0.2555][Total: 0.6664]	4.5+3.1s
[5600/8000]	[L1: 0.0944][DIV: 0.1311][GRAD: 0.1865][VORT: 0.2571][Total: 0.6691]	4.5+3.1s
[6400/8000]	[L1: 0.0943][DIV: 0.1314][GRAD: 0.1864][VORT: 0.2567][Total: 0.6688]	4.5+3.1s
[7200/8000]	[L1: 0.0944][DIV: 0.1313][GRAD: 0.1866][VORT: 0.2574][Total: 0.6697]	4.5+3.1s
[8000/8000]	[L1: 0.0936][DIV: 0.1304][GRAD: 0.1849][VORT: 0.2550][Total: 0.6639]	4.5+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.090660	vorticity_error: 1.024097	mean_abs_divergence: 0.144239
[DIV2K x2]	rel_l2_error: 0.067408	vorticity_error: 0.884303	mean_abs_divergence: 0.075060
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045569	vorticity_error: 2.434645	mean_abs_divergence: 0.035488
Forward: 5.98s

Saving...
Total: 6.31s

[Epoch 70]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0907][DIV: 0.1286][GRAD: 0.1774][VORT: 0.2381][Total: 0.6349]	4.7+7.5s
[1600/8000]	[L1: 0.0940][DIV: 0.1307][GRAD: 0.1853][VORT: 0.2526][Total: 0.6625]	4.5+3.1s
[2400/8000]	[L1: 0.0940][DIV: 0.1313][GRAD: 0.1851][VORT: 0.2514][Total: 0.6617]	4.5+3.1s
[3200/8000]	[L1: 0.0936][DIV: 0.1306][GRAD: 0.1843][VORT: 0.2495][Total: 0.6580]	4.5+3.0s
[4000/8000]	[L1: 0.0944][DIV: 0.1313][GRAD: 0.1860][VORT: 0.2523][Total: 0.6640]	4.5+3.1s
[4800/8000]	[L1: 0.0950][DIV: 0.1322][GRAD: 0.1874][VORT: 0.2543][Total: 0.6689]	4.5+3.1s
[5600/8000]	[L1: 0.0947][DIV: 0.1317][GRAD: 0.1873][VORT: 0.2542][Total: 0.6680]	4.5+3.1s
[6400/8000]	[L1: 0.0949][DIV: 0.1324][GRAD: 0.1876][VORT: 0.2534][Total: 0.6683]	4.5+3.1s
[7200/8000]	[L1: 0.0947][DIV: 0.1323][GRAD: 0.1874][VORT: 0.2532][Total: 0.6676]	4.5+3.1s
[8000/8000]	[L1: 0.0943][DIV: 0.1317][GRAD: 0.1863][VORT: 0.2519][Total: 0.6642]	4.5+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.074064	vorticity_error: 1.620392	mean_abs_divergence: 0.117000
[DIV2K x2]	rel_l2_error: 0.057803	vorticity_error: 1.019841	mean_abs_divergence: 0.061876
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.040902	vorticity_error: 3.234941	mean_abs_divergence: 0.030810
Forward: 5.94s

Saving...
Total: 6.26s

LapSRN(
  (head_x8): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (head_x4): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (head_x2): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (feature_extractor_x4): FeatureExtraction(
    (body): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
  )
  (feature_extractor_x2): FeatureExtraction(
    (body): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
  )
  (upsample_block_x4): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(32, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (upsample_block_x2): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(32, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (upsample_block_x1): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(32, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 1]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0924][DIV: 0.1287][GRAD: 0.1815][VORT: 0.2471][Total: 0.6497]	4.7+3.1s
[1600/8000]	[L1: 0.0918][DIV: 0.1286][GRAD: 0.1805][VORT: 0.2495][Total: 0.6503]	4.5+3.0s
[2400/8000]	[L1: 0.0923][DIV: 0.1276][GRAD: 0.1811][VORT: 0.2497][Total: 0.6508]	4.5+3.1s
[3200/8000]	[L1: 0.0921][DIV: 0.1279][GRAD: 0.1814][VORT: 0.2503][Total: 0.6517]	4.5+3.0s
[4000/8000]	[L1: 0.0926][DIV: 0.1285][GRAD: 0.1827][VORT: 0.2525][Total: 0.6563]	4.4+3.0s
[4800/8000]	[L1: 0.0924][DIV: 0.1285][GRAD: 0.1824][VORT: 0.2512][Total: 0.6545]	4.4+3.0s
[5600/8000]	[L1: 0.0925][DIV: 0.1289][GRAD: 0.1824][VORT: 0.2508][Total: 0.6546]	4.4+3.0s
[6400/8000]	[L1: 0.0926][DIV: 0.1285][GRAD: 0.1827][VORT: 0.2508][Total: 0.6546]	4.4+3.1s
[7200/8000]	[L1: 0.0930][DIV: 0.1291][GRAD: 0.1835][VORT: 0.2514][Total: 0.6569]	4.5+3.0s
[8000/8000]	[L1: 0.0936][DIV: 0.1300][GRAD: 0.1848][VORT: 0.2527][Total: 0.6611]	4.4+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.085908	vorticity_error: 2.026285	mean_abs_divergence: 0.130398
[DIV2K x2]	rel_l2_error: 0.067337	vorticity_error: 1.299702	mean_abs_divergence: 0.071027
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045865	vorticity_error: 6.081715	mean_abs_divergence: 0.034797
[INFO] New best model found with rel_l2_error on final output: 0.045865
Forward: 1.32s

Saving...
LapSRN(
  (head_x8): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (head_x4): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (head_x2): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (feature_extractor_x4): FeatureExtraction(
    (body): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
  )
  (feature_extractor_x2): FeatureExtraction(
    (body): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
  )
  (upsample_block_x4): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(32, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (upsample_block_x2): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(32, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (upsample_block_x1): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(32, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 1]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.3940][DIV: 0.1285][GRAD: 0.3924][VORT: 0.6512][Total: 1.5661]	4.9+3.1s
[1600/8000]	[L1: 0.2994][DIV: 0.1257][GRAD: 0.3293][VORT: 0.5293][Total: 1.2837]	4.7+3.1s
[2400/8000]	[L1: 0.2563][DIV: 0.1292][GRAD: 0.3051][VORT: 0.4831][Total: 1.1737]	4.8+3.2s
[3200/8000]	[L1: 0.2321][DIV: 0.1305][GRAD: 0.2910][VORT: 0.4579][Total: 1.1115]	4.7+3.1s
LapSRN(
  (head_x8): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (head_x4): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (head_x2): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (feature_extractor_x4): FeatureExtraction(
    (body): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
  )
  (feature_extractor_x2): FeatureExtraction(
    (body): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
  )
  (upsample_block_x4): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(32, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (upsample_block_x2): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(32, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (upsample_block_x1): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(32, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 1]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0890][DIV: 0.1252][GRAD: 0.1766][VORT: 0.2409][Total: 0.6317]	5.0+3.1s
[1600/8000]	[L1: 0.0913][DIV: 0.1280][GRAD: 0.1814][VORT: 0.2448][Total: 0.6456]	4.9+3.3s
[2400/8000]	[L1: 0.0922][DIV: 0.1281][GRAD: 0.1826][VORT: 0.2489][Total: 0.6518]	4.9+3.2s
[3200/8000]	[L1: 0.0929][DIV: 0.1294][GRAD: 0.1839][VORT: 0.2506][Total: 0.6568]	4.9+3.2s
[4000/8000]	[L1: 0.0935][DIV: 0.1297][GRAD: 0.1854][VORT: 0.2537][Total: 0.6624]	4.9+3.2s
[4800/8000]	[L1: 0.0933][DIV: 0.1296][GRAD: 0.1849][VORT: 0.2540][Total: 0.6618]	4.7+3.1s
[5600/8000]	[L1: 0.0929][DIV: 0.1293][GRAD: 0.1842][VORT: 0.2534][Total: 0.6598]	4.8+3.1s
[6400/8000]	[L1: 0.0923][DIV: 0.1288][GRAD: 0.1829][VORT: 0.2516][Total: 0.6555]	4.7+3.1s
[7200/8000]	[L1: 0.0926][DIV: 0.1294][GRAD: 0.1833][VORT: 0.2513][Total: 0.6566]	4.8+3.1s
[8000/8000]	[L1: 0.0928][DIV: 0.1297][GRAD: 0.1836][VORT: 0.2516][Total: 0.6577]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.068517	vorticity_error: 0.890091	mean_abs_divergence: 0.119227
[DIV2K x2]	rel_l2_error: 0.053871	vorticity_error: 1.250608	mean_abs_divergence: 0.062550
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042910	vorticity_error: 2.983919	mean_abs_divergence: 0.030659
[INFO] New best model found with rel_l2_error on final output: 0.042910
Forward: 1.35s

Saving...
Total: 1.81s

[Epoch 2]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0940][DIV: 0.1318][GRAD: 0.1851][VORT: 0.2490][Total: 0.6599]	4.7+3.1s
[1600/8000]	[L1: 0.0926][DIV: 0.1293][GRAD: 0.1827][VORT: 0.2489][Total: 0.6535]	4.7+3.2s
[2400/8000]	[L1: 0.0936][DIV: 0.1304][GRAD: 0.1850][VORT: 0.2512][Total: 0.6602]	4.8+3.2s
[3200/8000]	[L1: 0.0929][DIV: 0.1291][GRAD: 0.1837][VORT: 0.2498][Total: 0.6555]	4.7+3.1s
[4000/8000]	[L1: 0.0941][DIV: 0.1309][GRAD: 0.1860][VORT: 0.2523][Total: 0.6632]	4.7+3.1s
[4800/8000]	[L1: 0.0936][DIV: 0.1305][GRAD: 0.1852][VORT: 0.2523][Total: 0.6616]	4.7+3.1s
[5600/8000]	[L1: 0.0950][DIV: 0.1321][GRAD: 0.1879][VORT: 0.2554][Total: 0.6705]	4.7+3.1s
[6400/8000]	[L1: 0.0941][DIV: 0.1313][GRAD: 0.1863][VORT: 0.2535][Total: 0.6652]	4.7+3.1s
[7200/8000]	[L1: 0.0941][DIV: 0.1313][GRAD: 0.1862][VORT: 0.2534][Total: 0.6651]	4.7+3.1s
[8000/8000]	[L1: 0.0944][DIV: 0.1318][GRAD: 0.1868][VORT: 0.2537][Total: 0.6667]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.094735	vorticity_error: 1.154915	mean_abs_divergence: 0.145449
[DIV2K x2]	rel_l2_error: 0.071227	vorticity_error: 1.613468	mean_abs_divergence: 0.078887
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.049713	vorticity_error: 3.019928	mean_abs_divergence: 0.038667
Forward: 1.31s

Saving...
Total: 1.64s

[Epoch 3]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0952][DIV: 0.1326][GRAD: 0.1873][VORT: 0.2523][Total: 0.6675]	4.7+3.1s
[1600/8000]	[L1: 0.0959][DIV: 0.1332][GRAD: 0.1901][VORT: 0.2599][Total: 0.6790]	4.6+3.1s
[2400/8000]	[L1: 0.0973][DIV: 0.1360][GRAD: 0.1930][VORT: 0.2627][Total: 0.6891]	4.7+3.2s
[3200/8000]	[L1: 0.0985][DIV: 0.1374][GRAD: 0.1949][VORT: 0.2632][Total: 0.6940]	4.7+3.2s
[4000/8000]	[L1: 0.0967][DIV: 0.1349][GRAD: 0.1914][VORT: 0.2600][Total: 0.6830]	4.8+3.1s
[4800/8000]	[L1: 0.0969][DIV: 0.1353][GRAD: 0.1918][VORT: 0.2593][Total: 0.6832]	4.7+3.2s
[5600/8000]	[L1: 0.0957][DIV: 0.1337][GRAD: 0.1895][VORT: 0.2575][Total: 0.6764]	4.7+3.2s
[6400/8000]	[L1: 0.0953][DIV: 0.1334][GRAD: 0.1887][VORT: 0.2561][Total: 0.6735]	4.7+3.2s
[7200/8000]	[L1: 0.0952][DIV: 0.1333][GRAD: 0.1883][VORT: 0.2558][Total: 0.6727]	4.8+3.2s
[8000/8000]	[L1: 0.0951][DIV: 0.1333][GRAD: 0.1880][VORT: 0.2545][Total: 0.6708]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.073279	vorticity_error: 1.091701	mean_abs_divergence: 0.129428
[DIV2K x2]	rel_l2_error: 0.060324	vorticity_error: 1.324476	mean_abs_divergence: 0.069221
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045538	vorticity_error: 4.560287	mean_abs_divergence: 0.033999
Forward: 1.32s

Saving...
Total: 1.65s

[Epoch 4]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0930][DIV: 0.1305][GRAD: 0.1846][VORT: 0.2520][Total: 0.6602]	4.7+3.1s
[1600/8000]	[L1: 0.0938][DIV: 0.1314][GRAD: 0.1846][VORT: 0.2546][Total: 0.6644]	4.6+3.1s
[2400/8000]	[L1: 0.0924][DIV: 0.1292][GRAD: 0.1822][VORT: 0.2519][Total: 0.6557]	4.7+3.1s
[3200/8000]	[L1: 0.0953][DIV: 0.1329][GRAD: 0.1881][VORT: 0.2570][Total: 0.6732]	4.6+3.1s
[4000/8000]	[L1: 0.0940][DIV: 0.1314][GRAD: 0.1856][VORT: 0.2520][Total: 0.6630]	4.7+3.1s
[4800/8000]	[L1: 0.0940][DIV: 0.1314][GRAD: 0.1857][VORT: 0.2532][Total: 0.6643]	4.7+3.1s
[5600/8000]	[L1: 0.0931][DIV: 0.1301][GRAD: 0.1840][VORT: 0.2520][Total: 0.6593]	4.7+3.1s
[6400/8000]	[L1: 0.0937][DIV: 0.1306][GRAD: 0.1853][VORT: 0.2535][Total: 0.6630]	4.7+3.1s
[7200/8000]	[L1: 0.0938][DIV: 0.1307][GRAD: 0.1854][VORT: 0.2530][Total: 0.6629]	4.7+3.1s
[8000/8000]	[L1: 0.0935][DIV: 0.1305][GRAD: 0.1849][VORT: 0.2519][Total: 0.6608]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.078554	vorticity_error: 0.969522	mean_abs_divergence: 0.121989
[DIV2K x2]	rel_l2_error: 0.060202	vorticity_error: 1.249876	mean_abs_divergence: 0.064643
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042256	vorticity_error: 2.942247	mean_abs_divergence: 0.031879
[INFO] New best model found with rel_l2_error on final output: 0.042256
Forward: 1.28s

Saving...
Total: 1.64s

[Epoch 5]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.1010][DIV: 0.1396][GRAD: 0.2004][VORT: 0.2701][Total: 0.7110]	4.8+3.0s
[1600/8000]	[L1: 0.0972][DIV: 0.1356][GRAD: 0.1925][VORT: 0.2616][Total: 0.6868]	4.7+3.1s
[2400/8000]	[L1: 0.0973][DIV: 0.1351][GRAD: 0.1925][VORT: 0.2615][Total: 0.6863]	4.7+3.1s
[3200/8000]	[L1: 0.0968][DIV: 0.1347][GRAD: 0.1918][VORT: 0.2620][Total: 0.6854]	4.6+3.1s
[4000/8000]	[L1: 0.0961][DIV: 0.1336][GRAD: 0.1903][VORT: 0.2607][Total: 0.6806]	4.7+3.0s
[4800/8000]	[L1: 0.0966][DIV: 0.1342][GRAD: 0.1911][VORT: 0.2616][Total: 0.6835]	4.6+3.1s
[5600/8000]	[L1: 0.0970][DIV: 0.1344][GRAD: 0.1916][VORT: 0.2620][Total: 0.6850]	4.7+3.1s
[6400/8000]	[L1: 0.0963][DIV: 0.1338][GRAD: 0.1902][VORT: 0.2603][Total: 0.6806]	4.7+3.0s
[7200/8000]	[L1: 0.0960][DIV: 0.1337][GRAD: 0.1899][VORT: 0.2591][Total: 0.6787]	4.7+3.1s
[8000/8000]	[L1: 0.0963][DIV: 0.1340][GRAD: 0.1906][VORT: 0.2592][Total: 0.6802]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.075692	vorticity_error: 0.900416	mean_abs_divergence: 0.120761
[DIV2K x2]	rel_l2_error: 0.056359	vorticity_error: 0.991991	mean_abs_divergence: 0.062936
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.041758	vorticity_error: 3.121211	mean_abs_divergence: 0.030172
[INFO] New best model found with rel_l2_error on final output: 0.041758
Forward: 1.24s

Saving...
Total: 1.60s

[Epoch 6]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0942][DIV: 0.1290][GRAD: 0.1847][VORT: 0.2480][Total: 0.6560]	4.7+3.0s
[1600/8000]	[L1: 0.0952][DIV: 0.1313][GRAD: 0.1877][VORT: 0.2540][Total: 0.6682]	4.7+3.1s
[2400/8000]	[L1: 0.0936][DIV: 0.1302][GRAD: 0.1853][VORT: 0.2510][Total: 0.6603]	4.7+3.1s
[3200/8000]	[L1: 0.0930][DIV: 0.1294][GRAD: 0.1835][VORT: 0.2488][Total: 0.6548]	4.7+3.1s
[4000/8000]	[L1: 0.0938][DIV: 0.1300][GRAD: 0.1849][VORT: 0.2523][Total: 0.6610]	4.7+3.1s
[4800/8000]	[L1: 0.0944][DIV: 0.1307][GRAD: 0.1864][VORT: 0.2551][Total: 0.6666]	4.7+3.0s
[5600/8000]	[L1: 0.0937][DIV: 0.1302][GRAD: 0.1850][VORT: 0.2535][Total: 0.6624]	4.7+3.1s
[6400/8000]	[L1: 0.0929][DIV: 0.1294][GRAD: 0.1835][VORT: 0.2509][Total: 0.6568]	4.7+3.1s
[7200/8000]	[L1: 0.0927][DIV: 0.1293][GRAD: 0.1830][VORT: 0.2496][Total: 0.6547]	4.7+3.1s
[8000/8000]	[L1: 0.0923][DIV: 0.1290][GRAD: 0.1822][VORT: 0.2483][Total: 0.6517]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.093069	vorticity_error: 0.942595	mean_abs_divergence: 0.123131
[DIV2K x2]	rel_l2_error: 0.074197	vorticity_error: 1.121462	mean_abs_divergence: 0.067699
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048138	vorticity_error: 3.110497	mean_abs_divergence: 0.034138
Forward: 1.25s

Saving...
Total: 1.58s

[Epoch 7]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.1029][DIV: 0.1419][GRAD: 0.2022][VORT: 0.2726][Total: 0.7197]	4.7+3.1s
[1600/8000]	[L1: 0.0960][DIV: 0.1331][GRAD: 0.1891][VORT: 0.2589][Total: 0.6771]	4.7+3.1s
[2400/8000]	[L1: 0.0939][DIV: 0.1310][GRAD: 0.1856][VORT: 0.2550][Total: 0.6655]	4.7+3.1s
[3200/8000]	[L1: 0.0943][DIV: 0.1321][GRAD: 0.1867][VORT: 0.2556][Total: 0.6687]	4.7+3.0s
[4000/8000]	[L1: 0.0948][DIV: 0.1329][GRAD: 0.1879][VORT: 0.2570][Total: 0.6725]	4.7+3.1s
[4800/8000]	[L1: 0.0942][DIV: 0.1322][GRAD: 0.1872][VORT: 0.2564][Total: 0.6700]	4.7+3.1s
[5600/8000]	[L1: 0.0942][DIV: 0.1323][GRAD: 0.1869][VORT: 0.2553][Total: 0.6688]	4.7+3.1s
[6400/8000]	[L1: 0.0947][DIV: 0.1328][GRAD: 0.1879][VORT: 0.2553][Total: 0.6708]	4.7+3.1s
[7200/8000]	[L1: 0.0943][DIV: 0.1323][GRAD: 0.1872][VORT: 0.2549][Total: 0.6687]	4.6+3.1s
[8000/8000]	[L1: 0.0941][DIV: 0.1318][GRAD: 0.1868][VORT: 0.2548][Total: 0.6675]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.080949	vorticity_error: 1.297338	mean_abs_divergence: 0.145980
[DIV2K x2]	rel_l2_error: 0.059617	vorticity_error: 1.326129	mean_abs_divergence: 0.078766
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044723	vorticity_error: 3.679866	mean_abs_divergence: 0.039392
Forward: 1.24s

Saving...
Total: 1.57s

[Epoch 8]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0959][DIV: 0.1342][GRAD: 0.1920][VORT: 0.2598][Total: 0.6819]	4.7+3.1s
[1600/8000]	[L1: 0.0943][DIV: 0.1325][GRAD: 0.1870][VORT: 0.2530][Total: 0.6669]	4.7+3.0s
[2400/8000]	[L1: 0.0932][DIV: 0.1305][GRAD: 0.1844][VORT: 0.2502][Total: 0.6584]	4.7+3.1s
[3200/8000]	[L1: 0.0927][DIV: 0.1298][GRAD: 0.1829][VORT: 0.2475][Total: 0.6529]	4.7+3.0s
[4000/8000]	[L1: 0.0930][DIV: 0.1303][GRAD: 0.1837][VORT: 0.2498][Total: 0.6567]	4.7+3.1s
[4800/8000]	[L1: 0.0926][DIV: 0.1294][GRAD: 0.1827][VORT: 0.2497][Total: 0.6544]	4.7+3.1s
[5600/8000]	[L1: 0.0921][DIV: 0.1289][GRAD: 0.1818][VORT: 0.2491][Total: 0.6519]	4.7+3.1s
[6400/8000]	[L1: 0.0926][DIV: 0.1295][GRAD: 0.1828][VORT: 0.2503][Total: 0.6553]	4.7+3.1s
[7200/8000]	[L1: 0.0922][DIV: 0.1290][GRAD: 0.1818][VORT: 0.2486][Total: 0.6516]	4.7+3.1s
[8000/8000]	[L1: 0.0921][DIV: 0.1289][GRAD: 0.1817][VORT: 0.2487][Total: 0.6515]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.074462	vorticity_error: 0.657543	mean_abs_divergence: 0.086332
[DIV2K x2]	rel_l2_error: 0.057677	vorticity_error: 0.673424	mean_abs_divergence: 0.046075
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042929	vorticity_error: 1.194109	mean_abs_divergence: 0.022842
Forward: 1.27s

Saving...
Total: 1.60s

[Epoch 9]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.1017][DIV: 0.1397][GRAD: 0.2011][VORT: 0.2811][Total: 0.7236]	4.7+3.0s
[1600/8000]	[L1: 0.0956][DIV: 0.1337][GRAD: 0.1891][VORT: 0.2605][Total: 0.6788]	4.7+3.1s
[2400/8000]	[L1: 0.0941][DIV: 0.1322][GRAD: 0.1860][VORT: 0.2550][Total: 0.6672]	4.7+3.1s
[3200/8000]	[L1: 0.0930][DIV: 0.1309][GRAD: 0.1839][VORT: 0.2517][Total: 0.6594]	4.8+3.0s
[4000/8000]	[L1: 0.0940][DIV: 0.1318][GRAD: 0.1864][VORT: 0.2577][Total: 0.6700]	4.7+3.1s
[4800/8000]	[L1: 0.0948][DIV: 0.1331][GRAD: 0.1885][VORT: 0.2602][Total: 0.6766]	4.7+3.0s
[5600/8000]	[L1: 0.0930][DIV: 0.1309][GRAD: 0.1848][VORT: 0.2537][Total: 0.6624]	4.7+3.1s
[6400/8000]	[L1: 0.0923][DIV: 0.1297][GRAD: 0.1832][VORT: 0.2511][Total: 0.6562]	4.7+3.1s
[7200/8000]	[L1: 0.0912][DIV: 0.1284][GRAD: 0.1810][VORT: 0.2477][Total: 0.6482]	4.7+3.1s
[8000/8000]	[L1: 0.0909][DIV: 0.1280][GRAD: 0.1806][VORT: 0.2474][Total: 0.6469]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.093918	vorticity_error: 1.232162	mean_abs_divergence: 0.127642
[DIV2K x2]	rel_l2_error: 0.069913	vorticity_error: 1.730421	mean_abs_divergence: 0.070899
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.050733	vorticity_error: 2.594692	mean_abs_divergence: 0.035089
Forward: 1.26s

Saving...
Total: 1.59s

[Epoch 10]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0909][DIV: 0.1284][GRAD: 0.1806][VORT: 0.2404][Total: 0.6404]	4.7+3.1s
[1600/8000]	[L1: 0.0940][DIV: 0.1318][GRAD: 0.1869][VORT: 0.2479][Total: 0.6607]	4.7+3.1s
[2400/8000]	[L1: 0.0957][DIV: 0.1345][GRAD: 0.1903][VORT: 0.2550][Total: 0.6755]	4.7+3.1s
[3200/8000]	[L1: 0.0953][DIV: 0.1337][GRAD: 0.1892][VORT: 0.2536][Total: 0.6717]	4.8+3.0s
[4000/8000]	[L1: 0.0961][DIV: 0.1346][GRAD: 0.1911][VORT: 0.2582][Total: 0.6801]	4.9+3.1s
LapSRN(
  (head_x8): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (head_x4): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (head_x2): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (feature_extractor_x4): FeatureExtraction(
    (body): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
  )
  (feature_extractor_x2): FeatureExtraction(
    (body): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
  )
  (upsample_block_x4): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(32, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (upsample_block_x2): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(32, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (upsample_block_x1): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(32, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 81]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.4095][DIV: 0.1282][GRAD: 0.3890][VORT: 0.6321][Total: 1.5589]	4.9+3.1s
[1600/8000]	[L1: 0.3038][DIV: 0.1312][GRAD: 0.3365][VORT: 0.5329][Total: 1.3044]	4.8+3.2s
[2400/8000]	[L1: 0.2581][DIV: 0.1285][GRAD: 0.3048][VORT: 0.4823][Total: 1.1737]	4.7+3.2s
[3200/8000]	[L1: 0.2303][DIV: 0.1272][GRAD: 0.2849][VORT: 0.4482][Total: 1.0906]	4.7+3.1s
LapSRN(
  (head_x8): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (head_x4): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (head_x2): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (feature_extractor_x4): FeatureExtraction(
    (body): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
  )
  (feature_extractor_x2): FeatureExtraction(
    (body): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
  )
  (upsample_block_x4): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(32, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (upsample_block_x2): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(32, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (upsample_block_x1): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(32, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 80]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.3856][DIV: 0.1196][GRAD: 0.3674][VORT: 0.6000][Total: 1.4726]	5.0+3.1s
[1600/8000]	[L1: 0.2939][DIV: 0.1249][GRAD: 0.3218][VORT: 0.5112][Total: 1.2518]	4.7+3.1s
LapSRN(
  (head_x8): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (head_x4): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (head_x2): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (feature_extractor_x4): FeatureExtraction(
    (body): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
  )
  (feature_extractor_x2): FeatureExtraction(
    (body): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
  )
  (upsample_block_x4): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(32, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (upsample_block_x2): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(32, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (upsample_block_x1): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(32, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 80]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0857][DIV: 0.1233][GRAD: 0.1708][VORT: 0.2405][Total: 0.6203]	5.0+3.1s
[1600/8000]	[L1: 0.0946][DIV: 0.1328][GRAD: 0.1876][VORT: 0.2582][Total: 0.6732]	4.8+3.2s
[2400/8000]	[L1: 0.0958][DIV: 0.1341][GRAD: 0.1902][VORT: 0.2634][Total: 0.6835]	4.8+3.2s
[3200/8000]	[L1: 0.0938][DIV: 0.1316][GRAD: 0.1857][VORT: 0.2564][Total: 0.6675]	4.8+3.2s
[4000/8000]	[L1: 0.0947][DIV: 0.1326][GRAD: 0.1876][VORT: 0.2568][Total: 0.6718]	4.8+3.1s
[4800/8000]	[L1: 0.0937][DIV: 0.1315][GRAD: 0.1856][VORT: 0.2539][Total: 0.6648]	4.7+3.2s
[5600/8000]	[L1: 0.0925][DIV: 0.1300][GRAD: 0.1830][VORT: 0.2500][Total: 0.6555]	4.8+3.1s
[6400/8000]	[L1: 0.0922][DIV: 0.1298][GRAD: 0.1825][VORT: 0.2484][Total: 0.6530]	4.7+3.1s
[7200/8000]	[L1: 0.0933][DIV: 0.1312][GRAD: 0.1849][VORT: 0.2522][Total: 0.6615]	4.7+3.1s
[8000/8000]	[L1: 0.0937][DIV: 0.1316][GRAD: 0.1857][VORT: 0.2530][Total: 0.6639]	4.6+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.093933	vorticity_error: 4.052478	mean_abs_divergence: 0.150772
[DIV2K x2]	rel_l2_error: 0.069295	vorticity_error: 5.884475	mean_abs_divergence: 0.081374
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.052022	vorticity_error: 6.984226	mean_abs_divergence: 0.039801
[INFO] New best model found with rel_l2_error on final output: 0.052022
Forward: 1.27s

Saving...
Total: 1.71s

[Epoch 81]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0900][DIV: 0.1246][GRAD: 0.1762][VORT: 0.2403][Total: 0.6312]	4.7+3.1s
[1600/8000]	[L1: 0.0896][DIV: 0.1259][GRAD: 0.1768][VORT: 0.2451][Total: 0.6375]	4.7+3.1s
[2400/8000]	[L1: 0.0932][DIV: 0.1312][GRAD: 0.1845][VORT: 0.2536][Total: 0.6626]	4.7+3.1s
[3200/8000]	[L1: 0.0915][DIV: 0.1292][GRAD: 0.1814][VORT: 0.2487][Total: 0.6508]	4.7+3.1s
[4000/8000]	[L1: 0.0915][DIV: 0.1293][GRAD: 0.1814][VORT: 0.2487][Total: 0.6509]	4.7+3.1s
[4800/8000]	[L1: 0.0915][DIV: 0.1291][GRAD: 0.1813][VORT: 0.2482][Total: 0.6501]	4.9+3.0s
[5600/8000]	[L1: 0.0914][DIV: 0.1287][GRAD: 0.1807][VORT: 0.2475][Total: 0.6483]	4.7+3.1s
[6400/8000]	[L1: 0.0917][DIV: 0.1289][GRAD: 0.1814][VORT: 0.2483][Total: 0.6503]	4.7+3.1s
[7200/8000]	[L1: 0.0927][DIV: 0.1305][GRAD: 0.1834][VORT: 0.2506][Total: 0.6572]	4.7+3.1s
[8000/8000]	[L1: 0.0925][DIV: 0.1304][GRAD: 0.1832][VORT: 0.2503][Total: 0.6563]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.080202	vorticity_error: 3.416991	mean_abs_divergence: 0.137480
[DIV2K x2]	rel_l2_error: 0.067099	vorticity_error: 1.237030	mean_abs_divergence: 0.073252
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.047805	vorticity_error: 4.348069	mean_abs_divergence: 0.034902
[INFO] New best model found with rel_l2_error on final output: 0.047805
Forward: 1.28s

Saving...
Total: 1.65s

[Epoch 82]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0958][DIV: 0.1329][GRAD: 0.1878][VORT: 0.2541][Total: 0.6706]	4.7+3.1s
[1600/8000]	[L1: 0.0967][DIV: 0.1350][GRAD: 0.1909][VORT: 0.2567][Total: 0.6793]	4.7+3.1s
[2400/8000]	[L1: 0.0943][DIV: 0.1333][GRAD: 0.1872][VORT: 0.2523][Total: 0.6671]	4.7+3.1s
[3200/8000]	[L1: 0.0951][DIV: 0.1344][GRAD: 0.1885][VORT: 0.2522][Total: 0.6701]	4.7+3.1s
[4000/8000]	[L1: 0.0958][DIV: 0.1355][GRAD: 0.1903][VORT: 0.2564][Total: 0.6780]	4.7+3.1s
[4800/8000]	[L1: 0.0952][DIV: 0.1347][GRAD: 0.1891][VORT: 0.2548][Total: 0.6738]	4.7+3.1s
[5600/8000]	[L1: 0.0950][DIV: 0.1343][GRAD: 0.1887][VORT: 0.2541][Total: 0.6722]	4.7+3.1s
[6400/8000]	[L1: 0.0942][DIV: 0.1335][GRAD: 0.1872][VORT: 0.2525][Total: 0.6673]	4.7+3.1s
[7200/8000]	[L1: 0.0945][DIV: 0.1337][GRAD: 0.1879][VORT: 0.2539][Total: 0.6700]	4.7+3.1s
[8000/8000]	[L1: 0.0933][DIV: 0.1325][GRAD: 0.1856][VORT: 0.2518][Total: 0.6632]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.076619	vorticity_error: 3.412179	mean_abs_divergence: 0.101079
[DIV2K x2]	rel_l2_error: 0.058782	vorticity_error: 1.477637	mean_abs_divergence: 0.052982
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.055212	vorticity_error: 4.282063	mean_abs_divergence: 0.025293
Forward: 1.32s

Saving...
Total: 1.63s

[Epoch 83]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0964][DIV: 0.1368][GRAD: 0.1924][VORT: 0.2576][Total: 0.6833]	4.7+3.1s
[1600/8000]	[L1: 0.0930][DIV: 0.1308][GRAD: 0.1847][VORT: 0.2513][Total: 0.6598]	4.7+3.1s
[2400/8000]	[L1: 0.0922][DIV: 0.1300][GRAD: 0.1830][VORT: 0.2482][Total: 0.6535]	4.7+3.1s
[3200/8000]	[L1: 0.0904][DIV: 0.1275][GRAD: 0.1792][VORT: 0.2441][Total: 0.6411]	4.7+3.1s
[4000/8000]	[L1: 0.0907][DIV: 0.1275][GRAD: 0.1801][VORT: 0.2471][Total: 0.6453]	4.8+3.1s
[4800/8000]	[L1: 0.0917][DIV: 0.1286][GRAD: 0.1819][VORT: 0.2502][Total: 0.6524]	4.7+3.1s
[5600/8000]	[L1: 0.0923][DIV: 0.1293][GRAD: 0.1831][VORT: 0.2509][Total: 0.6556]	4.7+3.1s
[6400/8000]	[L1: 0.0930][DIV: 0.1303][GRAD: 0.1848][VORT: 0.2533][Total: 0.6614]	4.7+3.1s
[7200/8000]	[L1: 0.0923][DIV: 0.1295][GRAD: 0.1831][VORT: 0.2508][Total: 0.6556]	4.7+3.1s
[8000/8000]	[L1: 0.0925][DIV: 0.1296][GRAD: 0.1835][VORT: 0.2516][Total: 0.6571]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.070487	vorticity_error: 0.914739	mean_abs_divergence: 0.102769
[DIV2K x2]	rel_l2_error: 0.053909	vorticity_error: 1.018430	mean_abs_divergence: 0.054521
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.036281	vorticity_error: 1.763012	mean_abs_divergence: 0.026880
[INFO] New best model found with rel_l2_error on final output: 0.036281
Forward: 1.30s

Saving...
Total: 1.65s

[Epoch 84]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0911][DIV: 0.1293][GRAD: 0.1808][VORT: 0.2498][Total: 0.6510]	4.8+3.0s
[1600/8000]	[L1: 0.0947][DIV: 0.1340][GRAD: 0.1888][VORT: 0.2532][Total: 0.6706]	4.7+3.1s
[2400/8000]	[L1: 0.0948][DIV: 0.1346][GRAD: 0.1891][VORT: 0.2527][Total: 0.6712]	4.8+3.1s
[3200/8000]	[L1: 0.0928][DIV: 0.1319][GRAD: 0.1853][VORT: 0.2495][Total: 0.6595]	4.7+3.1s
[4000/8000]	[L1: 0.0931][DIV: 0.1321][GRAD: 0.1858][VORT: 0.2513][Total: 0.6624]	4.8+3.1s
[4800/8000]	[L1: 0.0920][DIV: 0.1305][GRAD: 0.1835][VORT: 0.2496][Total: 0.6556]	4.7+3.1s
[5600/8000]	[L1: 0.0914][DIV: 0.1295][GRAD: 0.1822][VORT: 0.2484][Total: 0.6514]	4.7+3.1s
[6400/8000]	[L1: 0.0922][DIV: 0.1303][GRAD: 0.1837][VORT: 0.2501][Total: 0.6564]	4.7+3.1s
[7200/8000]	[L1: 0.0932][DIV: 0.1314][GRAD: 0.1854][VORT: 0.2520][Total: 0.6621]	4.7+3.1s
[8000/8000]	[L1: 0.0931][DIV: 0.1310][GRAD: 0.1850][VORT: 0.2515][Total: 0.6607]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.089073	vorticity_error: 1.254809	mean_abs_divergence: 0.126941
[DIV2K x2]	rel_l2_error: 0.065367	vorticity_error: 6.546812	mean_abs_divergence: 0.066243
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.047532	vorticity_error: 3.426930	mean_abs_divergence: 0.031339
Forward: 1.32s

Saving...
Total: 1.62s

[Epoch 85]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0887][DIV: 0.1240][GRAD: 0.1752][VORT: 0.2427][Total: 0.6306]	4.7+3.1s
[1600/8000]	[L1: 0.0939][DIV: 0.1320][GRAD: 0.1855][VORT: 0.2488][Total: 0.6602]	4.7+3.1s
[2400/8000]	[L1: 0.0915][DIV: 0.1296][GRAD: 0.1808][VORT: 0.2446][Total: 0.6466]	4.7+3.1s
[3200/8000]	[L1: 0.0917][DIV: 0.1298][GRAD: 0.1814][VORT: 0.2462][Total: 0.6491]	4.7+3.1s
[4000/8000]	[L1: 0.0930][DIV: 0.1312][GRAD: 0.1844][VORT: 0.2511][Total: 0.6596]	4.8+3.1s
[4800/8000]	[L1: 0.0928][DIV: 0.1309][GRAD: 0.1843][VORT: 0.2516][Total: 0.6597]	4.7+3.1s
[5600/8000]	[L1: 0.0924][DIV: 0.1305][GRAD: 0.1834][VORT: 0.2507][Total: 0.6570]	4.7+3.1s
[6400/8000]	[L1: 0.0924][DIV: 0.1305][GRAD: 0.1834][VORT: 0.2507][Total: 0.6570]	4.7+3.1s
[7200/8000]	[L1: 0.0927][DIV: 0.1311][GRAD: 0.1843][VORT: 0.2519][Total: 0.6600]	4.7+3.1s
[8000/8000]	[L1: 0.0920][DIV: 0.1303][GRAD: 0.1828][VORT: 0.2496][Total: 0.6546]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.054400	vorticity_error: 1.325691	mean_abs_divergence: 0.093741
[DIV2K x2]	rel_l2_error: 0.047220	vorticity_error: 1.566252	mean_abs_divergence: 0.049871
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.036357	vorticity_error: 5.152806	mean_abs_divergence: 0.024813
Forward: 1.28s

Saving...
Total: 1.58s

[Epoch 86]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0910][DIV: 0.1260][GRAD: 0.1829][VORT: 0.2585][Total: 0.6583]	4.8+3.0s
[1600/8000]	[L1: 0.0899][DIV: 0.1258][GRAD: 0.1787][VORT: 0.2454][Total: 0.6397]	4.7+3.1s
[2400/8000]	[L1: 0.0940][DIV: 0.1311][GRAD: 0.1877][VORT: 0.2574][Total: 0.6702]	4.7+3.1s
[3200/8000]	[L1: 0.0931][DIV: 0.1302][GRAD: 0.1858][VORT: 0.2543][Total: 0.6634]	4.8+3.1s
[4000/8000]	[L1: 0.0950][DIV: 0.1326][GRAD: 0.1896][VORT: 0.2583][Total: 0.6755]	4.7+3.1s
[4800/8000]	[L1: 0.0946][DIV: 0.1323][GRAD: 0.1886][VORT: 0.2562][Total: 0.6717]	4.7+3.1s
[5600/8000]	[L1: 0.0949][DIV: 0.1323][GRAD: 0.1889][VORT: 0.2568][Total: 0.6729]	4.7+3.1s
[6400/8000]	[L1: 0.0955][DIV: 0.1332][GRAD: 0.1900][VORT: 0.2573][Total: 0.6760]	4.7+3.1s
[7200/8000]	[L1: 0.0955][DIV: 0.1334][GRAD: 0.1899][VORT: 0.2576][Total: 0.6764]	4.7+3.1s
[8000/8000]	[L1: 0.0953][DIV: 0.1333][GRAD: 0.1895][VORT: 0.2573][Total: 0.6754]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.066942	vorticity_error: 1.236285	mean_abs_divergence: 0.110031
[DIV2K x2]	rel_l2_error: 0.050343	vorticity_error: 1.487331	mean_abs_divergence: 0.057442
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.037071	vorticity_error: 3.121979	mean_abs_divergence: 0.028103
Forward: 1.25s

Saving...
Total: 1.56s

[Epoch 87]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0931][DIV: 0.1299][GRAD: 0.1832][VORT: 0.2508][Total: 0.6569]	4.7+3.1s
[1600/8000]	[L1: 0.0943][DIV: 0.1336][GRAD: 0.1873][VORT: 0.2524][Total: 0.6676]	4.7+3.1s
[2400/8000]	[L1: 0.0961][DIV: 0.1356][GRAD: 0.1912][VORT: 0.2588][Total: 0.6818]	4.7+3.1s
[3200/8000]	[L1: 0.0962][DIV: 0.1355][GRAD: 0.1914][VORT: 0.2585][Total: 0.6815]	4.8+3.1s
[4000/8000]	[L1: 0.0955][DIV: 0.1344][GRAD: 0.1902][VORT: 0.2586][Total: 0.6787]	4.7+3.1s
[4800/8000]	[L1: 0.0962][DIV: 0.1348][GRAD: 0.1916][VORT: 0.2617][Total: 0.6842]	4.7+3.1s
[5600/8000]	[L1: 0.0958][DIV: 0.1344][GRAD: 0.1905][VORT: 0.2602][Total: 0.6809]	4.7+3.1s
[6400/8000]	[L1: 0.0958][DIV: 0.1343][GRAD: 0.1902][VORT: 0.2598][Total: 0.6800]	4.7+3.1s
[7200/8000]	[L1: 0.0964][DIV: 0.1352][GRAD: 0.1916][VORT: 0.2617][Total: 0.6849]	4.7+3.1s
[8000/8000]	[L1: 0.0954][DIV: 0.1341][GRAD: 0.1896][VORT: 0.2595][Total: 0.6786]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.095813	vorticity_error: 2.671441	mean_abs_divergence: 0.120888
[DIV2K x2]	rel_l2_error: 0.070137	vorticity_error: 1.368502	mean_abs_divergence: 0.063662
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.057773	vorticity_error: 2.851149	mean_abs_divergence: 0.030695
Forward: 1.30s

Saving...
Total: 1.61s

[Epoch 88]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0947][DIV: 0.1328][GRAD: 0.1884][VORT: 0.2623][Total: 0.6783]	4.7+3.1s
[1600/8000]	[L1: 0.0919][DIV: 0.1300][GRAD: 0.1824][VORT: 0.2518][Total: 0.6561]	4.7+3.1s
[2400/8000]	[L1: 0.0915][DIV: 0.1292][GRAD: 0.1816][VORT: 0.2490][Total: 0.6512]	4.7+3.1s
[3200/8000]	[L1: 0.0918][DIV: 0.1299][GRAD: 0.1823][VORT: 0.2496][Total: 0.6536]	4.8+3.1s
[4000/8000]	[L1: 0.0908][DIV: 0.1285][GRAD: 0.1807][VORT: 0.2486][Total: 0.6486]	4.7+3.1s
[4800/8000]	[L1: 0.0909][DIV: 0.1288][GRAD: 0.1810][VORT: 0.2481][Total: 0.6487]	4.7+3.1s
[5600/8000]	[L1: 0.0909][DIV: 0.1282][GRAD: 0.1807][VORT: 0.2486][Total: 0.6485]	4.7+3.1s
[6400/8000]	[L1: 0.0907][DIV: 0.1281][GRAD: 0.1805][VORT: 0.2485][Total: 0.6477]	4.7+3.1s
[7200/8000]	[L1: 0.0909][DIV: 0.1284][GRAD: 0.1806][VORT: 0.2486][Total: 0.6484]	4.7+3.1s
[8000/8000]	[L1: 0.0911][DIV: 0.1287][GRAD: 0.1812][VORT: 0.2492][Total: 0.6502]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.084361	vorticity_error: 1.565333	mean_abs_divergence: 0.128190
[DIV2K x2]	rel_l2_error: 0.065703	vorticity_error: 1.423150	mean_abs_divergence: 0.067331
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.047639	vorticity_error: 3.960744	mean_abs_divergence: 0.032454
Forward: 1.31s

Saving...
Total: 1.62s

[Epoch 89]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0933][DIV: 0.1315][GRAD: 0.1844][VORT: 0.2489][Total: 0.6581]	4.7+3.1s
[1600/8000]	[L1: 0.0922][DIV: 0.1295][GRAD: 0.1817][VORT: 0.2416][Total: 0.6450]	4.7+3.1s
[2400/8000]	[L1: 0.0911][DIV: 0.1286][GRAD: 0.1800][VORT: 0.2409][Total: 0.6407]	4.8+3.1s
[3200/8000]	[L1: 0.0911][DIV: 0.1292][GRAD: 0.1805][VORT: 0.2421][Total: 0.6429]	4.7+3.1s
[4000/8000]	[L1: 0.0913][DIV: 0.1290][GRAD: 0.1813][VORT: 0.2444][Total: 0.6460]	4.7+3.1s
[4800/8000]	[L1: 0.0921][DIV: 0.1296][GRAD: 0.1827][VORT: 0.2470][Total: 0.6513]	4.7+3.1s
[5600/8000]	[L1: 0.0924][DIV: 0.1301][GRAD: 0.1833][VORT: 0.2478][Total: 0.6537]	4.7+3.1s
[6400/8000]	[L1: 0.0929][DIV: 0.1308][GRAD: 0.1841][VORT: 0.2483][Total: 0.6562]	4.7+3.1s
[7200/8000]	[L1: 0.0928][DIV: 0.1308][GRAD: 0.1837][VORT: 0.2485][Total: 0.6558]	4.7+3.1s
[8000/8000]	[L1: 0.0927][DIV: 0.1307][GRAD: 0.1834][VORT: 0.2475][Total: 0.6544]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.053520	vorticity_error: 0.823989	mean_abs_divergence: 0.077705
[DIV2K x2]	rel_l2_error: 0.043373	vorticity_error: 0.992668	mean_abs_divergence: 0.042835
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.031262	vorticity_error: 2.030234	mean_abs_divergence: 0.021347
[INFO] New best model found with rel_l2_error on final output: 0.031262
Forward: 1.30s

Saving...
Total: 1.64s

[Epoch 90]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0896][DIV: 0.1288][GRAD: 0.1779][VORT: 0.2387][Total: 0.6350]	4.7+3.1s
[1600/8000]	[L1: 0.0892][DIV: 0.1275][GRAD: 0.1775][VORT: 0.2391][Total: 0.6334]	4.8+3.1s
[2400/8000]	[L1: 0.0885][DIV: 0.1256][GRAD: 0.1752][VORT: 0.2389][Total: 0.6282]	4.7+3.1s
[3200/8000]	[L1: 0.0900][DIV: 0.1274][GRAD: 0.1776][VORT: 0.2410][Total: 0.6359]	4.7+3.1s
[4000/8000]	[L1: 0.0913][DIV: 0.1292][GRAD: 0.1805][VORT: 0.2451][Total: 0.6460]	4.7+3.1s
[4800/8000]	[L1: 0.0914][DIV: 0.1296][GRAD: 0.1810][VORT: 0.2450][Total: 0.6470]	4.7+3.1s
[5600/8000]	[L1: 0.0904][DIV: 0.1283][GRAD: 0.1790][VORT: 0.2444][Total: 0.6421]	4.7+3.1s
[6400/8000]	[L1: 0.0911][DIV: 0.1288][GRAD: 0.1802][VORT: 0.2459][Total: 0.6460]	4.7+3.1s
[7200/8000]	[L1: 0.0912][DIV: 0.1291][GRAD: 0.1807][VORT: 0.2472][Total: 0.6481]	4.7+3.1s
[8000/8000]	[L1: 0.0914][DIV: 0.1294][GRAD: 0.1811][VORT: 0.2474][Total: 0.6492]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.090417	vorticity_error: 1.247539	mean_abs_divergence: 0.155057
[DIV2K x2]	rel_l2_error: 0.067395	vorticity_error: 1.332147	mean_abs_divergence: 0.084945
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048144	vorticity_error: 3.609326	mean_abs_divergence: 0.042159
Forward: 1.26s

Saving...
Total: 1.57s

[Epoch 91]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0948][DIV: 0.1322][GRAD: 0.1874][VORT: 0.2578][Total: 0.6722]	4.7+3.1s
[1600/8000]	[L1: 0.0951][DIV: 0.1323][GRAD: 0.1882][VORT: 0.2596][Total: 0.6752]	4.7+3.1s
[2400/8000]	[L1: 0.0932][DIV: 0.1304][GRAD: 0.1850][VORT: 0.2536][Total: 0.6622]	4.8+3.1s
[3200/8000]	[L1: 0.0948][DIV: 0.1321][GRAD: 0.1883][VORT: 0.2566][Total: 0.6717]	4.7+3.1s
[4000/8000]	[L1: 0.0934][DIV: 0.1305][GRAD: 0.1857][VORT: 0.2536][Total: 0.6633]	4.7+3.1s
[4800/8000]	[L1: 0.0939][DIV: 0.1313][GRAD: 0.1869][VORT: 0.2559][Total: 0.6679]	4.7+3.1s
[5600/8000]	[L1: 0.0940][DIV: 0.1314][GRAD: 0.1871][VORT: 0.2560][Total: 0.6685]	4.7+3.1s
[6400/8000]	[L1: 0.0942][DIV: 0.1317][GRAD: 0.1875][VORT: 0.2564][Total: 0.6698]	4.7+3.1s
[7200/8000]	[L1: 0.0938][DIV: 0.1312][GRAD: 0.1865][VORT: 0.2550][Total: 0.6664]	4.7+3.1s
[8000/8000]	[L1: 0.0936][DIV: 0.1309][GRAD: 0.1860][VORT: 0.2544][Total: 0.6649]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.090169	vorticity_error: 1.023511	mean_abs_divergence: 0.135438
[DIV2K x2]	rel_l2_error: 0.070529	vorticity_error: 1.071300	mean_abs_divergence: 0.071530
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.047101	vorticity_error: 1.895589	mean_abs_divergence: 0.035655
Forward: 1.27s

Saving...
Total: 1.58s

[Epoch 92]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0987][DIV: 0.1379][GRAD: 0.1961][VORT: 0.2651][Total: 0.6977]	4.7+3.1s
[1600/8000]	[L1: 0.0970][DIV: 0.1349][GRAD: 0.1933][VORT: 0.2642][Total: 0.6894]	4.7+3.1s
[2400/8000]	[L1: 0.0940][DIV: 0.1319][GRAD: 0.1871][VORT: 0.2571][Total: 0.6700]	4.8+3.1s
[3200/8000]	[L1: 0.0948][DIV: 0.1337][GRAD: 0.1883][VORT: 0.2567][Total: 0.6736]	4.7+3.1s
[4000/8000]	[L1: 0.0954][DIV: 0.1342][GRAD: 0.1894][VORT: 0.2583][Total: 0.6773]	4.7+3.1s
[4800/8000]	[L1: 0.0966][DIV: 0.1353][GRAD: 0.1919][VORT: 0.2619][Total: 0.6857]	4.7+3.1s
[5600/8000]	[L1: 0.0957][DIV: 0.1339][GRAD: 0.1899][VORT: 0.2592][Total: 0.6786]	4.7+3.1s
[6400/8000]	[L1: 0.0954][DIV: 0.1336][GRAD: 0.1895][VORT: 0.2584][Total: 0.6769]	4.8+3.1s
[7200/8000]	[L1: 0.0948][DIV: 0.1328][GRAD: 0.1881][VORT: 0.2567][Total: 0.6724]	4.7+3.1s
[8000/8000]	[L1: 0.0949][DIV: 0.1331][GRAD: 0.1886][VORT: 0.2573][Total: 0.6740]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.060702	vorticity_error: 0.890463	mean_abs_divergence: 0.100417
[DIV2K x2]	rel_l2_error: 0.048219	vorticity_error: 0.660142	mean_abs_divergence: 0.052812
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.038050	vorticity_error: 1.710172	mean_abs_divergence: 0.026574
Forward: 1.31s

Saving...
Total: 1.61s

[Epoch 93]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.1056][DIV: 0.1462][GRAD: 0.2078][VORT: 0.2739][Total: 0.7334]	4.7+3.1s
[1600/8000]	[L1: 0.0980][DIV: 0.1379][GRAD: 0.1933][VORT: 0.2575][Total: 0.6867]	4.8+3.1s
[2400/8000]	[L1: 0.0970][DIV: 0.1367][GRAD: 0.1921][VORT: 0.2605][Total: 0.6863]	4.7+3.1s
[3200/8000]	[L1: 0.0971][DIV: 0.1364][GRAD: 0.1922][VORT: 0.2600][Total: 0.6857]	4.8+3.1s
[4000/8000]	[L1: 0.0956][DIV: 0.1345][GRAD: 0.1894][VORT: 0.2575][Total: 0.6771]	4.7+3.1s
[4800/8000]	[L1: 0.0957][DIV: 0.1344][GRAD: 0.1898][VORT: 0.2591][Total: 0.6790]	4.7+3.1s
[5600/8000]	[L1: 0.0948][DIV: 0.1337][GRAD: 0.1882][VORT: 0.2570][Total: 0.6737]	4.7+3.1s
[6400/8000]	[L1: 0.0933][DIV: 0.1320][GRAD: 0.1853][VORT: 0.2536][Total: 0.6641]	4.8+3.1s
[7200/8000]	[L1: 0.0935][DIV: 0.1318][GRAD: 0.1855][VORT: 0.2543][Total: 0.6651]	4.7+3.1s
[8000/8000]	[L1: 0.0940][DIV: 0.1326][GRAD: 0.1866][VORT: 0.2558][Total: 0.6690]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.079840	vorticity_error: 0.955648	mean_abs_divergence: 0.111008
[DIV2K x2]	rel_l2_error: 0.059732	vorticity_error: 1.266705	mean_abs_divergence: 0.058429
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044888	vorticity_error: 2.613554	mean_abs_divergence: 0.028313
Forward: 1.25s

Saving...
Total: 1.56s

[Epoch 94]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0945][DIV: 0.1334][GRAD: 0.1884][VORT: 0.2534][Total: 0.6697]	4.7+3.1s
[1600/8000]	[L1: 0.0943][DIV: 0.1310][GRAD: 0.1875][VORT: 0.2580][Total: 0.6708]	4.8+3.1s
[2400/8000]	[L1: 0.0918][DIV: 0.1284][GRAD: 0.1818][VORT: 0.2497][Total: 0.6516]	4.8+3.1s
[3200/8000]	[L1: 0.0913][DIV: 0.1283][GRAD: 0.1811][VORT: 0.2484][Total: 0.6491]	4.7+3.1s
[4000/8000]	[L1: 0.0915][DIV: 0.1290][GRAD: 0.1820][VORT: 0.2490][Total: 0.6516]	4.7+3.1s
[4800/8000]	[L1: 0.0919][DIV: 0.1298][GRAD: 0.1828][VORT: 0.2490][Total: 0.6535]	4.8+3.1s
[5600/8000]	[L1: 0.0929][DIV: 0.1313][GRAD: 0.1850][VORT: 0.2510][Total: 0.6602]	4.7+3.1s
[6400/8000]	[L1: 0.0926][DIV: 0.1310][GRAD: 0.1842][VORT: 0.2495][Total: 0.6573]	4.7+3.1s
[7200/8000]	[L1: 0.0923][DIV: 0.1308][GRAD: 0.1837][VORT: 0.2493][Total: 0.6562]	4.7+3.1s
[8000/8000]	[L1: 0.0912][DIV: 0.1295][GRAD: 0.1814][VORT: 0.2464][Total: 0.6484]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.068854	vorticity_error: 0.668157	mean_abs_divergence: 0.096814
[DIV2K x2]	rel_l2_error: 0.056329	vorticity_error: 0.931253	mean_abs_divergence: 0.052733
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.041726	vorticity_error: 1.238537	mean_abs_divergence: 0.026508
Forward: 1.31s

Saving...
Total: 1.61s

[Epoch 95]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0945][DIV: 0.1328][GRAD: 0.1879][VORT: 0.2498][Total: 0.6650]	4.7+3.1s
[1600/8000]	[L1: 0.0904][DIV: 0.1280][GRAD: 0.1796][VORT: 0.2401][Total: 0.6382]	4.7+3.1s
[2400/8000]	[L1: 0.0925][DIV: 0.1303][GRAD: 0.1834][VORT: 0.2445][Total: 0.6507]	4.8+3.1s
[3200/8000]	[L1: 0.0911][DIV: 0.1291][GRAD: 0.1808][VORT: 0.2419][Total: 0.6428]	4.7+3.1s
[4000/8000]	[L1: 0.0915][DIV: 0.1298][GRAD: 0.1818][VORT: 0.2449][Total: 0.6480]	4.7+3.1s
[4800/8000]	[L1: 0.0920][DIV: 0.1304][GRAD: 0.1828][VORT: 0.2460][Total: 0.6512]	4.8+3.0s
[5600/8000]	[L1: 0.0918][DIV: 0.1299][GRAD: 0.1825][VORT: 0.2463][Total: 0.6505]	4.7+3.1s
[6400/8000]	[L1: 0.0914][DIV: 0.1298][GRAD: 0.1819][VORT: 0.2454][Total: 0.6485]	4.8+3.1s
[7200/8000]	[L1: 0.0919][DIV: 0.1305][GRAD: 0.1829][VORT: 0.2468][Total: 0.6522]	4.7+3.1s
[8000/8000]	[L1: 0.0922][DIV: 0.1307][GRAD: 0.1834][VORT: 0.2485][Total: 0.6549]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.082216	vorticity_error: 1.243189	mean_abs_divergence: 0.128964
[DIV2K x2]	rel_l2_error: 0.066957	vorticity_error: 1.305338	mean_abs_divergence: 0.068735
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.049709	vorticity_error: 2.283160	mean_abs_divergence: 0.034112
Forward: 1.25s

Saving...
Total: 1.57s

[Epoch 96]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.1032][DIV: 0.1429][GRAD: 0.2050][VORT: 0.2787][Total: 0.7297]	4.7+3.1s
[1600/8000]	[L1: 0.0964][DIV: 0.1360][GRAD: 0.1919][VORT: 0.2616][Total: 0.6859]	4.7+3.1s
[2400/8000]	[L1: 0.0931][DIV: 0.1318][GRAD: 0.1851][VORT: 0.2536][Total: 0.6635]	4.8+3.1s
[3200/8000]	[L1: 0.0930][DIV: 0.1317][GRAD: 0.1850][VORT: 0.2528][Total: 0.6624]	4.8+3.1s
[4000/8000]	[L1: 0.0947][DIV: 0.1337][GRAD: 0.1887][VORT: 0.2564][Total: 0.6735]	4.7+3.1s
[4800/8000]	[L1: 0.0947][DIV: 0.1335][GRAD: 0.1886][VORT: 0.2564][Total: 0.6733]	4.8+3.1s
[5600/8000]	[L1: 0.0935][DIV: 0.1320][GRAD: 0.1862][VORT: 0.2535][Total: 0.6653]	4.7+3.1s
[6400/8000]	[L1: 0.0953][DIV: 0.1344][GRAD: 0.1899][VORT: 0.2576][Total: 0.6772]	4.7+3.1s
[7200/8000]	[L1: 0.0945][DIV: 0.1333][GRAD: 0.1882][VORT: 0.2556][Total: 0.6715]	4.7+3.1s
[8000/8000]	[L1: 0.0938][DIV: 0.1322][GRAD: 0.1866][VORT: 0.2542][Total: 0.6668]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.061804	vorticity_error: 1.040321	mean_abs_divergence: 0.099692
[DIV2K x2]	rel_l2_error: 0.048628	vorticity_error: 1.102629	mean_abs_divergence: 0.052685
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.039318	vorticity_error: 2.431916	mean_abs_divergence: 0.025965
Forward: 1.26s

Saving...
Total: 1.56s

[Epoch 97]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.1020][DIV: 0.1391][GRAD: 0.2014][VORT: 0.2720][Total: 0.7145]	4.8+3.0s
[1600/8000]	[L1: 0.0969][DIV: 0.1340][GRAD: 0.1915][VORT: 0.2616][Total: 0.6841]	4.7+3.1s
[2400/8000]	[L1: 0.0971][DIV: 0.1344][GRAD: 0.1918][VORT: 0.2602][Total: 0.6835]	4.8+3.1s
[3200/8000]	[L1: 0.0955][DIV: 0.1329][GRAD: 0.1888][VORT: 0.2565][Total: 0.6738]	4.7+3.1s
[4000/8000]	[L1: 0.0940][DIV: 0.1313][GRAD: 0.1857][VORT: 0.2521][Total: 0.6630]	4.7+3.1s
[4800/8000]	[L1: 0.0936][DIV: 0.1307][GRAD: 0.1855][VORT: 0.2533][Total: 0.6631]	4.7+3.1s
[5600/8000]	[L1: 0.0947][DIV: 0.1321][GRAD: 0.1880][VORT: 0.2568][Total: 0.6715]	4.7+3.1s
[6400/8000]	[L1: 0.0941][DIV: 0.1315][GRAD: 0.1872][VORT: 0.2567][Total: 0.6696]	4.7+3.1s
[7200/8000]	[L1: 0.0939][DIV: 0.1315][GRAD: 0.1868][VORT: 0.2556][Total: 0.6678]	4.7+3.1s
[8000/8000]	[L1: 0.0930][DIV: 0.1306][GRAD: 0.1848][VORT: 0.2528][Total: 0.6612]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.081005	vorticity_error: 1.117477	mean_abs_divergence: 0.113686
[DIV2K x2]	rel_l2_error: 0.061560	vorticity_error: 1.139291	mean_abs_divergence: 0.060095
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042308	vorticity_error: 2.455877	mean_abs_divergence: 0.028861
Forward: 1.30s

Saving...
Total: 1.61s

[Epoch 98]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0951][DIV: 0.1328][GRAD: 0.1895][VORT: 0.2563][Total: 0.6738]	4.7+3.0s
[1600/8000]	[L1: 0.0986][DIV: 0.1385][GRAD: 0.1963][VORT: 0.2636][Total: 0.6970]	4.7+3.1s
[2400/8000]	[L1: 0.0961][DIV: 0.1348][GRAD: 0.1914][VORT: 0.2611][Total: 0.6834]	4.8+3.1s
[3200/8000]	[L1: 0.0952][DIV: 0.1341][GRAD: 0.1897][VORT: 0.2576][Total: 0.6766]	4.7+3.1s
[4000/8000]	[L1: 0.0940][DIV: 0.1325][GRAD: 0.1876][VORT: 0.2560][Total: 0.6702]	4.7+3.1s
[4800/8000]	[L1: 0.0949][DIV: 0.1337][GRAD: 0.1895][VORT: 0.2593][Total: 0.6775]	4.8+3.1s
[5600/8000]	[L1: 0.0939][DIV: 0.1323][GRAD: 0.1870][VORT: 0.2561][Total: 0.6693]	4.7+3.1s
[6400/8000]	[L1: 0.0931][DIV: 0.1314][GRAD: 0.1853][VORT: 0.2543][Total: 0.6641]	4.8+3.1s
[7200/8000]	[L1: 0.0930][DIV: 0.1312][GRAD: 0.1853][VORT: 0.2541][Total: 0.6637]	4.7+3.1s
[8000/8000]	[L1: 0.0930][DIV: 0.1315][GRAD: 0.1852][VORT: 0.2535][Total: 0.6632]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.079610	vorticity_error: 1.129146	mean_abs_divergence: 0.117346
[DIV2K x2]	rel_l2_error: 0.055446	vorticity_error: 3.489791	mean_abs_divergence: 0.060674
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048010	vorticity_error: 2.703049	mean_abs_divergence: 0.029241
Forward: 1.25s

Saving...
Total: 1.56s

[Epoch 99]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0919][DIV: 0.1280][GRAD: 0.1824][VORT: 0.2516][Total: 0.6538]	4.7+3.1s
[1600/8000]	[L1: 0.0922][DIV: 0.1299][GRAD: 0.1833][VORT: 0.2506][Total: 0.6560]	4.7+3.1s
[2400/8000]	[L1: 0.0910][DIV: 0.1288][GRAD: 0.1804][VORT: 0.2490][Total: 0.6492]	4.8+3.1s
[3200/8000]	[L1: 0.0925][DIV: 0.1307][GRAD: 0.1838][VORT: 0.2531][Total: 0.6601]	4.7+3.1s
[4000/8000]	[L1: 0.0938][DIV: 0.1324][GRAD: 0.1863][VORT: 0.2554][Total: 0.6679]	4.7+3.1s
[4800/8000]	[L1: 0.0924][DIV: 0.1306][GRAD: 0.1837][VORT: 0.2520][Total: 0.6587]	4.7+3.1s
[5600/8000]	[L1: 0.0929][DIV: 0.1313][GRAD: 0.1846][VORT: 0.2526][Total: 0.6614]	4.7+3.1s
[6400/8000]	[L1: 0.0925][DIV: 0.1311][GRAD: 0.1839][VORT: 0.2510][Total: 0.6585]	4.7+3.1s
[7200/8000]	[L1: 0.0921][DIV: 0.1308][GRAD: 0.1832][VORT: 0.2495][Total: 0.6557]	4.7+3.1s
[8000/8000]	[L1: 0.0929][DIV: 0.1317][GRAD: 0.1847][VORT: 0.2514][Total: 0.6607]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.075203	vorticity_error: 1.000290	mean_abs_divergence: 0.108894
[DIV2K x2]	rel_l2_error: 0.055781	vorticity_error: 1.276400	mean_abs_divergence: 0.057425
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043608	vorticity_error: 2.343157	mean_abs_divergence: 0.028804
Forward: 1.25s

Saving...
Total: 1.57s

[Epoch 100]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0991][DIV: 0.1403][GRAD: 0.1980][VORT: 0.2663][Total: 0.7037]	4.7+3.0s
[1600/8000]	[L1: 0.0925][DIV: 0.1314][GRAD: 0.1837][VORT: 0.2482][Total: 0.6558]	4.8+3.1s
[2400/8000]	[L1: 0.0921][DIV: 0.1305][GRAD: 0.1827][VORT: 0.2462][Total: 0.6515]	4.7+3.1s
[3200/8000]	[L1: 0.0927][DIV: 0.1313][GRAD: 0.1842][VORT: 0.2484][Total: 0.6566]	4.8+3.1s
[4000/8000]	[L1: 0.0920][DIV: 0.1306][GRAD: 0.1829][VORT: 0.2472][Total: 0.6528]	4.7+3.1s
[4800/8000]	[L1: 0.0921][DIV: 0.1308][GRAD: 0.1830][VORT: 0.2479][Total: 0.6539]	4.7+3.1s
[5600/8000]	[L1: 0.0915][DIV: 0.1302][GRAD: 0.1818][VORT: 0.2457][Total: 0.6493]	4.7+3.1s
[6400/8000]	[L1: 0.0910][DIV: 0.1294][GRAD: 0.1805][VORT: 0.2435][Total: 0.6445]	4.8+3.0s
[7200/8000]	[L1: 0.0916][DIV: 0.1301][GRAD: 0.1818][VORT: 0.2467][Total: 0.6502]	4.7+3.1s
[8000/8000]	[L1: 0.0915][DIV: 0.1299][GRAD: 0.1818][VORT: 0.2474][Total: 0.6506]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.082375	vorticity_error: 1.236308	mean_abs_divergence: 0.116465
[DIV2K x2]	rel_l2_error: 0.062166	vorticity_error: 2.346899	mean_abs_divergence: 0.060390
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045191	vorticity_error: 3.351103	mean_abs_divergence: 0.029127
Forward: 1.32s

Saving...
Total: 1.64s

[Epoch 101]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0914][DIV: 0.1293][GRAD: 0.1822][VORT: 0.2474][Total: 0.6502]	4.7+3.1s
[1600/8000]	[L1: 0.0924][DIV: 0.1293][GRAD: 0.1848][VORT: 0.2512][Total: 0.6577]	4.7+3.1s
[2400/8000]	[L1: 0.0941][DIV: 0.1321][GRAD: 0.1883][VORT: 0.2576][Total: 0.6721]	4.7+3.1s
[3200/8000]	[L1: 0.0941][DIV: 0.1326][GRAD: 0.1881][VORT: 0.2564][Total: 0.6712]	4.8+3.0s
[4000/8000]	[L1: 0.0940][DIV: 0.1327][GRAD: 0.1878][VORT: 0.2571][Total: 0.6715]	4.7+3.1s
[4800/8000]	[L1: 0.0935][DIV: 0.1322][GRAD: 0.1865][VORT: 0.2548][Total: 0.6671]	4.7+3.1s
[5600/8000]	[L1: 0.0919][DIV: 0.1301][GRAD: 0.1831][VORT: 0.2504][Total: 0.6554]	4.7+3.1s
[6400/8000]	[L1: 0.0914][DIV: 0.1294][GRAD: 0.1820][VORT: 0.2480][Total: 0.6508]	4.8+3.1s
[7200/8000]	[L1: 0.0903][DIV: 0.1281][GRAD: 0.1794][VORT: 0.2441][Total: 0.6419]	4.7+3.1s
[8000/8000]	[L1: 0.0901][DIV: 0.1279][GRAD: 0.1793][VORT: 0.2445][Total: 0.6417]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.106791	vorticity_error: 1.164446	mean_abs_divergence: 0.164984
[DIV2K x2]	rel_l2_error: 0.076302	vorticity_error: 1.648972	mean_abs_divergence: 0.088230
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.052890	vorticity_error: 1.707429	mean_abs_divergence: 0.043519
Forward: 1.28s

Saving...
Total: 1.59s

[Epoch 102]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0863][DIV: 0.1246][GRAD: 0.1714][VORT: 0.2313][Total: 0.6136]	4.7+3.1s
[1600/8000]	[L1: 0.0895][DIV: 0.1281][GRAD: 0.1776][VORT: 0.2392][Total: 0.6344]	4.7+3.1s
[2400/8000]	[L1: 0.0919][DIV: 0.1307][GRAD: 0.1829][VORT: 0.2449][Total: 0.6504]	4.7+3.1s
[3200/8000]	[L1: 0.0892][DIV: 0.1272][GRAD: 0.1774][VORT: 0.2376][Total: 0.6315]	4.8+3.0s
[4000/8000]	[L1: 0.0893][DIV: 0.1273][GRAD: 0.1773][VORT: 0.2375][Total: 0.6314]	4.7+3.1s
[4800/8000]	[L1: 0.0901][DIV: 0.1283][GRAD: 0.1790][VORT: 0.2395][Total: 0.6369]	4.7+3.1s
[5600/8000]	[L1: 0.0900][DIV: 0.1281][GRAD: 0.1789][VORT: 0.2412][Total: 0.6383]	4.7+3.1s
[6400/8000]	[L1: 0.0905][DIV: 0.1285][GRAD: 0.1802][VORT: 0.2435][Total: 0.6426]	4.8+3.1s
[7200/8000]	[L1: 0.0909][DIV: 0.1291][GRAD: 0.1811][VORT: 0.2448][Total: 0.6458]	4.8+3.1s
[8000/8000]	[L1: 0.0908][DIV: 0.1290][GRAD: 0.1808][VORT: 0.2444][Total: 0.6450]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.092915	vorticity_error: 1.055347	mean_abs_divergence: 0.126613
[DIV2K x2]	rel_l2_error: 0.066399	vorticity_error: 1.753429	mean_abs_divergence: 0.066752
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045106	vorticity_error: 2.099181	mean_abs_divergence: 0.032782
Forward: 1.32s

Saving...
Total: 1.64s

[Epoch 103]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0966][DIV: 0.1379][GRAD: 0.1929][VORT: 0.2595][Total: 0.6868]	4.7+3.1s
[1600/8000]	[L1: 0.0947][DIV: 0.1354][GRAD: 0.1885][VORT: 0.2560][Total: 0.6746]	4.7+3.1s
[2400/8000]	[L1: 0.0908][DIV: 0.1296][GRAD: 0.1806][VORT: 0.2473][Total: 0.6484]	4.7+3.1s
[3200/8000]	[L1: 0.0915][DIV: 0.1300][GRAD: 0.1822][VORT: 0.2513][Total: 0.6551]	4.8+3.1s
[4000/8000]	[L1: 0.0914][DIV: 0.1299][GRAD: 0.1820][VORT: 0.2506][Total: 0.6539]	4.7+3.1s
[4800/8000]	[L1: 0.0922][DIV: 0.1310][GRAD: 0.1840][VORT: 0.2530][Total: 0.6602]	4.7+3.1s
[5600/8000]	[L1: 0.0917][DIV: 0.1302][GRAD: 0.1828][VORT: 0.2523][Total: 0.6570]	4.7+3.1s
[6400/8000]	[L1: 0.0913][DIV: 0.1297][GRAD: 0.1819][VORT: 0.2518][Total: 0.6546]	4.7+3.1s
[7200/8000]	[L1: 0.0918][DIV: 0.1303][GRAD: 0.1829][VORT: 0.2526][Total: 0.6576]	4.7+3.1s
[8000/8000]	[L1: 0.0925][DIV: 0.1310][GRAD: 0.1842][VORT: 0.2535][Total: 0.6612]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.073878	vorticity_error: 0.677023	mean_abs_divergence: 0.110145
[DIV2K x2]	rel_l2_error: 0.054310	vorticity_error: 0.707863	mean_abs_divergence: 0.058678
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.038247	vorticity_error: 0.696000	mean_abs_divergence: 0.028814
Forward: 1.24s

Saving...
Total: 1.55s

[Epoch 104]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0910][DIV: 0.1287][GRAD: 0.1810][VORT: 0.2504][Total: 0.6512]	4.7+3.1s
[1600/8000]	[L1: 0.0954][DIV: 0.1345][GRAD: 0.1903][VORT: 0.2623][Total: 0.6825]	4.8+3.0s
[2400/8000]	[L1: 0.0953][DIV: 0.1352][GRAD: 0.1900][VORT: 0.2603][Total: 0.6808]	4.7+3.1s
[3200/8000]	[L1: 0.0946][DIV: 0.1345][GRAD: 0.1881][VORT: 0.2581][Total: 0.6754]	4.7+3.0s
[4000/8000]	[L1: 0.0937][DIV: 0.1333][GRAD: 0.1864][VORT: 0.2559][Total: 0.6694]	4.7+3.1s
[4800/8000]	[L1: 0.0925][DIV: 0.1315][GRAD: 0.1838][VORT: 0.2520][Total: 0.6598]	4.7+3.0s
[5600/8000]	[L1: 0.0931][DIV: 0.1322][GRAD: 0.1854][VORT: 0.2544][Total: 0.6651]	4.7+3.1s
[6400/8000]	[L1: 0.0924][DIV: 0.1313][GRAD: 0.1840][VORT: 0.2520][Total: 0.6597]	4.8+3.0s
[7200/8000]	[L1: 0.0923][DIV: 0.1310][GRAD: 0.1837][VORT: 0.2514][Total: 0.6583]	4.7+3.1s
[8000/8000]	[L1: 0.0926][DIV: 0.1313][GRAD: 0.1844][VORT: 0.2521][Total: 0.6604]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.091919	vorticity_error: 1.092836	mean_abs_divergence: 0.148598
[DIV2K x2]	rel_l2_error: 0.074764	vorticity_error: 1.328840	mean_abs_divergence: 0.078603
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.049629	vorticity_error: 1.828299	mean_abs_divergence: 0.038032
Forward: 1.28s

Saving...
Total: 1.60s

[Epoch 105]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0840][DIV: 0.1207][GRAD: 0.1674][VORT: 0.2364][Total: 0.6084]	4.7+3.1s
[1600/8000]	[L1: 0.0880][DIV: 0.1255][GRAD: 0.1753][VORT: 0.2416][Total: 0.6305]	4.7+3.1s
[2400/8000]	[L1: 0.0920][DIV: 0.1290][GRAD: 0.1834][VORT: 0.2524][Total: 0.6568]	4.7+3.1s
[3200/8000]	[L1: 0.0918][DIV: 0.1290][GRAD: 0.1827][VORT: 0.2502][Total: 0.6536]	4.8+3.0s
[4000/8000]	[L1: 0.0909][DIV: 0.1282][GRAD: 0.1808][VORT: 0.2464][Total: 0.6462]	4.7+3.1s
[4800/8000]	[L1: 0.0909][DIV: 0.1286][GRAD: 0.1810][VORT: 0.2478][Total: 0.6484]	4.8+3.1s
[5600/8000]	[L1: 0.0911][DIV: 0.1290][GRAD: 0.1815][VORT: 0.2476][Total: 0.6492]	4.7+3.1s
[6400/8000]	[L1: 0.0915][DIV: 0.1296][GRAD: 0.1821][VORT: 0.2476][Total: 0.6507]	4.7+3.1s
[7200/8000]	[L1: 0.0916][DIV: 0.1296][GRAD: 0.1824][VORT: 0.2480][Total: 0.6517]	4.7+3.1s
[8000/8000]	[L1: 0.0917][DIV: 0.1300][GRAD: 0.1827][VORT: 0.2475][Total: 0.6519]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.076693	vorticity_error: 0.624716	mean_abs_divergence: 0.106669
[DIV2K x2]	rel_l2_error: 0.057749	vorticity_error: 0.718270	mean_abs_divergence: 0.058118
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042166	vorticity_error: 0.567597	mean_abs_divergence: 0.028285
Forward: 1.30s

Saving...
Total: 1.60s

[Epoch 106]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0879][DIV: 0.1253][GRAD: 0.1751][VORT: 0.2432][Total: 0.6315]	4.7+3.1s
[1600/8000]	[L1: 0.0968][DIV: 0.1362][GRAD: 0.1927][VORT: 0.2635][Total: 0.6892]	4.7+3.1s
[2400/8000]	[L1: 0.0983][DIV: 0.1390][GRAD: 0.1961][VORT: 0.2666][Total: 0.7001]	4.7+3.1s
[3200/8000]	[L1: 0.0981][DIV: 0.1383][GRAD: 0.1958][VORT: 0.2665][Total: 0.6987]	4.7+3.1s
[4000/8000]	[L1: 0.0961][DIV: 0.1363][GRAD: 0.1918][VORT: 0.2616][Total: 0.6858]	4.8+3.1s
[4800/8000]	[L1: 0.0940][DIV: 0.1340][GRAD: 0.1876][VORT: 0.2558][Total: 0.6714]	4.7+3.1s
[5600/8000]	[L1: 0.0928][DIV: 0.1323][GRAD: 0.1853][VORT: 0.2533][Total: 0.6637]	4.7+3.1s
[6400/8000]	[L1: 0.0923][DIV: 0.1313][GRAD: 0.1842][VORT: 0.2530][Total: 0.6608]	4.8+3.0s
[7200/8000]	[L1: 0.0925][DIV: 0.1312][GRAD: 0.1846][VORT: 0.2537][Total: 0.6620]	4.7+3.1s
[8000/8000]	[L1: 0.0928][DIV: 0.1315][GRAD: 0.1851][VORT: 0.2534][Total: 0.6628]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.087365	vorticity_error: 1.238989	mean_abs_divergence: 0.129744
[DIV2K x2]	rel_l2_error: 0.064514	vorticity_error: 1.434123	mean_abs_divergence: 0.068984
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.050520	vorticity_error: 2.554633	mean_abs_divergence: 0.033976
Forward: 1.31s

Saving...
Total: 1.63s

[Epoch 107]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0968][DIV: 0.1389][GRAD: 0.1923][VORT: 0.2543][Total: 0.6824]	4.7+3.1s
[1600/8000]	[L1: 0.0980][DIV: 0.1386][GRAD: 0.1955][VORT: 0.2624][Total: 0.6946]	4.7+3.1s
[2400/8000]	[L1: 0.0957][DIV: 0.1350][GRAD: 0.1904][VORT: 0.2565][Total: 0.6777]	4.7+3.1s
[3200/8000]	[L1: 0.0956][DIV: 0.1343][GRAD: 0.1899][VORT: 0.2563][Total: 0.6761]	4.7+3.1s
[4000/8000]	[L1: 0.0952][DIV: 0.1345][GRAD: 0.1896][VORT: 0.2571][Total: 0.6764]	4.8+3.1s
[4800/8000]	[L1: 0.0963][DIV: 0.1357][GRAD: 0.1919][VORT: 0.2599][Total: 0.6837]	4.7+3.1s
[5600/8000]	[L1: 0.0955][DIV: 0.1347][GRAD: 0.1905][VORT: 0.2581][Total: 0.6789]	4.7+3.1s
[6400/8000]	[L1: 0.0941][DIV: 0.1329][GRAD: 0.1875][VORT: 0.2547][Total: 0.6691]	4.7+3.1s
[7200/8000]	[L1: 0.0940][DIV: 0.1326][GRAD: 0.1874][VORT: 0.2552][Total: 0.6692]	4.7+3.1s
[8000/8000]	[L1: 0.0930][DIV: 0.1314][GRAD: 0.1854][VORT: 0.2529][Total: 0.6628]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.082527	vorticity_error: 0.863864	mean_abs_divergence: 0.116537
[DIV2K x2]	rel_l2_error: 0.061760	vorticity_error: 0.960613	mean_abs_divergence: 0.062173
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.041202	vorticity_error: 1.180457	mean_abs_divergence: 0.030553
Forward: 1.32s

Saving...
Total: 1.64s

[Epoch 108]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0965][DIV: 0.1399][GRAD: 0.1911][VORT: 0.2482][Total: 0.6758]	4.7+3.1s
[1600/8000]	[L1: 0.0915][DIV: 0.1323][GRAD: 0.1818][VORT: 0.2408][Total: 0.6464]	4.7+3.1s
[2400/8000]	[L1: 0.0920][DIV: 0.1314][GRAD: 0.1834][VORT: 0.2483][Total: 0.6551]	4.7+3.1s
[3200/8000]	[L1: 0.0931][DIV: 0.1324][GRAD: 0.1855][VORT: 0.2510][Total: 0.6619]	4.8+3.0s
[4000/8000]	[L1: 0.0932][DIV: 0.1324][GRAD: 0.1858][VORT: 0.2516][Total: 0.6631]	4.7+3.1s
[4800/8000]	[L1: 0.0946][DIV: 0.1343][GRAD: 0.1885][VORT: 0.2541][Total: 0.6714]	4.7+3.1s
[5600/8000]	[L1: 0.0937][DIV: 0.1331][GRAD: 0.1867][VORT: 0.2523][Total: 0.6658]	4.7+3.1s
[6400/8000]	[L1: 0.0941][DIV: 0.1336][GRAD: 0.1876][VORT: 0.2538][Total: 0.6691]	4.7+3.1s
[7200/8000]	[L1: 0.0932][DIV: 0.1324][GRAD: 0.1859][VORT: 0.2528][Total: 0.6644]	4.7+3.1s
[8000/8000]	[L1: 0.0935][DIV: 0.1327][GRAD: 0.1863][VORT: 0.2532][Total: 0.6657]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.080416	vorticity_error: 1.138238	mean_abs_divergence: 0.119104
[DIV2K x2]	rel_l2_error: 0.060233	vorticity_error: 0.938728	mean_abs_divergence: 0.062242
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.040822	vorticity_error: 1.958031	mean_abs_divergence: 0.029976
Forward: 1.31s

Saving...
Total: 1.63s

[Epoch 109]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0954][DIV: 0.1337][GRAD: 0.1885][VORT: 0.2529][Total: 0.6705]	4.7+3.1s
[1600/8000]	[L1: 0.0934][DIV: 0.1324][GRAD: 0.1852][VORT: 0.2509][Total: 0.6619]	4.7+3.1s
[2400/8000]	[L1: 0.0937][DIV: 0.1324][GRAD: 0.1864][VORT: 0.2530][Total: 0.6656]	4.7+3.1s
[3200/8000]	[L1: 0.0913][DIV: 0.1289][GRAD: 0.1821][VORT: 0.2475][Total: 0.6498]	4.7+3.1s
[4000/8000]	[L1: 0.0909][DIV: 0.1287][GRAD: 0.1817][VORT: 0.2465][Total: 0.6478]	4.8+3.1s
[4800/8000]	[L1: 0.0912][DIV: 0.1284][GRAD: 0.1821][VORT: 0.2467][Total: 0.6485]	4.7+3.1s
[5600/8000]	[L1: 0.0917][DIV: 0.1291][GRAD: 0.1831][VORT: 0.2484][Total: 0.6523]	4.7+3.1s
[6400/8000]	[L1: 0.0907][DIV: 0.1281][GRAD: 0.1812][VORT: 0.2467][Total: 0.6467]	4.7+3.1s
[7200/8000]	[L1: 0.0918][DIV: 0.1294][GRAD: 0.1832][VORT: 0.2497][Total: 0.6540]	4.7+3.1s
[8000/8000]	[L1: 0.0916][DIV: 0.1290][GRAD: 0.1827][VORT: 0.2489][Total: 0.6523]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.075408	vorticity_error: 1.110582	mean_abs_divergence: 0.121731
[DIV2K x2]	rel_l2_error: 0.060198	vorticity_error: 1.185715	mean_abs_divergence: 0.063411
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042799	vorticity_error: 1.496958	mean_abs_divergence: 0.030429
Forward: 1.31s

Saving...
Total: 1.63s

[Epoch 110]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0880][DIV: 0.1266][GRAD: 0.1763][VORT: 0.2351][Total: 0.6260]	4.7+3.1s
[1600/8000]	[L1: 0.0909][DIV: 0.1308][GRAD: 0.1817][VORT: 0.2442][Total: 0.6476]	4.8+3.1s
[2400/8000]	[L1: 0.0903][DIV: 0.1296][GRAD: 0.1802][VORT: 0.2416][Total: 0.6417]	4.7+3.1s
[3200/8000]	[L1: 0.0895][DIV: 0.1278][GRAD: 0.1783][VORT: 0.2409][Total: 0.6366]	4.8+3.1s
[4000/8000]	[L1: 0.0921][DIV: 0.1307][GRAD: 0.1834][VORT: 0.2465][Total: 0.6527]	4.8+3.1s
[4800/8000]	[L1: 0.0924][DIV: 0.1315][GRAD: 0.1841][VORT: 0.2476][Total: 0.6555]	4.7+3.1s
[5600/8000]	[L1: 0.0929][DIV: 0.1322][GRAD: 0.1852][VORT: 0.2488][Total: 0.6591]	4.7+3.1s
[6400/8000]	[L1: 0.0930][DIV: 0.1323][GRAD: 0.1854][VORT: 0.2485][Total: 0.6593]	4.8+3.1s
[7200/8000]	[L1: 0.0929][DIV: 0.1323][GRAD: 0.1852][VORT: 0.2483][Total: 0.6587]	4.7+3.1s
[8000/8000]	[L1: 0.0928][DIV: 0.1319][GRAD: 0.1851][VORT: 0.2490][Total: 0.6588]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.105311	vorticity_error: 1.414262	mean_abs_divergence: 0.118528
[DIV2K x2]	rel_l2_error: 0.072641	vorticity_error: 1.380826	mean_abs_divergence: 0.063615
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.059491	vorticity_error: 1.918203	mean_abs_divergence: 0.030826
Forward: 1.31s

Saving...
Total: 1.62s

[Epoch 111]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0956][DIV: 0.1347][GRAD: 0.1899][VORT: 0.2547][Total: 0.6748]	4.7+3.0s
[1600/8000]	[L1: 0.0919][DIV: 0.1307][GRAD: 0.1829][VORT: 0.2498][Total: 0.6554]	4.8+3.1s
[2400/8000]	[L1: 0.0918][DIV: 0.1303][GRAD: 0.1826][VORT: 0.2499][Total: 0.6546]	4.7+3.1s
[3200/8000]	[L1: 0.0920][DIV: 0.1299][GRAD: 0.1832][VORT: 0.2501][Total: 0.6552]	4.8+3.1s
[4000/8000]	[L1: 0.0919][DIV: 0.1298][GRAD: 0.1830][VORT: 0.2510][Total: 0.6558]	4.8+3.1s
[4800/8000]	[L1: 0.0917][DIV: 0.1300][GRAD: 0.1825][VORT: 0.2493][Total: 0.6536]	4.7+3.1s
[5600/8000]	[L1: 0.0925][DIV: 0.1309][GRAD: 0.1841][VORT: 0.2513][Total: 0.6588]	4.7+3.1s
[6400/8000]	[L1: 0.0928][DIV: 0.1313][GRAD: 0.1849][VORT: 0.2536][Total: 0.6626]	4.7+3.1s
[7200/8000]	[L1: 0.0930][DIV: 0.1315][GRAD: 0.1857][VORT: 0.2547][Total: 0.6650]	4.7+3.1s
[8000/8000]	[L1: 0.0932][DIV: 0.1320][GRAD: 0.1861][VORT: 0.2547][Total: 0.6660]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.069921	vorticity_error: 0.989685	mean_abs_divergence: 0.121771
[DIV2K x2]	rel_l2_error: 0.053500	vorticity_error: 1.121899	mean_abs_divergence: 0.063909
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.040567	vorticity_error: 1.968011	mean_abs_divergence: 0.030576
Forward: 1.33s

Saving...
Total: 1.65s

[Epoch 112]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0904][DIV: 0.1312][GRAD: 0.1805][VORT: 0.2481][Total: 0.6503]	4.7+3.1s
[1600/8000]	[L1: 0.0928][DIV: 0.1319][GRAD: 0.1844][VORT: 0.2490][Total: 0.6581]	4.8+3.1s
[2400/8000]	[L1: 0.0935][DIV: 0.1329][GRAD: 0.1866][VORT: 0.2533][Total: 0.6664]	4.7+3.1s
[3200/8000]	[L1: 0.0938][DIV: 0.1334][GRAD: 0.1873][VORT: 0.2524][Total: 0.6670]	4.7+3.1s
[4000/8000]	[L1: 0.0937][DIV: 0.1334][GRAD: 0.1871][VORT: 0.2510][Total: 0.6651]	4.7+3.1s
[4800/8000]	[L1: 0.0940][DIV: 0.1340][GRAD: 0.1875][VORT: 0.2500][Total: 0.6656]	4.8+3.1s
[5600/8000]	[L1: 0.0941][DIV: 0.1339][GRAD: 0.1876][VORT: 0.2509][Total: 0.6665]	4.7+3.1s
[6400/8000]	[L1: 0.0941][DIV: 0.1340][GRAD: 0.1875][VORT: 0.2509][Total: 0.6664]	4.7+3.1s
[7200/8000]	[L1: 0.0940][DIV: 0.1338][GRAD: 0.1873][VORT: 0.2506][Total: 0.6657]	4.7+3.1s
[8000/8000]	[L1: 0.0934][DIV: 0.1330][GRAD: 0.1861][VORT: 0.2493][Total: 0.6618]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.071715	vorticity_error: 0.692814	mean_abs_divergence: 0.109442
[DIV2K x2]	rel_l2_error: 0.059064	vorticity_error: 0.807677	mean_abs_divergence: 0.058529
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044829	vorticity_error: 0.849691	mean_abs_divergence: 0.029193
Forward: 1.32s

Saving...
Total: 1.63s

[Epoch 113]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0981][DIV: 0.1367][GRAD: 0.1948][VORT: 0.2704][Total: 0.7000]	4.7+3.1s
[1600/8000]	[L1: 0.0945][DIV: 0.1326][GRAD: 0.1879][VORT: 0.2580][Total: 0.6731]	4.8+3.1s
[2400/8000]	[L1: 0.0913][DIV: 0.1285][GRAD: 0.1812][VORT: 0.2482][Total: 0.6492]	4.7+3.1s
[3200/8000]	[L1: 0.0934][DIV: 0.1312][GRAD: 0.1856][VORT: 0.2535][Total: 0.6638]	4.7+3.1s
[4000/8000]	[L1: 0.0923][DIV: 0.1299][GRAD: 0.1837][VORT: 0.2495][Total: 0.6553]	4.7+3.1s
[4800/8000]	[L1: 0.0912][DIV: 0.1287][GRAD: 0.1817][VORT: 0.2474][Total: 0.6489]	4.8+3.1s
[5600/8000]	[L1: 0.0912][DIV: 0.1287][GRAD: 0.1819][VORT: 0.2476][Total: 0.6494]	4.7+3.1s
[6400/8000]	[L1: 0.0918][DIV: 0.1293][GRAD: 0.1829][VORT: 0.2485][Total: 0.6525]	4.8+3.1s
[7200/8000]	[L1: 0.0913][DIV: 0.1290][GRAD: 0.1821][VORT: 0.2472][Total: 0.6496]	4.7+3.1s
[8000/8000]	[L1: 0.0911][DIV: 0.1288][GRAD: 0.1817][VORT: 0.2466][Total: 0.6482]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.073878	vorticity_error: 1.025373	mean_abs_divergence: 0.098424
[DIV2K x2]	rel_l2_error: 0.051380	vorticity_error: 1.416478	mean_abs_divergence: 0.049498
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043590	vorticity_error: 1.980157	mean_abs_divergence: 0.023929
Forward: 1.34s

Saving...
Total: 1.66s

[Epoch 114]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0861][DIV: 0.1224][GRAD: 0.1711][VORT: 0.2370][Total: 0.6166]	4.7+3.0s
[1600/8000]	[L1: 0.0870][DIV: 0.1235][GRAD: 0.1746][VORT: 0.2439][Total: 0.6289]	4.7+3.1s
[2400/8000]	[L1: 0.0891][DIV: 0.1260][GRAD: 0.1790][VORT: 0.2506][Total: 0.6447]	4.7+3.1s
[3200/8000]	[L1: 0.0904][DIV: 0.1278][GRAD: 0.1815][VORT: 0.2529][Total: 0.6526]	4.7+3.1s
[4000/8000]	[L1: 0.0923][DIV: 0.1305][GRAD: 0.1853][VORT: 0.2567][Total: 0.6647]	4.7+3.1s
[4800/8000]	[L1: 0.0934][DIV: 0.1320][GRAD: 0.1874][VORT: 0.2581][Total: 0.6709]	4.8+3.0s
[5600/8000]	[L1: 0.0928][DIV: 0.1314][GRAD: 0.1861][VORT: 0.2563][Total: 0.6666]	4.7+3.1s
[6400/8000]	[L1: 0.0925][DIV: 0.1304][GRAD: 0.1852][VORT: 0.2554][Total: 0.6636]	4.7+3.1s
[7200/8000]	[L1: 0.0929][DIV: 0.1310][GRAD: 0.1860][VORT: 0.2561][Total: 0.6661]	4.7+3.1s
[8000/8000]	[L1: 0.0934][DIV: 0.1318][GRAD: 0.1870][VORT: 0.2564][Total: 0.6687]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.108317	vorticity_error: 3.319965	mean_abs_divergence: 0.160790
[DIV2K x2]	rel_l2_error: 0.078534	vorticity_error: 1.620798	mean_abs_divergence: 0.082632
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.058518	vorticity_error: 2.715353	mean_abs_divergence: 0.040216
Forward: 1.35s

Saving...
Total: 1.67s

[Epoch 115]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0918][DIV: 0.1281][GRAD: 0.1838][VORT: 0.2493][Total: 0.6530]	4.7+3.1s
[1600/8000]	[L1: 0.0985][DIV: 0.1375][GRAD: 0.1981][VORT: 0.2700][Total: 0.7040]	4.7+3.1s
[2400/8000]	[L1: 0.0954][DIV: 0.1351][GRAD: 0.1915][VORT: 0.2604][Total: 0.6824]	4.7+3.1s
[3200/8000]	[L1: 0.0957][DIV: 0.1355][GRAD: 0.1917][VORT: 0.2599][Total: 0.6829]	4.7+3.1s
[4000/8000]	[L1: 0.0957][DIV: 0.1353][GRAD: 0.1919][VORT: 0.2613][Total: 0.6842]	4.7+3.1s
[4800/8000]	[L1: 0.0951][DIV: 0.1348][GRAD: 0.1907][VORT: 0.2592][Total: 0.6797]	4.7+3.1s
[5600/8000]	[L1: 0.0936][DIV: 0.1327][GRAD: 0.1877][VORT: 0.2563][Total: 0.6703]	4.8+3.1s
[6400/8000]	[L1: 0.0928][DIV: 0.1319][GRAD: 0.1862][VORT: 0.2541][Total: 0.6650]	4.7+3.1s
[7200/8000]	[L1: 0.0928][DIV: 0.1318][GRAD: 0.1859][VORT: 0.2534][Total: 0.6639]	4.7+3.1s
[8000/8000]	[L1: 0.0923][DIV: 0.1312][GRAD: 0.1849][VORT: 0.2519][Total: 0.6603]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.099442	vorticity_error: 1.113366	mean_abs_divergence: 0.136084
[DIV2K x2]	rel_l2_error: 0.071472	vorticity_error: 1.566883	mean_abs_divergence: 0.072528
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.054929	vorticity_error: 1.785879	mean_abs_divergence: 0.035435
Forward: 1.33s

Saving...
Total: 1.66s

[Epoch 116]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0891][DIV: 0.1256][GRAD: 0.1767][VORT: 0.2413][Total: 0.6327]	4.7+3.1s
[1600/8000]	[L1: 0.0878][DIV: 0.1243][GRAD: 0.1738][VORT: 0.2370][Total: 0.6229]	4.7+3.1s
[2400/8000]	[L1: 0.0889][DIV: 0.1264][GRAD: 0.1761][VORT: 0.2408][Total: 0.6322]	4.7+3.1s
[3200/8000]	[L1: 0.0903][DIV: 0.1288][GRAD: 0.1796][VORT: 0.2444][Total: 0.6432]	4.7+3.1s
[4000/8000]	[L1: 0.0896][DIV: 0.1281][GRAD: 0.1783][VORT: 0.2435][Total: 0.6395]	4.7+3.1s
[4800/8000]	[L1: 0.0893][DIV: 0.1282][GRAD: 0.1777][VORT: 0.2423][Total: 0.6376]	4.7+3.1s
[5600/8000]	[L1: 0.0901][DIV: 0.1287][GRAD: 0.1791][VORT: 0.2441][Total: 0.6421]	4.8+3.1s
[6400/8000]	[L1: 0.0901][DIV: 0.1289][GRAD: 0.1795][VORT: 0.2437][Total: 0.6422]	4.7+3.1s
[7200/8000]	[L1: 0.0905][DIV: 0.1293][GRAD: 0.1803][VORT: 0.2447][Total: 0.6448]	4.8+3.1s
[8000/8000]	[L1: 0.0902][DIV: 0.1289][GRAD: 0.1796][VORT: 0.2438][Total: 0.6424]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.094504	vorticity_error: 1.043465	mean_abs_divergence: 0.132514
[DIV2K x2]	rel_l2_error: 0.066496	vorticity_error: 4.964135	mean_abs_divergence: 0.071840
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.057804	vorticity_error: 2.289619	mean_abs_divergence: 0.035368
Forward: 1.34s

Saving...
Total: 1.67s

[Epoch 117]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0918][DIV: 0.1308][GRAD: 0.1832][VORT: 0.2530][Total: 0.6588]	4.7+3.1s
[1600/8000]	[L1: 0.0930][DIV: 0.1318][GRAD: 0.1855][VORT: 0.2575][Total: 0.6679]	4.7+3.1s
[2400/8000]	[L1: 0.0916][DIV: 0.1299][GRAD: 0.1830][VORT: 0.2531][Total: 0.6576]	4.7+3.1s
[3200/8000]	[L1: 0.0920][DIV: 0.1306][GRAD: 0.1833][VORT: 0.2507][Total: 0.6566]	4.7+3.1s
[4000/8000]	[L1: 0.0926][DIV: 0.1317][GRAD: 0.1850][VORT: 0.2524][Total: 0.6617]	4.7+3.1s
[4800/8000]	[L1: 0.0928][DIV: 0.1319][GRAD: 0.1853][VORT: 0.2527][Total: 0.6628]	4.8+3.1s
[5600/8000]	[L1: 0.0926][DIV: 0.1313][GRAD: 0.1846][VORT: 0.2522][Total: 0.6608]	4.7+3.1s
[6400/8000]	[L1: 0.0924][DIV: 0.1310][GRAD: 0.1841][VORT: 0.2513][Total: 0.6589]	4.7+3.1s
[7200/8000]	[L1: 0.0923][DIV: 0.1312][GRAD: 0.1838][VORT: 0.2503][Total: 0.6577]	4.7+3.1s
[8000/8000]	[L1: 0.0925][DIV: 0.1315][GRAD: 0.1842][VORT: 0.2506][Total: 0.6588]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.084444	vorticity_error: 2.469702	mean_abs_divergence: 0.126423
[DIV2K x2]	rel_l2_error: 0.069312	vorticity_error: 1.363257	mean_abs_divergence: 0.068662
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.053661	vorticity_error: 2.665172	mean_abs_divergence: 0.033778
Forward: 1.33s

Saving...
Total: 1.66s

[Epoch 118]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0955][DIV: 0.1383][GRAD: 0.1914][VORT: 0.2562][Total: 0.6814]	4.7+3.0s
[1600/8000]	[L1: 0.0950][DIV: 0.1360][GRAD: 0.1901][VORT: 0.2516][Total: 0.6726]	4.7+3.1s
[2400/8000]	[L1: 0.0933][DIV: 0.1339][GRAD: 0.1864][VORT: 0.2500][Total: 0.6636]	4.7+3.0s
[3200/8000]	[L1: 0.0935][DIV: 0.1338][GRAD: 0.1871][VORT: 0.2525][Total: 0.6669]	4.7+3.1s
[4000/8000]	[L1: 0.0938][DIV: 0.1340][GRAD: 0.1881][VORT: 0.2551][Total: 0.6710]	4.7+3.0s
[4800/8000]	[L1: 0.0937][DIV: 0.1337][GRAD: 0.1876][VORT: 0.2551][Total: 0.6702]	4.7+3.1s
[5600/8000]	[L1: 0.0952][DIV: 0.1355][GRAD: 0.1906][VORT: 0.2592][Total: 0.6804]	4.8+3.0s
[6400/8000]	[L1: 0.0947][DIV: 0.1351][GRAD: 0.1897][VORT: 0.2582][Total: 0.6777]	4.7+3.1s
[7200/8000]	[L1: 0.0951][DIV: 0.1354][GRAD: 0.1903][VORT: 0.2587][Total: 0.6795]	4.7+3.1s
[8000/8000]	[L1: 0.0944][DIV: 0.1345][GRAD: 0.1890][VORT: 0.2572][Total: 0.6751]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.087728	vorticity_error: 1.283274	mean_abs_divergence: 0.133158
[DIV2K x2]	rel_l2_error: 0.067870	vorticity_error: 1.152385	mean_abs_divergence: 0.071828
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044113	vorticity_error: 1.682136	mean_abs_divergence: 0.035969
Forward: 1.31s

Saving...
Total: 1.64s

[Epoch 119]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0946][DIV: 0.1363][GRAD: 0.1901][VORT: 0.2654][Total: 0.6865]	4.7+3.0s
[1600/8000]	[L1: 0.0957][DIV: 0.1360][GRAD: 0.1911][VORT: 0.2616][Total: 0.6844]	4.7+3.1s
[2400/8000]	[L1: 0.0945][DIV: 0.1344][GRAD: 0.1886][VORT: 0.2560][Total: 0.6736]	4.7+3.1s
[3200/8000]	[L1: 0.0934][DIV: 0.1334][GRAD: 0.1868][VORT: 0.2551][Total: 0.6686]	4.7+3.1s
[4000/8000]	[L1: 0.0930][DIV: 0.1326][GRAD: 0.1860][VORT: 0.2537][Total: 0.6653]	4.8+3.1s
[4800/8000]	[L1: 0.0924][DIV: 0.1313][GRAD: 0.1846][VORT: 0.2530][Total: 0.6612]	4.7+3.1s
[5600/8000]	[L1: 0.0915][DIV: 0.1303][GRAD: 0.1828][VORT: 0.2490][Total: 0.6536]	4.8+3.0s
[6400/8000]	[L1: 0.0918][DIV: 0.1309][GRAD: 0.1833][VORT: 0.2492][Total: 0.6552]	4.7+3.1s
[7200/8000]	[L1: 0.0911][DIV: 0.1301][GRAD: 0.1820][VORT: 0.2480][Total: 0.6512]	4.7+3.1s
[8000/8000]	[L1: 0.0917][DIV: 0.1307][GRAD: 0.1831][VORT: 0.2491][Total: 0.6546]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.097962	vorticity_error: 1.420641	mean_abs_divergence: 0.133355
[DIV2K x2]	rel_l2_error: 0.072020	vorticity_error: 1.247146	mean_abs_divergence: 0.069565
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.057448	vorticity_error: 1.556694	mean_abs_divergence: 0.033467
Forward: 1.32s

Saving...
Total: 1.65s

[Epoch 120]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0862][DIV: 0.1239][GRAD: 0.1711][VORT: 0.2313][Total: 0.6125]	4.7+3.1s
[1600/8000]	[L1: 0.0873][DIV: 0.1253][GRAD: 0.1739][VORT: 0.2378][Total: 0.6243]	4.7+3.1s
[2400/8000]	[L1: 0.0883][DIV: 0.1266][GRAD: 0.1760][VORT: 0.2397][Total: 0.6307]	4.7+3.1s
[3200/8000]	[L1: 0.0894][DIV: 0.1285][GRAD: 0.1786][VORT: 0.2433][Total: 0.6398]	4.7+3.1s
[4000/8000]	[L1: 0.0895][DIV: 0.1286][GRAD: 0.1791][VORT: 0.2445][Total: 0.6418]	4.7+3.1s
[4800/8000]	[L1: 0.0897][DIV: 0.1289][GRAD: 0.1792][VORT: 0.2441][Total: 0.6419]	4.7+3.1s
[5600/8000]	[L1: 0.0916][DIV: 0.1308][GRAD: 0.1829][VORT: 0.2485][Total: 0.6538]	4.8+3.0s
[6400/8000]	[L1: 0.0907][DIV: 0.1296][GRAD: 0.1809][VORT: 0.2462][Total: 0.6475]	4.7+3.1s
[7200/8000]	[L1: 0.0909][DIV: 0.1298][GRAD: 0.1813][VORT: 0.2469][Total: 0.6489]	4.7+3.1s
[8000/8000]	[L1: 0.0908][DIV: 0.1299][GRAD: 0.1812][VORT: 0.2467][Total: 0.6486]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.099528	vorticity_error: 0.828048	mean_abs_divergence: 0.133260
[DIV2K x2]	rel_l2_error: 0.071830	vorticity_error: 1.119763	mean_abs_divergence: 0.070070
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.050465	vorticity_error: 1.136681	mean_abs_divergence: 0.034037
Forward: 1.25s

Saving...
Total: 1.56s

[Epoch 121]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0924][DIV: 0.1298][GRAD: 0.1843][VORT: 0.2493][Total: 0.6557]	4.8+3.0s
[1600/8000]	[L1: 0.0904][DIV: 0.1280][GRAD: 0.1805][VORT: 0.2457][Total: 0.6446]	4.7+3.1s
[2400/8000]	[L1: 0.0875][DIV: 0.1242][GRAD: 0.1746][VORT: 0.2390][Total: 0.6253]	4.7+3.1s
[3200/8000]	[L1: 0.0887][DIV: 0.1264][GRAD: 0.1769][VORT: 0.2415][Total: 0.6335]	4.7+3.1s
[4000/8000]	[L1: 0.0923][DIV: 0.1308][GRAD: 0.1842][VORT: 0.2505][Total: 0.6578]	4.8+3.1s
[4800/8000]	[L1: 0.0912][DIV: 0.1294][GRAD: 0.1822][VORT: 0.2486][Total: 0.6514]	4.7+3.1s
[5600/8000]	[L1: 0.0907][DIV: 0.1286][GRAD: 0.1810][VORT: 0.2469][Total: 0.6471]	4.8+3.1s
[6400/8000]	[L1: 0.0913][DIV: 0.1293][GRAD: 0.1822][VORT: 0.2477][Total: 0.6505]	4.7+3.1s
[7200/8000]	[L1: 0.0920][DIV: 0.1303][GRAD: 0.1836][VORT: 0.2486][Total: 0.6545]	4.7+3.1s
[8000/8000]	[L1: 0.0920][DIV: 0.1303][GRAD: 0.1835][VORT: 0.2493][Total: 0.6551]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.073014	vorticity_error: 1.059910	mean_abs_divergence: 0.108480
[DIV2K x2]	rel_l2_error: 0.058056	vorticity_error: 0.904603	mean_abs_divergence: 0.058463
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043308	vorticity_error: 1.163305	mean_abs_divergence: 0.028928
Forward: 1.27s

Saving...
Total: 1.58s

[Epoch 122]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0918][DIV: 0.1301][GRAD: 0.1826][VORT: 0.2491][Total: 0.6537]	4.8+3.0s
[1600/8000]	[L1: 0.0937][DIV: 0.1317][GRAD: 0.1870][VORT: 0.2508][Total: 0.6632]	4.7+3.1s
[2400/8000]	[L1: 0.0947][DIV: 0.1341][GRAD: 0.1894][VORT: 0.2541][Total: 0.6723]	4.7+3.1s
[3200/8000]	[L1: 0.0932][DIV: 0.1322][GRAD: 0.1864][VORT: 0.2515][Total: 0.6633]	4.7+3.1s
[4000/8000]	[L1: 0.0916][DIV: 0.1306][GRAD: 0.1831][VORT: 0.2461][Total: 0.6515]	4.7+3.1s
[4800/8000]	[L1: 0.0930][DIV: 0.1324][GRAD: 0.1861][VORT: 0.2495][Total: 0.6610]	4.7+3.1s
[5600/8000]	[L1: 0.0925][DIV: 0.1319][GRAD: 0.1849][VORT: 0.2476][Total: 0.6570]	4.8+3.1s
[6400/8000]	[L1: 0.0912][DIV: 0.1302][GRAD: 0.1824][VORT: 0.2449][Total: 0.6487]	4.7+3.1s
[7200/8000]	[L1: 0.0919][DIV: 0.1308][GRAD: 0.1838][VORT: 0.2474][Total: 0.6538]	4.8+3.1s
[8000/8000]	[L1: 0.0925][DIV: 0.1314][GRAD: 0.1851][VORT: 0.2497][Total: 0.6587]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.081928	vorticity_error: 1.288709	mean_abs_divergence: 0.135427
[DIV2K x2]	rel_l2_error: 0.066325	vorticity_error: 1.195185	mean_abs_divergence: 0.071644
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.047500	vorticity_error: 1.841446	mean_abs_divergence: 0.035013
Forward: 1.31s

Saving...
Total: 1.63s

[Epoch 123]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0926][DIV: 0.1299][GRAD: 0.1871][VORT: 0.2648][Total: 0.6744]	4.8+3.0s
[1600/8000]	[L1: 0.0904][DIV: 0.1290][GRAD: 0.1816][VORT: 0.2529][Total: 0.6539]	4.7+3.1s
[2400/8000]	[L1: 0.0927][DIV: 0.1321][GRAD: 0.1857][VORT: 0.2551][Total: 0.6656]	4.7+3.1s
[3200/8000]	[L1: 0.0940][DIV: 0.1335][GRAD: 0.1880][VORT: 0.2568][Total: 0.6723]	4.7+3.1s
[4000/8000]	[L1: 0.0936][DIV: 0.1335][GRAD: 0.1872][VORT: 0.2537][Total: 0.6680]	4.7+3.1s
[4800/8000]	[L1: 0.0919][DIV: 0.1310][GRAD: 0.1835][VORT: 0.2486][Total: 0.6550]	4.7+3.1s
[5600/8000]	[L1: 0.0930][DIV: 0.1325][GRAD: 0.1859][VORT: 0.2517][Total: 0.6631]	4.8+3.1s
[6400/8000]	[L1: 0.0923][DIV: 0.1319][GRAD: 0.1844][VORT: 0.2496][Total: 0.6582]	4.7+3.1s
[7200/8000]	[L1: 0.0925][DIV: 0.1321][GRAD: 0.1849][VORT: 0.2502][Total: 0.6597]	4.7+3.1s
[8000/8000]	[L1: 0.0924][DIV: 0.1318][GRAD: 0.1844][VORT: 0.2499][Total: 0.6584]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.090088	vorticity_error: 2.631250	mean_abs_divergence: 0.129886
[DIV2K x2]	rel_l2_error: 0.067269	vorticity_error: 1.024074	mean_abs_divergence: 0.069893
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048958	vorticity_error: 1.603231	mean_abs_divergence: 0.034715
Forward: 1.27s

Saving...
Total: 1.58s

[Epoch 124]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0883][DIV: 0.1256][GRAD: 0.1761][VORT: 0.2460][Total: 0.6361]	4.8+3.1s
[1600/8000]	[L1: 0.0885][DIV: 0.1245][GRAD: 0.1766][VORT: 0.2440][Total: 0.6335]	4.7+3.1s
[2400/8000]	[L1: 0.0901][DIV: 0.1273][GRAD: 0.1799][VORT: 0.2455][Total: 0.6428]	4.7+3.1s
[3200/8000]	[L1: 0.0908][DIV: 0.1282][GRAD: 0.1816][VORT: 0.2484][Total: 0.6490]	4.7+3.1s
[4000/8000]	[L1: 0.0915][DIV: 0.1290][GRAD: 0.1831][VORT: 0.2504][Total: 0.6540]	4.8+3.1s
[4800/8000]	[L1: 0.0921][DIV: 0.1302][GRAD: 0.1840][VORT: 0.2495][Total: 0.6558]	4.7+3.1s
[5600/8000]	[L1: 0.0921][DIV: 0.1306][GRAD: 0.1840][VORT: 0.2486][Total: 0.6552]	4.8+3.1s
[6400/8000]	[L1: 0.0929][DIV: 0.1316][GRAD: 0.1856][VORT: 0.2503][Total: 0.6605]	4.7+3.1s
[7200/8000]	[L1: 0.0923][DIV: 0.1310][GRAD: 0.1842][VORT: 0.2482][Total: 0.6557]	4.7+3.1s
[8000/8000]	[L1: 0.0924][DIV: 0.1311][GRAD: 0.1845][VORT: 0.2485][Total: 0.6566]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.095166	vorticity_error: 1.237497	mean_abs_divergence: 0.137147
[DIV2K x2]	rel_l2_error: 0.069903	vorticity_error: 1.289831	mean_abs_divergence: 0.072009
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.050627	vorticity_error: 1.378140	mean_abs_divergence: 0.035272
Forward: 1.31s

Saving...
Total: 1.64s

[Epoch 125]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0810][DIV: 0.1180][GRAD: 0.1620][VORT: 0.2249][Total: 0.5859]	4.8+3.0s
[1600/8000]	[L1: 0.0876][DIV: 0.1253][GRAD: 0.1746][VORT: 0.2390][Total: 0.6266]	4.7+3.1s
[2400/8000]	[L1: 0.0897][DIV: 0.1280][GRAD: 0.1795][VORT: 0.2449][Total: 0.6421]	4.7+3.1s
[3200/8000]	[L1: 0.0907][DIV: 0.1290][GRAD: 0.1816][VORT: 0.2479][Total: 0.6491]	4.7+3.1s
[4000/8000]	[L1: 0.0903][DIV: 0.1284][GRAD: 0.1806][VORT: 0.2456][Total: 0.6450]	4.7+3.1s
[4800/8000]	[L1: 0.0911][DIV: 0.1296][GRAD: 0.1821][VORT: 0.2478][Total: 0.6506]	4.7+3.1s
[5600/8000]	[L1: 0.0919][DIV: 0.1307][GRAD: 0.1841][VORT: 0.2513][Total: 0.6579]	4.8+3.1s
[6400/8000]	[L1: 0.0918][DIV: 0.1307][GRAD: 0.1838][VORT: 0.2509][Total: 0.6572]	4.7+3.1s
[7200/8000]	[L1: 0.0920][DIV: 0.1310][GRAD: 0.1841][VORT: 0.2509][Total: 0.6580]	4.7+3.1s
[8000/8000]	[L1: 0.0922][DIV: 0.1313][GRAD: 0.1846][VORT: 0.2509][Total: 0.6590]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.081190	vorticity_error: 0.615066	mean_abs_divergence: 0.124887
[DIV2K x2]	rel_l2_error: 0.065723	vorticity_error: 0.554893	mean_abs_divergence: 0.068071
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044092	vorticity_error: 0.533899	mean_abs_divergence: 0.034084
Forward: 1.25s

Saving...
Total: 1.56s

[Epoch 126]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0905][DIV: 0.1291][GRAD: 0.1817][VORT: 0.2458][Total: 0.6472]	4.7+3.1s
[1600/8000]	[L1: 0.0924][DIV: 0.1318][GRAD: 0.1855][VORT: 0.2525][Total: 0.6621]	4.7+3.1s
[2400/8000]	[L1: 0.0938][DIV: 0.1344][GRAD: 0.1884][VORT: 0.2544][Total: 0.6710]	4.7+3.1s
[3200/8000]	[L1: 0.0953][DIV: 0.1361][GRAD: 0.1907][VORT: 0.2562][Total: 0.6783]	4.7+3.1s
[4000/8000]	[L1: 0.0957][DIV: 0.1360][GRAD: 0.1918][VORT: 0.2598][Total: 0.6833]	4.7+3.1s
[4800/8000]	[L1: 0.0958][DIV: 0.1360][GRAD: 0.1918][VORT: 0.2606][Total: 0.6842]	4.7+3.1s
[5600/8000]	[L1: 0.0944][DIV: 0.1341][GRAD: 0.1888][VORT: 0.2561][Total: 0.6734]	4.8+3.1s
[6400/8000]	[L1: 0.0944][DIV: 0.1342][GRAD: 0.1889][VORT: 0.2561][Total: 0.6736]	4.8+3.1s
[7200/8000]	[L1: 0.0942][DIV: 0.1338][GRAD: 0.1884][VORT: 0.2550][Total: 0.6715]	4.7+3.1s
[8000/8000]	[L1: 0.0939][DIV: 0.1335][GRAD: 0.1879][VORT: 0.2541][Total: 0.6695]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.074826	vorticity_error: 1.210657	mean_abs_divergence: 0.116565
[DIV2K x2]	rel_l2_error: 0.062712	vorticity_error: 1.485677	mean_abs_divergence: 0.060095
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048203	vorticity_error: 1.739393	mean_abs_divergence: 0.029716
Forward: 1.30s

Saving...
Total: 1.62s

[Epoch 127]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0909][DIV: 0.1304][GRAD: 0.1830][VORT: 0.2485][Total: 0.6528]	4.7+3.1s
[1600/8000]	[L1: 0.0875][DIV: 0.1256][GRAD: 0.1753][VORT: 0.2417][Total: 0.6301]	4.7+3.1s
[2400/8000]	[L1: 0.0885][DIV: 0.1268][GRAD: 0.1774][VORT: 0.2438][Total: 0.6365]	4.7+3.1s
[3200/8000]	[L1: 0.0881][DIV: 0.1265][GRAD: 0.1762][VORT: 0.2418][Total: 0.6325]	4.7+3.1s
[4000/8000]	[L1: 0.0866][DIV: 0.1249][GRAD: 0.1730][VORT: 0.2368][Total: 0.6213]	4.7+3.1s
[4800/8000]	[L1: 0.0869][DIV: 0.1253][GRAD: 0.1732][VORT: 0.2356][Total: 0.6211]	4.7+3.1s
[5600/8000]	[L1: 0.0890][DIV: 0.1279][GRAD: 0.1775][VORT: 0.2408][Total: 0.6352]	4.7+3.1s
[6400/8000]	[L1: 0.0889][DIV: 0.1277][GRAD: 0.1774][VORT: 0.2414][Total: 0.6354]	4.7+3.1s
[7200/8000]	[L1: 0.0895][DIV: 0.1282][GRAD: 0.1785][VORT: 0.2422][Total: 0.6385]	4.7+3.1s
[8000/8000]	[L1: 0.0899][DIV: 0.1284][GRAD: 0.1790][VORT: 0.2431][Total: 0.6403]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.081480	vorticity_error: 1.047219	mean_abs_divergence: 0.132707
[DIV2K x2]	rel_l2_error: 0.068947	vorticity_error: 1.321468	mean_abs_divergence: 0.071093
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.047884	vorticity_error: 1.830330	mean_abs_divergence: 0.034657
Forward: 1.30s

Saving...
Total: 1.62s

[Epoch 128]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0810][DIV: 0.1169][GRAD: 0.1601][VORT: 0.2121][Total: 0.5701]	4.7+3.1s
[1600/8000]	[L1: 0.0909][DIV: 0.1294][GRAD: 0.1807][VORT: 0.2418][Total: 0.6429]	4.7+3.1s
[2400/8000]	[L1: 0.0918][DIV: 0.1315][GRAD: 0.1823][VORT: 0.2421][Total: 0.6476]	4.7+3.1s
[3200/8000]	[L1: 0.0919][DIV: 0.1318][GRAD: 0.1832][VORT: 0.2454][Total: 0.6522]	4.7+3.1s
[4000/8000]	[L1: 0.0919][DIV: 0.1317][GRAD: 0.1829][VORT: 0.2457][Total: 0.6522]	4.7+3.1s
[4800/8000]	[L1: 0.0922][DIV: 0.1318][GRAD: 0.1836][VORT: 0.2462][Total: 0.6539]	4.7+3.1s
[5600/8000]	[L1: 0.0916][DIV: 0.1312][GRAD: 0.1828][VORT: 0.2464][Total: 0.6520]	4.8+3.1s
[6400/8000]	[L1: 0.0914][DIV: 0.1309][GRAD: 0.1823][VORT: 0.2463][Total: 0.6510]	4.7+3.1s
[7200/8000]	[L1: 0.0921][DIV: 0.1317][GRAD: 0.1839][VORT: 0.2487][Total: 0.6564]	4.7+3.1s
[8000/8000]	[L1: 0.0921][DIV: 0.1317][GRAD: 0.1838][VORT: 0.2487][Total: 0.6563]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.087541	vorticity_error: 1.147196	mean_abs_divergence: 0.130048
[DIV2K x2]	rel_l2_error: 0.069030	vorticity_error: 1.336099	mean_abs_divergence: 0.066189
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.051111	vorticity_error: 1.322960	mean_abs_divergence: 0.032305
Forward: 1.30s

Saving...
Total: 1.63s

[Epoch 129]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0959][DIV: 0.1359][GRAD: 0.1932][VORT: 0.2586][Total: 0.6835]	4.7+3.1s
[1600/8000]	[L1: 0.0946][DIV: 0.1339][GRAD: 0.1895][VORT: 0.2551][Total: 0.6731]	4.7+3.1s
[2400/8000]	[L1: 0.0954][DIV: 0.1335][GRAD: 0.1902][VORT: 0.2569][Total: 0.6760]	4.7+3.1s
[3200/8000]	[L1: 0.0953][DIV: 0.1346][GRAD: 0.1905][VORT: 0.2591][Total: 0.6796]	4.7+3.1s
[4000/8000]	[L1: 0.0958][DIV: 0.1355][GRAD: 0.1917][VORT: 0.2600][Total: 0.6829]	4.7+3.1s
[4800/8000]	[L1: 0.0954][DIV: 0.1349][GRAD: 0.1909][VORT: 0.2585][Total: 0.6797]	4.7+3.1s
[5600/8000]	[L1: 0.0958][DIV: 0.1355][GRAD: 0.1916][VORT: 0.2597][Total: 0.6826]	4.8+3.1s
[6400/8000]	[L1: 0.0948][DIV: 0.1344][GRAD: 0.1898][VORT: 0.2585][Total: 0.6775]	4.7+3.1s
[7200/8000]	[L1: 0.0944][DIV: 0.1335][GRAD: 0.1885][VORT: 0.2567][Total: 0.6731]	4.7+3.1s
[8000/8000]	[L1: 0.0944][DIV: 0.1335][GRAD: 0.1884][VORT: 0.2563][Total: 0.6726]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.075878	vorticity_error: 1.279578	mean_abs_divergence: 0.122099
[DIV2K x2]	rel_l2_error: 0.054721	vorticity_error: 2.312663	mean_abs_divergence: 0.065374
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044157	vorticity_error: 2.610900	mean_abs_divergence: 0.032490
Forward: 1.26s

Saving...
Total: 1.58s

[Epoch 130]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0903][DIV: 0.1285][GRAD: 0.1800][VORT: 0.2504][Total: 0.6493]	4.7+3.1s
[1600/8000]	[L1: 0.0889][DIV: 0.1275][GRAD: 0.1775][VORT: 0.2465][Total: 0.6404]	4.7+3.1s
[2400/8000]	[L1: 0.0920][DIV: 0.1309][GRAD: 0.1842][VORT: 0.2536][Total: 0.6606]	4.7+3.1s
[3200/8000]	[L1: 0.0917][DIV: 0.1306][GRAD: 0.1832][VORT: 0.2507][Total: 0.6562]	4.7+3.1s
[4000/8000]	[L1: 0.0914][DIV: 0.1301][GRAD: 0.1825][VORT: 0.2487][Total: 0.6527]	4.7+3.1s
[4800/8000]	[L1: 0.0919][DIV: 0.1309][GRAD: 0.1835][VORT: 0.2492][Total: 0.6555]	4.7+3.1s
[5600/8000]	[L1: 0.0912][DIV: 0.1299][GRAD: 0.1822][VORT: 0.2476][Total: 0.6509]	4.7+3.1s
[6400/8000]	[L1: 0.0911][DIV: 0.1298][GRAD: 0.1818][VORT: 0.2464][Total: 0.6492]	4.7+3.1s
[7200/8000]	[L1: 0.0913][DIV: 0.1303][GRAD: 0.1822][VORT: 0.2463][Total: 0.6501]	4.7+3.1s
[8000/8000]	[L1: 0.0913][DIV: 0.1303][GRAD: 0.1822][VORT: 0.2460][Total: 0.6499]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.086397	vorticity_error: 1.054353	mean_abs_divergence: 0.118203
[DIV2K x2]	rel_l2_error: 0.064829	vorticity_error: 1.133291	mean_abs_divergence: 0.063739
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.051837	vorticity_error: 1.264505	mean_abs_divergence: 0.031836
Forward: 1.30s

Saving...
Total: 1.62s

[Epoch 131]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0968][DIV: 0.1388][GRAD: 0.1933][VORT: 0.2491][Total: 0.6781]	4.8+3.1s
[1600/8000]	[L1: 0.0963][DIV: 0.1369][GRAD: 0.1927][VORT: 0.2550][Total: 0.6809]	4.7+3.1s
[2400/8000]	[L1: 0.0968][DIV: 0.1374][GRAD: 0.1938][VORT: 0.2557][Total: 0.6837]	4.7+3.1s
[3200/8000]	[L1: 0.0984][DIV: 0.1399][GRAD: 0.1970][VORT: 0.2607][Total: 0.6959]	4.7+3.1s
[4000/8000]	[L1: 0.0975][DIV: 0.1384][GRAD: 0.1953][VORT: 0.2614][Total: 0.6926]	4.7+3.1s
[4800/8000]	[L1: 0.0968][DIV: 0.1373][GRAD: 0.1938][VORT: 0.2609][Total: 0.6888]	4.7+3.1s
[5600/8000]	[L1: 0.0960][DIV: 0.1363][GRAD: 0.1920][VORT: 0.2588][Total: 0.6831]	4.7+3.1s
[6400/8000]	[L1: 0.0966][DIV: 0.1374][GRAD: 0.1933][VORT: 0.2591][Total: 0.6865]	4.7+3.1s
[7200/8000]	[L1: 0.0959][DIV: 0.1365][GRAD: 0.1917][VORT: 0.2571][Total: 0.6813]	4.7+3.1s
[8000/8000]	[L1: 0.0952][DIV: 0.1356][GRAD: 0.1904][VORT: 0.2561][Total: 0.6773]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.093166	vorticity_error: 4.153612	mean_abs_divergence: 0.130526
[DIV2K x2]	rel_l2_error: 0.071176	vorticity_error: 1.728944	mean_abs_divergence: 0.067019
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.051624	vorticity_error: 2.573417	mean_abs_divergence: 0.032191
Forward: 1.32s

Saving...
Total: 1.64s

[Epoch 132]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0811][DIV: 0.1181][GRAD: 0.1632][VORT: 0.2260][Total: 0.5884]	4.7+3.1s
[1600/8000]	[L1: 0.0861][DIV: 0.1242][GRAD: 0.1733][VORT: 0.2390][Total: 0.6225]	4.7+3.1s
[2400/8000]	[L1: 0.0885][DIV: 0.1265][GRAD: 0.1774][VORT: 0.2436][Total: 0.6360]	4.7+3.1s
[3200/8000]	[L1: 0.0896][DIV: 0.1279][GRAD: 0.1793][VORT: 0.2442][Total: 0.6410]	4.7+3.1s
[4000/8000]	[L1: 0.0902][DIV: 0.1285][GRAD: 0.1805][VORT: 0.2450][Total: 0.6443]	4.7+3.1s
[4800/8000]	[L1: 0.0911][DIV: 0.1298][GRAD: 0.1826][VORT: 0.2482][Total: 0.6517]	4.6+3.1s
[5600/8000]	[L1: 0.0910][DIV: 0.1297][GRAD: 0.1820][VORT: 0.2476][Total: 0.6503]	4.7+3.1s
[6400/8000]	[L1: 0.0892][DIV: 0.1274][GRAD: 0.1785][VORT: 0.2427][Total: 0.6379]	4.7+3.1s
[7200/8000]	[L1: 0.0893][DIV: 0.1276][GRAD: 0.1787][VORT: 0.2430][Total: 0.6386]	4.7+3.1s
[8000/8000]	[L1: 0.0905][DIV: 0.1290][GRAD: 0.1810][VORT: 0.2452][Total: 0.6457]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.076569	vorticity_error: 0.745168	mean_abs_divergence: 0.122067
[DIV2K x2]	rel_l2_error: 0.056494	vorticity_error: 0.869769	mean_abs_divergence: 0.064270
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.039916	vorticity_error: 0.988435	mean_abs_divergence: 0.031648
Forward: 1.31s

Saving...
Total: 1.63s

[Epoch 133]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0909][DIV: 0.1309][GRAD: 0.1807][VORT: 0.2463][Total: 0.6489]	4.7+3.1s
[1600/8000]	[L1: 0.0924][DIV: 0.1320][GRAD: 0.1842][VORT: 0.2492][Total: 0.6578]	4.7+3.1s
[2400/8000]	[L1: 0.0926][DIV: 0.1323][GRAD: 0.1848][VORT: 0.2486][Total: 0.6583]	4.7+3.1s
[3200/8000]	[L1: 0.0924][DIV: 0.1316][GRAD: 0.1843][VORT: 0.2504][Total: 0.6587]	4.7+3.1s
[4000/8000]	[L1: 0.0914][DIV: 0.1299][GRAD: 0.1819][VORT: 0.2486][Total: 0.6518]	4.7+3.1s
[4800/8000]	[L1: 0.0914][DIV: 0.1303][GRAD: 0.1820][VORT: 0.2476][Total: 0.6513]	4.7+3.1s
[5600/8000]	[L1: 0.0922][DIV: 0.1312][GRAD: 0.1836][VORT: 0.2499][Total: 0.6569]	4.8+3.1s
[6400/8000]	[L1: 0.0913][DIV: 0.1301][GRAD: 0.1819][VORT: 0.2476][Total: 0.6510]	4.7+3.1s
[7200/8000]	[L1: 0.0916][DIV: 0.1304][GRAD: 0.1825][VORT: 0.2487][Total: 0.6532]	4.7+3.1s
[8000/8000]	[L1: 0.0913][DIV: 0.1304][GRAD: 0.1823][VORT: 0.2485][Total: 0.6525]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.079308	vorticity_error: 0.825346	mean_abs_divergence: 0.118463
[DIV2K x2]	rel_l2_error: 0.060222	vorticity_error: 0.906744	mean_abs_divergence: 0.061847
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045832	vorticity_error: 0.841216	mean_abs_divergence: 0.030541
Forward: 1.30s

Saving...
Total: 1.62s

[Epoch 134]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.1028][DIV: 0.1448][GRAD: 0.2080][VORT: 0.2862][Total: 0.7418]	4.7+3.1s
[1600/8000]	[L1: 0.0971][DIV: 0.1371][GRAD: 0.1956][VORT: 0.2671][Total: 0.6969]	4.7+3.1s
[2400/8000]	[L1: 0.0955][DIV: 0.1357][GRAD: 0.1913][VORT: 0.2598][Total: 0.6822]	4.7+3.1s
[3200/8000]	[L1: 0.0951][DIV: 0.1351][GRAD: 0.1907][VORT: 0.2585][Total: 0.6793]	4.7+3.1s
[4000/8000]	[L1: 0.0936][DIV: 0.1335][GRAD: 0.1873][VORT: 0.2530][Total: 0.6674]	4.7+3.1s
[4800/8000]	[L1: 0.0930][DIV: 0.1326][GRAD: 0.1864][VORT: 0.2524][Total: 0.6645]	4.7+3.1s
[5600/8000]	[L1: 0.0933][DIV: 0.1327][GRAD: 0.1868][VORT: 0.2539][Total: 0.6668]	4.8+3.1s
[6400/8000]	[L1: 0.0932][DIV: 0.1327][GRAD: 0.1868][VORT: 0.2539][Total: 0.6666]	4.7+3.1s
[7200/8000]	[L1: 0.0931][DIV: 0.1328][GRAD: 0.1865][VORT: 0.2531][Total: 0.6654]	4.8+3.1s
[8000/8000]	[L1: 0.0930][DIV: 0.1327][GRAD: 0.1862][VORT: 0.2524][Total: 0.6642]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.089518	vorticity_error: 1.333186	mean_abs_divergence: 0.133163
[DIV2K x2]	rel_l2_error: 0.070542	vorticity_error: 5.773343	mean_abs_divergence: 0.073472
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.055133	vorticity_error: 2.381335	mean_abs_divergence: 0.036781
Forward: 1.31s

Saving...
Total: 1.64s

[Epoch 135]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0875][DIV: 0.1273][GRAD: 0.1746][VORT: 0.2343][Total: 0.6237]	4.7+3.1s
[1600/8000]	[L1: 0.0873][DIV: 0.1263][GRAD: 0.1742][VORT: 0.2343][Total: 0.6222]	4.7+3.1s
[2400/8000]	[L1: 0.0873][DIV: 0.1258][GRAD: 0.1742][VORT: 0.2369][Total: 0.6242]	4.7+3.1s
[3200/8000]	[L1: 0.0895][DIV: 0.1281][GRAD: 0.1786][VORT: 0.2423][Total: 0.6385]	4.7+3.1s
[4000/8000]	[L1: 0.0891][DIV: 0.1278][GRAD: 0.1777][VORT: 0.2419][Total: 0.6365]	4.7+3.1s
[4800/8000]	[L1: 0.0900][DIV: 0.1290][GRAD: 0.1796][VORT: 0.2435][Total: 0.6421]	4.7+3.1s
[5600/8000]	[L1: 0.0904][DIV: 0.1294][GRAD: 0.1806][VORT: 0.2444][Total: 0.6448]	4.7+3.1s
[6400/8000]	[L1: 0.0902][DIV: 0.1289][GRAD: 0.1802][VORT: 0.2446][Total: 0.6440]	4.7+3.1s
[7200/8000]	[L1: 0.0899][DIV: 0.1287][GRAD: 0.1797][VORT: 0.2437][Total: 0.6420]	4.7+3.1s
[8000/8000]	[L1: 0.0908][DIV: 0.1295][GRAD: 0.1814][VORT: 0.2462][Total: 0.6479]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.072371	vorticity_error: 1.131336	mean_abs_divergence: 0.086159
[DIV2K x2]	rel_l2_error: 0.056481	vorticity_error: 1.145856	mean_abs_divergence: 0.045789
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048097	vorticity_error: 1.206312	mean_abs_divergence: 0.022115
Forward: 1.32s

Saving...
Total: 1.65s

[Epoch 136]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0903][DIV: 0.1309][GRAD: 0.1809][VORT: 0.2396][Total: 0.6418]	4.7+3.1s
[1600/8000]	[L1: 0.0980][DIV: 0.1398][GRAD: 0.1969][VORT: 0.2658][Total: 0.7006]	4.7+3.1s
[2400/8000]	[L1: 0.0945][DIV: 0.1355][GRAD: 0.1897][VORT: 0.2588][Total: 0.6785]	4.7+3.1s
[3200/8000]	[L1: 0.0920][DIV: 0.1317][GRAD: 0.1843][VORT: 0.2533][Total: 0.6614]	4.7+3.1s
[4000/8000]	[L1: 0.0920][DIV: 0.1321][GRAD: 0.1842][VORT: 0.2511][Total: 0.6594]	4.7+3.1s
[4800/8000]	[L1: 0.0924][DIV: 0.1327][GRAD: 0.1851][VORT: 0.2522][Total: 0.6625]	4.7+3.1s
[5600/8000]	[L1: 0.0931][DIV: 0.1334][GRAD: 0.1866][VORT: 0.2548][Total: 0.6680]	4.7+3.1s
[6400/8000]	[L1: 0.0927][DIV: 0.1327][GRAD: 0.1859][VORT: 0.2546][Total: 0.6660]	4.7+3.1s
[7200/8000]	[L1: 0.0924][DIV: 0.1323][GRAD: 0.1851][VORT: 0.2529][Total: 0.6626]	4.7+3.1s
[8000/8000]	[L1: 0.0922][DIV: 0.1320][GRAD: 0.1845][VORT: 0.2515][Total: 0.6602]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.078206	vorticity_error: 1.062566	mean_abs_divergence: 0.134949
[DIV2K x2]	rel_l2_error: 0.061042	vorticity_error: 1.226173	mean_abs_divergence: 0.070593
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043841	vorticity_error: 1.442028	mean_abs_divergence: 0.035054
Forward: 1.30s

Saving...
Total: 1.63s

[Epoch 137]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0876][DIV: 0.1245][GRAD: 0.1758][VORT: 0.2401][Total: 0.6281]	4.7+3.1s
[1600/8000]	[L1: 0.0922][DIV: 0.1315][GRAD: 0.1850][VORT: 0.2510][Total: 0.6597]	4.7+3.1s
[2400/8000]	[L1: 0.0913][DIV: 0.1305][GRAD: 0.1832][VORT: 0.2491][Total: 0.6541]	4.7+3.1s
[3200/8000]	[L1: 0.0907][DIV: 0.1289][GRAD: 0.1814][VORT: 0.2473][Total: 0.6483]	4.7+3.1s
[4000/8000]	[L1: 0.0899][DIV: 0.1278][GRAD: 0.1795][VORT: 0.2439][Total: 0.6410]	4.7+3.1s
[4800/8000]	[L1: 0.0917][DIV: 0.1301][GRAD: 0.1831][VORT: 0.2479][Total: 0.6528]	4.7+3.1s
[5600/8000]	[L1: 0.0915][DIV: 0.1299][GRAD: 0.1827][VORT: 0.2478][Total: 0.6519]	4.7+3.1s
[6400/8000]	[L1: 0.0922][DIV: 0.1306][GRAD: 0.1842][VORT: 0.2500][Total: 0.6571]	4.7+3.1s
[7200/8000]	[L1: 0.0924][DIV: 0.1306][GRAD: 0.1846][VORT: 0.2509][Total: 0.6585]	4.7+3.1s
[8000/8000]	[L1: 0.0915][DIV: 0.1296][GRAD: 0.1828][VORT: 0.2485][Total: 0.6525]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.083450	vorticity_error: 1.037019	mean_abs_divergence: 0.133579
[DIV2K x2]	rel_l2_error: 0.063764	vorticity_error: 0.960115	mean_abs_divergence: 0.069810
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045379	vorticity_error: 1.181177	mean_abs_divergence: 0.033710
Forward: 1.30s

Saving...
Total: 1.66s

[Epoch 138]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0849][DIV: 0.1204][GRAD: 0.1685][VORT: 0.2367][Total: 0.6105]	4.7+3.1s
[1600/8000]	[L1: 0.0867][DIV: 0.1244][GRAD: 0.1723][VORT: 0.2380][Total: 0.6214]	4.7+3.1s
[2400/8000]	[L1: 0.0873][DIV: 0.1246][GRAD: 0.1734][VORT: 0.2393][Total: 0.6246]	4.7+3.1s
[3200/8000]	[L1: 0.0879][DIV: 0.1254][GRAD: 0.1742][VORT: 0.2374][Total: 0.6248]	4.7+3.1s
[4000/8000]	[L1: 0.0891][DIV: 0.1268][GRAD: 0.1774][VORT: 0.2419][Total: 0.6352]	4.7+3.1s
[4800/8000]	[L1: 0.0901][DIV: 0.1280][GRAD: 0.1796][VORT: 0.2451][Total: 0.6427]	4.7+3.1s
[5600/8000]	[L1: 0.0903][DIV: 0.1284][GRAD: 0.1801][VORT: 0.2461][Total: 0.6449]	4.7+3.1s
[6400/8000]	[L1: 0.0901][DIV: 0.1283][GRAD: 0.1796][VORT: 0.2452][Total: 0.6432]	4.7+3.1s
[7200/8000]	[L1: 0.0900][DIV: 0.1280][GRAD: 0.1796][VORT: 0.2460][Total: 0.6436]	4.7+3.1s
[8000/8000]	[L1: 0.0902][DIV: 0.1283][GRAD: 0.1799][VORT: 0.2468][Total: 0.6452]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.076658	vorticity_error: 1.471209	mean_abs_divergence: 0.103495
[DIV2K x2]	rel_l2_error: 0.059344	vorticity_error: 1.258323	mean_abs_divergence: 0.054663
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.039696	vorticity_error: 1.511137	mean_abs_divergence: 0.027006
Forward: 1.30s

Saving...
Total: 1.63s

[Epoch 139]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0915][DIV: 0.1295][GRAD: 0.1843][VORT: 0.2507][Total: 0.6561]	4.7+3.1s
[1600/8000]	[L1: 0.0920][DIV: 0.1311][GRAD: 0.1848][VORT: 0.2496][Total: 0.6576]	4.7+3.1s
[2400/8000]	[L1: 0.0897][DIV: 0.1282][GRAD: 0.1799][VORT: 0.2443][Total: 0.6421]	4.7+3.1s
[3200/8000]	[L1: 0.0908][DIV: 0.1296][GRAD: 0.1821][VORT: 0.2470][Total: 0.6495]	4.7+3.1s
[4000/8000]	[L1: 0.0913][DIV: 0.1302][GRAD: 0.1828][VORT: 0.2482][Total: 0.6525]	4.7+3.1s
[4800/8000]	[L1: 0.0921][DIV: 0.1314][GRAD: 0.1847][VORT: 0.2516][Total: 0.6598]	4.7+3.1s
[5600/8000]	[L1: 0.0915][DIV: 0.1303][GRAD: 0.1834][VORT: 0.2505][Total: 0.6557]	4.8+3.1s
[6400/8000]	[L1: 0.0910][DIV: 0.1296][GRAD: 0.1824][VORT: 0.2489][Total: 0.6518]	4.7+3.1s
[7200/8000]	[L1: 0.0913][DIV: 0.1301][GRAD: 0.1831][VORT: 0.2492][Total: 0.6537]	4.7+3.1s
[8000/8000]	[L1: 0.0911][DIV: 0.1298][GRAD: 0.1826][VORT: 0.2480][Total: 0.6514]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.075371	vorticity_error: 1.179237	mean_abs_divergence: 0.117134
[DIV2K x2]	rel_l2_error: 0.058983	vorticity_error: 1.359756	mean_abs_divergence: 0.062596
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.050371	vorticity_error: 1.736920	mean_abs_divergence: 0.030980
Forward: 1.29s

Saving...
Total: 1.62s

[Epoch 140]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0975][DIV: 0.1363][GRAD: 0.1936][VORT: 0.2552][Total: 0.6826]	4.7+3.1s
[1600/8000]	[L1: 0.0946][DIV: 0.1342][GRAD: 0.1888][VORT: 0.2558][Total: 0.6736]	4.7+3.1s
[2400/8000]	[L1: 0.0940][DIV: 0.1332][GRAD: 0.1879][VORT: 0.2555][Total: 0.6707]	4.7+3.1s
[3200/8000]	[L1: 0.0934][DIV: 0.1328][GRAD: 0.1866][VORT: 0.2544][Total: 0.6672]	4.7+3.1s
[4000/8000]	[L1: 0.0932][DIV: 0.1328][GRAD: 0.1859][VORT: 0.2524][Total: 0.6643]	4.7+3.1s
[4800/8000]	[L1: 0.0936][DIV: 0.1332][GRAD: 0.1870][VORT: 0.2536][Total: 0.6674]	4.7+3.1s
[5600/8000]	[L1: 0.0933][DIV: 0.1329][GRAD: 0.1866][VORT: 0.2532][Total: 0.6661]	4.8+3.1s
[6400/8000]	[L1: 0.0944][DIV: 0.1344][GRAD: 0.1889][VORT: 0.2564][Total: 0.6740]	4.7+3.1s
[7200/8000]	[L1: 0.0935][DIV: 0.1332][GRAD: 0.1871][VORT: 0.2541][Total: 0.6679]	4.7+3.1s
[8000/8000]	[L1: 0.0931][DIV: 0.1329][GRAD: 0.1863][VORT: 0.2523][Total: 0.6646]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.099019	vorticity_error: 0.856364	mean_abs_divergence: 0.148129
[DIV2K x2]	rel_l2_error: 0.076012	vorticity_error: 1.092331	mean_abs_divergence: 0.079093
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.046099	vorticity_error: 0.880088	mean_abs_divergence: 0.038567
Forward: 1.31s

Saving...
Total: 1.64s

[Epoch 141]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0957][DIV: 0.1368][GRAD: 0.1922][VORT: 0.2694][Total: 0.6942]	4.7+3.1s
[1600/8000]	[L1: 0.0930][DIV: 0.1339][GRAD: 0.1872][VORT: 0.2569][Total: 0.6710]	4.7+3.1s
[2400/8000]	[L1: 0.0969][DIV: 0.1387][GRAD: 0.1951][VORT: 0.2655][Total: 0.6962]	4.7+3.1s
[3200/8000]	[L1: 0.0947][DIV: 0.1359][GRAD: 0.1902][VORT: 0.2577][Total: 0.6786]	4.7+3.1s
[4000/8000]	[L1: 0.0938][DIV: 0.1349][GRAD: 0.1880][VORT: 0.2551][Total: 0.6719]	4.7+3.1s
[4800/8000]	[L1: 0.0944][DIV: 0.1351][GRAD: 0.1893][VORT: 0.2573][Total: 0.6760]	4.7+3.1s
[5600/8000]	[L1: 0.0939][DIV: 0.1345][GRAD: 0.1883][VORT: 0.2554][Total: 0.6721]	4.7+3.1s
[6400/8000]	[L1: 0.0931][DIV: 0.1334][GRAD: 0.1864][VORT: 0.2525][Total: 0.6654]	4.7+3.1s
[7200/8000]	[L1: 0.0936][DIV: 0.1340][GRAD: 0.1874][VORT: 0.2533][Total: 0.6683]	4.7+3.1s
[8000/8000]	[L1: 0.0943][DIV: 0.1346][GRAD: 0.1887][VORT: 0.2554][Total: 0.6729]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.084289	vorticity_error: 2.063381	mean_abs_divergence: 0.140758
[DIV2K x2]	rel_l2_error: 0.071986	vorticity_error: 0.910992	mean_abs_divergence: 0.075665
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.047088	vorticity_error: 0.990213	mean_abs_divergence: 0.036542
Forward: 1.25s

Saving...
Total: 1.58s

[Epoch 142]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0953][DIV: 0.1338][GRAD: 0.1889][VORT: 0.2522][Total: 0.6702]	4.7+3.1s
[1600/8000]	[L1: 0.1001][DIV: 0.1409][GRAD: 0.1997][VORT: 0.2733][Total: 0.7140]	4.7+3.1s
[2400/8000]	[L1: 0.0959][DIV: 0.1361][GRAD: 0.1915][VORT: 0.2618][Total: 0.6853]	4.7+3.1s
[3200/8000]	[L1: 0.0965][DIV: 0.1377][GRAD: 0.1931][VORT: 0.2627][Total: 0.6900]	4.7+3.1s
[4000/8000]	[L1: 0.0973][DIV: 0.1386][GRAD: 0.1949][VORT: 0.2646][Total: 0.6953]	4.7+3.1s
[4800/8000]	[L1: 0.0951][DIV: 0.1362][GRAD: 0.1903][VORT: 0.2574][Total: 0.6790]	4.7+3.1s
[5600/8000]	[L1: 0.0943][DIV: 0.1346][GRAD: 0.1885][VORT: 0.2561][Total: 0.6736]	4.7+3.1s
[6400/8000]	[L1: 0.0937][DIV: 0.1339][GRAD: 0.1874][VORT: 0.2547][Total: 0.6696]	4.8+3.1s
[7200/8000]	[L1: 0.0930][DIV: 0.1328][GRAD: 0.1862][VORT: 0.2538][Total: 0.6657]	4.7+3.1s
[8000/8000]	[L1: 0.0929][DIV: 0.1327][GRAD: 0.1859][VORT: 0.2533][Total: 0.6648]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.076574	vorticity_error: 1.017710	mean_abs_divergence: 0.128978
[DIV2K x2]	rel_l2_error: 0.062043	vorticity_error: 1.107621	mean_abs_divergence: 0.067369
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.041537	vorticity_error: 1.282602	mean_abs_divergence: 0.032583
Forward: 1.25s

Saving...
Total: 1.57s

[Epoch 143]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0907][DIV: 0.1312][GRAD: 0.1806][VORT: 0.2458][Total: 0.6483]	4.7+3.1s
[1600/8000]	[L1: 0.0906][DIV: 0.1299][GRAD: 0.1809][VORT: 0.2449][Total: 0.6464]	4.7+3.1s
[2400/8000]	[L1: 0.0936][DIV: 0.1330][GRAD: 0.1866][VORT: 0.2489][Total: 0.6621]	4.7+3.1s
[3200/8000]	[L1: 0.0947][DIV: 0.1353][GRAD: 0.1891][VORT: 0.2524][Total: 0.6716]	4.7+3.1s
[4000/8000]	[L1: 0.0943][DIV: 0.1341][GRAD: 0.1884][VORT: 0.2522][Total: 0.6689]	4.7+3.1s
[4800/8000]	[L1: 0.0936][DIV: 0.1334][GRAD: 0.1869][VORT: 0.2507][Total: 0.6645]	4.7+3.1s
[5600/8000]	[L1: 0.0946][DIV: 0.1346][GRAD: 0.1889][VORT: 0.2535][Total: 0.6716]	4.7+3.1s
[6400/8000]	[L1: 0.0952][DIV: 0.1351][GRAD: 0.1900][VORT: 0.2541][Total: 0.6744]	4.8+3.1s
[7200/8000]	[L1: 0.0956][DIV: 0.1353][GRAD: 0.1908][VORT: 0.2554][Total: 0.6770]	4.7+3.1s
[8000/8000]	[L1: 0.0955][DIV: 0.1352][GRAD: 0.1907][VORT: 0.2546][Total: 0.6760]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.079043	vorticity_error: 1.196353	mean_abs_divergence: 0.129285
[DIV2K x2]	rel_l2_error: 0.065758	vorticity_error: 1.202533	mean_abs_divergence: 0.067908
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045949	vorticity_error: 1.489186	mean_abs_divergence: 0.033338
Forward: 1.26s

Saving...
Total: 1.58s

[Epoch 144]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0911][DIV: 0.1311][GRAD: 0.1824][VORT: 0.2505][Total: 0.6551]	4.7+3.1s
[1600/8000]	[L1: 0.0925][DIV: 0.1319][GRAD: 0.1851][VORT: 0.2524][Total: 0.6618]	4.7+3.1s
[2400/8000]	[L1: 0.0914][DIV: 0.1302][GRAD: 0.1823][VORT: 0.2478][Total: 0.6517]	4.7+3.1s
[3200/8000]	[L1: 0.0909][DIV: 0.1291][GRAD: 0.1814][VORT: 0.2480][Total: 0.6494]	4.7+3.1s
[4000/8000]	[L1: 0.0910][DIV: 0.1296][GRAD: 0.1816][VORT: 0.2485][Total: 0.6507]	4.7+3.1s
[4800/8000]	[L1: 0.0912][DIV: 0.1299][GRAD: 0.1819][VORT: 0.2475][Total: 0.6505]	4.7+3.1s
[5600/8000]	[L1: 0.0913][DIV: 0.1304][GRAD: 0.1822][VORT: 0.2476][Total: 0.6515]	4.7+3.1s
[6400/8000]	[L1: 0.0906][DIV: 0.1296][GRAD: 0.1806][VORT: 0.2451][Total: 0.6458]	4.8+3.1s
[7200/8000]	[L1: 0.0912][DIV: 0.1303][GRAD: 0.1820][VORT: 0.2472][Total: 0.6507]	4.7+3.2s
[8000/8000]	[L1: 0.0910][DIV: 0.1302][GRAD: 0.1817][VORT: 0.2476][Total: 0.6505]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.086256	vorticity_error: 0.791988	mean_abs_divergence: 0.123690
[DIV2K x2]	rel_l2_error: 0.065767	vorticity_error: 0.829429	mean_abs_divergence: 0.068935
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.049627	vorticity_error: 0.718269	mean_abs_divergence: 0.034218
Forward: 1.32s

Saving...
Total: 1.65s

[Epoch 145]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0884][DIV: 0.1246][GRAD: 0.1766][VORT: 0.2461][Total: 0.6357]	4.7+3.1s
[1600/8000]	[L1: 0.0943][DIV: 0.1337][GRAD: 0.1882][VORT: 0.2523][Total: 0.6686]	4.7+3.1s
[2400/8000]	[L1: 0.0907][DIV: 0.1289][GRAD: 0.1808][VORT: 0.2453][Total: 0.6457]	4.7+3.1s
[3200/8000]	[L1: 0.0930][DIV: 0.1323][GRAD: 0.1857][VORT: 0.2500][Total: 0.6610]	4.7+3.1s
[4000/8000]	[L1: 0.0917][DIV: 0.1307][GRAD: 0.1829][VORT: 0.2457][Total: 0.6510]	4.7+3.1s
[4800/8000]	[L1: 0.0922][DIV: 0.1312][GRAD: 0.1841][VORT: 0.2472][Total: 0.6546]	4.7+3.1s
[5600/8000]	[L1: 0.0931][DIV: 0.1324][GRAD: 0.1857][VORT: 0.2491][Total: 0.6602]	4.7+3.1s
[6400/8000]	[L1: 0.0925][DIV: 0.1319][GRAD: 0.1847][VORT: 0.2475][Total: 0.6566]	4.8+3.1s
[7200/8000]	[L1: 0.0927][DIV: 0.1322][GRAD: 0.1851][VORT: 0.2481][Total: 0.6581]	4.7+3.1s
[8000/8000]	[L1: 0.0929][DIV: 0.1324][GRAD: 0.1856][VORT: 0.2489][Total: 0.6599]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.081488	vorticity_error: 0.891881	mean_abs_divergence: 0.131892
[DIV2K x2]	rel_l2_error: 0.059262	vorticity_error: 0.894102	mean_abs_divergence: 0.069676
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.039380	vorticity_error: 0.752454	mean_abs_divergence: 0.034262
Forward: 1.27s

Saving...
Total: 1.59s

[Epoch 146]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0912][DIV: 0.1314][GRAD: 0.1825][VORT: 0.2481][Total: 0.6531]	4.7+3.1s
[1600/8000]	[L1: 0.0960][DIV: 0.1372][GRAD: 0.1928][VORT: 0.2600][Total: 0.6859]	4.7+3.1s
[2400/8000]	[L1: 0.0944][DIV: 0.1354][GRAD: 0.1898][VORT: 0.2565][Total: 0.6761]	4.7+3.1s
[3200/8000]	[L1: 0.0941][DIV: 0.1349][GRAD: 0.1891][VORT: 0.2565][Total: 0.6747]	4.7+3.1s
[4000/8000]	[L1: 0.0951][DIV: 0.1367][GRAD: 0.1914][VORT: 0.2591][Total: 0.6822]	4.7+3.1s
[4800/8000]	[L1: 0.0947][DIV: 0.1359][GRAD: 0.1906][VORT: 0.2593][Total: 0.6805]	4.7+3.1s
[5600/8000]	[L1: 0.0937][DIV: 0.1344][GRAD: 0.1883][VORT: 0.2558][Total: 0.6722]	4.7+3.1s
[6400/8000]	[L1: 0.0933][DIV: 0.1340][GRAD: 0.1875][VORT: 0.2538][Total: 0.6686]	4.8+3.1s
[7200/8000]	[L1: 0.0926][DIV: 0.1327][GRAD: 0.1860][VORT: 0.2522][Total: 0.6635]	4.7+3.1s
[8000/8000]	[L1: 0.0925][DIV: 0.1325][GRAD: 0.1857][VORT: 0.2523][Total: 0.6629]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.088542	vorticity_error: 0.984656	mean_abs_divergence: 0.131233
[DIV2K x2]	rel_l2_error: 0.069100	vorticity_error: 0.985142	mean_abs_divergence: 0.072343
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.047497	vorticity_error: 1.125668	mean_abs_divergence: 0.035357
Forward: 1.25s

Saving...
Total: 1.57s

[Epoch 147]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0900][DIV: 0.1300][GRAD: 0.1779][VORT: 0.2347][Total: 0.6327]	4.7+3.1s
[1600/8000]	[L1: 0.0914][DIV: 0.1301][GRAD: 0.1818][VORT: 0.2448][Total: 0.6481]	4.7+3.1s
[2400/8000]	[L1: 0.0921][DIV: 0.1317][GRAD: 0.1837][VORT: 0.2482][Total: 0.6557]	4.7+3.1s
[3200/8000]	[L1: 0.0915][DIV: 0.1306][GRAD: 0.1823][VORT: 0.2459][Total: 0.6504]	4.7+3.1s
[4000/8000]	[L1: 0.0923][DIV: 0.1313][GRAD: 0.1840][VORT: 0.2496][Total: 0.6571]	4.7+3.1s
[4800/8000]	[L1: 0.0928][DIV: 0.1316][GRAD: 0.1850][VORT: 0.2495][Total: 0.6589]	4.7+3.1s
[5600/8000]	[L1: 0.0921][DIV: 0.1309][GRAD: 0.1838][VORT: 0.2477][Total: 0.6544]	4.7+3.1s
[6400/8000]	[L1: 0.0938][DIV: 0.1332][GRAD: 0.1875][VORT: 0.2524][Total: 0.6669]	4.7+3.1s
[7200/8000]	[L1: 0.0927][DIV: 0.1318][GRAD: 0.1854][VORT: 0.2507][Total: 0.6606]	4.7+3.1s
[8000/8000]	[L1: 0.0926][DIV: 0.1315][GRAD: 0.1850][VORT: 0.2505][Total: 0.6596]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.098069	vorticity_error: 1.105104	mean_abs_divergence: 0.139707
[DIV2K x2]	rel_l2_error: 0.069320	vorticity_error: 1.263903	mean_abs_divergence: 0.075302
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.053712	vorticity_error: 1.054157	mean_abs_divergence: 0.036993
Forward: 1.26s

Saving...
Total: 1.60s

[Epoch 148]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0984][DIV: 0.1388][GRAD: 0.1988][VORT: 0.2705][Total: 0.7064]	4.7+3.1s
[1600/8000]	[L1: 0.0969][DIV: 0.1369][GRAD: 0.1954][VORT: 0.2636][Total: 0.6928]	4.7+3.1s
[2400/8000]	[L1: 0.0944][DIV: 0.1342][GRAD: 0.1896][VORT: 0.2556][Total: 0.6739]	4.7+3.1s
[3200/8000]	[L1: 0.0929][DIV: 0.1324][GRAD: 0.1866][VORT: 0.2519][Total: 0.6638]	4.7+3.1s
[4000/8000]	[L1: 0.0928][DIV: 0.1327][GRAD: 0.1864][VORT: 0.2520][Total: 0.6638]	4.7+3.1s
[4800/8000]	[L1: 0.0929][DIV: 0.1328][GRAD: 0.1865][VORT: 0.2526][Total: 0.6647]	4.7+3.1s
[5600/8000]	[L1: 0.0934][DIV: 0.1332][GRAD: 0.1875][VORT: 0.2544][Total: 0.6685]	4.7+3.1s
[6400/8000]	[L1: 0.0927][DIV: 0.1323][GRAD: 0.1859][VORT: 0.2521][Total: 0.6630]	4.7+3.1s
[7200/8000]	[L1: 0.0933][DIV: 0.1331][GRAD: 0.1871][VORT: 0.2541][Total: 0.6676]	4.7+3.1s
[8000/8000]	[L1: 0.0924][DIV: 0.1323][GRAD: 0.1854][VORT: 0.2519][Total: 0.6620]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.071434	vorticity_error: 1.220911	mean_abs_divergence: 0.099058
[DIV2K x2]	rel_l2_error: 0.055587	vorticity_error: 1.347136	mean_abs_divergence: 0.050278
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.040839	vorticity_error: 1.372327	mean_abs_divergence: 0.024379
Forward: 1.26s

Saving...
Total: 1.58s

[Epoch 149]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0973][DIV: 0.1368][GRAD: 0.1944][VORT: 0.2625][Total: 0.6910]	4.7+3.1s
[1600/8000]	[L1: 0.0946][DIV: 0.1337][GRAD: 0.1881][VORT: 0.2521][Total: 0.6685]	4.7+3.1s
[2400/8000]	[L1: 0.0946][DIV: 0.1337][GRAD: 0.1886][VORT: 0.2554][Total: 0.6723]	4.7+3.1s
[3200/8000]	[L1: 0.0943][DIV: 0.1336][GRAD: 0.1880][VORT: 0.2532][Total: 0.6691]	4.7+3.1s
[4000/8000]	[L1: 0.0934][DIV: 0.1329][GRAD: 0.1857][VORT: 0.2493][Total: 0.6613]	4.7+3.1s
[4800/8000]	[L1: 0.0935][DIV: 0.1331][GRAD: 0.1861][VORT: 0.2515][Total: 0.6641]	4.7+3.1s
[5600/8000]	[L1: 0.0934][DIV: 0.1325][GRAD: 0.1859][VORT: 0.2521][Total: 0.6639]	4.7+3.1s
[6400/8000]	[L1: 0.0928][DIV: 0.1318][GRAD: 0.1851][VORT: 0.2516][Total: 0.6613]	4.7+3.1s
[7200/8000]	[L1: 0.0926][DIV: 0.1315][GRAD: 0.1847][VORT: 0.2511][Total: 0.6598]	4.8+3.1s
[8000/8000]	[L1: 0.0922][DIV: 0.1312][GRAD: 0.1841][VORT: 0.2499][Total: 0.6574]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.096976	vorticity_error: 1.360941	mean_abs_divergence: 0.138702
[DIV2K x2]	rel_l2_error: 0.073016	vorticity_error: 1.356655	mean_abs_divergence: 0.075014
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048815	vorticity_error: 1.331932	mean_abs_divergence: 0.036688
Forward: 1.28s

Saving...
Total: 1.62s

[Epoch 150]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0920][DIV: 0.1304][GRAD: 0.1836][VORT: 0.2488][Total: 0.6549]	4.7+3.1s
[1600/8000]	[L1: 0.0933][DIV: 0.1320][GRAD: 0.1874][VORT: 0.2511][Total: 0.6638]	4.7+3.1s
[2400/8000]	[L1: 0.0927][DIV: 0.1318][GRAD: 0.1858][VORT: 0.2515][Total: 0.6618]	4.7+3.1s
[3200/8000]	[L1: 0.0940][DIV: 0.1343][GRAD: 0.1884][VORT: 0.2527][Total: 0.6694]	4.7+3.1s
[4000/8000]	[L1: 0.0943][DIV: 0.1353][GRAD: 0.1888][VORT: 0.2523][Total: 0.6707]	4.7+3.1s
[4800/8000]	[L1: 0.0939][DIV: 0.1348][GRAD: 0.1879][VORT: 0.2517][Total: 0.6683]	4.7+3.1s
[5600/8000]	[L1: 0.0922][DIV: 0.1325][GRAD: 0.1844][VORT: 0.2482][Total: 0.6574]	4.7+3.1s
[6400/8000]	[L1: 0.0922][DIV: 0.1325][GRAD: 0.1844][VORT: 0.2473][Total: 0.6564]	4.7+3.1s
[7200/8000]	[L1: 0.0920][DIV: 0.1322][GRAD: 0.1836][VORT: 0.2456][Total: 0.6534]	4.7+3.1s
[8000/8000]	[L1: 0.0919][DIV: 0.1319][GRAD: 0.1835][VORT: 0.2461][Total: 0.6534]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.086968	vorticity_error: 0.883762	mean_abs_divergence: 0.125999
[DIV2K x2]	rel_l2_error: 0.071401	vorticity_error: 0.973002	mean_abs_divergence: 0.067363
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.049920	vorticity_error: 0.980985	mean_abs_divergence: 0.033504
Forward: 1.25s

Saving...
Total: 1.58s

[Epoch 151]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0813][DIV: 0.1167][GRAD: 0.1612][VORT: 0.2173][Total: 0.5765]	4.7+3.1s
[1600/8000]	[L1: 0.0881][DIV: 0.1255][GRAD: 0.1751][VORT: 0.2374][Total: 0.6261]	4.7+3.1s
[2400/8000]	[L1: 0.0903][DIV: 0.1292][GRAD: 0.1799][VORT: 0.2419][Total: 0.6411]	4.7+3.1s
[3200/8000]	[L1: 0.0897][DIV: 0.1288][GRAD: 0.1792][VORT: 0.2409][Total: 0.6387]	4.7+3.1s
[4000/8000]	[L1: 0.0900][DIV: 0.1290][GRAD: 0.1795][VORT: 0.2424][Total: 0.6409]	4.7+3.1s
[4800/8000]	[L1: 0.0897][DIV: 0.1286][GRAD: 0.1789][VORT: 0.2414][Total: 0.6387]	4.7+3.1s
[5600/8000]	[L1: 0.0890][DIV: 0.1279][GRAD: 0.1778][VORT: 0.2406][Total: 0.6353]	4.7+3.1s
[6400/8000]	[L1: 0.0896][DIV: 0.1288][GRAD: 0.1794][VORT: 0.2433][Total: 0.6410]	4.8+3.1s
[7200/8000]	[L1: 0.0901][DIV: 0.1295][GRAD: 0.1804][VORT: 0.2446][Total: 0.6447]	4.7+3.1s
[8000/8000]	[L1: 0.0902][DIV: 0.1296][GRAD: 0.1805][VORT: 0.2444][Total: 0.6448]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.080243	vorticity_error: 1.045199	mean_abs_divergence: 0.114708
[DIV2K x2]	rel_l2_error: 0.060183	vorticity_error: 1.370474	mean_abs_divergence: 0.059276
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048305	vorticity_error: 1.475515	mean_abs_divergence: 0.028850
Forward: 1.25s

Saving...
Total: 1.57s

[Epoch 152]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0948][DIV: 0.1345][GRAD: 0.1912][VORT: 0.2581][Total: 0.6785]	4.7+3.1s
[1600/8000]	[L1: 0.0916][DIV: 0.1295][GRAD: 0.1830][VORT: 0.2478][Total: 0.6519]	4.7+3.1s
[2400/8000]	[L1: 0.0905][DIV: 0.1283][GRAD: 0.1808][VORT: 0.2442][Total: 0.6439]	4.7+3.1s
[3200/8000]	[L1: 0.0921][DIV: 0.1315][GRAD: 0.1837][VORT: 0.2453][Total: 0.6525]	4.7+3.1s
[4000/8000]	[L1: 0.0918][DIV: 0.1311][GRAD: 0.1834][VORT: 0.2460][Total: 0.6523]	4.7+3.1s
[4800/8000]	[L1: 0.0918][DIV: 0.1311][GRAD: 0.1835][VORT: 0.2474][Total: 0.6537]	4.7+3.1s
[5600/8000]	[L1: 0.0916][DIV: 0.1308][GRAD: 0.1831][VORT: 0.2477][Total: 0.6532]	4.7+3.1s
[6400/8000]	[L1: 0.0922][DIV: 0.1314][GRAD: 0.1844][VORT: 0.2494][Total: 0.6575]	4.7+3.1s
[7200/8000]	[L1: 0.0930][DIV: 0.1322][GRAD: 0.1857][VORT: 0.2513][Total: 0.6622]	4.7+3.1s
[8000/8000]	[L1: 0.0935][DIV: 0.1330][GRAD: 0.1869][VORT: 0.2525][Total: 0.6659]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.098056	vorticity_error: 2.375146	mean_abs_divergence: 0.142240
[DIV2K x2]	rel_l2_error: 0.075190	vorticity_error: 1.993773	mean_abs_divergence: 0.075546
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.063377	vorticity_error: 2.358273	mean_abs_divergence: 0.036374
Forward: 1.31s

Saving...
Total: 1.65s

[Epoch 153]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0906][DIV: 0.1291][GRAD: 0.1820][VORT: 0.2513][Total: 0.6530]	4.7+3.1s
[1600/8000]	[L1: 0.0900][DIV: 0.1285][GRAD: 0.1801][VORT: 0.2417][Total: 0.6403]	4.7+3.1s
[2400/8000]	[L1: 0.0911][DIV: 0.1297][GRAD: 0.1827][VORT: 0.2490][Total: 0.6525]	4.7+3.1s
[3200/8000]	[L1: 0.0912][DIV: 0.1297][GRAD: 0.1827][VORT: 0.2471][Total: 0.6506]	4.7+3.1s
[4000/8000]	[L1: 0.0916][DIV: 0.1305][GRAD: 0.1836][VORT: 0.2478][Total: 0.6535]	4.7+3.1s
[4800/8000]	[L1: 0.0912][DIV: 0.1295][GRAD: 0.1824][VORT: 0.2462][Total: 0.6493]	4.7+3.1s
[5600/8000]	[L1: 0.0921][DIV: 0.1305][GRAD: 0.1845][VORT: 0.2500][Total: 0.6571]	4.7+3.1s
[6400/8000]	[L1: 0.0911][DIV: 0.1294][GRAD: 0.1822][VORT: 0.2464][Total: 0.6490]	4.7+3.1s
[7200/8000]	[L1: 0.0906][DIV: 0.1291][GRAD: 0.1812][VORT: 0.2451][Total: 0.6459]	4.7+3.1s
[8000/8000]	[L1: 0.0901][DIV: 0.1283][GRAD: 0.1802][VORT: 0.2444][Total: 0.6430]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.083521	vorticity_error: 0.837248	mean_abs_divergence: 0.146095
[DIV2K x2]	rel_l2_error: 0.064386	vorticity_error: 1.006661	mean_abs_divergence: 0.077867
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.047696	vorticity_error: 0.914431	mean_abs_divergence: 0.037876
Forward: 1.26s

Saving...
Total: 1.59s

[Epoch 154]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0939][DIV: 0.1343][GRAD: 0.1883][VORT: 0.2589][Total: 0.6754]	4.7+3.1s
[1600/8000]	[L1: 0.0932][DIV: 0.1322][GRAD: 0.1872][VORT: 0.2572][Total: 0.6697]	4.7+3.1s
[2400/8000]	[L1: 0.0908][DIV: 0.1300][GRAD: 0.1822][VORT: 0.2494][Total: 0.6523]	4.7+3.1s
[3200/8000]	[L1: 0.0905][DIV: 0.1299][GRAD: 0.1811][VORT: 0.2468][Total: 0.6483]	4.7+3.1s
[4000/8000]	[L1: 0.0912][DIV: 0.1312][GRAD: 0.1825][VORT: 0.2462][Total: 0.6510]	4.7+3.1s
[4800/8000]	[L1: 0.0912][DIV: 0.1308][GRAD: 0.1824][VORT: 0.2469][Total: 0.6513]	4.7+3.1s
[5600/8000]	[L1: 0.0892][DIV: 0.1280][GRAD: 0.1782][VORT: 0.2415][Total: 0.6368]	4.7+3.1s
[6400/8000]	[L1: 0.0893][DIV: 0.1278][GRAD: 0.1785][VORT: 0.2425][Total: 0.6381]	4.7+3.1s
[7200/8000]	[L1: 0.0901][DIV: 0.1293][GRAD: 0.1804][VORT: 0.2447][Total: 0.6444]	4.7+3.1s
[8000/8000]	[L1: 0.0907][DIV: 0.1297][GRAD: 0.1815][VORT: 0.2465][Total: 0.6484]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.092322	vorticity_error: 1.025396	mean_abs_divergence: 0.140348
[DIV2K x2]	rel_l2_error: 0.067673	vorticity_error: 4.753571	mean_abs_divergence: 0.075420
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.047271	vorticity_error: 1.507043	mean_abs_divergence: 0.037266
Forward: 1.30s

Saving...
Total: 1.64s

[Epoch 155]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0827][DIV: 0.1192][GRAD: 0.1644][VORT: 0.2225][Total: 0.5887]	4.7+3.1s
[1600/8000]	[L1: 0.0864][DIV: 0.1248][GRAD: 0.1721][VORT: 0.2335][Total: 0.6169]	4.7+3.1s
[2400/8000]	[L1: 0.0871][DIV: 0.1250][GRAD: 0.1739][VORT: 0.2345][Total: 0.6205]	4.7+3.1s
[3200/8000]	[L1: 0.0874][DIV: 0.1253][GRAD: 0.1746][VORT: 0.2379][Total: 0.6252]	4.7+3.1s
[4000/8000]	[L1: 0.0867][DIV: 0.1243][GRAD: 0.1730][VORT: 0.2370][Total: 0.6210]	4.7+3.1s
[4800/8000]	[L1: 0.0877][DIV: 0.1254][GRAD: 0.1750][VORT: 0.2400][Total: 0.6281]	4.7+3.1s
[5600/8000]	[L1: 0.0883][DIV: 0.1266][GRAD: 0.1762][VORT: 0.2406][Total: 0.6317]	4.7+3.2s
[6400/8000]	[L1: 0.0883][DIV: 0.1267][GRAD: 0.1766][VORT: 0.2421][Total: 0.6338]	4.7+3.1s
[7200/8000]	[L1: 0.0886][DIV: 0.1270][GRAD: 0.1771][VORT: 0.2417][Total: 0.6344]	4.7+3.1s
[8000/8000]	[L1: 0.0901][DIV: 0.1289][GRAD: 0.1802][VORT: 0.2448][Total: 0.6441]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.078334	vorticity_error: 0.696674	mean_abs_divergence: 0.121614
[DIV2K x2]	rel_l2_error: 0.061159	vorticity_error: 0.671559	mean_abs_divergence: 0.062810
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.041892	vorticity_error: 0.607239	mean_abs_divergence: 0.030295
Forward: 1.32s

Saving...
Total: 1.65s

[Epoch 156]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0983][DIV: 0.1370][GRAD: 0.1970][VORT: 0.2788][Total: 0.7111]	4.7+3.1s
[1600/8000]	[L1: 0.0967][DIV: 0.1359][GRAD: 0.1930][VORT: 0.2614][Total: 0.6871]	4.7+3.1s
[2400/8000]	[L1: 0.0942][DIV: 0.1325][GRAD: 0.1884][VORT: 0.2572][Total: 0.6723]	4.7+3.1s
[3200/8000]	[L1: 0.0935][DIV: 0.1318][GRAD: 0.1872][VORT: 0.2562][Total: 0.6686]	4.7+3.1s
[4000/8000]	[L1: 0.0934][DIV: 0.1322][GRAD: 0.1870][VORT: 0.2545][Total: 0.6671]	4.7+3.1s
[4800/8000]	[L1: 0.0927][DIV: 0.1316][GRAD: 0.1857][VORT: 0.2520][Total: 0.6620]	4.7+3.1s
[5600/8000]	[L1: 0.0937][DIV: 0.1326][GRAD: 0.1874][VORT: 0.2542][Total: 0.6679]	4.7+3.1s
[6400/8000]	[L1: 0.0936][DIV: 0.1325][GRAD: 0.1872][VORT: 0.2543][Total: 0.6677]	4.7+3.1s
[7200/8000]	[L1: 0.0932][DIV: 0.1320][GRAD: 0.1863][VORT: 0.2534][Total: 0.6650]	4.7+3.1s
[8000/8000]	[L1: 0.0924][DIV: 0.1309][GRAD: 0.1847][VORT: 0.2515][Total: 0.6596]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.078500	vorticity_error: 0.728151	mean_abs_divergence: 0.111586
[DIV2K x2]	rel_l2_error: 0.057630	vorticity_error: 0.720585	mean_abs_divergence: 0.058222
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.039671	vorticity_error: 0.612385	mean_abs_divergence: 0.027908
Forward: 1.25s

Saving...
Total: 1.58s

[Epoch 157]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0896][DIV: 0.1303][GRAD: 0.1794][VORT: 0.2463][Total: 0.6456]	4.7+3.1s
[1600/8000]	[L1: 0.0894][DIV: 0.1291][GRAD: 0.1795][VORT: 0.2449][Total: 0.6428]	4.7+3.1s
[2400/8000]	[L1: 0.0912][DIV: 0.1316][GRAD: 0.1832][VORT: 0.2474][Total: 0.6534]	4.7+3.1s
[3200/8000]	[L1: 0.0924][DIV: 0.1326][GRAD: 0.1851][VORT: 0.2478][Total: 0.6580]	4.7+3.1s
[4000/8000]	[L1: 0.0921][DIV: 0.1318][GRAD: 0.1842][VORT: 0.2471][Total: 0.6552]	4.7+3.1s
[4800/8000]	[L1: 0.0907][DIV: 0.1299][GRAD: 0.1814][VORT: 0.2437][Total: 0.6456]	4.7+3.1s
[5600/8000]	[L1: 0.0909][DIV: 0.1305][GRAD: 0.1819][VORT: 0.2440][Total: 0.6473]	4.7+3.1s
[6400/8000]	[L1: 0.0907][DIV: 0.1300][GRAD: 0.1815][VORT: 0.2448][Total: 0.6470]	4.7+3.1s
[7200/8000]	[L1: 0.0910][DIV: 0.1302][GRAD: 0.1821][VORT: 0.2455][Total: 0.6488]	4.7+3.1s
[8000/8000]	[L1: 0.0918][DIV: 0.1311][GRAD: 0.1838][VORT: 0.2478][Total: 0.6544]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.079943	vorticity_error: 1.084927	mean_abs_divergence: 0.113320
[DIV2K x2]	rel_l2_error: 0.061673	vorticity_error: 0.845502	mean_abs_divergence: 0.059342
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.049774	vorticity_error: 0.837355	mean_abs_divergence: 0.029186
Forward: 1.30s

Saving...
Total: 1.63s

[Epoch 158]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0879][DIV: 0.1274][GRAD: 0.1765][VORT: 0.2380][Total: 0.6298]	4.7+3.1s
[1600/8000]	[L1: 0.0912][DIV: 0.1310][GRAD: 0.1830][VORT: 0.2459][Total: 0.6512]	4.7+3.1s
[2400/8000]	[L1: 0.0917][DIV: 0.1318][GRAD: 0.1838][VORT: 0.2456][Total: 0.6529]	4.7+3.1s
[3200/8000]	[L1: 0.0905][DIV: 0.1302][GRAD: 0.1816][VORT: 0.2435][Total: 0.6458]	4.7+3.1s
[4000/8000]	[L1: 0.0918][DIV: 0.1313][GRAD: 0.1838][VORT: 0.2451][Total: 0.6520]	4.7+3.1s
[4800/8000]	[L1: 0.0921][DIV: 0.1317][GRAD: 0.1847][VORT: 0.2474][Total: 0.6560]	4.7+3.1s
[5600/8000]	[L1: 0.0923][DIV: 0.1321][GRAD: 0.1849][VORT: 0.2473][Total: 0.6566]	4.7+3.1s
[6400/8000]	[L1: 0.0922][DIV: 0.1320][GRAD: 0.1849][VORT: 0.2475][Total: 0.6566]	4.7+3.1s
[7200/8000]	[L1: 0.0922][DIV: 0.1318][GRAD: 0.1849][VORT: 0.2483][Total: 0.6571]	4.7+3.2s
[8000/8000]	[L1: 0.0911][DIV: 0.1305][GRAD: 0.1827][VORT: 0.2456][Total: 0.6499]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.067696	vorticity_error: 0.905320	mean_abs_divergence: 0.099437
[DIV2K x2]	rel_l2_error: 0.052712	vorticity_error: 1.212358	mean_abs_divergence: 0.052070
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.041180	vorticity_error: 1.079190	mean_abs_divergence: 0.025491
Forward: 1.28s

Saving...
Total: 1.62s

[Epoch 159]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0888][DIV: 0.1256][GRAD: 0.1782][VORT: 0.2416][Total: 0.6342]	4.7+3.1s
[1600/8000]	[L1: 0.0879][DIV: 0.1266][GRAD: 0.1764][VORT: 0.2386][Total: 0.6295]	4.7+3.1s
[2400/8000]	[L1: 0.0892][DIV: 0.1288][GRAD: 0.1788][VORT: 0.2408][Total: 0.6376]	4.7+3.1s
[3200/8000]	[L1: 0.0904][DIV: 0.1302][GRAD: 0.1814][VORT: 0.2452][Total: 0.6471]	4.7+3.1s
[4000/8000]	[L1: 0.0901][DIV: 0.1298][GRAD: 0.1807][VORT: 0.2445][Total: 0.6451]	4.7+3.1s
[4800/8000]	[L1: 0.0906][DIV: 0.1298][GRAD: 0.1815][VORT: 0.2458][Total: 0.6478]	4.7+3.1s
[5600/8000]	[L1: 0.0904][DIV: 0.1293][GRAD: 0.1810][VORT: 0.2454][Total: 0.6461]	4.7+3.1s
[6400/8000]	[L1: 0.0919][DIV: 0.1315][GRAD: 0.1840][VORT: 0.2484][Total: 0.6558]	4.7+3.1s
[7200/8000]	[L1: 0.0921][DIV: 0.1316][GRAD: 0.1841][VORT: 0.2484][Total: 0.6561]	4.7+3.1s
[8000/8000]	[L1: 0.0913][DIV: 0.1307][GRAD: 0.1826][VORT: 0.2463][Total: 0.6509]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.069072	vorticity_error: 0.689700	mean_abs_divergence: 0.111287
[DIV2K x2]	rel_l2_error: 0.051705	vorticity_error: 0.693656	mean_abs_divergence: 0.059319
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.036230	vorticity_error: 0.560549	mean_abs_divergence: 0.029918
Forward: 1.26s

Saving...
Total: 1.60s

[Epoch 160]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0951][DIV: 0.1343][GRAD: 0.1912][VORT: 0.2573][Total: 0.6778]	4.7+3.1s
[1600/8000]	[L1: 0.0885][DIV: 0.1275][GRAD: 0.1764][VORT: 0.2355][Total: 0.6279]	4.7+3.1s
[2400/8000]	[L1: 0.0882][DIV: 0.1277][GRAD: 0.1761][VORT: 0.2361][Total: 0.6280]	4.7+3.1s
[3200/8000]	[L1: 0.0895][DIV: 0.1291][GRAD: 0.1787][VORT: 0.2398][Total: 0.6371]	4.7+3.1s
[4000/8000]	[L1: 0.0893][DIV: 0.1290][GRAD: 0.1783][VORT: 0.2389][Total: 0.6355]	4.7+3.1s
[4800/8000]	[L1: 0.0896][DIV: 0.1286][GRAD: 0.1790][VORT: 0.2411][Total: 0.6384]	4.7+3.1s
[5600/8000]	[L1: 0.0894][DIV: 0.1287][GRAD: 0.1787][VORT: 0.2401][Total: 0.6370]	4.7+3.1s
[6400/8000]	[L1: 0.0888][DIV: 0.1283][GRAD: 0.1774][VORT: 0.2384][Total: 0.6327]	4.7+3.1s
[7200/8000]	[L1: 0.0890][DIV: 0.1281][GRAD: 0.1778][VORT: 0.2394][Total: 0.6342]	4.7+3.1s
[8000/8000]	[L1: 0.0887][DIV: 0.1276][GRAD: 0.1773][VORT: 0.2395][Total: 0.6332]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.077065	vorticity_error: 1.375774	mean_abs_divergence: 0.110518
[DIV2K x2]	rel_l2_error: 0.056185	vorticity_error: 0.983115	mean_abs_divergence: 0.060526
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044681	vorticity_error: 0.957804	mean_abs_divergence: 0.030507
Forward: 1.29s

Saving...
Total: 1.69s

[Epoch 161]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0804][DIV: 0.1157][GRAD: 0.1600][VORT: 0.2221][Total: 0.5782]	4.7+3.1s
[1600/8000]	[L1: 0.0874][DIV: 0.1255][GRAD: 0.1749][VORT: 0.2410][Total: 0.6287]	4.8+3.1s
[2400/8000]	[L1: 0.0903][DIV: 0.1295][GRAD: 0.1808][VORT: 0.2484][Total: 0.6490]	4.7+3.1s
[3200/8000]	[L1: 0.0888][DIV: 0.1281][GRAD: 0.1775][VORT: 0.2436][Total: 0.6379]	4.7+3.1s
[4000/8000]	[L1: 0.0895][DIV: 0.1291][GRAD: 0.1792][VORT: 0.2459][Total: 0.6437]	4.7+3.1s
[4800/8000]	[L1: 0.0898][DIV: 0.1295][GRAD: 0.1796][VORT: 0.2456][Total: 0.6445]	4.7+3.1s
[5600/8000]	[L1: 0.0904][DIV: 0.1300][GRAD: 0.1809][VORT: 0.2474][Total: 0.6487]	4.7+3.1s
[6400/8000]	[L1: 0.0910][DIV: 0.1308][GRAD: 0.1822][VORT: 0.2486][Total: 0.6527]	4.7+3.1s
[7200/8000]	[L1: 0.0911][DIV: 0.1308][GRAD: 0.1826][VORT: 0.2490][Total: 0.6535]	4.7+3.1s
[8000/8000]	[L1: 0.0908][DIV: 0.1305][GRAD: 0.1817][VORT: 0.2471][Total: 0.6502]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.083258	vorticity_error: 1.210518	mean_abs_divergence: 0.137315
[DIV2K x2]	rel_l2_error: 0.068768	vorticity_error: 1.086298	mean_abs_divergence: 0.073917
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045635	vorticity_error: 0.979626	mean_abs_divergence: 0.035331
Forward: 1.33s

Saving...
Total: 1.72s

[Epoch 162]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0867][DIV: 0.1233][GRAD: 0.1726][VORT: 0.2284][Total: 0.6109]	4.7+3.1s
[1600/8000]	[L1: 0.0865][DIV: 0.1238][GRAD: 0.1725][VORT: 0.2274][Total: 0.6102]	4.7+3.1s
[2400/8000]	[L1: 0.0875][DIV: 0.1257][GRAD: 0.1750][VORT: 0.2334][Total: 0.6217]	4.7+3.1s
[3200/8000]	[L1: 0.0898][DIV: 0.1291][GRAD: 0.1796][VORT: 0.2404][Total: 0.6389]	4.7+3.1s
[4000/8000]	[L1: 0.0917][DIV: 0.1317][GRAD: 0.1835][VORT: 0.2456][Total: 0.6525]	4.7+3.1s
[4800/8000]	[L1: 0.0935][DIV: 0.1340][GRAD: 0.1875][VORT: 0.2524][Total: 0.6674]	4.7+3.1s
[5600/8000]	[L1: 0.0938][DIV: 0.1345][GRAD: 0.1881][VORT: 0.2541][Total: 0.6704]	4.7+3.1s
[6400/8000]	[L1: 0.0942][DIV: 0.1352][GRAD: 0.1890][VORT: 0.2556][Total: 0.6739]	4.7+3.1s
[7200/8000]	[L1: 0.0941][DIV: 0.1347][GRAD: 0.1886][VORT: 0.2556][Total: 0.6730]	4.7+3.1s
[8000/8000]	[L1: 0.0934][DIV: 0.1337][GRAD: 0.1872][VORT: 0.2540][Total: 0.6682]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.089837	vorticity_error: 1.244239	mean_abs_divergence: 0.133209
[DIV2K x2]	rel_l2_error: 0.073490	vorticity_error: 1.633887	mean_abs_divergence: 0.070864
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.052283	vorticity_error: 1.482256	mean_abs_divergence: 0.034742
Forward: 1.32s

Saving...
Total: 1.71s

[Epoch 163]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0968][DIV: 0.1382][GRAD: 0.1950][VORT: 0.2652][Total: 0.6952]	4.7+3.1s
[1600/8000]	[L1: 0.0942][DIV: 0.1351][GRAD: 0.1890][VORT: 0.2533][Total: 0.6717]	4.7+3.1s
[2400/8000]	[L1: 0.0952][DIV: 0.1356][GRAD: 0.1902][VORT: 0.2542][Total: 0.6752]	4.7+3.1s
[3200/8000]	[L1: 0.0948][DIV: 0.1348][GRAD: 0.1895][VORT: 0.2542][Total: 0.6733]	4.7+3.1s
[4000/8000]	[L1: 0.0924][DIV: 0.1324][GRAD: 0.1845][VORT: 0.2462][Total: 0.6555]	4.7+3.1s
[4800/8000]	[L1: 0.0928][DIV: 0.1332][GRAD: 0.1854][VORT: 0.2476][Total: 0.6589]	4.7+3.1s
[5600/8000]	[L1: 0.0926][DIV: 0.1326][GRAD: 0.1849][VORT: 0.2479][Total: 0.6580]	4.7+3.1s
[6400/8000]	[L1: 0.0927][DIV: 0.1331][GRAD: 0.1853][VORT: 0.2474][Total: 0.6585]	4.7+3.1s
[7200/8000]	[L1: 0.0920][DIV: 0.1321][GRAD: 0.1840][VORT: 0.2465][Total: 0.6545]	4.7+3.1s
[8000/8000]	[L1: 0.0908][DIV: 0.1307][GRAD: 0.1815][VORT: 0.2436][Total: 0.6466]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.076039	vorticity_error: 1.446790	mean_abs_divergence: 0.118498
[DIV2K x2]	rel_l2_error: 0.058664	vorticity_error: 1.242275	mean_abs_divergence: 0.064092
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.047656	vorticity_error: 1.682145	mean_abs_divergence: 0.031848
Forward: 1.30s

Saving...
Total: 1.69s

[Epoch 164]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0892][DIV: 0.1275][GRAD: 0.1790][VORT: 0.2448][Total: 0.6405]	4.7+3.1s
[1600/8000]	[L1: 0.0890][DIV: 0.1277][GRAD: 0.1787][VORT: 0.2422][Total: 0.6376]	4.7+3.1s
[2400/8000]	[L1: 0.0901][DIV: 0.1284][GRAD: 0.1806][VORT: 0.2463][Total: 0.6455]	4.7+3.1s
[3200/8000]	[L1: 0.0902][DIV: 0.1286][GRAD: 0.1812][VORT: 0.2481][Total: 0.6480]	4.7+3.1s
[4000/8000]	[L1: 0.0908][DIV: 0.1294][GRAD: 0.1820][VORT: 0.2485][Total: 0.6506]	4.7+3.1s
[4800/8000]	[L1: 0.0901][DIV: 0.1286][GRAD: 0.1803][VORT: 0.2452][Total: 0.6442]	4.7+3.1s
[5600/8000]	[L1: 0.0905][DIV: 0.1296][GRAD: 0.1813][VORT: 0.2453][Total: 0.6467]	4.7+3.1s
[6400/8000]	[L1: 0.0908][DIV: 0.1299][GRAD: 0.1818][VORT: 0.2462][Total: 0.6487]	4.7+3.1s
[7200/8000]	[L1: 0.0908][DIV: 0.1299][GRAD: 0.1819][VORT: 0.2469][Total: 0.6495]	4.7+3.1s
[8000/8000]	[L1: 0.0908][DIV: 0.1299][GRAD: 0.1819][VORT: 0.2466][Total: 0.6492]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.065376	vorticity_error: 1.204207	mean_abs_divergence: 0.118266
[DIV2K x2]	rel_l2_error: 0.055660	vorticity_error: 1.188346	mean_abs_divergence: 0.062267
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042610	vorticity_error: 1.731723	mean_abs_divergence: 0.030601
Forward: 1.34s

Saving...
Total: 1.66s

[Epoch 165]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.1002][DIV: 0.1411][GRAD: 0.2012][VORT: 0.2709][Total: 0.7135]	4.8+3.1s
[1600/8000]	[L1: 0.0968][DIV: 0.1372][GRAD: 0.1939][VORT: 0.2620][Total: 0.6900]	4.7+3.1s
[2400/8000]	[L1: 0.0970][DIV: 0.1379][GRAD: 0.1946][VORT: 0.2617][Total: 0.6912]	4.7+3.1s
[3200/8000]	[L1: 0.0948][DIV: 0.1351][GRAD: 0.1903][VORT: 0.2569][Total: 0.6771]	4.7+3.1s
[4000/8000]	[L1: 0.0938][DIV: 0.1340][GRAD: 0.1886][VORT: 0.2551][Total: 0.6716]	4.7+3.1s
[4800/8000]	[L1: 0.0929][DIV: 0.1331][GRAD: 0.1863][VORT: 0.2507][Total: 0.6629]	4.7+3.1s
[5600/8000]	[L1: 0.0927][DIV: 0.1330][GRAD: 0.1862][VORT: 0.2508][Total: 0.6627]	4.7+3.1s
[6400/8000]	[L1: 0.0931][DIV: 0.1331][GRAD: 0.1867][VORT: 0.2523][Total: 0.6652]	4.7+3.1s
[7200/8000]	[L1: 0.0921][DIV: 0.1320][GRAD: 0.1847][VORT: 0.2496][Total: 0.6584]	4.7+3.1s
[8000/8000]	[L1: 0.0927][DIV: 0.1327][GRAD: 0.1861][VORT: 0.2514][Total: 0.6629]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.065678	vorticity_error: 0.775880	mean_abs_divergence: 0.109679
[DIV2K x2]	rel_l2_error: 0.050484	vorticity_error: 0.682152	mean_abs_divergence: 0.059440
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.037813	vorticity_error: 0.768655	mean_abs_divergence: 0.029314
Forward: 1.34s

Saving...
Total: 1.65s

[Epoch 166]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0945][DIV: 0.1327][GRAD: 0.1900][VORT: 0.2602][Total: 0.6773]	4.7+3.1s
[1600/8000]	[L1: 0.0942][DIV: 0.1331][GRAD: 0.1888][VORT: 0.2538][Total: 0.6700]	4.7+3.1s
[2400/8000]	[L1: 0.0956][DIV: 0.1349][GRAD: 0.1920][VORT: 0.2601][Total: 0.6826]	4.7+3.1s
[3200/8000]	[L1: 0.0966][DIV: 0.1364][GRAD: 0.1937][VORT: 0.2636][Total: 0.6904]	4.7+3.1s
[4000/8000]	[L1: 0.0933][DIV: 0.1325][GRAD: 0.1870][VORT: 0.2555][Total: 0.6682]	4.7+3.1s
[4800/8000]	[L1: 0.0910][DIV: 0.1296][GRAD: 0.1824][VORT: 0.2499][Total: 0.6529]	4.7+3.1s
[5600/8000]	[L1: 0.0906][DIV: 0.1294][GRAD: 0.1815][VORT: 0.2488][Total: 0.6502]	4.7+3.1s
[6400/8000]	[L1: 0.0912][DIV: 0.1304][GRAD: 0.1828][VORT: 0.2499][Total: 0.6542]	4.7+3.1s
[7200/8000]	[L1: 0.0908][DIV: 0.1297][GRAD: 0.1821][VORT: 0.2500][Total: 0.6527]	4.7+3.1s
[8000/8000]	[L1: 0.0915][DIV: 0.1307][GRAD: 0.1836][VORT: 0.2516][Total: 0.6575]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.087393	vorticity_error: 1.397354	mean_abs_divergence: 0.119647
[DIV2K x2]	rel_l2_error: 0.063702	vorticity_error: 1.296601	mean_abs_divergence: 0.062988
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.054508	vorticity_error: 1.500114	mean_abs_divergence: 0.031211
Forward: 1.34s

Saving...
Total: 1.67s

[Epoch 167]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0918][DIV: 0.1337][GRAD: 0.1838][VORT: 0.2496][Total: 0.6589]	4.7+3.1s
[1600/8000]	[L1: 0.0930][DIV: 0.1343][GRAD: 0.1865][VORT: 0.2539][Total: 0.6677]	4.8+3.1s
[2400/8000]	[L1: 0.0913][DIV: 0.1316][GRAD: 0.1832][VORT: 0.2498][Total: 0.6559]	4.7+3.1s
[3200/8000]	[L1: 0.0905][DIV: 0.1303][GRAD: 0.1813][VORT: 0.2471][Total: 0.6493]	4.7+3.1s
[4000/8000]	[L1: 0.0900][DIV: 0.1294][GRAD: 0.1800][VORT: 0.2460][Total: 0.6454]	4.7+3.1s
[4800/8000]	[L1: 0.0909][DIV: 0.1307][GRAD: 0.1819][VORT: 0.2479][Total: 0.6514]	4.7+3.1s
[5600/8000]	[L1: 0.0907][DIV: 0.1306][GRAD: 0.1815][VORT: 0.2460][Total: 0.6488]	4.7+3.1s
[6400/8000]	[L1: 0.0896][DIV: 0.1291][GRAD: 0.1794][VORT: 0.2441][Total: 0.6422]	4.7+3.1s
[7200/8000]	[L1: 0.0908][DIV: 0.1304][GRAD: 0.1818][VORT: 0.2468][Total: 0.6498]	4.7+3.1s
[8000/8000]	[L1: 0.0899][DIV: 0.1292][GRAD: 0.1801][VORT: 0.2443][Total: 0.6436]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.074734	vorticity_error: 0.850231	mean_abs_divergence: 0.113309
[DIV2K x2]	rel_l2_error: 0.057116	vorticity_error: 0.819368	mean_abs_divergence: 0.059637
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.040960	vorticity_error: 0.831672	mean_abs_divergence: 0.029111
Forward: 1.35s

Saving...
Total: 1.67s

[Epoch 168]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0850][DIV: 0.1250][GRAD: 0.1697][VORT: 0.2322][Total: 0.6119]	4.7+3.1s
[1600/8000]	[L1: 0.0930][DIV: 0.1333][GRAD: 0.1861][VORT: 0.2479][Total: 0.6603]	4.8+3.1s
[2400/8000]	[L1: 0.0908][DIV: 0.1303][GRAD: 0.1818][VORT: 0.2457][Total: 0.6486]	4.7+3.1s
[3200/8000]	[L1: 0.0897][DIV: 0.1289][GRAD: 0.1793][VORT: 0.2429][Total: 0.6408]	4.7+3.1s
[4000/8000]	[L1: 0.0890][DIV: 0.1281][GRAD: 0.1777][VORT: 0.2406][Total: 0.6354]	4.7+3.1s
[4800/8000]	[L1: 0.0889][DIV: 0.1280][GRAD: 0.1776][VORT: 0.2406][Total: 0.6351]	4.7+3.1s
[5600/8000]	[L1: 0.0895][DIV: 0.1287][GRAD: 0.1790][VORT: 0.2429][Total: 0.6401]	4.7+3.1s
[6400/8000]	[L1: 0.0895][DIV: 0.1288][GRAD: 0.1792][VORT: 0.2439][Total: 0.6413]	4.7+3.1s
[7200/8000]	[L1: 0.0896][DIV: 0.1292][GRAD: 0.1795][VORT: 0.2433][Total: 0.6415]	4.7+3.1s
[8000/8000]	[L1: 0.0898][DIV: 0.1294][GRAD: 0.1799][VORT: 0.2444][Total: 0.6435]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.063868	vorticity_error: 0.755194	mean_abs_divergence: 0.099965
[DIV2K x2]	rel_l2_error: 0.048540	vorticity_error: 0.991555	mean_abs_divergence: 0.050685
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.036895	vorticity_error: 0.795231	mean_abs_divergence: 0.024199
Forward: 1.30s

Saving...
Total: 1.65s

[Epoch 169]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0920][DIV: 0.1299][GRAD: 0.1845][VORT: 0.2560][Total: 0.6624]	4.8+3.1s
[1600/8000]	[L1: 0.0905][DIV: 0.1287][GRAD: 0.1814][VORT: 0.2518][Total: 0.6525]	4.7+3.1s
[2400/8000]	[L1: 0.0919][DIV: 0.1310][GRAD: 0.1841][VORT: 0.2524][Total: 0.6594]	4.7+3.1s
[3200/8000]	[L1: 0.0931][DIV: 0.1325][GRAD: 0.1864][VORT: 0.2542][Total: 0.6663]	4.7+3.1s
[4000/8000]	[L1: 0.0924][DIV: 0.1314][GRAD: 0.1849][VORT: 0.2512][Total: 0.6598]	4.7+3.1s
[4800/8000]	[L1: 0.0899][DIV: 0.1287][GRAD: 0.1800][VORT: 0.2454][Total: 0.6440]	4.7+3.1s
[5600/8000]	[L1: 0.0893][DIV: 0.1280][GRAD: 0.1787][VORT: 0.2435][Total: 0.6394]	4.7+3.1s
[6400/8000]	[L1: 0.0895][DIV: 0.1282][GRAD: 0.1790][VORT: 0.2439][Total: 0.6406]	4.7+3.1s
[7200/8000]	[L1: 0.0905][DIV: 0.1296][GRAD: 0.1814][VORT: 0.2469][Total: 0.6485]	4.7+3.1s
[8000/8000]	[L1: 0.0903][DIV: 0.1294][GRAD: 0.1809][VORT: 0.2464][Total: 0.6470]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.089977	vorticity_error: 1.547831	mean_abs_divergence: 0.120740
[DIV2K x2]	rel_l2_error: 0.068604	vorticity_error: 1.416137	mean_abs_divergence: 0.063949
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.047792	vorticity_error: 1.732855	mean_abs_divergence: 0.030662
Forward: 1.34s

Saving...
Total: 1.68s

[Epoch 170]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0980][DIV: 0.1398][GRAD: 0.1968][VORT: 0.2633][Total: 0.6979]	4.8+3.1s
[1600/8000]	[L1: 0.0929][DIV: 0.1333][GRAD: 0.1861][VORT: 0.2484][Total: 0.6607]	4.7+3.1s
[2400/8000]	[L1: 0.0932][DIV: 0.1332][GRAD: 0.1869][VORT: 0.2507][Total: 0.6640]	4.7+3.1s
[3200/8000]	[L1: 0.0928][DIV: 0.1329][GRAD: 0.1861][VORT: 0.2496][Total: 0.6615]	4.7+3.1s
[4000/8000]	[L1: 0.0929][DIV: 0.1334][GRAD: 0.1863][VORT: 0.2493][Total: 0.6619]	4.7+3.1s
[4800/8000]	[L1: 0.0924][DIV: 0.1326][GRAD: 0.1853][VORT: 0.2486][Total: 0.6589]	4.6+3.1s
[5600/8000]	[L1: 0.0918][DIV: 0.1316][GRAD: 0.1841][VORT: 0.2484][Total: 0.6560]	4.7+3.1s
[6400/8000]	[L1: 0.0915][DIV: 0.1311][GRAD: 0.1834][VORT: 0.2475][Total: 0.6534]	4.6+3.1s
[7200/8000]	[L1: 0.0909][DIV: 0.1305][GRAD: 0.1823][VORT: 0.2461][Total: 0.6498]	4.7+3.1s
[8000/8000]	[L1: 0.0907][DIV: 0.1300][GRAD: 0.1817][VORT: 0.2450][Total: 0.6475]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.085176	vorticity_error: 0.800606	mean_abs_divergence: 0.131435
[DIV2K x2]	rel_l2_error: 0.066401	vorticity_error: 0.837086	mean_abs_divergence: 0.070298
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.047511	vorticity_error: 0.799460	mean_abs_divergence: 0.034217
Forward: 1.31s

Saving...
Total: 1.65s

[Epoch 171]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0847][DIV: 0.1231][GRAD: 0.1693][VORT: 0.2320][Total: 0.6090]	4.8+3.1s
[1600/8000]	[L1: 0.0898][DIV: 0.1293][GRAD: 0.1803][VORT: 0.2465][Total: 0.6458]	4.7+3.1s
[2400/8000]	[L1: 0.0908][DIV: 0.1313][GRAD: 0.1826][VORT: 0.2484][Total: 0.6532]	4.7+3.1s
[3200/8000]	[L1: 0.0914][DIV: 0.1320][GRAD: 0.1836][VORT: 0.2480][Total: 0.6550]	4.7+3.1s
[4000/8000]	[L1: 0.0923][DIV: 0.1334][GRAD: 0.1853][VORT: 0.2483][Total: 0.6593]	4.7+3.1s
[4800/8000]	[L1: 0.0913][DIV: 0.1321][GRAD: 0.1832][VORT: 0.2458][Total: 0.6524]	4.7+3.1s
[5600/8000]	[L1: 0.0912][DIV: 0.1320][GRAD: 0.1831][VORT: 0.2454][Total: 0.6517]	4.7+3.1s
[6400/8000]	[L1: 0.0920][DIV: 0.1329][GRAD: 0.1847][VORT: 0.2475][Total: 0.6570]	4.7+3.1s
[7200/8000]	[L1: 0.0923][DIV: 0.1332][GRAD: 0.1853][VORT: 0.2491][Total: 0.6599]	4.8+3.0s
[8000/8000]	[L1: 0.0920][DIV: 0.1326][GRAD: 0.1845][VORT: 0.2480][Total: 0.6572]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.075666	vorticity_error: 0.902918	mean_abs_divergence: 0.113050
[DIV2K x2]	rel_l2_error: 0.055675	vorticity_error: 0.841842	mean_abs_divergence: 0.058336
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042477	vorticity_error: 0.728640	mean_abs_divergence: 0.028664
Forward: 1.26s

Saving...
Total: 1.61s

[Epoch 172]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0917][DIV: 0.1328][GRAD: 0.1835][VORT: 0.2442][Total: 0.6523]	4.7+3.1s
[1600/8000]	[L1: 0.0950][DIV: 0.1368][GRAD: 0.1908][VORT: 0.2525][Total: 0.6751]	4.7+3.1s
[2400/8000]	[L1: 0.0962][DIV: 0.1383][GRAD: 0.1935][VORT: 0.2578][Total: 0.6857]	4.7+3.1s
[3200/8000]	[L1: 0.0930][DIV: 0.1338][GRAD: 0.1869][VORT: 0.2514][Total: 0.6650]	4.7+3.1s
[4000/8000]	[L1: 0.0924][DIV: 0.1332][GRAD: 0.1854][VORT: 0.2508][Total: 0.6617]	4.7+3.1s
[4800/8000]	[L1: 0.0936][DIV: 0.1345][GRAD: 0.1876][VORT: 0.2535][Total: 0.6692]	4.7+3.1s
[5600/8000]	[L1: 0.0925][DIV: 0.1329][GRAD: 0.1855][VORT: 0.2508][Total: 0.6618]	4.7+3.1s
[6400/8000]	[L1: 0.0925][DIV: 0.1328][GRAD: 0.1855][VORT: 0.2510][Total: 0.6617]	4.7+3.1s
[7200/8000]	[L1: 0.0915][DIV: 0.1316][GRAD: 0.1833][VORT: 0.2479][Total: 0.6542]	4.7+3.1s
[8000/8000]	[L1: 0.0920][DIV: 0.1321][GRAD: 0.1844][VORT: 0.2494][Total: 0.6580]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.075441	vorticity_error: 1.190999	mean_abs_divergence: 0.126515
[DIV2K x2]	rel_l2_error: 0.057427	vorticity_error: 1.072758	mean_abs_divergence: 0.065874
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.039546	vorticity_error: 1.323546	mean_abs_divergence: 0.031617
Forward: 1.31s

Saving...
Total: 1.65s

[Epoch 173]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0901][DIV: 0.1308][GRAD: 0.1801][VORT: 0.2441][Total: 0.6451]	4.7+3.1s
[1600/8000]	[L1: 0.0919][DIV: 0.1320][GRAD: 0.1844][VORT: 0.2513][Total: 0.6597]	4.7+3.1s
[2400/8000]	[L1: 0.0915][DIV: 0.1318][GRAD: 0.1835][VORT: 0.2493][Total: 0.6562]	4.7+3.1s
[3200/8000]	[L1: 0.0907][DIV: 0.1304][GRAD: 0.1820][VORT: 0.2471][Total: 0.6502]	4.7+3.1s
[4000/8000]	[L1: 0.0915][DIV: 0.1313][GRAD: 0.1834][VORT: 0.2475][Total: 0.6537]	4.7+3.1s
[4800/8000]	[L1: 0.0914][DIV: 0.1313][GRAD: 0.1834][VORT: 0.2489][Total: 0.6551]	4.7+3.1s
[5600/8000]	[L1: 0.0915][DIV: 0.1314][GRAD: 0.1839][VORT: 0.2498][Total: 0.6566]	4.7+3.1s
[6400/8000]	[L1: 0.0918][DIV: 0.1315][GRAD: 0.1845][VORT: 0.2508][Total: 0.6587]	4.7+3.1s
[7200/8000]	[L1: 0.0916][DIV: 0.1315][GRAD: 0.1841][VORT: 0.2507][Total: 0.6579]	4.7+3.1s
[8000/8000]	[L1: 0.0917][DIV: 0.1317][GRAD: 0.1841][VORT: 0.2497][Total: 0.6573]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.076304	vorticity_error: 0.643425	mean_abs_divergence: 0.115111
[DIV2K x2]	rel_l2_error: 0.061849	vorticity_error: 0.645409	mean_abs_divergence: 0.061650
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045905	vorticity_error: 0.610478	mean_abs_divergence: 0.030407
Forward: 1.25s

Saving...
Total: 1.57s

[Epoch 174]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0978][DIV: 0.1391][GRAD: 0.1968][VORT: 0.2629][Total: 0.6965]	4.7+3.1s
[1600/8000]	[L1: 0.0916][DIV: 0.1307][GRAD: 0.1848][VORT: 0.2526][Total: 0.6598]	4.7+3.1s
[2400/8000]	[L1: 0.0977][DIV: 0.1383][GRAD: 0.1973][VORT: 0.2712][Total: 0.7044]	4.7+3.1s
[3200/8000]	[L1: 0.0950][DIV: 0.1351][GRAD: 0.1914][VORT: 0.2622][Total: 0.6837]	4.7+3.1s
[4000/8000]	[L1: 0.0944][DIV: 0.1345][GRAD: 0.1904][VORT: 0.2594][Total: 0.6787]	4.7+3.1s
[4800/8000]	[L1: 0.0934][DIV: 0.1333][GRAD: 0.1883][VORT: 0.2565][Total: 0.6715]	4.7+3.1s
[5600/8000]	[L1: 0.0919][DIV: 0.1312][GRAD: 0.1850][VORT: 0.2528][Total: 0.6609]	4.7+3.1s
[6400/8000]	[L1: 0.0926][DIV: 0.1325][GRAD: 0.1863][VORT: 0.2535][Total: 0.6649]	4.7+3.1s
[7200/8000]	[L1: 0.0935][DIV: 0.1335][GRAD: 0.1878][VORT: 0.2551][Total: 0.6700]	4.7+3.1s
[8000/8000]	[L1: 0.0943][DIV: 0.1344][GRAD: 0.1896][VORT: 0.2566][Total: 0.6750]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.080282	vorticity_error: 0.823268	mean_abs_divergence: 0.114319
[DIV2K x2]	rel_l2_error: 0.060170	vorticity_error: 0.879837	mean_abs_divergence: 0.058873
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.041165	vorticity_error: 0.792163	mean_abs_divergence: 0.028267
Forward: 1.32s

Saving...
Total: 1.65s

[Epoch 175]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0895][DIV: 0.1293][GRAD: 0.1797][VORT: 0.2452][Total: 0.6436]	4.7+3.1s
[1600/8000]	[L1: 0.0921][DIV: 0.1333][GRAD: 0.1848][VORT: 0.2497][Total: 0.6599]	4.7+3.1s
[2400/8000]	[L1: 0.0901][DIV: 0.1316][GRAD: 0.1808][VORT: 0.2422][Total: 0.6448]	4.7+3.1s
[3200/8000]	[L1: 0.0900][DIV: 0.1309][GRAD: 0.1806][VORT: 0.2429][Total: 0.6445]	4.7+3.1s
[4000/8000]	[L1: 0.0903][DIV: 0.1313][GRAD: 0.1812][VORT: 0.2425][Total: 0.6453]	4.7+3.1s
[4800/8000]	[L1: 0.0891][DIV: 0.1298][GRAD: 0.1787][VORT: 0.2392][Total: 0.6368]	4.7+3.1s
[5600/8000]	[L1: 0.0896][DIV: 0.1300][GRAD: 0.1796][VORT: 0.2401][Total: 0.6393]	4.7+3.1s
[6400/8000]	[L1: 0.0897][DIV: 0.1298][GRAD: 0.1798][VORT: 0.2415][Total: 0.6409]	4.7+3.1s
[7200/8000]	[L1: 0.0900][DIV: 0.1302][GRAD: 0.1803][VORT: 0.2416][Total: 0.6422]	4.7+3.1s
[8000/8000]	[L1: 0.0904][DIV: 0.1308][GRAD: 0.1812][VORT: 0.2427][Total: 0.6450]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.089977	vorticity_error: 0.952836	mean_abs_divergence: 0.134177
[DIV2K x2]	rel_l2_error: 0.068950	vorticity_error: 1.077642	mean_abs_divergence: 0.071824
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.047128	vorticity_error: 0.941748	mean_abs_divergence: 0.034710
Forward: 1.31s

Saving...
Total: 1.65s

[Epoch 176]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0839][DIV: 0.1226][GRAD: 0.1694][VORT: 0.2374][Total: 0.6133]	4.8+3.1s
[1600/8000]	[L1: 0.0859][DIV: 0.1241][GRAD: 0.1732][VORT: 0.2387][Total: 0.6218]	4.7+3.1s
[2400/8000]	[L1: 0.0871][DIV: 0.1265][GRAD: 0.1747][VORT: 0.2378][Total: 0.6261]	4.7+3.1s
[3200/8000]	[L1: 0.0890][DIV: 0.1288][GRAD: 0.1786][VORT: 0.2416][Total: 0.6379]	4.7+3.1s
[4000/8000]	[L1: 0.0890][DIV: 0.1284][GRAD: 0.1781][VORT: 0.2404][Total: 0.6359]	4.7+3.1s
[4800/8000]	[L1: 0.0899][DIV: 0.1294][GRAD: 0.1799][VORT: 0.2429][Total: 0.6422]	4.7+3.1s
[5600/8000]	[L1: 0.0904][DIV: 0.1302][GRAD: 0.1809][VORT: 0.2438][Total: 0.6453]	4.7+3.1s
[6400/8000]	[L1: 0.0899][DIV: 0.1297][GRAD: 0.1801][VORT: 0.2432][Total: 0.6429]	4.7+3.1s
[7200/8000]	[L1: 0.0902][DIV: 0.1302][GRAD: 0.1806][VORT: 0.2437][Total: 0.6447]	4.7+3.1s
[8000/8000]	[L1: 0.0902][DIV: 0.1300][GRAD: 0.1807][VORT: 0.2442][Total: 0.6452]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.076716	vorticity_error: 1.004209	mean_abs_divergence: 0.118979
[DIV2K x2]	rel_l2_error: 0.060464	vorticity_error: 1.085228	mean_abs_divergence: 0.064305
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044480	vorticity_error: 1.135686	mean_abs_divergence: 0.031697
Forward: 1.25s

Saving...
Total: 1.58s

[Epoch 177]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0889][DIV: 0.1265][GRAD: 0.1790][VORT: 0.2458][Total: 0.6401]	4.7+3.1s
[1600/8000]	[L1: 0.0923][DIV: 0.1313][GRAD: 0.1849][VORT: 0.2515][Total: 0.6600]	4.7+3.1s
[2400/8000]	[L1: 0.0933][DIV: 0.1331][GRAD: 0.1873][VORT: 0.2523][Total: 0.6661]	4.7+3.1s
[3200/8000]	[L1: 0.0931][DIV: 0.1327][GRAD: 0.1867][VORT: 0.2517][Total: 0.6642]	4.7+3.1s
[4000/8000]	[L1: 0.0928][DIV: 0.1328][GRAD: 0.1860][VORT: 0.2500][Total: 0.6616]	4.7+3.1s
[4800/8000]	[L1: 0.0918][DIV: 0.1315][GRAD: 0.1841][VORT: 0.2486][Total: 0.6561]	4.7+3.1s
[5600/8000]	[L1: 0.0917][DIV: 0.1312][GRAD: 0.1839][VORT: 0.2492][Total: 0.6559]	4.7+3.1s
[6400/8000]	[L1: 0.0920][DIV: 0.1317][GRAD: 0.1844][VORT: 0.2494][Total: 0.6574]	4.7+3.1s
[7200/8000]	[L1: 0.0913][DIV: 0.1309][GRAD: 0.1830][VORT: 0.2476][Total: 0.6528]	4.7+3.1s
[8000/8000]	[L1: 0.0909][DIV: 0.1305][GRAD: 0.1821][VORT: 0.2465][Total: 0.6499]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.093082	vorticity_error: 1.029643	mean_abs_divergence: 0.136850
[DIV2K x2]	rel_l2_error: 0.071259	vorticity_error: 1.481822	mean_abs_divergence: 0.073812
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.050732	vorticity_error: 1.156504	mean_abs_divergence: 0.037217
Forward: 1.29s

Saving...
Total: 1.62s

[Epoch 178]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0949][DIV: 0.1353][GRAD: 0.1895][VORT: 0.2616][Total: 0.6813]	4.7+3.1s
[1600/8000]	[L1: 0.0962][DIV: 0.1366][GRAD: 0.1926][VORT: 0.2641][Total: 0.6894]	4.7+3.1s
[2400/8000]	[L1: 0.0920][DIV: 0.1321][GRAD: 0.1845][VORT: 0.2526][Total: 0.6613]	4.8+3.1s
[3200/8000]	[L1: 0.0940][DIV: 0.1348][GRAD: 0.1885][VORT: 0.2544][Total: 0.6717]	4.7+3.1s
[4000/8000]	[L1: 0.0929][DIV: 0.1337][GRAD: 0.1865][VORT: 0.2505][Total: 0.6637]	4.7+3.1s
[4800/8000]	[L1: 0.0929][DIV: 0.1338][GRAD: 0.1867][VORT: 0.2514][Total: 0.6648]	4.7+3.1s
[5600/8000]	[L1: 0.0932][DIV: 0.1340][GRAD: 0.1871][VORT: 0.2522][Total: 0.6664]	4.7+3.1s
[6400/8000]	[L1: 0.0943][DIV: 0.1351][GRAD: 0.1893][VORT: 0.2550][Total: 0.6736]	4.7+3.1s
[7200/8000]	[L1: 0.0934][DIV: 0.1340][GRAD: 0.1872][VORT: 0.2521][Total: 0.6668]	4.7+3.1s
[8000/8000]	[L1: 0.0938][DIV: 0.1343][GRAD: 0.1881][VORT: 0.2534][Total: 0.6696]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.087688	vorticity_error: 1.485126	mean_abs_divergence: 0.146177
[DIV2K x2]	rel_l2_error: 0.070978	vorticity_error: 1.394876	mean_abs_divergence: 0.079019
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.052170	vorticity_error: 1.622207	mean_abs_divergence: 0.038826
Forward: 1.32s

Saving...
Total: 1.65s

[Epoch 179]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0908][DIV: 0.1329][GRAD: 0.1823][VORT: 0.2460][Total: 0.6520]	4.8+3.1s
[1600/8000]	[L1: 0.0897][DIV: 0.1298][GRAD: 0.1797][VORT: 0.2431][Total: 0.6422]	4.7+3.1s
[2400/8000]	[L1: 0.0912][DIV: 0.1317][GRAD: 0.1824][VORT: 0.2435][Total: 0.6488]	4.8+3.1s
[3200/8000]	[L1: 0.0925][DIV: 0.1334][GRAD: 0.1853][VORT: 0.2446][Total: 0.6559]	4.7+3.1s
[4000/8000]	[L1: 0.0924][DIV: 0.1328][GRAD: 0.1854][VORT: 0.2459][Total: 0.6564]	4.7+3.1s
[4800/8000]	[L1: 0.0931][DIV: 0.1337][GRAD: 0.1871][VORT: 0.2493][Total: 0.6631]	4.7+3.1s
[5600/8000]	[L1: 0.0919][DIV: 0.1322][GRAD: 0.1845][VORT: 0.2453][Total: 0.6539]	4.7+3.1s
[6400/8000]	[L1: 0.0914][DIV: 0.1316][GRAD: 0.1833][VORT: 0.2442][Total: 0.6506]	4.7+3.1s
[7200/8000]	[L1: 0.0911][DIV: 0.1312][GRAD: 0.1826][VORT: 0.2437][Total: 0.6486]	4.7+3.1s
[8000/8000]	[L1: 0.0916][DIV: 0.1317][GRAD: 0.1838][VORT: 0.2451][Total: 0.6522]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.092817	vorticity_error: 2.216424	mean_abs_divergence: 0.140372
[DIV2K x2]	rel_l2_error: 0.075277	vorticity_error: 1.164847	mean_abs_divergence: 0.073330
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.052199	vorticity_error: 1.672634	mean_abs_divergence: 0.036407
Forward: 1.30s

Saving...
Total: 1.64s

[Epoch 180]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0808][DIV: 0.1161][GRAD: 0.1610][VORT: 0.2251][Total: 0.5831]	4.7+3.1s
[1600/8000]	[L1: 0.0838][DIV: 0.1205][GRAD: 0.1679][VORT: 0.2323][Total: 0.6046]	4.7+3.1s
[2400/8000]	[L1: 0.0878][DIV: 0.1263][GRAD: 0.1760][VORT: 0.2396][Total: 0.6297]	4.8+3.1s
[3200/8000]	[L1: 0.0910][DIV: 0.1306][GRAD: 0.1825][VORT: 0.2469][Total: 0.6510]	4.7+3.1s
[4000/8000]	[L1: 0.0912][DIV: 0.1311][GRAD: 0.1828][VORT: 0.2464][Total: 0.6514]	4.7+3.1s
[4800/8000]	[L1: 0.0904][DIV: 0.1299][GRAD: 0.1811][VORT: 0.2446][Total: 0.6459]	4.7+3.1s
[5600/8000]	[L1: 0.0902][DIV: 0.1295][GRAD: 0.1806][VORT: 0.2424][Total: 0.6427]	4.7+3.1s
[6400/8000]	[L1: 0.0899][DIV: 0.1293][GRAD: 0.1801][VORT: 0.2426][Total: 0.6420]	4.7+3.1s
[7200/8000]	[L1: 0.0899][DIV: 0.1293][GRAD: 0.1802][VORT: 0.2430][Total: 0.6424]	4.7+3.1s
[8000/8000]	[L1: 0.0910][DIV: 0.1308][GRAD: 0.1822][VORT: 0.2448][Total: 0.6488]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.105673	vorticity_error: 1.282789	mean_abs_divergence: 0.157232
[DIV2K x2]	rel_l2_error: 0.076691	vorticity_error: 0.997757	mean_abs_divergence: 0.084119
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048955	vorticity_error: 1.144496	mean_abs_divergence: 0.041055
Forward: 1.27s

Saving...
Total: 1.59s

[Epoch 181]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0924][DIV: 0.1297][GRAD: 0.1838][VORT: 0.2497][Total: 0.6556]	4.7+3.1s
[1600/8000]	[L1: 0.0919][DIV: 0.1307][GRAD: 0.1847][VORT: 0.2486][Total: 0.6559]	4.7+3.1s
[2400/8000]	[L1: 0.0920][DIV: 0.1312][GRAD: 0.1847][VORT: 0.2479][Total: 0.6558]	4.8+3.1s
[3200/8000]	[L1: 0.0925][DIV: 0.1318][GRAD: 0.1855][VORT: 0.2485][Total: 0.6583]	4.7+3.1s
[4000/8000]	[L1: 0.0930][DIV: 0.1331][GRAD: 0.1864][VORT: 0.2499][Total: 0.6624]	4.7+3.1s
[4800/8000]	[L1: 0.0935][DIV: 0.1343][GRAD: 0.1875][VORT: 0.2514][Total: 0.6666]	4.7+3.1s
[5600/8000]	[L1: 0.0942][DIV: 0.1351][GRAD: 0.1887][VORT: 0.2526][Total: 0.6706]	4.7+3.1s
[6400/8000]	[L1: 0.0942][DIV: 0.1348][GRAD: 0.1886][VORT: 0.2531][Total: 0.6708]	4.7+3.1s
[7200/8000]	[L1: 0.0945][DIV: 0.1351][GRAD: 0.1892][VORT: 0.2535][Total: 0.6723]	4.7+3.1s
[8000/8000]	[L1: 0.0937][DIV: 0.1341][GRAD: 0.1876][VORT: 0.2514][Total: 0.6668]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.073588	vorticity_error: 1.081949	mean_abs_divergence: 0.107865
[DIV2K x2]	rel_l2_error: 0.063189	vorticity_error: 1.137365	mean_abs_divergence: 0.056438
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.049302	vorticity_error: 1.238781	mean_abs_divergence: 0.027659
Forward: 1.32s

Saving...
Total: 1.65s

[Epoch 182]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0903][DIV: 0.1308][GRAD: 0.1812][VORT: 0.2398][Total: 0.6421]	4.7+3.0s
[1600/8000]	[L1: 0.0952][DIV: 0.1370][GRAD: 0.1913][VORT: 0.2522][Total: 0.6757]	4.7+3.1s
[2400/8000]	[L1: 0.0953][DIV: 0.1379][GRAD: 0.1918][VORT: 0.2560][Total: 0.6810]	4.7+3.1s
[3200/8000]	[L1: 0.0935][DIV: 0.1354][GRAD: 0.1881][VORT: 0.2526][Total: 0.6696]	4.7+3.1s
[4000/8000]	[L1: 0.0938][DIV: 0.1356][GRAD: 0.1885][VORT: 0.2537][Total: 0.6716]	4.7+3.1s
[4800/8000]	[L1: 0.0941][DIV: 0.1355][GRAD: 0.1891][VORT: 0.2559][Total: 0.6745]	4.7+3.1s
[5600/8000]	[L1: 0.0940][DIV: 0.1353][GRAD: 0.1888][VORT: 0.2539][Total: 0.6721]	4.7+3.1s
[6400/8000]	[L1: 0.0940][DIV: 0.1350][GRAD: 0.1888][VORT: 0.2535][Total: 0.6714]	4.7+3.1s
[7200/8000]	[L1: 0.0934][DIV: 0.1343][GRAD: 0.1875][VORT: 0.2520][Total: 0.6673]	4.7+3.1s
[8000/8000]	[L1: 0.0937][DIV: 0.1349][GRAD: 0.1883][VORT: 0.2528][Total: 0.6698]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.086618	vorticity_error: 0.940581	mean_abs_divergence: 0.137067
[DIV2K x2]	rel_l2_error: 0.069383	vorticity_error: 0.963656	mean_abs_divergence: 0.073324
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.052453	vorticity_error: 0.850315	mean_abs_divergence: 0.036808
Forward: 1.29s

Saving...
Total: 1.62s

[Epoch 183]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0926][DIV: 0.1330][GRAD: 0.1851][VORT: 0.2424][Total: 0.6530]	4.7+3.1s
[1600/8000]	[L1: 0.0924][DIV: 0.1332][GRAD: 0.1851][VORT: 0.2461][Total: 0.6568]	4.8+3.1s
[2400/8000]	[L1: 0.0958][DIV: 0.1371][GRAD: 0.1923][VORT: 0.2531][Total: 0.6784]	4.7+3.1s
[3200/8000]	[L1: 0.0949][DIV: 0.1361][GRAD: 0.1905][VORT: 0.2532][Total: 0.6746]	4.7+3.1s
[4000/8000]	[L1: 0.0922][DIV: 0.1323][GRAD: 0.1850][VORT: 0.2469][Total: 0.6564]	4.7+3.1s
[4800/8000]	[L1: 0.0916][DIV: 0.1314][GRAD: 0.1838][VORT: 0.2457][Total: 0.6525]	4.7+3.1s
[5600/8000]	[L1: 0.0911][DIV: 0.1309][GRAD: 0.1827][VORT: 0.2451][Total: 0.6498]	4.7+3.1s
[6400/8000]	[L1: 0.0914][DIV: 0.1312][GRAD: 0.1834][VORT: 0.2466][Total: 0.6526]	4.7+3.1s
[7200/8000]	[L1: 0.0921][DIV: 0.1320][GRAD: 0.1846][VORT: 0.2476][Total: 0.6562]	4.7+3.1s
[8000/8000]	[L1: 0.0922][DIV: 0.1323][GRAD: 0.1848][VORT: 0.2481][Total: 0.6574]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.102319	vorticity_error: 0.898233	mean_abs_divergence: 0.131268
[DIV2K x2]	rel_l2_error: 0.070834	vorticity_error: 1.031180	mean_abs_divergence: 0.070289
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.049251	vorticity_error: 0.890622	mean_abs_divergence: 0.034916
Forward: 1.28s

Saving...
Total: 1.61s

[Epoch 184]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0956][DIV: 0.1377][GRAD: 0.1924][VORT: 0.2594][Total: 0.6851]	4.7+3.1s
[1600/8000]	[L1: 0.0961][DIV: 0.1380][GRAD: 0.1948][VORT: 0.2601][Total: 0.6890]	4.7+3.1s
[2400/8000]	[L1: 0.0961][DIV: 0.1375][GRAD: 0.1936][VORT: 0.2554][Total: 0.6825]	4.8+3.1s
[3200/8000]	[L1: 0.0968][DIV: 0.1378][GRAD: 0.1949][VORT: 0.2601][Total: 0.6895]	4.7+3.1s
[4000/8000]	[L1: 0.0946][DIV: 0.1349][GRAD: 0.1904][VORT: 0.2558][Total: 0.6756]	4.7+3.1s
[4800/8000]	[L1: 0.0938][DIV: 0.1337][GRAD: 0.1887][VORT: 0.2540][Total: 0.6702]	4.7+3.1s
[5600/8000]	[L1: 0.0931][DIV: 0.1327][GRAD: 0.1870][VORT: 0.2527][Total: 0.6654]	4.7+3.1s
[6400/8000]	[L1: 0.0925][DIV: 0.1320][GRAD: 0.1859][VORT: 0.2510][Total: 0.6613]	4.7+3.1s
[7200/8000]	[L1: 0.0927][DIV: 0.1320][GRAD: 0.1863][VORT: 0.2515][Total: 0.6626]	4.7+3.1s
[8000/8000]	[L1: 0.0931][DIV: 0.1324][GRAD: 0.1870][VORT: 0.2522][Total: 0.6648]	4.6+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.058933	vorticity_error: 0.662359	mean_abs_divergence: 0.099015
[DIV2K x2]	rel_l2_error: 0.044517	vorticity_error: 0.856553	mean_abs_divergence: 0.050677
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.039044	vorticity_error: 0.903013	mean_abs_divergence: 0.023944
Forward: 1.26s

Saving...
Total: 1.58s

[Epoch 185]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0922][DIV: 0.1327][GRAD: 0.1855][VORT: 0.2497][Total: 0.6602]	4.7+3.1s
[1600/8000]	[L1: 0.0913][DIV: 0.1312][GRAD: 0.1841][VORT: 0.2503][Total: 0.6569]	4.7+3.1s
[2400/8000]	[L1: 0.0888][DIV: 0.1282][GRAD: 0.1790][VORT: 0.2446][Total: 0.6406]	4.8+3.1s
[3200/8000]	[L1: 0.0876][DIV: 0.1265][GRAD: 0.1764][VORT: 0.2404][Total: 0.6310]	4.7+3.1s
[4000/8000]	[L1: 0.0890][DIV: 0.1282][GRAD: 0.1790][VORT: 0.2434][Total: 0.6395]	4.7+3.1s
[4800/8000]	[L1: 0.0908][DIV: 0.1307][GRAD: 0.1828][VORT: 0.2481][Total: 0.6523]	4.7+3.1s
[5600/8000]	[L1: 0.0905][DIV: 0.1301][GRAD: 0.1822][VORT: 0.2478][Total: 0.6506]	4.7+3.1s
[6400/8000]	[L1: 0.0915][DIV: 0.1312][GRAD: 0.1842][VORT: 0.2501][Total: 0.6570]	4.7+3.1s
[7200/8000]	[L1: 0.0915][DIV: 0.1314][GRAD: 0.1844][VORT: 0.2502][Total: 0.6576]	4.7+3.1s
[8000/8000]	[L1: 0.0921][DIV: 0.1321][GRAD: 0.1855][VORT: 0.2515][Total: 0.6612]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.078799	vorticity_error: 0.950273	mean_abs_divergence: 0.125602
[DIV2K x2]	rel_l2_error: 0.062207	vorticity_error: 0.760046	mean_abs_divergence: 0.067929
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043072	vorticity_error: 0.889046	mean_abs_divergence: 0.032913
Forward: 1.27s

Saving...
Total: 1.59s

[Epoch 186]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0915][DIV: 0.1309][GRAD: 0.1835][VORT: 0.2539][Total: 0.6598]	4.7+3.1s
[1600/8000]	[L1: 0.0918][DIV: 0.1321][GRAD: 0.1842][VORT: 0.2517][Total: 0.6598]	4.7+3.1s
[2400/8000]	[L1: 0.0934][DIV: 0.1336][GRAD: 0.1872][VORT: 0.2558][Total: 0.6700]	4.8+3.1s
[3200/8000]	[L1: 0.0933][DIV: 0.1332][GRAD: 0.1875][VORT: 0.2550][Total: 0.6690]	4.7+3.1s
[4000/8000]	[L1: 0.0944][DIV: 0.1346][GRAD: 0.1895][VORT: 0.2567][Total: 0.6752]	4.7+3.1s
[4800/8000]	[L1: 0.0927][DIV: 0.1324][GRAD: 0.1860][VORT: 0.2529][Total: 0.6640]	4.7+3.1s
[5600/8000]	[L1: 0.0930][DIV: 0.1324][GRAD: 0.1868][VORT: 0.2546][Total: 0.6669]	4.7+3.1s
[6400/8000]	[L1: 0.0930][DIV: 0.1323][GRAD: 0.1867][VORT: 0.2552][Total: 0.6672]	4.7+3.1s
[7200/8000]	[L1: 0.0932][DIV: 0.1328][GRAD: 0.1871][VORT: 0.2550][Total: 0.6680]	4.7+3.1s
[8000/8000]	[L1: 0.0920][DIV: 0.1315][GRAD: 0.1848][VORT: 0.2523][Total: 0.6605]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.085705	vorticity_error: 0.875495	mean_abs_divergence: 0.104340
[DIV2K x2]	rel_l2_error: 0.062669	vorticity_error: 0.716860	mean_abs_divergence: 0.054885
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044303	vorticity_error: 0.818107	mean_abs_divergence: 0.026408
Forward: 1.26s

Saving...
Total: 1.61s

[Epoch 187]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0830][DIV: 0.1224][GRAD: 0.1654][VORT: 0.2214][Total: 0.5922]	4.7+3.1s
[1600/8000]	[L1: 0.0871][DIV: 0.1274][GRAD: 0.1738][VORT: 0.2322][Total: 0.6205]	4.7+3.1s
[2400/8000]	[L1: 0.0888][DIV: 0.1290][GRAD: 0.1775][VORT: 0.2370][Total: 0.6323]	4.8+3.1s
[3200/8000]	[L1: 0.0892][DIV: 0.1293][GRAD: 0.1784][VORT: 0.2398][Total: 0.6367]	4.7+3.1s
[4000/8000]	[L1: 0.0896][DIV: 0.1297][GRAD: 0.1791][VORT: 0.2394][Total: 0.6379]	4.7+3.1s
[4800/8000]	[L1: 0.0902][DIV: 0.1306][GRAD: 0.1806][VORT: 0.2411][Total: 0.6424]	4.7+3.1s
[5600/8000]	[L1: 0.0902][DIV: 0.1306][GRAD: 0.1806][VORT: 0.2416][Total: 0.6430]	4.7+3.1s
[6400/8000]	[L1: 0.0905][DIV: 0.1309][GRAD: 0.1814][VORT: 0.2426][Total: 0.6453]	4.7+3.1s
[7200/8000]	[L1: 0.0904][DIV: 0.1308][GRAD: 0.1812][VORT: 0.2421][Total: 0.6445]	4.7+3.1s
[8000/8000]	[L1: 0.0903][DIV: 0.1304][GRAD: 0.1808][VORT: 0.2420][Total: 0.6435]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.086177	vorticity_error: 1.021752	mean_abs_divergence: 0.128568
[DIV2K x2]	rel_l2_error: 0.068620	vorticity_error: 0.929777	mean_abs_divergence: 0.071382
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043775	vorticity_error: 0.862316	mean_abs_divergence: 0.035643
Forward: 1.26s

Saving...
Total: 1.59s

[Epoch 188]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0943][DIV: 0.1359][GRAD: 0.1878][VORT: 0.2508][Total: 0.6688]	4.7+3.1s
[1600/8000]	[L1: 0.0951][DIV: 0.1369][GRAD: 0.1903][VORT: 0.2558][Total: 0.6781]	4.7+3.1s
[2400/8000]	[L1: 0.0936][DIV: 0.1331][GRAD: 0.1862][VORT: 0.2525][Total: 0.6654]	4.8+3.1s
[3200/8000]	[L1: 0.0921][DIV: 0.1313][GRAD: 0.1836][VORT: 0.2501][Total: 0.6572]	4.7+3.1s
[4000/8000]	[L1: 0.0907][DIV: 0.1297][GRAD: 0.1809][VORT: 0.2462][Total: 0.6475]	4.7+3.1s
[4800/8000]	[L1: 0.0915][DIV: 0.1309][GRAD: 0.1825][VORT: 0.2476][Total: 0.6526]	4.7+3.1s
[5600/8000]	[L1: 0.0910][DIV: 0.1304][GRAD: 0.1819][VORT: 0.2467][Total: 0.6499]	4.7+3.1s
[6400/8000]	[L1: 0.0911][DIV: 0.1305][GRAD: 0.1822][VORT: 0.2469][Total: 0.6508]	4.7+3.1s
[7200/8000]	[L1: 0.0907][DIV: 0.1299][GRAD: 0.1815][VORT: 0.2460][Total: 0.6480]	4.7+3.1s
[8000/8000]	[L1: 0.0913][DIV: 0.1306][GRAD: 0.1828][VORT: 0.2481][Total: 0.6528]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.072983	vorticity_error: 0.938608	mean_abs_divergence: 0.119440
[DIV2K x2]	rel_l2_error: 0.061911	vorticity_error: 0.814541	mean_abs_divergence: 0.065115
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043282	vorticity_error: 1.042158	mean_abs_divergence: 0.031850
Forward: 1.25s

Saving...
Total: 1.58s

[Epoch 189]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0959][DIV: 0.1394][GRAD: 0.1929][VORT: 0.2621][Total: 0.6904]	4.7+3.1s
[1600/8000]	[L1: 0.0956][DIV: 0.1388][GRAD: 0.1924][VORT: 0.2601][Total: 0.6870]	4.7+3.1s
[2400/8000]	[L1: 0.0937][DIV: 0.1351][GRAD: 0.1881][VORT: 0.2554][Total: 0.6723]	4.8+3.1s
[3200/8000]	[L1: 0.0946][DIV: 0.1354][GRAD: 0.1903][VORT: 0.2588][Total: 0.6791]	4.7+3.1s
[4000/8000]	[L1: 0.0960][DIV: 0.1367][GRAD: 0.1931][VORT: 0.2620][Total: 0.6879]	4.7+3.1s
[4800/8000]	[L1: 0.0947][DIV: 0.1347][GRAD: 0.1900][VORT: 0.2586][Total: 0.6780]	4.7+3.1s
[5600/8000]	[L1: 0.0948][DIV: 0.1345][GRAD: 0.1901][VORT: 0.2577][Total: 0.6771]	4.7+3.1s
[6400/8000]	[L1: 0.0950][DIV: 0.1350][GRAD: 0.1904][VORT: 0.2570][Total: 0.6774]	4.7+3.1s
[7200/8000]	[L1: 0.0944][DIV: 0.1346][GRAD: 0.1890][VORT: 0.2550][Total: 0.6730]	4.7+3.1s
[8000/8000]	[L1: 0.0934][DIV: 0.1335][GRAD: 0.1871][VORT: 0.2525][Total: 0.6665]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.087468	vorticity_error: 0.772039	mean_abs_divergence: 0.118571
[DIV2K x2]	rel_l2_error: 0.068551	vorticity_error: 0.876995	mean_abs_divergence: 0.063366
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.052755	vorticity_error: 0.742216	mean_abs_divergence: 0.030928
Forward: 1.27s

Saving...
Total: 1.60s

[Epoch 190]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0947][DIV: 0.1358][GRAD: 0.1906][VORT: 0.2554][Total: 0.6766]	4.7+3.1s
[1600/8000]	[L1: 0.0937][DIV: 0.1337][GRAD: 0.1879][VORT: 0.2532][Total: 0.6686]	4.7+3.1s
[2400/8000]	[L1: 0.0936][DIV: 0.1339][GRAD: 0.1881][VORT: 0.2541][Total: 0.6697]	4.7+3.1s
[3200/8000]	[L1: 0.0941][DIV: 0.1341][GRAD: 0.1889][VORT: 0.2544][Total: 0.6715]	4.7+3.1s
[4000/8000]	[L1: 0.0955][DIV: 0.1363][GRAD: 0.1917][VORT: 0.2557][Total: 0.6793]	4.7+3.1s
[4800/8000]	[L1: 0.0946][DIV: 0.1349][GRAD: 0.1897][VORT: 0.2526][Total: 0.6719]	4.7+3.1s
[5600/8000]	[L1: 0.0942][DIV: 0.1343][GRAD: 0.1886][VORT: 0.2510][Total: 0.6680]	4.7+3.1s
[6400/8000]	[L1: 0.0950][DIV: 0.1357][GRAD: 0.1903][VORT: 0.2531][Total: 0.6740]	4.7+3.1s
[7200/8000]	[L1: 0.0942][DIV: 0.1348][GRAD: 0.1889][VORT: 0.2523][Total: 0.6702]	4.7+3.1s
[8000/8000]	[L1: 0.0940][DIV: 0.1346][GRAD: 0.1885][VORT: 0.2519][Total: 0.6689]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.088976	vorticity_error: 1.108127	mean_abs_divergence: 0.126581
[DIV2K x2]	rel_l2_error: 0.067810	vorticity_error: 0.941457	mean_abs_divergence: 0.067955
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048157	vorticity_error: 0.873422	mean_abs_divergence: 0.033289
Forward: 1.24s

Saving...
Total: 1.57s

[Epoch 191]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0941][DIV: 0.1341][GRAD: 0.1886][VORT: 0.2580][Total: 0.6748]	4.7+3.1s
[1600/8000]	[L1: 0.0925][DIV: 0.1314][GRAD: 0.1869][VORT: 0.2588][Total: 0.6696]	4.7+3.1s
[2400/8000]	[L1: 0.0933][DIV: 0.1329][GRAD: 0.1880][VORT: 0.2587][Total: 0.6729]	4.7+3.1s
[3200/8000]	[L1: 0.0938][DIV: 0.1339][GRAD: 0.1893][VORT: 0.2588][Total: 0.6758]	4.7+3.1s
[4000/8000]	[L1: 0.0932][DIV: 0.1329][GRAD: 0.1880][VORT: 0.2585][Total: 0.6725]	4.7+3.1s
[4800/8000]	[L1: 0.0939][DIV: 0.1341][GRAD: 0.1893][VORT: 0.2588][Total: 0.6761]	4.7+3.1s
[5600/8000]	[L1: 0.0934][DIV: 0.1339][GRAD: 0.1882][VORT: 0.2561][Total: 0.6717]	4.7+3.1s
[6400/8000]	[L1: 0.0943][DIV: 0.1348][GRAD: 0.1899][VORT: 0.2589][Total: 0.6779]	4.7+3.1s
[7200/8000]	[L1: 0.0946][DIV: 0.1351][GRAD: 0.1904][VORT: 0.2594][Total: 0.6794]	4.7+3.1s
[8000/8000]	[L1: 0.0942][DIV: 0.1346][GRAD: 0.1895][VORT: 0.2582][Total: 0.6765]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.062119	vorticity_error: 1.259819	mean_abs_divergence: 0.100709
[DIV2K x2]	rel_l2_error: 0.052657	vorticity_error: 1.032537	mean_abs_divergence: 0.051528
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.039939	vorticity_error: 1.266482	mean_abs_divergence: 0.025158
Forward: 1.31s

Saving...
Total: 1.64s

[Epoch 192]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0972][DIV: 0.1364][GRAD: 0.1955][VORT: 0.2635][Total: 0.6926]	4.7+3.1s
[1600/8000]	[L1: 0.0983][DIV: 0.1391][GRAD: 0.1973][VORT: 0.2633][Total: 0.6980]	4.7+3.1s
[2400/8000]	[L1: 0.0964][DIV: 0.1367][GRAD: 0.1933][VORT: 0.2590][Total: 0.6854]	4.7+3.1s
[3200/8000]	[L1: 0.0943][DIV: 0.1340][GRAD: 0.1888][VORT: 0.2536][Total: 0.6708]	4.7+3.1s
[4000/8000]	[L1: 0.0933][DIV: 0.1330][GRAD: 0.1870][VORT: 0.2522][Total: 0.6654]	4.7+3.1s
[4800/8000]	[L1: 0.0926][DIV: 0.1318][GRAD: 0.1857][VORT: 0.2512][Total: 0.6612]	4.7+3.1s
[5600/8000]	[L1: 0.0917][DIV: 0.1307][GRAD: 0.1840][VORT: 0.2496][Total: 0.6561]	4.7+3.1s
[6400/8000]	[L1: 0.0907][DIV: 0.1297][GRAD: 0.1821][VORT: 0.2477][Total: 0.6503]	4.7+3.1s
[7200/8000]	[L1: 0.0914][DIV: 0.1306][GRAD: 0.1837][VORT: 0.2508][Total: 0.6565]	4.7+3.1s
[8000/8000]	[L1: 0.0913][DIV: 0.1305][GRAD: 0.1835][VORT: 0.2508][Total: 0.6561]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.071425	vorticity_error: 0.998717	mean_abs_divergence: 0.121081
[DIV2K x2]	rel_l2_error: 0.059083	vorticity_error: 1.113389	mean_abs_divergence: 0.063652
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044027	vorticity_error: 1.137676	mean_abs_divergence: 0.031285
Forward: 1.25s

Saving...
Total: 1.58s

[Epoch 193]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0952][DIV: 0.1378][GRAD: 0.1905][VORT: 0.2529][Total: 0.6764]	4.7+3.1s
[1600/8000]	[L1: 0.0946][DIV: 0.1345][GRAD: 0.1892][VORT: 0.2535][Total: 0.6719]	4.7+3.1s
[2400/8000]	[L1: 0.0920][DIV: 0.1317][GRAD: 0.1846][VORT: 0.2503][Total: 0.6586]	4.7+3.1s
[3200/8000]	[L1: 0.0943][DIV: 0.1346][GRAD: 0.1894][VORT: 0.2568][Total: 0.6752]	4.7+3.1s
[4000/8000]	[L1: 0.0945][DIV: 0.1352][GRAD: 0.1897][VORT: 0.2561][Total: 0.6755]	4.7+3.1s
[4800/8000]	[L1: 0.0943][DIV: 0.1352][GRAD: 0.1896][VORT: 0.2565][Total: 0.6756]	4.7+3.1s
[5600/8000]	[L1: 0.0940][DIV: 0.1349][GRAD: 0.1889][VORT: 0.2547][Total: 0.6726]	4.7+3.1s
[6400/8000]	[L1: 0.0939][DIV: 0.1349][GRAD: 0.1888][VORT: 0.2554][Total: 0.6730]	4.7+3.1s
[7200/8000]	[L1: 0.0941][DIV: 0.1353][GRAD: 0.1893][VORT: 0.2555][Total: 0.6742]	4.7+3.1s
[8000/8000]	[L1: 0.0939][DIV: 0.1347][GRAD: 0.1889][VORT: 0.2550][Total: 0.6725]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.090645	vorticity_error: 0.940589	mean_abs_divergence: 0.128675
[DIV2K x2]	rel_l2_error: 0.064080	vorticity_error: 1.237963	mean_abs_divergence: 0.067457
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.049448	vorticity_error: 1.098201	mean_abs_divergence: 0.033120
Forward: 1.28s

Saving...
Total: 1.62s

[Epoch 194]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0909][DIV: 0.1289][GRAD: 0.1817][VORT: 0.2498][Total: 0.6513]	4.7+3.1s
[1600/8000]	[L1: 0.0891][DIV: 0.1282][GRAD: 0.1788][VORT: 0.2428][Total: 0.6389]	4.7+3.1s
[2400/8000]	[L1: 0.0912][DIV: 0.1308][GRAD: 0.1825][VORT: 0.2471][Total: 0.6516]	4.7+3.1s
[3200/8000]	[L1: 0.0899][DIV: 0.1288][GRAD: 0.1798][VORT: 0.2436][Total: 0.6421]	4.7+3.1s
[4000/8000]	[L1: 0.0905][DIV: 0.1298][GRAD: 0.1813][VORT: 0.2456][Total: 0.6472]	4.8+3.1s
[4800/8000]	[L1: 0.0905][DIV: 0.1299][GRAD: 0.1810][VORT: 0.2442][Total: 0.6456]	4.7+3.1s
[5600/8000]	[L1: 0.0911][DIV: 0.1308][GRAD: 0.1823][VORT: 0.2461][Total: 0.6503]	4.7+3.1s
[6400/8000]	[L1: 0.0910][DIV: 0.1304][GRAD: 0.1821][VORT: 0.2468][Total: 0.6502]	4.7+3.1s
[7200/8000]	[L1: 0.0914][DIV: 0.1309][GRAD: 0.1829][VORT: 0.2469][Total: 0.6522]	4.7+3.1s
[8000/8000]	[L1: 0.0913][DIV: 0.1307][GRAD: 0.1827][VORT: 0.2472][Total: 0.6519]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.099277	vorticity_error: 1.012271	mean_abs_divergence: 0.131558
[DIV2K x2]	rel_l2_error: 0.076819	vorticity_error: 0.952382	mean_abs_divergence: 0.069800
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.049965	vorticity_error: 0.776034	mean_abs_divergence: 0.033791
Forward: 1.24s

Saving...
Total: 1.58s

[Epoch 195]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0900][DIV: 0.1314][GRAD: 0.1782][VORT: 0.2298][Total: 0.6294]	4.7+3.1s
[1600/8000]	[L1: 0.0909][DIV: 0.1321][GRAD: 0.1814][VORT: 0.2405][Total: 0.6449]	4.7+3.1s
[2400/8000]	[L1: 0.0904][DIV: 0.1311][GRAD: 0.1813][VORT: 0.2441][Total: 0.6469]	4.7+3.1s
[3200/8000]	[L1: 0.0895][DIV: 0.1296][GRAD: 0.1794][VORT: 0.2413][Total: 0.6397]	4.7+3.1s
[4000/8000]	[L1: 0.0905][DIV: 0.1310][GRAD: 0.1814][VORT: 0.2449][Total: 0.6479]	4.7+3.1s
[4800/8000]	[L1: 0.0910][DIV: 0.1315][GRAD: 0.1826][VORT: 0.2479][Total: 0.6530]	4.7+3.1s
[5600/8000]	[L1: 0.0917][DIV: 0.1321][GRAD: 0.1838][VORT: 0.2488][Total: 0.6564]	4.7+3.1s
[6400/8000]	[L1: 0.0913][DIV: 0.1319][GRAD: 0.1832][VORT: 0.2470][Total: 0.6534]	4.7+3.1s
[7200/8000]	[L1: 0.0915][DIV: 0.1321][GRAD: 0.1836][VORT: 0.2474][Total: 0.6545]	4.7+3.1s
[8000/8000]	[L1: 0.0915][DIV: 0.1317][GRAD: 0.1835][VORT: 0.2480][Total: 0.6547]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.084008	vorticity_error: 1.003106	mean_abs_divergence: 0.136867
[DIV2K x2]	rel_l2_error: 0.063975	vorticity_error: 1.107975	mean_abs_divergence: 0.071117
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045831	vorticity_error: 1.192125	mean_abs_divergence: 0.034897
Forward: 1.32s

Saving...
Total: 1.65s

[Epoch 196]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0936][DIV: 0.1336][GRAD: 0.1883][VORT: 0.2458][Total: 0.6613]	4.7+3.1s
[1600/8000]	[L1: 0.0931][DIV: 0.1328][GRAD: 0.1873][VORT: 0.2536][Total: 0.6667]	4.7+3.1s
[2400/8000]	[L1: 0.0934][DIV: 0.1331][GRAD: 0.1878][VORT: 0.2550][Total: 0.6692]	4.7+3.1s
[3200/8000]	[L1: 0.0926][DIV: 0.1324][GRAD: 0.1864][VORT: 0.2531][Total: 0.6645]	4.7+3.1s
[4000/8000]	[L1: 0.0912][DIV: 0.1310][GRAD: 0.1831][VORT: 0.2477][Total: 0.6530]	4.7+3.1s
[4800/8000]	[L1: 0.0891][DIV: 0.1285][GRAD: 0.1788][VORT: 0.2420][Total: 0.6385]	4.7+3.1s
[5600/8000]	[L1: 0.0881][DIV: 0.1272][GRAD: 0.1767][VORT: 0.2390][Total: 0.6310]	4.7+3.1s
[6400/8000]	[L1: 0.0884][DIV: 0.1278][GRAD: 0.1774][VORT: 0.2384][Total: 0.6320]	4.7+3.1s
[7200/8000]	[L1: 0.0881][DIV: 0.1274][GRAD: 0.1768][VORT: 0.2374][Total: 0.6297]	4.7+3.1s
[8000/8000]	[L1: 0.0882][DIV: 0.1275][GRAD: 0.1770][VORT: 0.2377][Total: 0.6304]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.073493	vorticity_error: 2.472653	mean_abs_divergence: 0.109147
[DIV2K x2]	rel_l2_error: 0.057545	vorticity_error: 3.247904	mean_abs_divergence: 0.056224
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044717	vorticity_error: 1.917327	mean_abs_divergence: 0.027119
Forward: 1.31s

Saving...
Total: 1.65s

[Epoch 197]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0964][DIV: 0.1361][GRAD: 0.1925][VORT: 0.2586][Total: 0.6836]	4.7+3.1s
[1600/8000]	[L1: 0.0960][DIV: 0.1360][GRAD: 0.1922][VORT: 0.2561][Total: 0.6803]	4.7+3.1s
[2400/8000]	[L1: 0.0965][DIV: 0.1367][GRAD: 0.1931][VORT: 0.2599][Total: 0.6862]	4.7+3.1s
[3200/8000]	[L1: 0.0948][DIV: 0.1353][GRAD: 0.1901][VORT: 0.2538][Total: 0.6741]	4.7+3.1s
[4000/8000]	[L1: 0.0954][DIV: 0.1360][GRAD: 0.1914][VORT: 0.2559][Total: 0.6786]	4.7+3.1s
[4800/8000]	[L1: 0.0934][DIV: 0.1334][GRAD: 0.1875][VORT: 0.2524][Total: 0.6667]	4.8+3.1s
[5600/8000]	[L1: 0.0925][DIV: 0.1324][GRAD: 0.1857][VORT: 0.2501][Total: 0.6607]	4.7+3.1s
[6400/8000]	[L1: 0.0920][DIV: 0.1318][GRAD: 0.1844][VORT: 0.2483][Total: 0.6565]	4.7+3.1s
[7200/8000]	[L1: 0.0926][DIV: 0.1326][GRAD: 0.1858][VORT: 0.2504][Total: 0.6614]	4.7+3.1s
[8000/8000]	[L1: 0.0923][DIV: 0.1323][GRAD: 0.1854][VORT: 0.2511][Total: 0.6611]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.072224	vorticity_error: 1.203815	mean_abs_divergence: 0.115913
[DIV2K x2]	rel_l2_error: 0.059309	vorticity_error: 1.147278	mean_abs_divergence: 0.061133
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044082	vorticity_error: 1.082890	mean_abs_divergence: 0.029775
Forward: 1.25s

Saving...
Total: 1.57s

[Epoch 198]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0876][DIV: 0.1251][GRAD: 0.1757][VORT: 0.2437][Total: 0.6321]	4.7+3.1s
[1600/8000]	[L1: 0.0918][DIV: 0.1317][GRAD: 0.1844][VORT: 0.2515][Total: 0.6595]	4.7+3.1s
[2400/8000]	[L1: 0.0890][DIV: 0.1287][GRAD: 0.1787][VORT: 0.2439][Total: 0.6402]	4.7+3.1s
[3200/8000]	[L1: 0.0893][DIV: 0.1286][GRAD: 0.1794][VORT: 0.2463][Total: 0.6435]	4.7+3.1s
[4000/8000]	[L1: 0.0903][DIV: 0.1301][GRAD: 0.1818][VORT: 0.2494][Total: 0.6517]	4.7+3.1s
[4800/8000]	[L1: 0.0903][DIV: 0.1301][GRAD: 0.1815][VORT: 0.2475][Total: 0.6493]	4.8+3.1s
[5600/8000]	[L1: 0.0906][DIV: 0.1308][GRAD: 0.1823][VORT: 0.2482][Total: 0.6519]	4.7+3.1s
[6400/8000]	[L1: 0.0909][DIV: 0.1306][GRAD: 0.1827][VORT: 0.2492][Total: 0.6534]	4.7+3.1s
[7200/8000]	[L1: 0.0907][DIV: 0.1306][GRAD: 0.1825][VORT: 0.2492][Total: 0.6530]	4.7+3.1s
[8000/8000]	[L1: 0.0903][DIV: 0.1301][GRAD: 0.1816][VORT: 0.2480][Total: 0.6499]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.078813	vorticity_error: 1.002968	mean_abs_divergence: 0.118125
[DIV2K x2]	rel_l2_error: 0.065156	vorticity_error: 1.111157	mean_abs_divergence: 0.062860
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.046240	vorticity_error: 1.026663	mean_abs_divergence: 0.030873
Forward: 1.30s

Saving...
Total: 1.64s

[Epoch 199]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0971][DIV: 0.1382][GRAD: 0.1935][VORT: 0.2592][Total: 0.6881]	4.7+3.1s
[1600/8000]	[L1: 0.0943][DIV: 0.1337][GRAD: 0.1881][VORT: 0.2563][Total: 0.6724]	4.7+3.1s
[2400/8000]	[L1: 0.0923][DIV: 0.1317][GRAD: 0.1847][VORT: 0.2495][Total: 0.6582]	4.7+3.1s
[3200/8000]	[L1: 0.0914][DIV: 0.1311][GRAD: 0.1826][VORT: 0.2467][Total: 0.6518]	4.7+3.1s
[4000/8000]	[L1: 0.0903][DIV: 0.1297][GRAD: 0.1803][VORT: 0.2434][Total: 0.6437]	4.7+3.1s
[4800/8000]	[L1: 0.0913][DIV: 0.1310][GRAD: 0.1826][VORT: 0.2469][Total: 0.6519]	4.8+3.1s
[5600/8000]	[L1: 0.0899][DIV: 0.1294][GRAD: 0.1798][VORT: 0.2435][Total: 0.6426]	4.7+3.1s
[6400/8000]	[L1: 0.0904][DIV: 0.1302][GRAD: 0.1810][VORT: 0.2445][Total: 0.6462]	4.7+3.1s
[7200/8000]	[L1: 0.0899][DIV: 0.1299][GRAD: 0.1800][VORT: 0.2431][Total: 0.6429]	4.7+3.1s
[8000/8000]	[L1: 0.0901][DIV: 0.1301][GRAD: 0.1803][VORT: 0.2441][Total: 0.6445]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.112395	vorticity_error: 1.264645	mean_abs_divergence: 0.142744
[DIV2K x2]	rel_l2_error: 0.080049	vorticity_error: 1.010898	mean_abs_divergence: 0.073708
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.057864	vorticity_error: 0.839451	mean_abs_divergence: 0.035393
Forward: 1.32s

Saving...
Total: 1.64s

[Epoch 200]	Learning rate: 1.00e-4
[800/8000]	[L1: 0.0954][DIV: 0.1363][GRAD: 0.1921][VORT: 0.2637][Total: 0.6875]	4.7+3.1s
[1600/8000]	[L1: 0.0889][DIV: 0.1291][GRAD: 0.1792][VORT: 0.2484][Total: 0.6455]	4.7+3.1s
[2400/8000]	[L1: 0.0879][DIV: 0.1279][GRAD: 0.1773][VORT: 0.2441][Total: 0.6372]	4.7+3.1s
[3200/8000]	[L1: 0.0889][DIV: 0.1290][GRAD: 0.1796][VORT: 0.2462][Total: 0.6437]	4.7+3.1s
[4000/8000]	[L1: 0.0899][DIV: 0.1303][GRAD: 0.1813][VORT: 0.2482][Total: 0.6497]	4.7+3.1s
[4800/8000]	[L1: 0.0902][DIV: 0.1308][GRAD: 0.1819][VORT: 0.2480][Total: 0.6509]	4.8+3.1s
[5600/8000]	[L1: 0.0901][DIV: 0.1303][GRAD: 0.1814][VORT: 0.2477][Total: 0.6495]	4.7+3.1s
[6400/8000]	[L1: 0.0896][DIV: 0.1293][GRAD: 0.1804][VORT: 0.2470][Total: 0.6463]	4.7+3.1s
[7200/8000]	[L1: 0.0902][DIV: 0.1299][GRAD: 0.1818][VORT: 0.2486][Total: 0.6505]	4.7+3.1s
[8000/8000]	[L1: 0.0904][DIV: 0.1300][GRAD: 0.1820][VORT: 0.2500][Total: 0.6525]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.075491	vorticity_error: 1.208854	mean_abs_divergence: 0.114325
[DIV2K x2]	rel_l2_error: 0.060970	vorticity_error: 1.230647	mean_abs_divergence: 0.059638
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.050151	vorticity_error: 1.546155	mean_abs_divergence: 0.028638
Forward: 1.28s

Saving...
Total: 1.62s

[Epoch 201]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0878][DIV: 0.1250][GRAD: 0.1790][VORT: 0.2416][Total: 0.6335]	4.7+3.1s
[1600/8000]	[L1: 0.0897][DIV: 0.1298][GRAD: 0.1827][VORT: 0.2483][Total: 0.6506]	4.7+3.1s
[2400/8000]	[L1: 0.0888][DIV: 0.1290][GRAD: 0.1809][VORT: 0.2467][Total: 0.6454]	4.7+3.1s
[3200/8000]	[L1: 0.0877][DIV: 0.1273][GRAD: 0.1788][VORT: 0.2438][Total: 0.6375]	4.7+3.1s
[4000/8000]	[L1: 0.0884][DIV: 0.1278][GRAD: 0.1802][VORT: 0.2452][Total: 0.6416]	4.7+3.2s
[4800/8000]	[L1: 0.0883][DIV: 0.1279][GRAD: 0.1800][VORT: 0.2446][Total: 0.6408]	4.7+3.1s
[5600/8000]	[L1: 0.0892][DIV: 0.1293][GRAD: 0.1819][VORT: 0.2475][Total: 0.6479]	4.7+3.1s
[6400/8000]	[L1: 0.0900][DIV: 0.1307][GRAD: 0.1835][VORT: 0.2492][Total: 0.6534]	4.7+3.1s
[7200/8000]	[L1: 0.0889][DIV: 0.1294][GRAD: 0.1813][VORT: 0.2467][Total: 0.6463]	4.7+3.1s
[8000/8000]	[L1: 0.0884][DIV: 0.1288][GRAD: 0.1802][VORT: 0.2455][Total: 0.6428]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.099183	vorticity_error: 1.110278	mean_abs_divergence: 0.144178
[DIV2K x2]	rel_l2_error: 0.074558	vorticity_error: 1.092885	mean_abs_divergence: 0.078519
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.051582	vorticity_error: 0.876240	mean_abs_divergence: 0.039819
Forward: 1.31s

Saving...
Total: 1.65s

[Epoch 202]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0854][DIV: 0.1257][GRAD: 0.1730][VORT: 0.2307][Total: 0.6149]	4.7+3.1s
[1600/8000]	[L1: 0.0851][DIV: 0.1247][GRAD: 0.1727][VORT: 0.2309][Total: 0.6134]	4.7+3.1s
[2400/8000]	[L1: 0.0870][DIV: 0.1270][GRAD: 0.1762][VORT: 0.2374][Total: 0.6276]	4.7+3.1s
[3200/8000]	[L1: 0.0877][DIV: 0.1284][GRAD: 0.1780][VORT: 0.2381][Total: 0.6322]	4.7+3.1s
[4000/8000]	[L1: 0.0888][DIV: 0.1295][GRAD: 0.1803][VORT: 0.2401][Total: 0.6387]	4.7+3.1s
[4800/8000]	[L1: 0.0892][DIV: 0.1304][GRAD: 0.1811][VORT: 0.2414][Total: 0.6422]	4.7+3.1s
[5600/8000]	[L1: 0.0890][DIV: 0.1302][GRAD: 0.1806][VORT: 0.2402][Total: 0.6400]	4.7+3.1s
[6400/8000]	[L1: 0.0899][DIV: 0.1313][GRAD: 0.1826][VORT: 0.2429][Total: 0.6467]	4.7+3.1s
[7200/8000]	[L1: 0.0902][DIV: 0.1319][GRAD: 0.1830][VORT: 0.2429][Total: 0.6481]	4.7+3.1s
[8000/8000]	[L1: 0.0893][DIV: 0.1309][GRAD: 0.1812][VORT: 0.2405][Total: 0.6420]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.084887	vorticity_error: 0.910108	mean_abs_divergence: 0.127826
[DIV2K x2]	rel_l2_error: 0.062545	vorticity_error: 0.688342	mean_abs_divergence: 0.068717
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.041268	vorticity_error: 0.625106	mean_abs_divergence: 0.033658
Forward: 1.30s

Saving...
Total: 1.64s

[Epoch 203]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0827][DIV: 0.1225][GRAD: 0.1682][VORT: 0.2317][Total: 0.6051]	4.7+3.1s
[1600/8000]	[L1: 0.0882][DIV: 0.1304][GRAD: 0.1791][VORT: 0.2414][Total: 0.6391]	4.7+3.1s
[2400/8000]	[L1: 0.0871][DIV: 0.1282][GRAD: 0.1770][VORT: 0.2398][Total: 0.6320]	4.7+3.1s
[3200/8000]	[L1: 0.0881][DIV: 0.1297][GRAD: 0.1791][VORT: 0.2419][Total: 0.6387]	4.7+3.1s
[4000/8000]	[L1: 0.0894][DIV: 0.1315][GRAD: 0.1819][VORT: 0.2462][Total: 0.6490]	4.7+3.1s
[4800/8000]	[L1: 0.0884][DIV: 0.1301][GRAD: 0.1797][VORT: 0.2433][Total: 0.6416]	4.7+3.1s
[5600/8000]	[L1: 0.0883][DIV: 0.1300][GRAD: 0.1795][VORT: 0.2420][Total: 0.6397]	4.7+3.1s
[6400/8000]	[L1: 0.0873][DIV: 0.1289][GRAD: 0.1776][VORT: 0.2389][Total: 0.6327]	4.7+3.1s
[7200/8000]	[L1: 0.0874][DIV: 0.1289][GRAD: 0.1779][VORT: 0.2392][Total: 0.6333]	4.7+3.1s
[8000/8000]	[L1: 0.0880][DIV: 0.1296][GRAD: 0.1789][VORT: 0.2407][Total: 0.6372]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.076541	vorticity_error: 1.005470	mean_abs_divergence: 0.112659
[DIV2K x2]	rel_l2_error: 0.061630	vorticity_error: 1.544353	mean_abs_divergence: 0.060472
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043675	vorticity_error: 1.823862	mean_abs_divergence: 0.029719
Forward: 1.31s

Saving...
Total: 1.66s

[Epoch 204]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0824][DIV: 0.1216][GRAD: 0.1665][VORT: 0.2226][Total: 0.5930]	4.7+3.1s
[1600/8000]	[L1: 0.0841][DIV: 0.1241][GRAD: 0.1710][VORT: 0.2301][Total: 0.6093]	4.7+3.1s
[2400/8000]	[L1: 0.0855][DIV: 0.1266][GRAD: 0.1738][VORT: 0.2329][Total: 0.6189]	4.7+3.1s
[3200/8000]	[L1: 0.0864][DIV: 0.1274][GRAD: 0.1753][VORT: 0.2344][Total: 0.6235]	4.7+3.1s
[4000/8000]	[L1: 0.0879][DIV: 0.1293][GRAD: 0.1783][VORT: 0.2392][Total: 0.6346]	4.7+3.1s
[4800/8000]	[L1: 0.0886][DIV: 0.1299][GRAD: 0.1798][VORT: 0.2411][Total: 0.6393]	4.7+3.1s
[5600/8000]	[L1: 0.0869][DIV: 0.1277][GRAD: 0.1764][VORT: 0.2370][Total: 0.6279]	4.7+3.1s
[6400/8000]	[L1: 0.0874][DIV: 0.1283][GRAD: 0.1775][VORT: 0.2382][Total: 0.6314]	4.7+3.1s
[7200/8000]	[L1: 0.0867][DIV: 0.1275][GRAD: 0.1759][VORT: 0.2359][Total: 0.6260]	4.7+3.1s
[8000/8000]	[L1: 0.0869][DIV: 0.1277][GRAD: 0.1763][VORT: 0.2369][Total: 0.6278]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.073729	vorticity_error: 0.662374	mean_abs_divergence: 0.107111
[DIV2K x2]	rel_l2_error: 0.058243	vorticity_error: 0.592533	mean_abs_divergence: 0.059120
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.040971	vorticity_error: 0.543133	mean_abs_divergence: 0.029133
Forward: 1.30s

Saving...
Total: 1.63s

[Epoch 205]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0949][DIV: 0.1378][GRAD: 0.1918][VORT: 0.2568][Total: 0.6813]	4.7+3.1s
[1600/8000]	[L1: 0.0935][DIV: 0.1363][GRAD: 0.1897][VORT: 0.2520][Total: 0.6716]	4.7+3.1s
[2400/8000]	[L1: 0.0961][DIV: 0.1404][GRAD: 0.1950][VORT: 0.2565][Total: 0.6878]	4.6+3.1s
[3200/8000]	[L1: 0.0935][DIV: 0.1372][GRAD: 0.1899][VORT: 0.2527][Total: 0.6732]	4.7+3.1s
[4000/8000]	[L1: 0.0931][DIV: 0.1362][GRAD: 0.1892][VORT: 0.2540][Total: 0.6725]	4.7+3.1s
[4800/8000]	[L1: 0.0924][DIV: 0.1354][GRAD: 0.1879][VORT: 0.2526][Total: 0.6683]	4.7+3.1s
[5600/8000]	[L1: 0.0917][DIV: 0.1343][GRAD: 0.1866][VORT: 0.2502][Total: 0.6629]	4.7+3.1s
[6400/8000]	[L1: 0.0913][DIV: 0.1337][GRAD: 0.1857][VORT: 0.2486][Total: 0.6594]	4.8+3.1s
[7200/8000]	[L1: 0.0912][DIV: 0.1335][GRAD: 0.1853][VORT: 0.2484][Total: 0.6584]	4.7+3.1s
[8000/8000]	[L1: 0.0909][DIV: 0.1333][GRAD: 0.1848][VORT: 0.2477][Total: 0.6566]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.088429	vorticity_error: 0.870106	mean_abs_divergence: 0.100063
[DIV2K x2]	rel_l2_error: 0.067384	vorticity_error: 1.030111	mean_abs_divergence: 0.054903
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.049011	vorticity_error: 0.800902	mean_abs_divergence: 0.027875
Forward: 1.26s

Saving...
Total: 1.57s

[Epoch 206]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0863][DIV: 0.1259][GRAD: 0.1746][VORT: 0.2347][Total: 0.6214]	4.7+3.1s
[1600/8000]	[L1: 0.0827][DIV: 0.1211][GRAD: 0.1671][VORT: 0.2264][Total: 0.5974]	4.7+3.1s
[2400/8000]	[L1: 0.0838][DIV: 0.1226][GRAD: 0.1699][VORT: 0.2325][Total: 0.6088]	4.7+3.1s
[3200/8000]	[L1: 0.0851][DIV: 0.1241][GRAD: 0.1728][VORT: 0.2365][Total: 0.6185]	4.7+3.1s
[4000/8000]	[L1: 0.0858][DIV: 0.1254][GRAD: 0.1744][VORT: 0.2380][Total: 0.6236]	4.7+3.1s
[4800/8000]	[L1: 0.0848][DIV: 0.1244][GRAD: 0.1722][VORT: 0.2342][Total: 0.6155]	4.7+3.1s
[5600/8000]	[L1: 0.0848][DIV: 0.1245][GRAD: 0.1724][VORT: 0.2348][Total: 0.6165]	4.7+3.1s
[6400/8000]	[L1: 0.0840][DIV: 0.1236][GRAD: 0.1706][VORT: 0.2317][Total: 0.6099]	4.8+3.1s
[7200/8000]	[L1: 0.0850][DIV: 0.1247][GRAD: 0.1727][VORT: 0.2347][Total: 0.6171]	4.7+3.1s
[8000/8000]	[L1: 0.0853][DIV: 0.1251][GRAD: 0.1735][VORT: 0.2357][Total: 0.6196]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.085807	vorticity_error: 0.840742	mean_abs_divergence: 0.135943
[DIV2K x2]	rel_l2_error: 0.062908	vorticity_error: 3.639931	mean_abs_divergence: 0.071582
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.051178	vorticity_error: 1.352778	mean_abs_divergence: 0.035076
Forward: 1.32s

Saving...
Total: 1.62s

[Epoch 207]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0933][DIV: 0.1364][GRAD: 0.1903][VORT: 0.2563][Total: 0.6763]	4.7+3.1s
[1600/8000]	[L1: 0.0887][DIV: 0.1314][GRAD: 0.1805][VORT: 0.2420][Total: 0.6426]	4.7+3.1s
[2400/8000]	[L1: 0.0889][DIV: 0.1311][GRAD: 0.1806][VORT: 0.2425][Total: 0.6432]	4.7+3.1s
[3200/8000]	[L1: 0.0881][DIV: 0.1304][GRAD: 0.1789][VORT: 0.2391][Total: 0.6365]	4.7+3.1s
[4000/8000]	[L1: 0.0887][DIV: 0.1310][GRAD: 0.1801][VORT: 0.2408][Total: 0.6405]	4.7+3.1s
[4800/8000]	[L1: 0.0882][DIV: 0.1301][GRAD: 0.1792][VORT: 0.2399][Total: 0.6375]	4.7+3.1s
[5600/8000]	[L1: 0.0882][DIV: 0.1298][GRAD: 0.1791][VORT: 0.2400][Total: 0.6371]	4.7+3.1s
[6400/8000]	[L1: 0.0877][DIV: 0.1291][GRAD: 0.1779][VORT: 0.2388][Total: 0.6335]	4.7+3.1s
[7200/8000]	[L1: 0.0882][DIV: 0.1299][GRAD: 0.1792][VORT: 0.2416][Total: 0.6389]	4.7+3.1s
[8000/8000]	[L1: 0.0884][DIV: 0.1300][GRAD: 0.1796][VORT: 0.2430][Total: 0.6411]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.076968	vorticity_error: 0.809512	mean_abs_divergence: 0.118319
[DIV2K x2]	rel_l2_error: 0.063479	vorticity_error: 0.830770	mean_abs_divergence: 0.063709
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044691	vorticity_error: 0.711046	mean_abs_divergence: 0.031226
Forward: 1.27s

Saving...
Total: 1.57s

[Epoch 208]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0869][DIV: 0.1266][GRAD: 0.1771][VORT: 0.2503][Total: 0.6408]	4.7+3.1s
[1600/8000]	[L1: 0.0872][DIV: 0.1275][GRAD: 0.1771][VORT: 0.2469][Total: 0.6387]	4.7+3.1s
[2400/8000]	[L1: 0.0883][DIV: 0.1287][GRAD: 0.1793][VORT: 0.2449][Total: 0.6412]	4.7+3.1s
[3200/8000]	[L1: 0.0907][DIV: 0.1314][GRAD: 0.1845][VORT: 0.2524][Total: 0.6591]	4.7+3.1s
[4000/8000]	[L1: 0.0894][DIV: 0.1301][GRAD: 0.1818][VORT: 0.2490][Total: 0.6503]	4.7+3.1s
[4800/8000]	[L1: 0.0897][DIV: 0.1309][GRAD: 0.1824][VORT: 0.2488][Total: 0.6518]	4.7+3.1s
[5600/8000]	[L1: 0.0899][DIV: 0.1316][GRAD: 0.1829][VORT: 0.2493][Total: 0.6537]	4.7+3.1s
[6400/8000]	[L1: 0.0903][DIV: 0.1318][GRAD: 0.1840][VORT: 0.2508][Total: 0.6569]	4.7+3.1s
[7200/8000]	[L1: 0.0898][DIV: 0.1308][GRAD: 0.1828][VORT: 0.2496][Total: 0.6530]	4.7+3.1s
[8000/8000]	[L1: 0.0903][DIV: 0.1316][GRAD: 0.1838][VORT: 0.2505][Total: 0.6562]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.082599	vorticity_error: 0.697869	mean_abs_divergence: 0.115308
[DIV2K x2]	rel_l2_error: 0.058210	vorticity_error: 0.865891	mean_abs_divergence: 0.061105
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.049487	vorticity_error: 0.765877	mean_abs_divergence: 0.029928
Forward: 1.32s

Saving...
Total: 1.62s

[Epoch 209]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0896][DIV: 0.1307][GRAD: 0.1832][VORT: 0.2468][Total: 0.6504]	4.7+3.1s
[1600/8000]	[L1: 0.0865][DIV: 0.1268][GRAD: 0.1761][VORT: 0.2377][Total: 0.6271]	4.7+3.1s
[2400/8000]	[L1: 0.0875][DIV: 0.1275][GRAD: 0.1780][VORT: 0.2385][Total: 0.6314]	4.7+3.1s
[3200/8000]	[L1: 0.0866][DIV: 0.1263][GRAD: 0.1762][VORT: 0.2364][Total: 0.6255]	4.7+3.1s
[4000/8000]	[L1: 0.0861][DIV: 0.1256][GRAD: 0.1749][VORT: 0.2362][Total: 0.6228]	4.7+3.1s
[4800/8000]	[L1: 0.0865][DIV: 0.1261][GRAD: 0.1756][VORT: 0.2370][Total: 0.6252]	4.7+3.1s
[5600/8000]	[L1: 0.0861][DIV: 0.1259][GRAD: 0.1749][VORT: 0.2369][Total: 0.6238]	4.7+3.1s
[6400/8000]	[L1: 0.0861][DIV: 0.1259][GRAD: 0.1749][VORT: 0.2380][Total: 0.6249]	4.7+3.1s
[7200/8000]	[L1: 0.0868][DIV: 0.1268][GRAD: 0.1763][VORT: 0.2394][Total: 0.6292]	4.7+3.1s
[8000/8000]	[L1: 0.0873][DIV: 0.1276][GRAD: 0.1775][VORT: 0.2408][Total: 0.6332]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.091549	vorticity_error: 1.022064	mean_abs_divergence: 0.142484
[DIV2K x2]	rel_l2_error: 0.069366	vorticity_error: 1.005842	mean_abs_divergence: 0.076894
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.054242	vorticity_error: 0.886569	mean_abs_divergence: 0.038449
Forward: 1.29s

Saving...
Total: 1.60s

[Epoch 210]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0897][DIV: 0.1301][GRAD: 0.1824][VORT: 0.2418][Total: 0.6441]	4.7+3.1s
[1600/8000]	[L1: 0.0883][DIV: 0.1281][GRAD: 0.1798][VORT: 0.2426][Total: 0.6388]	4.7+3.1s
[2400/8000]	[L1: 0.0871][DIV: 0.1270][GRAD: 0.1771][VORT: 0.2410][Total: 0.6322]	4.7+3.1s
[3200/8000]	[L1: 0.0878][DIV: 0.1287][GRAD: 0.1780][VORT: 0.2401][Total: 0.6346]	4.7+3.1s
[4000/8000]	[L1: 0.0854][DIV: 0.1262][GRAD: 0.1733][VORT: 0.2337][Total: 0.6186]	4.7+3.1s
[4800/8000]	[L1: 0.0859][DIV: 0.1269][GRAD: 0.1744][VORT: 0.2352][Total: 0.6224]	4.7+3.1s
[5600/8000]	[L1: 0.0867][DIV: 0.1279][GRAD: 0.1760][VORT: 0.2372][Total: 0.6277]	4.7+3.1s
[6400/8000]	[L1: 0.0872][DIV: 0.1286][GRAD: 0.1772][VORT: 0.2391][Total: 0.6321]	4.7+3.1s
[7200/8000]	[L1: 0.0875][DIV: 0.1287][GRAD: 0.1776][VORT: 0.2391][Total: 0.6329]	4.7+3.1s
[8000/8000]	[L1: 0.0866][DIV: 0.1279][GRAD: 0.1759][VORT: 0.2371][Total: 0.6275]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.073497	vorticity_error: 0.640414	mean_abs_divergence: 0.108911
[DIV2K x2]	rel_l2_error: 0.055177	vorticity_error: 0.730874	mean_abs_divergence: 0.058478
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044168	vorticity_error: 0.614294	mean_abs_divergence: 0.028723
Forward: 1.25s

Saving...
Total: 1.55s

[Epoch 211]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0922][DIV: 0.1331][GRAD: 0.1872][VORT: 0.2503][Total: 0.6627]	4.7+3.1s
[1600/8000]	[L1: 0.0922][DIV: 0.1330][GRAD: 0.1877][VORT: 0.2500][Total: 0.6629]	4.7+3.1s
[2400/8000]	[L1: 0.0892][DIV: 0.1290][GRAD: 0.1818][VORT: 0.2453][Total: 0.6453]	4.7+3.1s
[3200/8000]	[L1: 0.0924][DIV: 0.1340][GRAD: 0.1882][VORT: 0.2513][Total: 0.6659]	4.7+3.1s
[4000/8000]	[L1: 0.0933][DIV: 0.1351][GRAD: 0.1900][VORT: 0.2540][Total: 0.6724]	4.7+3.1s
[4800/8000]	[L1: 0.0926][DIV: 0.1344][GRAD: 0.1885][VORT: 0.2524][Total: 0.6679]	4.7+3.1s
[5600/8000]	[L1: 0.0923][DIV: 0.1339][GRAD: 0.1881][VORT: 0.2529][Total: 0.6673]	4.7+3.1s
[6400/8000]	[L1: 0.0914][DIV: 0.1328][GRAD: 0.1864][VORT: 0.2510][Total: 0.6616]	4.7+3.1s
[7200/8000]	[L1: 0.0915][DIV: 0.1332][GRAD: 0.1865][VORT: 0.2502][Total: 0.6615]	4.7+3.1s
[8000/8000]	[L1: 0.0920][DIV: 0.1339][GRAD: 0.1875][VORT: 0.2515][Total: 0.6648]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.077423	vorticity_error: 0.783336	mean_abs_divergence: 0.111612
[DIV2K x2]	rel_l2_error: 0.059577	vorticity_error: 0.872897	mean_abs_divergence: 0.058411
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.040212	vorticity_error: 0.800754	mean_abs_divergence: 0.028692
Forward: 1.29s

Saving...
Total: 1.65s

[Epoch 212]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0932][DIV: 0.1349][GRAD: 0.1888][VORT: 0.2455][Total: 0.6624]	4.7+3.1s
[1600/8000]	[L1: 0.0919][DIV: 0.1334][GRAD: 0.1864][VORT: 0.2482][Total: 0.6599]	4.7+3.1s
[2400/8000]	[L1: 0.0925][DIV: 0.1342][GRAD: 0.1883][VORT: 0.2534][Total: 0.6684]	4.7+3.1s
[3200/8000]	[L1: 0.0924][DIV: 0.1343][GRAD: 0.1881][VORT: 0.2536][Total: 0.6684]	4.7+3.1s
[4000/8000]	[L1: 0.0926][DIV: 0.1346][GRAD: 0.1886][VORT: 0.2557][Total: 0.6716]	4.7+3.1s
[4800/8000]	[L1: 0.0920][DIV: 0.1339][GRAD: 0.1872][VORT: 0.2536][Total: 0.6667]	4.7+3.1s
[5600/8000]	[L1: 0.0916][DIV: 0.1334][GRAD: 0.1865][VORT: 0.2525][Total: 0.6639]	4.7+3.1s
[6400/8000]	[L1: 0.0912][DIV: 0.1329][GRAD: 0.1859][VORT: 0.2516][Total: 0.6616]	4.7+3.1s
[7200/8000]	[L1: 0.0900][DIV: 0.1314][GRAD: 0.1834][VORT: 0.2483][Total: 0.6531]	4.7+3.1s
[8000/8000]	[L1: 0.0897][DIV: 0.1309][GRAD: 0.1828][VORT: 0.2473][Total: 0.6507]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.101976	vorticity_error: 0.836004	mean_abs_divergence: 0.156101
[DIV2K x2]	rel_l2_error: 0.083425	vorticity_error: 0.830120	mean_abs_divergence: 0.082273
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.058734	vorticity_error: 0.764355	mean_abs_divergence: 0.040042
Forward: 1.31s

Saving...
Total: 1.67s

[Epoch 213]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0825][DIV: 0.1193][GRAD: 0.1674][VORT: 0.2273][Total: 0.5966]	4.7+3.1s
[1600/8000]	[L1: 0.0870][DIV: 0.1260][GRAD: 0.1764][VORT: 0.2367][Total: 0.6260]	4.7+3.1s
[2400/8000]	[L1: 0.0835][DIV: 0.1224][GRAD: 0.1699][VORT: 0.2306][Total: 0.6065]	4.7+3.1s
[3200/8000]	[L1: 0.0838][DIV: 0.1230][GRAD: 0.1706][VORT: 0.2320][Total: 0.6094]	4.7+3.1s
[4000/8000]	[L1: 0.0840][DIV: 0.1236][GRAD: 0.1713][VORT: 0.2326][Total: 0.6116]	4.7+3.1s
[4800/8000]	[L1: 0.0852][DIV: 0.1254][GRAD: 0.1736][VORT: 0.2352][Total: 0.6193]	4.7+3.1s
[5600/8000]	[L1: 0.0860][DIV: 0.1264][GRAD: 0.1752][VORT: 0.2369][Total: 0.6245]	4.7+3.1s
[6400/8000]	[L1: 0.0862][DIV: 0.1267][GRAD: 0.1755][VORT: 0.2375][Total: 0.6259]	4.7+3.1s
[7200/8000]	[L1: 0.0873][DIV: 0.1280][GRAD: 0.1775][VORT: 0.2390][Total: 0.6318]	4.7+3.1s
[8000/8000]	[L1: 0.0878][DIV: 0.1285][GRAD: 0.1785][VORT: 0.2401][Total: 0.6349]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.070532	vorticity_error: 1.901446	mean_abs_divergence: 0.108215
[DIV2K x2]	rel_l2_error: 0.054744	vorticity_error: 0.882667	mean_abs_divergence: 0.057015
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.041873	vorticity_error: 0.856729	mean_abs_divergence: 0.026841
Forward: 1.28s

Saving...
Total: 1.59s

[Epoch 214]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0940][DIV: 0.1374][GRAD: 0.1916][VORT: 0.2574][Total: 0.6804]	4.7+3.1s
[1600/8000]	[L1: 0.0961][DIV: 0.1396][GRAD: 0.1951][VORT: 0.2604][Total: 0.6912]	4.7+3.1s
[2400/8000]	[L1: 0.0954][DIV: 0.1389][GRAD: 0.1932][VORT: 0.2593][Total: 0.6868]	4.7+3.1s
[3200/8000]	[L1: 0.0937][DIV: 0.1364][GRAD: 0.1900][VORT: 0.2554][Total: 0.6755]	4.7+3.1s
[4000/8000]	[L1: 0.0911][DIV: 0.1330][GRAD: 0.1851][VORT: 0.2511][Total: 0.6602]	4.7+3.1s
[4800/8000]	[L1: 0.0914][DIV: 0.1334][GRAD: 0.1855][VORT: 0.2505][Total: 0.6609]	4.7+3.1s
[5600/8000]	[L1: 0.0916][DIV: 0.1336][GRAD: 0.1862][VORT: 0.2515][Total: 0.6629]	4.7+3.1s
[6400/8000]	[L1: 0.0920][DIV: 0.1340][GRAD: 0.1869][VORT: 0.2523][Total: 0.6652]	4.7+3.1s
[7200/8000]	[L1: 0.0911][DIV: 0.1330][GRAD: 0.1850][VORT: 0.2490][Total: 0.6581]	4.7+3.1s
[8000/8000]	[L1: 0.0921][DIV: 0.1342][GRAD: 0.1871][VORT: 0.2516][Total: 0.6649]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.062928	vorticity_error: 0.842637	mean_abs_divergence: 0.110279
[DIV2K x2]	rel_l2_error: 0.047364	vorticity_error: 0.609798	mean_abs_divergence: 0.057577
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.035665	vorticity_error: 0.646373	mean_abs_divergence: 0.027430
Forward: 1.33s

Saving...
Total: 1.71s

[Epoch 215]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0849][DIV: 0.1260][GRAD: 0.1726][VORT: 0.2357][Total: 0.6192]	4.7+3.1s
[1600/8000]	[L1: 0.0892][DIV: 0.1308][GRAD: 0.1818][VORT: 0.2485][Total: 0.6503]	4.7+3.1s
[2400/8000]	[L1: 0.0931][DIV: 0.1358][GRAD: 0.1900][VORT: 0.2587][Total: 0.6776]	4.7+3.1s
[3200/8000]	[L1: 0.0925][DIV: 0.1350][GRAD: 0.1885][VORT: 0.2560][Total: 0.6721]	4.7+3.1s
[4000/8000]	[L1: 0.0912][DIV: 0.1335][GRAD: 0.1858][VORT: 0.2531][Total: 0.6635]	4.7+3.1s
[4800/8000]	[L1: 0.0903][DIV: 0.1320][GRAD: 0.1839][VORT: 0.2507][Total: 0.6569]	4.7+3.1s
[5600/8000]	[L1: 0.0898][DIV: 0.1312][GRAD: 0.1829][VORT: 0.2496][Total: 0.6535]	4.7+3.1s
[6400/8000]	[L1: 0.0885][DIV: 0.1297][GRAD: 0.1803][VORT: 0.2464][Total: 0.6449]	4.7+3.1s
[7200/8000]	[L1: 0.0886][DIV: 0.1297][GRAD: 0.1804][VORT: 0.2456][Total: 0.6443]	4.7+3.1s
[8000/8000]	[L1: 0.0891][DIV: 0.1304][GRAD: 0.1814][VORT: 0.2464][Total: 0.6473]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.101530	vorticity_error: 1.121654	mean_abs_divergence: 0.156386
[DIV2K x2]	rel_l2_error: 0.087749	vorticity_error: 1.179674	mean_abs_divergence: 0.084447
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.062983	vorticity_error: 1.091383	mean_abs_divergence: 0.042066
Forward: 1.34s

Saving...
Total: 1.70s

[Epoch 216]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0928][DIV: 0.1340][GRAD: 0.1890][VORT: 0.2552][Total: 0.6710]	4.7+3.1s
[1600/8000]	[L1: 0.0932][DIV: 0.1352][GRAD: 0.1895][VORT: 0.2543][Total: 0.6722]	4.7+3.1s
[2400/8000]	[L1: 0.0916][DIV: 0.1340][GRAD: 0.1864][VORT: 0.2487][Total: 0.6607]	4.7+3.1s
[3200/8000]	[L1: 0.0893][DIV: 0.1314][GRAD: 0.1813][VORT: 0.2421][Total: 0.6441]	4.7+3.1s
[4000/8000]	[L1: 0.0890][DIV: 0.1305][GRAD: 0.1806][VORT: 0.2414][Total: 0.6415]	4.7+3.1s
[4800/8000]	[L1: 0.0893][DIV: 0.1305][GRAD: 0.1815][VORT: 0.2436][Total: 0.6449]	4.7+3.1s
[5600/8000]	[L1: 0.0895][DIV: 0.1306][GRAD: 0.1819][VORT: 0.2435][Total: 0.6455]	4.7+3.1s
[6400/8000]	[L1: 0.0907][DIV: 0.1320][GRAD: 0.1845][VORT: 0.2476][Total: 0.6548]	4.7+3.1s
[7200/8000]	[L1: 0.0907][DIV: 0.1319][GRAD: 0.1845][VORT: 0.2480][Total: 0.6552]	4.7+3.1s
[8000/8000]	[L1: 0.0909][DIV: 0.1323][GRAD: 0.1849][VORT: 0.2486][Total: 0.6566]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.065084	vorticity_error: 0.922233	mean_abs_divergence: 0.110460
[DIV2K x2]	rel_l2_error: 0.053707	vorticity_error: 0.786939	mean_abs_divergence: 0.057203
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.036053	vorticity_error: 0.849903	mean_abs_divergence: 0.027694
Forward: 1.35s

Saving...
Total: 1.66s

[Epoch 217]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0900][DIV: 0.1329][GRAD: 0.1831][VORT: 0.2488][Total: 0.6547]	4.8+3.0s
[1600/8000]	[L1: 0.0940][DIV: 0.1370][GRAD: 0.1912][VORT: 0.2565][Total: 0.6787]	4.8+3.1s
[2400/8000]	[L1: 0.0917][DIV: 0.1338][GRAD: 0.1866][VORT: 0.2516][Total: 0.6637]	4.7+3.1s
[3200/8000]	[L1: 0.0908][DIV: 0.1327][GRAD: 0.1845][VORT: 0.2485][Total: 0.6565]	4.7+3.1s
[4000/8000]	[L1: 0.0905][DIV: 0.1321][GRAD: 0.1840][VORT: 0.2485][Total: 0.6551]	4.7+3.1s
[4800/8000]	[L1: 0.0905][DIV: 0.1319][GRAD: 0.1839][VORT: 0.2489][Total: 0.6552]	4.7+3.1s
[5600/8000]	[L1: 0.0901][DIV: 0.1317][GRAD: 0.1832][VORT: 0.2472][Total: 0.6521]	4.7+3.1s
[6400/8000]	[L1: 0.0898][DIV: 0.1313][GRAD: 0.1825][VORT: 0.2454][Total: 0.6490]	4.7+3.1s
[7200/8000]	[L1: 0.0900][DIV: 0.1315][GRAD: 0.1829][VORT: 0.2466][Total: 0.6508]	4.7+3.1s
[8000/8000]	[L1: 0.0897][DIV: 0.1312][GRAD: 0.1824][VORT: 0.2457][Total: 0.6490]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.072078	vorticity_error: 0.760494	mean_abs_divergence: 0.105147
[DIV2K x2]	rel_l2_error: 0.060826	vorticity_error: 0.767743	mean_abs_divergence: 0.054859
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045916	vorticity_error: 0.671544	mean_abs_divergence: 0.026795
Forward: 1.34s

Saving...
Total: 1.65s

[Epoch 218]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0913][DIV: 0.1348][GRAD: 0.1850][VORT: 0.2450][Total: 0.6561]	4.7+3.1s
[1600/8000]	[L1: 0.0912][DIV: 0.1347][GRAD: 0.1841][VORT: 0.2429][Total: 0.6528]	4.7+3.1s
[2400/8000]	[L1: 0.0921][DIV: 0.1344][GRAD: 0.1864][VORT: 0.2467][Total: 0.6597]	4.7+3.1s
[3200/8000]	[L1: 0.0915][DIV: 0.1331][GRAD: 0.1853][VORT: 0.2473][Total: 0.6572]	4.7+3.1s
[4000/8000]	[L1: 0.0904][DIV: 0.1318][GRAD: 0.1833][VORT: 0.2455][Total: 0.6510]	4.7+3.1s
[4800/8000]	[L1: 0.0910][DIV: 0.1326][GRAD: 0.1845][VORT: 0.2468][Total: 0.6548]	4.7+3.1s
[5600/8000]	[L1: 0.0918][DIV: 0.1335][GRAD: 0.1863][VORT: 0.2497][Total: 0.6612]	4.7+3.1s
[6400/8000]	[L1: 0.0920][DIV: 0.1340][GRAD: 0.1867][VORT: 0.2492][Total: 0.6619]	4.7+3.1s
[7200/8000]	[L1: 0.0913][DIV: 0.1331][GRAD: 0.1855][VORT: 0.2483][Total: 0.6583]	4.7+3.1s
[8000/8000]	[L1: 0.0912][DIV: 0.1331][GRAD: 0.1854][VORT: 0.2484][Total: 0.6581]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.098877	vorticity_error: 0.875377	mean_abs_divergence: 0.136769
[DIV2K x2]	rel_l2_error: 0.067315	vorticity_error: 1.294376	mean_abs_divergence: 0.070968
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.053202	vorticity_error: 0.981445	mean_abs_divergence: 0.034648
Forward: 1.32s

Saving...
Total: 1.64s

[Epoch 219]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0909][DIV: 0.1339][GRAD: 0.1846][VORT: 0.2495][Total: 0.6590]	4.7+3.1s
[1600/8000]	[L1: 0.0880][DIV: 0.1292][GRAD: 0.1799][VORT: 0.2456][Total: 0.6426]	4.7+3.1s
[2400/8000]	[L1: 0.0890][DIV: 0.1305][GRAD: 0.1815][VORT: 0.2470][Total: 0.6480]	4.7+3.1s
[3200/8000]	[L1: 0.0902][DIV: 0.1317][GRAD: 0.1838][VORT: 0.2502][Total: 0.6558]	4.7+3.1s
[4000/8000]	[L1: 0.0911][DIV: 0.1326][GRAD: 0.1859][VORT: 0.2536][Total: 0.6631]	4.7+3.1s
[4800/8000]	[L1: 0.0901][DIV: 0.1314][GRAD: 0.1839][VORT: 0.2507][Total: 0.6560]	4.7+3.1s
[5600/8000]	[L1: 0.0910][DIV: 0.1326][GRAD: 0.1856][VORT: 0.2529][Total: 0.6622]	4.7+3.1s
[6400/8000]	[L1: 0.0916][DIV: 0.1334][GRAD: 0.1867][VORT: 0.2548][Total: 0.6664]	4.7+3.1s
[7200/8000]	[L1: 0.0916][DIV: 0.1334][GRAD: 0.1866][VORT: 0.2539][Total: 0.6656]	4.7+3.1s
[8000/8000]	[L1: 0.0921][DIV: 0.1341][GRAD: 0.1878][VORT: 0.2555][Total: 0.6695]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.069943	vorticity_error: 0.768786	mean_abs_divergence: 0.102165
[DIV2K x2]	rel_l2_error: 0.056272	vorticity_error: 0.836100	mean_abs_divergence: 0.054227
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043944	vorticity_error: 0.661608	mean_abs_divergence: 0.027358
Forward: 1.31s

Saving...
Total: 1.63s

[Epoch 220]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0910][DIV: 0.1322][GRAD: 0.1845][VORT: 0.2447][Total: 0.6523]	4.7+3.1s
[1600/8000]	[L1: 0.0923][DIV: 0.1337][GRAD: 0.1872][VORT: 0.2485][Total: 0.6617]	4.7+3.1s
[2400/8000]	[L1: 0.0911][DIV: 0.1325][GRAD: 0.1846][VORT: 0.2446][Total: 0.6529]	4.7+3.1s
[3200/8000]	[L1: 0.0901][DIV: 0.1311][GRAD: 0.1829][VORT: 0.2443][Total: 0.6484]	4.7+3.1s
[4000/8000]	[L1: 0.0901][DIV: 0.1315][GRAD: 0.1830][VORT: 0.2455][Total: 0.6500]	4.7+3.1s
[4800/8000]	[L1: 0.0889][DIV: 0.1303][GRAD: 0.1805][VORT: 0.2432][Total: 0.6430]	4.7+3.1s
[5600/8000]	[L1: 0.0894][DIV: 0.1307][GRAD: 0.1814][VORT: 0.2439][Total: 0.6454]	4.7+3.1s
[6400/8000]	[L1: 0.0897][DIV: 0.1311][GRAD: 0.1820][VORT: 0.2449][Total: 0.6477]	4.7+3.1s
[7200/8000]	[L1: 0.0900][DIV: 0.1315][GRAD: 0.1827][VORT: 0.2459][Total: 0.6501]	4.7+3.1s
[8000/8000]	[L1: 0.0891][DIV: 0.1305][GRAD: 0.1809][VORT: 0.2441][Total: 0.6446]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.082303	vorticity_error: 0.897989	mean_abs_divergence: 0.107386
[DIV2K x2]	rel_l2_error: 0.057885	vorticity_error: 1.071891	mean_abs_divergence: 0.056237
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048900	vorticity_error: 0.873945	mean_abs_divergence: 0.027536
Forward: 1.32s

Saving...
Total: 1.63s

[Epoch 221]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0873][DIV: 0.1274][GRAD: 0.1767][VORT: 0.2348][Total: 0.6260]	4.7+3.1s
[1600/8000]	[L1: 0.0898][DIV: 0.1320][GRAD: 0.1821][VORT: 0.2432][Total: 0.6472]	4.7+3.1s
[2400/8000]	[L1: 0.0889][DIV: 0.1306][GRAD: 0.1806][VORT: 0.2426][Total: 0.6427]	4.7+3.1s
[3200/8000]	[L1: 0.0899][DIV: 0.1320][GRAD: 0.1830][VORT: 0.2465][Total: 0.6514]	4.7+3.1s
[4000/8000]	[L1: 0.0895][DIV: 0.1317][GRAD: 0.1822][VORT: 0.2456][Total: 0.6489]	4.7+3.1s
[4800/8000]	[L1: 0.0909][DIV: 0.1332][GRAD: 0.1851][VORT: 0.2503][Total: 0.6594]	4.7+3.1s
[5600/8000]	[L1: 0.0909][DIV: 0.1332][GRAD: 0.1852][VORT: 0.2516][Total: 0.6609]	4.7+3.1s
[6400/8000]	[L1: 0.0901][DIV: 0.1322][GRAD: 0.1835][VORT: 0.2477][Total: 0.6536]	4.7+3.1s
[7200/8000]	[L1: 0.0898][DIV: 0.1316][GRAD: 0.1827][VORT: 0.2467][Total: 0.6508]	4.7+3.1s
[8000/8000]	[L1: 0.0904][DIV: 0.1323][GRAD: 0.1840][VORT: 0.2481][Total: 0.6547]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.101374	vorticity_error: 0.868329	mean_abs_divergence: 0.117225
[DIV2K x2]	rel_l2_error: 0.070724	vorticity_error: 1.058834	mean_abs_divergence: 0.062078
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.052721	vorticity_error: 1.058877	mean_abs_divergence: 0.030193
Forward: 1.32s

Saving...
Total: 1.63s

[Epoch 222]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0874][DIV: 0.1292][GRAD: 0.1777][VORT: 0.2364][Total: 0.6307]	4.7+3.1s
[1600/8000]	[L1: 0.0816][DIV: 0.1217][GRAD: 0.1659][VORT: 0.2224][Total: 0.5917]	4.7+3.1s
[2400/8000]	[L1: 0.0847][DIV: 0.1251][GRAD: 0.1724][VORT: 0.2322][Total: 0.6143]	4.7+3.1s
[3200/8000]	[L1: 0.0863][DIV: 0.1265][GRAD: 0.1758][VORT: 0.2369][Total: 0.6255]	4.7+3.1s
[4000/8000]	[L1: 0.0891][DIV: 0.1302][GRAD: 0.1813][VORT: 0.2419][Total: 0.6425]	4.8+3.1s
[4800/8000]	[L1: 0.0890][DIV: 0.1301][GRAD: 0.1808][VORT: 0.2407][Total: 0.6405]	4.7+3.1s
[5600/8000]	[L1: 0.0898][DIV: 0.1313][GRAD: 0.1825][VORT: 0.2430][Total: 0.6465]	4.7+3.1s
[6400/8000]	[L1: 0.0895][DIV: 0.1312][GRAD: 0.1820][VORT: 0.2433][Total: 0.6460]	4.7+3.1s
[7200/8000]	[L1: 0.0895][DIV: 0.1312][GRAD: 0.1820][VORT: 0.2431][Total: 0.6458]	4.7+3.1s
[8000/8000]	[L1: 0.0896][DIV: 0.1311][GRAD: 0.1821][VORT: 0.2431][Total: 0.6459]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.099678	vorticity_error: 1.048175	mean_abs_divergence: 0.147917
[DIV2K x2]	rel_l2_error: 0.071804	vorticity_error: 1.134192	mean_abs_divergence: 0.078668
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.052530	vorticity_error: 0.971030	mean_abs_divergence: 0.039289
Forward: 1.32s

Saving...
Total: 1.64s

[Epoch 223]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0898][DIV: 0.1332][GRAD: 0.1823][VORT: 0.2405][Total: 0.6457]	4.7+3.1s
[1600/8000]	[L1: 0.0847][DIV: 0.1248][GRAD: 0.1717][VORT: 0.2321][Total: 0.6133]	4.7+3.1s
[2400/8000]	[L1: 0.0878][DIV: 0.1288][GRAD: 0.1784][VORT: 0.2399][Total: 0.6349]	4.7+3.1s
[3200/8000]	[L1: 0.0884][DIV: 0.1296][GRAD: 0.1798][VORT: 0.2418][Total: 0.6397]	4.7+3.1s
[4000/8000]	[L1: 0.0887][DIV: 0.1299][GRAD: 0.1805][VORT: 0.2440][Total: 0.6431]	4.8+3.1s
[4800/8000]	[L1: 0.0886][DIV: 0.1298][GRAD: 0.1804][VORT: 0.2440][Total: 0.6429]	4.7+3.1s
[5600/8000]	[L1: 0.0878][DIV: 0.1289][GRAD: 0.1784][VORT: 0.2411][Total: 0.6362]	4.7+3.1s
[6400/8000]	[L1: 0.0875][DIV: 0.1286][GRAD: 0.1778][VORT: 0.2402][Total: 0.6340]	4.7+3.1s
[7200/8000]	[L1: 0.0869][DIV: 0.1278][GRAD: 0.1767][VORT: 0.2386][Total: 0.6300]	4.7+3.1s
[8000/8000]	[L1: 0.0880][DIV: 0.1289][GRAD: 0.1789][VORT: 0.2420][Total: 0.6378]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.083591	vorticity_error: 0.843228	mean_abs_divergence: 0.129240
[DIV2K x2]	rel_l2_error: 0.063403	vorticity_error: 0.868344	mean_abs_divergence: 0.067587
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.047119	vorticity_error: 0.740335	mean_abs_divergence: 0.033157
Forward: 1.25s

Saving...
Total: 1.55s

[Epoch 224]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0883][DIV: 0.1288][GRAD: 0.1787][VORT: 0.2424][Total: 0.6383]	4.7+3.1s
[1600/8000]	[L1: 0.0904][DIV: 0.1321][GRAD: 0.1831][VORT: 0.2438][Total: 0.6494]	4.7+3.1s
[2400/8000]	[L1: 0.0889][DIV: 0.1300][GRAD: 0.1800][VORT: 0.2395][Total: 0.6384]	4.7+3.1s
[3200/8000]	[L1: 0.0887][DIV: 0.1299][GRAD: 0.1799][VORT: 0.2402][Total: 0.6388]	4.7+3.1s
[4000/8000]	[L1: 0.0885][DIV: 0.1299][GRAD: 0.1792][VORT: 0.2373][Total: 0.6349]	4.7+3.1s
[4800/8000]	[L1: 0.0884][DIV: 0.1297][GRAD: 0.1791][VORT: 0.2386][Total: 0.6359]	4.7+3.1s
[5600/8000]	[L1: 0.0885][DIV: 0.1296][GRAD: 0.1794][VORT: 0.2400][Total: 0.6375]	4.7+3.1s
[6400/8000]	[L1: 0.0883][DIV: 0.1295][GRAD: 0.1790][VORT: 0.2404][Total: 0.6372]	4.7+3.1s
[7200/8000]	[L1: 0.0880][DIV: 0.1292][GRAD: 0.1785][VORT: 0.2397][Total: 0.6354]	4.7+3.1s
[8000/8000]	[L1: 0.0886][DIV: 0.1301][GRAD: 0.1799][VORT: 0.2413][Total: 0.6399]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.095776	vorticity_error: 1.212212	mean_abs_divergence: 0.158428
[DIV2K x2]	rel_l2_error: 0.073345	vorticity_error: 0.948824	mean_abs_divergence: 0.083240
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.053438	vorticity_error: 0.820004	mean_abs_divergence: 0.040879
Forward: 1.31s

Saving...
Total: 1.61s

[Epoch 225]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0910][DIV: 0.1330][GRAD: 0.1848][VORT: 0.2489][Total: 0.6577]	4.7+3.1s
[1600/8000]	[L1: 0.0882][DIV: 0.1286][GRAD: 0.1790][VORT: 0.2437][Total: 0.6395]	4.7+3.1s
[2400/8000]	[L1: 0.0885][DIV: 0.1301][GRAD: 0.1797][VORT: 0.2415][Total: 0.6398]	4.7+3.1s
[3200/8000]	[L1: 0.0897][DIV: 0.1310][GRAD: 0.1819][VORT: 0.2443][Total: 0.6468]	4.7+3.1s
[4000/8000]	[L1: 0.0898][DIV: 0.1312][GRAD: 0.1824][VORT: 0.2467][Total: 0.6501]	4.7+3.1s
[4800/8000]	[L1: 0.0906][DIV: 0.1321][GRAD: 0.1840][VORT: 0.2501][Total: 0.6567]	4.7+3.1s
[5600/8000]	[L1: 0.0902][DIV: 0.1318][GRAD: 0.1831][VORT: 0.2482][Total: 0.6532]	4.7+3.1s
[6400/8000]	[L1: 0.0889][DIV: 0.1302][GRAD: 0.1807][VORT: 0.2450][Total: 0.6447]	4.7+3.1s
[7200/8000]	[L1: 0.0897][DIV: 0.1309][GRAD: 0.1824][VORT: 0.2478][Total: 0.6508]	4.7+3.1s
[8000/8000]	[L1: 0.0898][DIV: 0.1312][GRAD: 0.1828][VORT: 0.2480][Total: 0.6519]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.082926	vorticity_error: 0.789805	mean_abs_divergence: 0.126342
[DIV2K x2]	rel_l2_error: 0.065032	vorticity_error: 0.771588	mean_abs_divergence: 0.065321
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045697	vorticity_error: 0.584434	mean_abs_divergence: 0.032254
Forward: 1.30s

Saving...
Total: 1.60s

[Epoch 226]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0887][DIV: 0.1289][GRAD: 0.1812][VORT: 0.2469][Total: 0.6457]	4.7+3.1s
[1600/8000]	[L1: 0.0869][DIV: 0.1277][GRAD: 0.1771][VORT: 0.2408][Total: 0.6325]	4.7+3.1s
[2400/8000]	[L1: 0.0862][DIV: 0.1273][GRAD: 0.1757][VORT: 0.2378][Total: 0.6270]	4.7+3.1s
[3200/8000]	[L1: 0.0862][DIV: 0.1276][GRAD: 0.1753][VORT: 0.2372][Total: 0.6263]	4.7+3.1s
[4000/8000]	[L1: 0.0866][DIV: 0.1285][GRAD: 0.1759][VORT: 0.2371][Total: 0.6280]	4.7+3.1s
[4800/8000]	[L1: 0.0870][DIV: 0.1287][GRAD: 0.1767][VORT: 0.2368][Total: 0.6292]	4.7+3.1s
[5600/8000]	[L1: 0.0878][DIV: 0.1297][GRAD: 0.1784][VORT: 0.2396][Total: 0.6355]	4.8+3.1s
[6400/8000]	[L1: 0.0877][DIV: 0.1297][GRAD: 0.1782][VORT: 0.2382][Total: 0.6338]	4.7+3.1s
[7200/8000]	[L1: 0.0884][DIV: 0.1303][GRAD: 0.1796][VORT: 0.2410][Total: 0.6392]	4.7+3.1s
[8000/8000]	[L1: 0.0891][DIV: 0.1311][GRAD: 0.1811][VORT: 0.2429][Total: 0.6443]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.080248	vorticity_error: 0.686825	mean_abs_divergence: 0.090060
[DIV2K x2]	rel_l2_error: 0.052560	vorticity_error: 0.692400	mean_abs_divergence: 0.048569
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045515	vorticity_error: 0.702837	mean_abs_divergence: 0.024297
Forward: 1.28s

Saving...
Total: 1.59s

[Epoch 227]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0801][DIV: 0.1186][GRAD: 0.1621][VORT: 0.2174][Total: 0.5782]	4.7+3.1s
[1600/8000]	[L1: 0.0845][DIV: 0.1233][GRAD: 0.1722][VORT: 0.2328][Total: 0.6128]	4.7+3.1s
[2400/8000]	[L1: 0.0849][DIV: 0.1239][GRAD: 0.1725][VORT: 0.2332][Total: 0.6145]	4.7+3.1s
[3200/8000]	[L1: 0.0855][DIV: 0.1247][GRAD: 0.1736][VORT: 0.2339][Total: 0.6178]	4.7+3.1s
[4000/8000]	[L1: 0.0863][DIV: 0.1258][GRAD: 0.1754][VORT: 0.2371][Total: 0.6246]	4.7+3.1s
[4800/8000]	[L1: 0.0857][DIV: 0.1256][GRAD: 0.1738][VORT: 0.2349][Total: 0.6200]	4.7+3.1s
[5600/8000]	[L1: 0.0852][DIV: 0.1251][GRAD: 0.1726][VORT: 0.2335][Total: 0.6165]	4.8+3.1s
[6400/8000]	[L1: 0.0849][DIV: 0.1250][GRAD: 0.1720][VORT: 0.2323][Total: 0.6142]	4.7+3.1s
[7200/8000]	[L1: 0.0852][DIV: 0.1254][GRAD: 0.1730][VORT: 0.2340][Total: 0.6176]	4.7+3.1s
[8000/8000]	[L1: 0.0854][DIV: 0.1255][GRAD: 0.1733][VORT: 0.2344][Total: 0.6185]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.063941	vorticity_error: 0.662433	mean_abs_divergence: 0.102653
[DIV2K x2]	rel_l2_error: 0.054401	vorticity_error: 0.668091	mean_abs_divergence: 0.053936
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043805	vorticity_error: 0.774532	mean_abs_divergence: 0.026630
Forward: 1.26s

Saving...
Total: 1.57s

[Epoch 228]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0915][DIV: 0.1342][GRAD: 0.1858][VORT: 0.2469][Total: 0.6584]	4.7+3.1s
[1600/8000]	[L1: 0.0923][DIV: 0.1348][GRAD: 0.1879][VORT: 0.2513][Total: 0.6663]	4.7+3.1s
[2400/8000]	[L1: 0.0926][DIV: 0.1355][GRAD: 0.1886][VORT: 0.2539][Total: 0.6706]	4.7+3.1s
[3200/8000]	[L1: 0.0910][DIV: 0.1329][GRAD: 0.1851][VORT: 0.2492][Total: 0.6582]	4.7+3.1s
[4000/8000]	[L1: 0.0909][DIV: 0.1328][GRAD: 0.1851][VORT: 0.2500][Total: 0.6588]	4.7+3.1s
[4800/8000]	[L1: 0.0908][DIV: 0.1324][GRAD: 0.1847][VORT: 0.2491][Total: 0.6570]	4.7+3.1s
[5600/8000]	[L1: 0.0908][DIV: 0.1320][GRAD: 0.1845][VORT: 0.2500][Total: 0.6573]	4.8+3.1s
[6400/8000]	[L1: 0.0896][DIV: 0.1308][GRAD: 0.1822][VORT: 0.2463][Total: 0.6490]	4.7+3.1s
[7200/8000]	[L1: 0.0892][DIV: 0.1302][GRAD: 0.1813][VORT: 0.2459][Total: 0.6466]	4.7+3.1s
[8000/8000]	[L1: 0.0888][DIV: 0.1299][GRAD: 0.1806][VORT: 0.2448][Total: 0.6441]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.081108	vorticity_error: 0.638583	mean_abs_divergence: 0.119222
[DIV2K x2]	rel_l2_error: 0.061466	vorticity_error: 0.559599	mean_abs_divergence: 0.061939
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042251	vorticity_error: 0.551464	mean_abs_divergence: 0.030880
Forward: 1.25s

Saving...
Total: 1.55s

[Epoch 229]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0848][DIV: 0.1259][GRAD: 0.1722][VORT: 0.2330][Total: 0.6159]	4.7+3.1s
[1600/8000]	[L1: 0.0903][DIV: 0.1315][GRAD: 0.1842][VORT: 0.2516][Total: 0.6576]	4.7+3.1s
[2400/8000]	[L1: 0.0936][DIV: 0.1361][GRAD: 0.1910][VORT: 0.2570][Total: 0.6779]	4.7+3.1s
[3200/8000]	[L1: 0.0922][DIV: 0.1340][GRAD: 0.1882][VORT: 0.2541][Total: 0.6686]	4.7+3.1s
[4000/8000]	[L1: 0.0926][DIV: 0.1350][GRAD: 0.1888][VORT: 0.2547][Total: 0.6712]	4.7+3.1s
[4800/8000]	[L1: 0.0924][DIV: 0.1349][GRAD: 0.1882][VORT: 0.2540][Total: 0.6694]	4.7+3.1s
[5600/8000]	[L1: 0.0915][DIV: 0.1336][GRAD: 0.1864][VORT: 0.2519][Total: 0.6633]	4.8+3.1s
[6400/8000]	[L1: 0.0915][DIV: 0.1334][GRAD: 0.1865][VORT: 0.2518][Total: 0.6633]	4.7+3.1s
[7200/8000]	[L1: 0.0912][DIV: 0.1329][GRAD: 0.1858][VORT: 0.2512][Total: 0.6611]	4.7+3.1s
[8000/8000]	[L1: 0.0906][DIV: 0.1322][GRAD: 0.1845][VORT: 0.2492][Total: 0.6565]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.095899	vorticity_error: 0.901219	mean_abs_divergence: 0.124501
[DIV2K x2]	rel_l2_error: 0.071564	vorticity_error: 1.250798	mean_abs_divergence: 0.065567
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.055686	vorticity_error: 0.912139	mean_abs_divergence: 0.032151
Forward: 1.29s

Saving...
Total: 1.59s

[Epoch 230]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0876][DIV: 0.1269][GRAD: 0.1789][VORT: 0.2394][Total: 0.6329]	4.7+3.1s
[1600/8000]	[L1: 0.0910][DIV: 0.1326][GRAD: 0.1859][VORT: 0.2480][Total: 0.6574]	4.7+3.1s
[2400/8000]	[L1: 0.0936][DIV: 0.1353][GRAD: 0.1910][VORT: 0.2545][Total: 0.6744]	4.7+3.1s
[3200/8000]	[L1: 0.0910][DIV: 0.1324][GRAD: 0.1857][VORT: 0.2480][Total: 0.6571]	4.7+3.1s
[4000/8000]	[L1: 0.0899][DIV: 0.1312][GRAD: 0.1833][VORT: 0.2456][Total: 0.6500]	4.7+3.1s
[4800/8000]	[L1: 0.0905][DIV: 0.1326][GRAD: 0.1847][VORT: 0.2470][Total: 0.6547]	4.7+3.1s
[5600/8000]	[L1: 0.0904][DIV: 0.1326][GRAD: 0.1842][VORT: 0.2465][Total: 0.6537]	4.7+3.1s
[6400/8000]	[L1: 0.0900][DIV: 0.1322][GRAD: 0.1835][VORT: 0.2457][Total: 0.6514]	4.7+3.1s
[7200/8000]	[L1: 0.0899][DIV: 0.1319][GRAD: 0.1833][VORT: 0.2462][Total: 0.6512]	4.7+3.1s
[8000/8000]	[L1: 0.0897][DIV: 0.1318][GRAD: 0.1831][VORT: 0.2462][Total: 0.6509]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.086813	vorticity_error: 0.842847	mean_abs_divergence: 0.125181
[DIV2K x2]	rel_l2_error: 0.067212	vorticity_error: 0.827390	mean_abs_divergence: 0.064583
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.052903	vorticity_error: 0.783697	mean_abs_divergence: 0.031083
Forward: 1.30s

Saving...
Total: 1.62s

[Epoch 231]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0932][DIV: 0.1354][GRAD: 0.1893][VORT: 0.2564][Total: 0.6743]	4.7+3.1s
[1600/8000]	[L1: 0.0905][DIV: 0.1325][GRAD: 0.1839][VORT: 0.2487][Total: 0.6555]	4.7+3.1s
[2400/8000]	[L1: 0.0884][DIV: 0.1293][GRAD: 0.1794][VORT: 0.2445][Total: 0.6416]	4.7+3.1s
[3200/8000]	[L1: 0.0876][DIV: 0.1284][GRAD: 0.1778][VORT: 0.2404][Total: 0.6343]	4.7+3.1s
[4000/8000]	[L1: 0.0879][DIV: 0.1286][GRAD: 0.1783][VORT: 0.2413][Total: 0.6360]	4.7+3.1s
[4800/8000]	[L1: 0.0894][DIV: 0.1303][GRAD: 0.1815][VORT: 0.2453][Total: 0.6465]	4.7+3.1s
[5600/8000]	[L1: 0.0896][DIV: 0.1307][GRAD: 0.1819][VORT: 0.2456][Total: 0.6478]	4.7+3.1s
[6400/8000]	[L1: 0.0889][DIV: 0.1300][GRAD: 0.1808][VORT: 0.2449][Total: 0.6446]	4.7+3.1s
[7200/8000]	[L1: 0.0885][DIV: 0.1296][GRAD: 0.1800][VORT: 0.2432][Total: 0.6412]	4.7+3.1s
[8000/8000]	[L1: 0.0888][DIV: 0.1299][GRAD: 0.1806][VORT: 0.2440][Total: 0.6433]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.072956	vorticity_error: 0.667171	mean_abs_divergence: 0.110215
[DIV2K x2]	rel_l2_error: 0.052861	vorticity_error: 0.757635	mean_abs_divergence: 0.059389
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.040569	vorticity_error: 0.633892	mean_abs_divergence: 0.029679
Forward: 1.25s

Saving...
Total: 1.56s

[Epoch 232]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0938][DIV: 0.1367][GRAD: 0.1905][VORT: 0.2556][Total: 0.6765]	4.7+3.1s
[1600/8000]	[L1: 0.0938][DIV: 0.1362][GRAD: 0.1911][VORT: 0.2567][Total: 0.6777]	4.7+3.1s
[2400/8000]	[L1: 0.0933][DIV: 0.1352][GRAD: 0.1895][VORT: 0.2533][Total: 0.6713]	4.7+3.1s
[3200/8000]	[L1: 0.0944][DIV: 0.1370][GRAD: 0.1919][VORT: 0.2561][Total: 0.6794]	4.7+3.1s
[4000/8000]	[L1: 0.0938][DIV: 0.1362][GRAD: 0.1909][VORT: 0.2550][Total: 0.6760]	4.7+3.1s
[4800/8000]	[L1: 0.0931][DIV: 0.1355][GRAD: 0.1893][VORT: 0.2531][Total: 0.6709]	4.7+3.1s
[5600/8000]	[L1: 0.0924][DIV: 0.1344][GRAD: 0.1879][VORT: 0.2526][Total: 0.6672]	4.7+3.1s
[6400/8000]	[L1: 0.0926][DIV: 0.1349][GRAD: 0.1884][VORT: 0.2525][Total: 0.6684]	4.7+3.1s
[7200/8000]	[L1: 0.0922][DIV: 0.1346][GRAD: 0.1874][VORT: 0.2507][Total: 0.6649]	4.7+3.1s
[8000/8000]	[L1: 0.0920][DIV: 0.1346][GRAD: 0.1870][VORT: 0.2496][Total: 0.6632]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.081066	vorticity_error: 0.724206	mean_abs_divergence: 0.138187
[DIV2K x2]	rel_l2_error: 0.066227	vorticity_error: 0.738825	mean_abs_divergence: 0.074047
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044713	vorticity_error: 0.603746	mean_abs_divergence: 0.036741
Forward: 1.27s

Saving...
Total: 1.57s

[Epoch 233]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0921][DIV: 0.1332][GRAD: 0.1888][VORT: 0.2603][Total: 0.6745]	4.7+3.1s
[1600/8000]	[L1: 0.0871][DIV: 0.1275][GRAD: 0.1780][VORT: 0.2453][Total: 0.6379]	4.7+3.1s
[2400/8000]	[L1: 0.0887][DIV: 0.1297][GRAD: 0.1809][VORT: 0.2446][Total: 0.6440]	4.7+3.1s
[3200/8000]	[L1: 0.0897][DIV: 0.1310][GRAD: 0.1825][VORT: 0.2454][Total: 0.6487]	4.7+3.1s
[4000/8000]	[L1: 0.0889][DIV: 0.1299][GRAD: 0.1807][VORT: 0.2433][Total: 0.6427]	4.7+3.1s
[4800/8000]	[L1: 0.0878][DIV: 0.1287][GRAD: 0.1785][VORT: 0.2404][Total: 0.6354]	4.7+3.1s
[5600/8000]	[L1: 0.0881][DIV: 0.1296][GRAD: 0.1790][VORT: 0.2403][Total: 0.6370]	4.7+3.1s
[6400/8000]	[L1: 0.0877][DIV: 0.1290][GRAD: 0.1782][VORT: 0.2393][Total: 0.6342]	4.7+3.1s
[7200/8000]	[L1: 0.0878][DIV: 0.1291][GRAD: 0.1784][VORT: 0.2402][Total: 0.6355]	4.7+3.1s
[8000/8000]	[L1: 0.0877][DIV: 0.1289][GRAD: 0.1783][VORT: 0.2406][Total: 0.6354]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.079905	vorticity_error: 0.570469	mean_abs_divergence: 0.093425
[DIV2K x2]	rel_l2_error: 0.057114	vorticity_error: 0.593494	mean_abs_divergence: 0.049633
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.041111	vorticity_error: 0.491984	mean_abs_divergence: 0.024058
Forward: 1.25s

Saving...
Total: 1.55s

[Epoch 234]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0820][DIV: 0.1221][GRAD: 0.1663][VORT: 0.2232][Total: 0.5935]	4.7+3.1s
[1600/8000]	[L1: 0.0865][DIV: 0.1280][GRAD: 0.1762][VORT: 0.2358][Total: 0.6265]	4.7+3.1s
[2400/8000]	[L1: 0.0861][DIV: 0.1273][GRAD: 0.1750][VORT: 0.2348][Total: 0.6232]	4.7+3.1s
[3200/8000]	[L1: 0.0868][DIV: 0.1272][GRAD: 0.1762][VORT: 0.2383][Total: 0.6284]	4.7+3.1s
[4000/8000]	[L1: 0.0870][DIV: 0.1274][GRAD: 0.1768][VORT: 0.2391][Total: 0.6304]	4.7+3.1s
[4800/8000]	[L1: 0.0872][DIV: 0.1279][GRAD: 0.1772][VORT: 0.2394][Total: 0.6318]	4.7+3.1s
[5600/8000]	[L1: 0.0875][DIV: 0.1282][GRAD: 0.1777][VORT: 0.2393][Total: 0.6326]	4.7+3.1s
[6400/8000]	[L1: 0.0876][DIV: 0.1286][GRAD: 0.1779][VORT: 0.2396][Total: 0.6337]	4.7+3.1s
[7200/8000]	[L1: 0.0881][DIV: 0.1295][GRAD: 0.1788][VORT: 0.2400][Total: 0.6364]	4.7+3.1s
[8000/8000]	[L1: 0.0890][DIV: 0.1307][GRAD: 0.1808][VORT: 0.2430][Total: 0.6435]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.078461	vorticity_error: 0.737387	mean_abs_divergence: 0.127168
[DIV2K x2]	rel_l2_error: 0.067639	vorticity_error: 0.756505	mean_abs_divergence: 0.065781
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.049552	vorticity_error: 0.629112	mean_abs_divergence: 0.031839
Forward: 1.28s

Saving...
Total: 1.59s

[Epoch 235]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0886][DIV: 0.1315][GRAD: 0.1799][VORT: 0.2416][Total: 0.6416]	4.7+3.1s
[1600/8000]	[L1: 0.0917][DIV: 0.1345][GRAD: 0.1866][VORT: 0.2499][Total: 0.6627]	4.7+3.1s
[2400/8000]	[L1: 0.0920][DIV: 0.1349][GRAD: 0.1874][VORT: 0.2513][Total: 0.6656]	4.7+3.1s
[3200/8000]	[L1: 0.0923][DIV: 0.1348][GRAD: 0.1880][VORT: 0.2519][Total: 0.6670]	4.7+3.1s
[4000/8000]	[L1: 0.0923][DIV: 0.1349][GRAD: 0.1880][VORT: 0.2525][Total: 0.6677]	4.7+3.1s
[4800/8000]	[L1: 0.0902][DIV: 0.1322][GRAD: 0.1836][VORT: 0.2463][Total: 0.6523]	4.7+3.1s
[5600/8000]	[L1: 0.0907][DIV: 0.1328][GRAD: 0.1848][VORT: 0.2474][Total: 0.6557]	4.7+3.1s
[6400/8000]	[L1: 0.0907][DIV: 0.1328][GRAD: 0.1847][VORT: 0.2479][Total: 0.6561]	4.7+3.1s
[7200/8000]	[L1: 0.0906][DIV: 0.1327][GRAD: 0.1846][VORT: 0.2482][Total: 0.6561]	4.8+3.1s
[8000/8000]	[L1: 0.0904][DIV: 0.1321][GRAD: 0.1841][VORT: 0.2479][Total: 0.6544]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.072291	vorticity_error: 0.749044	mean_abs_divergence: 0.122901
[DIV2K x2]	rel_l2_error: 0.061988	vorticity_error: 0.756134	mean_abs_divergence: 0.065481
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042765	vorticity_error: 0.733762	mean_abs_divergence: 0.031748
Forward: 1.24s

Saving...
Total: 1.54s

[Epoch 236]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0854][DIV: 0.1251][GRAD: 0.1722][VORT: 0.2220][Total: 0.6048]	4.7+3.1s
[1600/8000]	[L1: 0.0864][DIV: 0.1258][GRAD: 0.1756][VORT: 0.2342][Total: 0.6221]	4.7+3.1s
[2400/8000]	[L1: 0.0875][DIV: 0.1279][GRAD: 0.1780][VORT: 0.2391][Total: 0.6324]	4.7+3.1s
[3200/8000]	[L1: 0.0885][DIV: 0.1293][GRAD: 0.1795][VORT: 0.2384][Total: 0.6356]	4.7+3.1s
[4000/8000]	[L1: 0.0884][DIV: 0.1295][GRAD: 0.1793][VORT: 0.2397][Total: 0.6369]	4.7+3.1s
[4800/8000]	[L1: 0.0894][DIV: 0.1304][GRAD: 0.1813][VORT: 0.2424][Total: 0.6435]	4.7+3.1s
[5600/8000]	[L1: 0.0892][DIV: 0.1300][GRAD: 0.1807][VORT: 0.2414][Total: 0.6412]	4.7+3.1s
[6400/8000]	[L1: 0.0888][DIV: 0.1296][GRAD: 0.1800][VORT: 0.2401][Total: 0.6385]	4.7+3.1s
[7200/8000]	[L1: 0.0898][DIV: 0.1308][GRAD: 0.1820][VORT: 0.2427][Total: 0.6453]	4.8+3.1s
[8000/8000]	[L1: 0.0906][DIV: 0.1322][GRAD: 0.1837][VORT: 0.2442][Total: 0.6506]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.083596	vorticity_error: 0.757517	mean_abs_divergence: 0.105568
[DIV2K x2]	rel_l2_error: 0.057903	vorticity_error: 0.793330	mean_abs_divergence: 0.057819
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045196	vorticity_error: 0.687264	mean_abs_divergence: 0.029245
Forward: 1.31s

Saving...
Total: 1.62s

[Epoch 237]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0934][DIV: 0.1334][GRAD: 0.1899][VORT: 0.2564][Total: 0.6731]	4.7+3.1s
[1600/8000]	[L1: 0.0939][DIV: 0.1356][GRAD: 0.1905][VORT: 0.2570][Total: 0.6770]	4.7+3.1s
[2400/8000]	[L1: 0.0897][DIV: 0.1310][GRAD: 0.1820][VORT: 0.2457][Total: 0.6483]	4.7+3.1s
[3200/8000]	[L1: 0.0910][DIV: 0.1328][GRAD: 0.1849][VORT: 0.2498][Total: 0.6585]	4.7+3.1s
[4000/8000]	[L1: 0.0916][DIV: 0.1337][GRAD: 0.1861][VORT: 0.2508][Total: 0.6621]	4.7+3.1s
[4800/8000]	[L1: 0.0918][DIV: 0.1338][GRAD: 0.1867][VORT: 0.2513][Total: 0.6636]	4.7+3.1s
[5600/8000]	[L1: 0.0913][DIV: 0.1335][GRAD: 0.1857][VORT: 0.2499][Total: 0.6604]	4.7+3.1s
[6400/8000]	[L1: 0.0915][DIV: 0.1337][GRAD: 0.1859][VORT: 0.2497][Total: 0.6608]	4.7+3.1s
[7200/8000]	[L1: 0.0913][DIV: 0.1335][GRAD: 0.1855][VORT: 0.2497][Total: 0.6599]	4.7+3.1s
[8000/8000]	[L1: 0.0916][DIV: 0.1337][GRAD: 0.1861][VORT: 0.2508][Total: 0.6623]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.070549	vorticity_error: 1.071337	mean_abs_divergence: 0.117337
[DIV2K x2]	rel_l2_error: 0.052021	vorticity_error: 1.245897	mean_abs_divergence: 0.060800
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.041744	vorticity_error: 1.099076	mean_abs_divergence: 0.030057
Forward: 1.25s

Saving...
Total: 1.56s

[Epoch 238]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0800][DIV: 0.1181][GRAD: 0.1632][VORT: 0.2222][Total: 0.5836]	4.7+3.1s
[1600/8000]	[L1: 0.0848][DIV: 0.1243][GRAD: 0.1730][VORT: 0.2377][Total: 0.6198]	4.7+3.1s
[2400/8000]	[L1: 0.0852][DIV: 0.1244][GRAD: 0.1735][VORT: 0.2390][Total: 0.6222]	4.7+3.1s
[3200/8000]	[L1: 0.0871][DIV: 0.1276][GRAD: 0.1774][VORT: 0.2412][Total: 0.6332]	4.7+3.1s
[4000/8000]	[L1: 0.0874][DIV: 0.1280][GRAD: 0.1782][VORT: 0.2409][Total: 0.6345]	4.7+3.1s
[4800/8000]	[L1: 0.0877][DIV: 0.1284][GRAD: 0.1789][VORT: 0.2423][Total: 0.6373]	4.7+3.1s
[5600/8000]	[L1: 0.0885][DIV: 0.1295][GRAD: 0.1804][VORT: 0.2440][Total: 0.6426]	4.7+3.1s
[6400/8000]	[L1: 0.0881][DIV: 0.1288][GRAD: 0.1796][VORT: 0.2439][Total: 0.6403]	4.7+3.1s
[7200/8000]	[L1: 0.0881][DIV: 0.1290][GRAD: 0.1796][VORT: 0.2439][Total: 0.6406]	4.7+3.1s
[8000/8000]	[L1: 0.0882][DIV: 0.1290][GRAD: 0.1798][VORT: 0.2452][Total: 0.6421]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.081737	vorticity_error: 1.004186	mean_abs_divergence: 0.116572
[DIV2K x2]	rel_l2_error: 0.063145	vorticity_error: 1.079977	mean_abs_divergence: 0.060280
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044880	vorticity_error: 1.144164	mean_abs_divergence: 0.029247
Forward: 1.31s

Saving...
Total: 1.62s

[Epoch 239]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0888][DIV: 0.1310][GRAD: 0.1806][VORT: 0.2371][Total: 0.6375]	4.7+3.1s
[1600/8000]	[L1: 0.0916][DIV: 0.1335][GRAD: 0.1862][VORT: 0.2475][Total: 0.6589]	4.7+3.1s
[2400/8000]	[L1: 0.0927][DIV: 0.1347][GRAD: 0.1883][VORT: 0.2484][Total: 0.6641]	4.7+3.1s
[3200/8000]	[L1: 0.0924][DIV: 0.1353][GRAD: 0.1877][VORT: 0.2496][Total: 0.6650]	4.7+3.1s
[4000/8000]	[L1: 0.0901][DIV: 0.1321][GRAD: 0.1830][VORT: 0.2444][Total: 0.6496]	4.7+3.1s
[4800/8000]	[L1: 0.0906][DIV: 0.1324][GRAD: 0.1842][VORT: 0.2465][Total: 0.6536]	4.7+3.1s
[5600/8000]	[L1: 0.0902][DIV: 0.1319][GRAD: 0.1834][VORT: 0.2456][Total: 0.6512]	4.7+3.1s
[6400/8000]	[L1: 0.0909][DIV: 0.1327][GRAD: 0.1848][VORT: 0.2475][Total: 0.6559]	4.9+3.2s
[7200/8000]	[L1: 0.0906][DIV: 0.1323][GRAD: 0.1842][VORT: 0.2464][Total: 0.6534]	4.9+3.3s
[8000/8000]	[L1: 0.0906][DIV: 0.1322][GRAD: 0.1842][VORT: 0.2466][Total: 0.6535]	4.7+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.075613	vorticity_error: 2.418051	mean_abs_divergence: 0.116065
[DIV2K x2]	rel_l2_error: 0.057426	vorticity_error: 0.966331	mean_abs_divergence: 0.061064
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.041958	vorticity_error: 0.843255	mean_abs_divergence: 0.029756
Forward: 1.31s

Saving...
Total: 1.67s

[Epoch 240]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0879][DIV: 0.1279][GRAD: 0.1788][VORT: 0.2459][Total: 0.6405]	4.7+3.1s
[1600/8000]	[L1: 0.0898][DIV: 0.1298][GRAD: 0.1825][VORT: 0.2504][Total: 0.6526]	4.7+3.1s
[2400/8000]	[L1: 0.0891][DIV: 0.1302][GRAD: 0.1807][VORT: 0.2463][Total: 0.6463]	4.7+3.1s
[3200/8000]	[L1: 0.0896][DIV: 0.1310][GRAD: 0.1819][VORT: 0.2468][Total: 0.6493]	4.7+3.1s
[4000/8000]	[L1: 0.0904][DIV: 0.1317][GRAD: 0.1836][VORT: 0.2500][Total: 0.6557]	4.7+3.1s
[4800/8000]	[L1: 0.0907][DIV: 0.1321][GRAD: 0.1844][VORT: 0.2512][Total: 0.6584]	4.7+3.1s
[5600/8000]	[L1: 0.0912][DIV: 0.1324][GRAD: 0.1852][VORT: 0.2518][Total: 0.6605]	4.7+3.1s
[6400/8000]	[L1: 0.0913][DIV: 0.1327][GRAD: 0.1856][VORT: 0.2517][Total: 0.6613]	4.7+3.1s
[7200/8000]	[L1: 0.0904][DIV: 0.1317][GRAD: 0.1837][VORT: 0.2491][Total: 0.6550]	4.7+3.1s
[8000/8000]	[L1: 0.0908][DIV: 0.1323][GRAD: 0.1846][VORT: 0.2501][Total: 0.6577]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.077772	vorticity_error: 0.937691	mean_abs_divergence: 0.113612
[DIV2K x2]	rel_l2_error: 0.061411	vorticity_error: 0.906948	mean_abs_divergence: 0.059623
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048469	vorticity_error: 0.908001	mean_abs_divergence: 0.029432
Forward: 1.31s

Saving...
Total: 1.70s

[Epoch 241]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0923][DIV: 0.1357][GRAD: 0.1868][VORT: 0.2450][Total: 0.6599]	4.7+3.1s
[1600/8000]	[L1: 0.0948][DIV: 0.1383][GRAD: 0.1925][VORT: 0.2548][Total: 0.6804]	4.7+3.1s
[2400/8000]	[L1: 0.0925][DIV: 0.1352][GRAD: 0.1874][VORT: 0.2459][Total: 0.6610]	4.7+3.1s
[3200/8000]	[L1: 0.0918][DIV: 0.1340][GRAD: 0.1860][VORT: 0.2451][Total: 0.6568]	4.7+3.1s
[4000/8000]	[L1: 0.0923][DIV: 0.1348][GRAD: 0.1874][VORT: 0.2480][Total: 0.6625]	4.7+3.1s
[4800/8000]	[L1: 0.0912][DIV: 0.1330][GRAD: 0.1849][VORT: 0.2455][Total: 0.6546]	4.7+3.1s
[5600/8000]	[L1: 0.0896][DIV: 0.1310][GRAD: 0.1819][VORT: 0.2417][Total: 0.6441]	4.7+3.1s
[6400/8000]	[L1: 0.0890][DIV: 0.1302][GRAD: 0.1805][VORT: 0.2402][Total: 0.6399]	4.7+3.1s
[7200/8000]	[L1: 0.0888][DIV: 0.1296][GRAD: 0.1802][VORT: 0.2405][Total: 0.6390]	4.7+3.1s
[8000/8000]	[L1: 0.0886][DIV: 0.1295][GRAD: 0.1799][VORT: 0.2410][Total: 0.6390]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.110224	vorticity_error: 0.970351	mean_abs_divergence: 0.140724
[DIV2K x2]	rel_l2_error: 0.081486	vorticity_error: 0.974984	mean_abs_divergence: 0.075081
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.055922	vorticity_error: 0.907325	mean_abs_divergence: 0.036928
Forward: 1.25s

Saving...
Total: 1.62s

[Epoch 242]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0848][DIV: 0.1234][GRAD: 0.1735][VORT: 0.2398][Total: 0.6215]	4.7+3.1s
[1600/8000]	[L1: 0.0889][DIV: 0.1300][GRAD: 0.1812][VORT: 0.2430][Total: 0.6432]	4.7+3.1s
[2400/8000]	[L1: 0.0882][DIV: 0.1292][GRAD: 0.1795][VORT: 0.2404][Total: 0.6373]	4.7+3.1s
[3200/8000]	[L1: 0.0875][DIV: 0.1284][GRAD: 0.1780][VORT: 0.2380][Total: 0.6320]	4.7+3.1s
[4000/8000]	[L1: 0.0875][DIV: 0.1287][GRAD: 0.1779][VORT: 0.2381][Total: 0.6322]	4.7+3.1s
[4800/8000]	[L1: 0.0882][DIV: 0.1296][GRAD: 0.1793][VORT: 0.2406][Total: 0.6376]	4.7+3.1s
[5600/8000]	[L1: 0.0883][DIV: 0.1295][GRAD: 0.1794][VORT: 0.2406][Total: 0.6377]	4.7+3.1s
[6400/8000]	[L1: 0.0886][DIV: 0.1297][GRAD: 0.1801][VORT: 0.2415][Total: 0.6399]	4.7+3.1s
[7200/8000]	[L1: 0.0884][DIV: 0.1295][GRAD: 0.1799][VORT: 0.2424][Total: 0.6403]	4.7+3.1s
[8000/8000]	[L1: 0.0879][DIV: 0.1289][GRAD: 0.1788][VORT: 0.2412][Total: 0.6369]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.101873	vorticity_error: 0.781202	mean_abs_divergence: 0.136051
[DIV2K x2]	rel_l2_error: 0.076196	vorticity_error: 0.809981	mean_abs_divergence: 0.071668
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.051167	vorticity_error: 0.781635	mean_abs_divergence: 0.034996
Forward: 1.27s

Saving...
Total: 1.59s

[Epoch 243]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0849][DIV: 0.1253][GRAD: 0.1725][VORT: 0.2332][Total: 0.6160]	4.8+3.1s
[1600/8000]	[L1: 0.0872][DIV: 0.1288][GRAD: 0.1774][VORT: 0.2387][Total: 0.6321]	4.7+3.1s
[2400/8000]	[L1: 0.0871][DIV: 0.1285][GRAD: 0.1773][VORT: 0.2402][Total: 0.6331]	4.7+3.1s
[3200/8000]	[L1: 0.0870][DIV: 0.1285][GRAD: 0.1766][VORT: 0.2381][Total: 0.6303]	4.7+3.1s
[4000/8000]	[L1: 0.0884][DIV: 0.1297][GRAD: 0.1797][VORT: 0.2429][Total: 0.6407]	4.7+3.1s
[4800/8000]	[L1: 0.0874][DIV: 0.1288][GRAD: 0.1774][VORT: 0.2397][Total: 0.6332]	4.7+3.1s
[5600/8000]	[L1: 0.0875][DIV: 0.1293][GRAD: 0.1776][VORT: 0.2393][Total: 0.6336]	4.7+3.1s
[6400/8000]	[L1: 0.0884][DIV: 0.1306][GRAD: 0.1795][VORT: 0.2409][Total: 0.6394]	4.7+3.1s
[7200/8000]	[L1: 0.0880][DIV: 0.1301][GRAD: 0.1787][VORT: 0.2408][Total: 0.6376]	4.7+3.1s
[8000/8000]	[L1: 0.0883][DIV: 0.1303][GRAD: 0.1794][VORT: 0.2417][Total: 0.6398]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.094966	vorticity_error: 0.655283	mean_abs_divergence: 0.132691
[DIV2K x2]	rel_l2_error: 0.069429	vorticity_error: 0.635398	mean_abs_divergence: 0.072969
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.053187	vorticity_error: 0.585511	mean_abs_divergence: 0.035794
Forward: 1.32s

Saving...
Total: 1.64s

[Epoch 244]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0924][DIV: 0.1362][GRAD: 0.1885][VORT: 0.2633][Total: 0.6804]	4.8+3.0s
[1600/8000]	[L1: 0.0885][DIV: 0.1311][GRAD: 0.1806][VORT: 0.2466][Total: 0.6469]	4.7+3.1s
[2400/8000]	[L1: 0.0902][DIV: 0.1324][GRAD: 0.1838][VORT: 0.2489][Total: 0.6553]	4.7+3.1s
[3200/8000]	[L1: 0.0888][DIV: 0.1301][GRAD: 0.1807][VORT: 0.2456][Total: 0.6451]	4.7+3.1s
[4000/8000]	[L1: 0.0894][DIV: 0.1307][GRAD: 0.1818][VORT: 0.2466][Total: 0.6485]	4.7+3.1s
[4800/8000]	[L1: 0.0901][DIV: 0.1315][GRAD: 0.1832][VORT: 0.2480][Total: 0.6529]	4.7+3.1s
[5600/8000]	[L1: 0.0893][DIV: 0.1303][GRAD: 0.1816][VORT: 0.2461][Total: 0.6473]	4.7+3.1s
[6400/8000]	[L1: 0.0882][DIV: 0.1289][GRAD: 0.1792][VORT: 0.2420][Total: 0.6383]	4.7+3.1s
[7200/8000]	[L1: 0.0886][DIV: 0.1295][GRAD: 0.1801][VORT: 0.2432][Total: 0.6413]	4.7+3.1s
[8000/8000]	[L1: 0.0889][DIV: 0.1299][GRAD: 0.1809][VORT: 0.2440][Total: 0.6437]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.080965	vorticity_error: 0.831657	mean_abs_divergence: 0.131544
[DIV2K x2]	rel_l2_error: 0.061853	vorticity_error: 1.036066	mean_abs_divergence: 0.069804
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044641	vorticity_error: 0.836209	mean_abs_divergence: 0.034458
Forward: 1.31s

Saving...
Total: 1.63s

[Epoch 245]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0966][DIV: 0.1393][GRAD: 0.1961][VORT: 0.2623][Total: 0.6942]	4.8+3.0s
[1600/8000]	[L1: 0.0948][DIV: 0.1363][GRAD: 0.1932][VORT: 0.2593][Total: 0.6836]	4.7+3.1s
[2400/8000]	[L1: 0.0952][DIV: 0.1373][GRAD: 0.1936][VORT: 0.2564][Total: 0.6825]	4.7+3.1s
[3200/8000]	[L1: 0.0956][DIV: 0.1379][GRAD: 0.1939][VORT: 0.2552][Total: 0.6826]	4.7+3.1s
[4000/8000]	[L1: 0.0946][DIV: 0.1367][GRAD: 0.1919][VORT: 0.2539][Total: 0.6771]	4.7+3.1s
[4800/8000]	[L1: 0.0940][DIV: 0.1357][GRAD: 0.1907][VORT: 0.2529][Total: 0.6732]	4.7+3.1s
[5600/8000]	[L1: 0.0941][DIV: 0.1360][GRAD: 0.1911][VORT: 0.2529][Total: 0.6740]	4.7+3.1s
[6400/8000]	[L1: 0.0938][DIV: 0.1354][GRAD: 0.1905][VORT: 0.2529][Total: 0.6727]	4.7+3.1s
[7200/8000]	[L1: 0.0929][DIV: 0.1343][GRAD: 0.1885][VORT: 0.2507][Total: 0.6664]	4.7+3.1s
[8000/8000]	[L1: 0.0924][DIV: 0.1338][GRAD: 0.1875][VORT: 0.2488][Total: 0.6626]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.072690	vorticity_error: 1.020692	mean_abs_divergence: 0.115031
[DIV2K x2]	rel_l2_error: 0.066557	vorticity_error: 0.862673	mean_abs_divergence: 0.060709
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.049503	vorticity_error: 0.850069	mean_abs_divergence: 0.029446
Forward: 1.29s

Saving...
Total: 1.60s

[Epoch 246]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0860][DIV: 0.1262][GRAD: 0.1742][VORT: 0.2326][Total: 0.6190]	4.7+3.1s
[1600/8000]	[L1: 0.0865][DIV: 0.1265][GRAD: 0.1753][VORT: 0.2366][Total: 0.6249]	4.7+3.1s
[2400/8000]	[L1: 0.0867][DIV: 0.1271][GRAD: 0.1759][VORT: 0.2377][Total: 0.6275]	4.7+3.1s
[3200/8000]	[L1: 0.0894][DIV: 0.1305][GRAD: 0.1818][VORT: 0.2460][Total: 0.6476]	4.7+3.1s
[4000/8000]	[L1: 0.0902][DIV: 0.1316][GRAD: 0.1834][VORT: 0.2472][Total: 0.6524]	4.7+3.1s
[4800/8000]	[L1: 0.0912][DIV: 0.1328][GRAD: 0.1853][VORT: 0.2487][Total: 0.6580]	4.7+3.1s
[5600/8000]	[L1: 0.0910][DIV: 0.1325][GRAD: 0.1850][VORT: 0.2489][Total: 0.6574]	4.7+3.1s
[6400/8000]	[L1: 0.0910][DIV: 0.1322][GRAD: 0.1850][VORT: 0.2492][Total: 0.6574]	4.7+3.1s
[7200/8000]	[L1: 0.0898][DIV: 0.1306][GRAD: 0.1825][VORT: 0.2456][Total: 0.6485]	4.7+3.1s
[8000/8000]	[L1: 0.0893][DIV: 0.1299][GRAD: 0.1815][VORT: 0.2447][Total: 0.6454]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.058122	vorticity_error: 0.959217	mean_abs_divergence: 0.092830
[DIV2K x2]	rel_l2_error: 0.054476	vorticity_error: 0.923569	mean_abs_divergence: 0.048212
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042249	vorticity_error: 1.027853	mean_abs_divergence: 0.023382
Forward: 1.25s

Saving...
Total: 1.56s

[Epoch 247]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0862][DIV: 0.1283][GRAD: 0.1757][VORT: 0.2331][Total: 0.6234]	4.8+3.0s
[1600/8000]	[L1: 0.0896][DIV: 0.1319][GRAD: 0.1828][VORT: 0.2417][Total: 0.6460]	4.7+3.1s
[2400/8000]	[L1: 0.0893][DIV: 0.1308][GRAD: 0.1819][VORT: 0.2417][Total: 0.6437]	4.7+3.1s
[3200/8000]	[L1: 0.0900][DIV: 0.1316][GRAD: 0.1834][VORT: 0.2453][Total: 0.6503]	4.7+3.1s
[4000/8000]	[L1: 0.0899][DIV: 0.1316][GRAD: 0.1829][VORT: 0.2442][Total: 0.6486]	4.7+3.1s
[4800/8000]	[L1: 0.0887][DIV: 0.1299][GRAD: 0.1804][VORT: 0.2418][Total: 0.6408]	4.7+3.1s
[5600/8000]	[L1: 0.0877][DIV: 0.1284][GRAD: 0.1782][VORT: 0.2381][Total: 0.6325]	4.7+3.1s
[6400/8000]	[L1: 0.0893][DIV: 0.1304][GRAD: 0.1814][VORT: 0.2423][Total: 0.6434]	4.7+3.1s
[7200/8000]	[L1: 0.0890][DIV: 0.1302][GRAD: 0.1809][VORT: 0.2423][Total: 0.6424]	4.7+3.1s
[8000/8000]	[L1: 0.0889][DIV: 0.1301][GRAD: 0.1809][VORT: 0.2429][Total: 0.6428]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.071137	vorticity_error: 0.843969	mean_abs_divergence: 0.118561
[DIV2K x2]	rel_l2_error: 0.059106	vorticity_error: 0.659649	mean_abs_divergence: 0.064981
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.041845	vorticity_error: 0.662106	mean_abs_divergence: 0.031963
Forward: 1.30s

Saving...
Total: 1.60s

[Epoch 248]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0922][DIV: 0.1336][GRAD: 0.1889][VORT: 0.2530][Total: 0.6677]	4.7+3.1s
[1600/8000]	[L1: 0.0930][DIV: 0.1343][GRAD: 0.1901][VORT: 0.2562][Total: 0.6737]	4.8+3.1s
[2400/8000]	[L1: 0.0913][DIV: 0.1323][GRAD: 0.1864][VORT: 0.2531][Total: 0.6631]	4.7+3.1s
[3200/8000]	[L1: 0.0916][DIV: 0.1326][GRAD: 0.1872][VORT: 0.2558][Total: 0.6671]	4.7+3.1s
[4000/8000]	[L1: 0.0913][DIV: 0.1324][GRAD: 0.1862][VORT: 0.2552][Total: 0.6651]	4.7+3.1s
[4800/8000]	[L1: 0.0904][DIV: 0.1309][GRAD: 0.1846][VORT: 0.2525][Total: 0.6584]	4.7+3.1s
[5600/8000]	[L1: 0.0913][DIV: 0.1323][GRAD: 0.1864][VORT: 0.2534][Total: 0.6635]	4.7+3.1s
[6400/8000]	[L1: 0.0911][DIV: 0.1318][GRAD: 0.1859][VORT: 0.2523][Total: 0.6612]	4.7+3.1s
[7200/8000]	[L1: 0.0907][DIV: 0.1313][GRAD: 0.1849][VORT: 0.2494][Total: 0.6564]	4.7+3.1s
[8000/8000]	[L1: 0.0909][DIV: 0.1318][GRAD: 0.1852][VORT: 0.2499][Total: 0.6577]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.090631	vorticity_error: 1.000472	mean_abs_divergence: 0.132750
[DIV2K x2]	rel_l2_error: 0.067788	vorticity_error: 1.466055	mean_abs_divergence: 0.070260
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.051751	vorticity_error: 1.543599	mean_abs_divergence: 0.034200
Forward: 1.32s

Saving...
Total: 1.64s

[Epoch 249]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0802][DIV: 0.1186][GRAD: 0.1630][VORT: 0.2254][Total: 0.5872]	4.7+3.1s
[1600/8000]	[L1: 0.0827][DIV: 0.1221][GRAD: 0.1682][VORT: 0.2343][Total: 0.6073]	4.7+3.1s
[2400/8000]	[L1: 0.0810][DIV: 0.1204][GRAD: 0.1650][VORT: 0.2296][Total: 0.5960]	4.7+3.1s
[3200/8000]	[L1: 0.0835][DIV: 0.1232][GRAD: 0.1700][VORT: 0.2333][Total: 0.6101]	4.7+3.1s
[4000/8000]	[L1: 0.0848][DIV: 0.1248][GRAD: 0.1726][VORT: 0.2362][Total: 0.6184]	4.7+3.1s
[4800/8000]	[L1: 0.0861][DIV: 0.1265][GRAD: 0.1753][VORT: 0.2396][Total: 0.6276]	4.7+3.1s
[5600/8000]	[L1: 0.0869][DIV: 0.1276][GRAD: 0.1770][VORT: 0.2398][Total: 0.6313]	4.7+3.1s
[6400/8000]	[L1: 0.0878][DIV: 0.1287][GRAD: 0.1790][VORT: 0.2422][Total: 0.6377]	4.7+3.1s
[7200/8000]	[L1: 0.0878][DIV: 0.1289][GRAD: 0.1789][VORT: 0.2420][Total: 0.6377]	4.7+3.1s
[8000/8000]	[L1: 0.0888][DIV: 0.1300][GRAD: 0.1808][VORT: 0.2443][Total: 0.6438]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.074177	vorticity_error: 1.033441	mean_abs_divergence: 0.094210
[DIV2K x2]	rel_l2_error: 0.056455	vorticity_error: 0.919791	mean_abs_divergence: 0.049373
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045565	vorticity_error: 0.967554	mean_abs_divergence: 0.024269
Forward: 1.31s

Saving...
Total: 1.62s

[Epoch 250]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0865][DIV: 0.1275][GRAD: 0.1751][VORT: 0.2356][Total: 0.6247]	4.7+3.1s
[1600/8000]	[L1: 0.0841][DIV: 0.1243][GRAD: 0.1711][VORT: 0.2336][Total: 0.6130]	4.8+3.1s
[2400/8000]	[L1: 0.0845][DIV: 0.1245][GRAD: 0.1716][VORT: 0.2320][Total: 0.6126]	4.7+3.1s
[3200/8000]	[L1: 0.0861][DIV: 0.1266][GRAD: 0.1746][VORT: 0.2340][Total: 0.6213]	4.7+3.1s
[4000/8000]	[L1: 0.0874][DIV: 0.1280][GRAD: 0.1775][VORT: 0.2385][Total: 0.6314]	4.7+3.1s
[4800/8000]	[L1: 0.0873][DIV: 0.1277][GRAD: 0.1774][VORT: 0.2391][Total: 0.6315]	4.7+3.1s
[5600/8000]	[L1: 0.0877][DIV: 0.1280][GRAD: 0.1783][VORT: 0.2417][Total: 0.6356]	4.7+3.1s
[6400/8000]	[L1: 0.0871][DIV: 0.1274][GRAD: 0.1771][VORT: 0.2411][Total: 0.6327]	4.7+3.1s
[7200/8000]	[L1: 0.0863][DIV: 0.1267][GRAD: 0.1756][VORT: 0.2389][Total: 0.6274]	4.7+3.1s
[8000/8000]	[L1: 0.0861][DIV: 0.1265][GRAD: 0.1751][VORT: 0.2376][Total: 0.6252]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.064360	vorticity_error: 0.744862	mean_abs_divergence: 0.112199
[DIV2K x2]	rel_l2_error: 0.054691	vorticity_error: 0.790652	mean_abs_divergence: 0.059086
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.041480	vorticity_error: 0.724733	mean_abs_divergence: 0.029497
Forward: 1.32s

Saving...
Total: 1.63s

[Epoch 251]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0913][DIV: 0.1326][GRAD: 0.1860][VORT: 0.2573][Total: 0.6672]	4.7+3.1s
[1600/8000]	[L1: 0.0905][DIV: 0.1321][GRAD: 0.1845][VORT: 0.2519][Total: 0.6590]	4.8+3.1s
[2400/8000]	[L1: 0.0922][DIV: 0.1342][GRAD: 0.1878][VORT: 0.2543][Total: 0.6686]	4.7+3.1s
[3200/8000]	[L1: 0.0916][DIV: 0.1337][GRAD: 0.1865][VORT: 0.2522][Total: 0.6640]	4.7+3.1s
[4000/8000]	[L1: 0.0920][DIV: 0.1341][GRAD: 0.1871][VORT: 0.2516][Total: 0.6648]	4.8+3.1s
[4800/8000]	[L1: 0.0913][DIV: 0.1336][GRAD: 0.1858][VORT: 0.2494][Total: 0.6602]	4.7+3.1s
[5600/8000]	[L1: 0.0902][DIV: 0.1320][GRAD: 0.1834][VORT: 0.2464][Total: 0.6519]	4.7+3.1s
[6400/8000]	[L1: 0.0911][DIV: 0.1328][GRAD: 0.1853][VORT: 0.2495][Total: 0.6587]	4.7+3.1s
[7200/8000]	[L1: 0.0913][DIV: 0.1330][GRAD: 0.1858][VORT: 0.2499][Total: 0.6599]	4.7+3.1s
[8000/8000]	[L1: 0.0905][DIV: 0.1319][GRAD: 0.1842][VORT: 0.2480][Total: 0.6547]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.076145	vorticity_error: 0.899508	mean_abs_divergence: 0.119774
[DIV2K x2]	rel_l2_error: 0.059949	vorticity_error: 1.112073	mean_abs_divergence: 0.063836
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048618	vorticity_error: 1.023055	mean_abs_divergence: 0.031389
Forward: 1.33s

Saving...
Total: 1.64s

[Epoch 252]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0906][DIV: 0.1302][GRAD: 0.1856][VORT: 0.2552][Total: 0.6616]	4.7+3.1s
[1600/8000]	[L1: 0.0887][DIV: 0.1291][GRAD: 0.1813][VORT: 0.2510][Total: 0.6502]	4.8+3.1s
[2400/8000]	[L1: 0.0884][DIV: 0.1283][GRAD: 0.1806][VORT: 0.2485][Total: 0.6458]	4.7+3.1s
[3200/8000]	[L1: 0.0901][DIV: 0.1308][GRAD: 0.1835][VORT: 0.2499][Total: 0.6544]	4.7+3.1s
[4000/8000]	[L1: 0.0902][DIV: 0.1314][GRAD: 0.1839][VORT: 0.2505][Total: 0.6560]	4.7+3.1s
[4800/8000]	[L1: 0.0901][DIV: 0.1311][GRAD: 0.1838][VORT: 0.2501][Total: 0.6550]	4.7+3.1s
[5600/8000]	[L1: 0.0900][DIV: 0.1309][GRAD: 0.1836][VORT: 0.2503][Total: 0.6548]	4.7+3.1s
[6400/8000]	[L1: 0.0905][DIV: 0.1315][GRAD: 0.1845][VORT: 0.2510][Total: 0.6574]	4.7+3.1s
[7200/8000]	[L1: 0.0904][DIV: 0.1314][GRAD: 0.1843][VORT: 0.2508][Total: 0.6569]	4.7+3.1s
[8000/8000]	[L1: 0.0900][DIV: 0.1307][GRAD: 0.1835][VORT: 0.2502][Total: 0.6543]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.074946	vorticity_error: 0.767039	mean_abs_divergence: 0.111122
[DIV2K x2]	rel_l2_error: 0.054936	vorticity_error: 0.908345	mean_abs_divergence: 0.059668
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042514	vorticity_error: 0.740916	mean_abs_divergence: 0.029124
Forward: 1.27s

Saving...
Total: 1.58s

[Epoch 253]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0997][DIV: 0.1425][GRAD: 0.2044][VORT: 0.2801][Total: 0.7267]	4.7+3.1s
[1600/8000]	[L1: 0.0958][DIV: 0.1389][GRAD: 0.1954][VORT: 0.2655][Total: 0.6957]	4.7+3.1s
[2400/8000]	[L1: 0.0937][DIV: 0.1362][GRAD: 0.1911][VORT: 0.2595][Total: 0.6804]	4.7+3.1s
[3200/8000]	[L1: 0.0934][DIV: 0.1357][GRAD: 0.1902][VORT: 0.2577][Total: 0.6770]	4.7+3.1s
[4000/8000]	[L1: 0.0920][DIV: 0.1342][GRAD: 0.1873][VORT: 0.2539][Total: 0.6673]	4.7+3.1s
[4800/8000]	[L1: 0.0908][DIV: 0.1324][GRAD: 0.1853][VORT: 0.2525][Total: 0.6610]	4.7+3.1s
[5600/8000]	[L1: 0.0895][DIV: 0.1310][GRAD: 0.1823][VORT: 0.2475][Total: 0.6503]	4.7+3.1s
[6400/8000]	[L1: 0.0900][DIV: 0.1318][GRAD: 0.1832][VORT: 0.2486][Total: 0.6536]	4.7+3.1s
[7200/8000]	[L1: 0.0905][DIV: 0.1322][GRAD: 0.1842][VORT: 0.2497][Total: 0.6566]	4.7+3.1s
[8000/8000]	[L1: 0.0900][DIV: 0.1318][GRAD: 0.1832][VORT: 0.2477][Total: 0.6527]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.080911	vorticity_error: 1.088030	mean_abs_divergence: 0.134726
[DIV2K x2]	rel_l2_error: 0.065708	vorticity_error: 1.105061	mean_abs_divergence: 0.070375
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048364	vorticity_error: 0.970126	mean_abs_divergence: 0.034533
Forward: 1.27s

Saving...
Total: 1.58s

[Epoch 254]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0972][DIV: 0.1432][GRAD: 0.1969][VORT: 0.2567][Total: 0.6940]	4.7+3.1s
[1600/8000]	[L1: 0.0906][DIV: 0.1347][GRAD: 0.1836][VORT: 0.2410][Total: 0.6499]	4.7+3.1s
[2400/8000]	[L1: 0.0908][DIV: 0.1342][GRAD: 0.1844][VORT: 0.2437][Total: 0.6532]	4.7+3.1s
[3200/8000]	[L1: 0.0889][DIV: 0.1314][GRAD: 0.1807][VORT: 0.2428][Total: 0.6437]	4.7+3.1s
[4000/8000]	[L1: 0.0900][DIV: 0.1326][GRAD: 0.1830][VORT: 0.2474][Total: 0.6530]	4.7+3.1s
[4800/8000]	[L1: 0.0900][DIV: 0.1325][GRAD: 0.1829][VORT: 0.2476][Total: 0.6530]	4.7+3.1s
[5600/8000]	[L1: 0.0900][DIV: 0.1320][GRAD: 0.1832][VORT: 0.2486][Total: 0.6538]	4.7+3.1s
[6400/8000]	[L1: 0.0897][DIV: 0.1316][GRAD: 0.1825][VORT: 0.2481][Total: 0.6519]	4.7+3.1s
[7200/8000]	[L1: 0.0892][DIV: 0.1308][GRAD: 0.1817][VORT: 0.2469][Total: 0.6485]	4.7+3.1s
[8000/8000]	[L1: 0.0894][DIV: 0.1308][GRAD: 0.1819][VORT: 0.2465][Total: 0.6487]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.090435	vorticity_error: 1.001736	mean_abs_divergence: 0.127637
[DIV2K x2]	rel_l2_error: 0.076422	vorticity_error: 1.361035	mean_abs_divergence: 0.067614
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.055907	vorticity_error: 1.193439	mean_abs_divergence: 0.032683
Forward: 1.25s

Saving...
Total: 1.55s

[Epoch 255]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0905][DIV: 0.1333][GRAD: 0.1842][VORT: 0.2383][Total: 0.6464]	4.7+3.1s
[1600/8000]	[L1: 0.0933][DIV: 0.1359][GRAD: 0.1902][VORT: 0.2500][Total: 0.6694]	4.7+3.1s
[2400/8000]	[L1: 0.0953][DIV: 0.1386][GRAD: 0.1940][VORT: 0.2558][Total: 0.6836]	4.7+3.1s
[3200/8000]	[L1: 0.0925][DIV: 0.1347][GRAD: 0.1884][VORT: 0.2500][Total: 0.6656]	4.8+3.1s
[4000/8000]	[L1: 0.0945][DIV: 0.1375][GRAD: 0.1926][VORT: 0.2558][Total: 0.6804]	4.7+3.1s
[4800/8000]	[L1: 0.0935][DIV: 0.1360][GRAD: 0.1904][VORT: 0.2528][Total: 0.6726]	4.7+3.1s
[5600/8000]	[L1: 0.0935][DIV: 0.1360][GRAD: 0.1904][VORT: 0.2530][Total: 0.6729]	4.7+3.1s
[6400/8000]	[L1: 0.0927][DIV: 0.1353][GRAD: 0.1888][VORT: 0.2508][Total: 0.6676]	4.7+3.1s
[7200/8000]	[L1: 0.0926][DIV: 0.1351][GRAD: 0.1885][VORT: 0.2497][Total: 0.6659]	4.7+3.1s
[8000/8000]	[L1: 0.0920][DIV: 0.1342][GRAD: 0.1871][VORT: 0.2492][Total: 0.6625]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.079103	vorticity_error: 0.766219	mean_abs_divergence: 0.135402
[DIV2K x2]	rel_l2_error: 0.061228	vorticity_error: 0.808359	mean_abs_divergence: 0.071442
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.041112	vorticity_error: 0.692340	mean_abs_divergence: 0.034970
Forward: 1.26s

Saving...
Total: 1.56s

[Epoch 256]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0943][DIV: 0.1369][GRAD: 0.1923][VORT: 0.2575][Total: 0.6810]	4.7+3.1s
[1600/8000]	[L1: 0.0942][DIV: 0.1363][GRAD: 0.1921][VORT: 0.2587][Total: 0.6813]	4.7+3.1s
[2400/8000]	[L1: 0.0925][DIV: 0.1342][GRAD: 0.1885][VORT: 0.2546][Total: 0.6698]	4.7+3.1s
[3200/8000]	[L1: 0.0928][DIV: 0.1342][GRAD: 0.1890][VORT: 0.2556][Total: 0.6715]	4.8+3.1s
[4000/8000]	[L1: 0.0925][DIV: 0.1345][GRAD: 0.1885][VORT: 0.2559][Total: 0.6715]	4.7+3.1s
[4800/8000]	[L1: 0.0922][DIV: 0.1345][GRAD: 0.1879][VORT: 0.2552][Total: 0.6698]	4.7+3.1s
[5600/8000]	[L1: 0.0926][DIV: 0.1351][GRAD: 0.1888][VORT: 0.2562][Total: 0.6728]	4.7+3.1s
[6400/8000]	[L1: 0.0921][DIV: 0.1347][GRAD: 0.1876][VORT: 0.2545][Total: 0.6689]	4.7+3.1s
[7200/8000]	[L1: 0.0919][DIV: 0.1344][GRAD: 0.1873][VORT: 0.2535][Total: 0.6672]	4.7+3.1s
[8000/8000]	[L1: 0.0925][DIV: 0.1350][GRAD: 0.1886][VORT: 0.2556][Total: 0.6717]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.062601	vorticity_error: 0.606023	mean_abs_divergence: 0.105190
[DIV2K x2]	rel_l2_error: 0.048633	vorticity_error: 0.766507	mean_abs_divergence: 0.055542
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.033480	vorticity_error: 0.564329	mean_abs_divergence: 0.027330
Forward: 1.30s

Saving...
Total: 1.62s

[Epoch 257]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0872][DIV: 0.1280][GRAD: 0.1772][VORT: 0.2441][Total: 0.6365]	4.7+3.1s
[1600/8000]	[L1: 0.0903][DIV: 0.1324][GRAD: 0.1835][VORT: 0.2500][Total: 0.6564]	4.7+3.1s
[2400/8000]	[L1: 0.0911][DIV: 0.1333][GRAD: 0.1849][VORT: 0.2493][Total: 0.6585]	4.7+3.1s
[3200/8000]	[L1: 0.0900][DIV: 0.1320][GRAD: 0.1829][VORT: 0.2466][Total: 0.6515]	4.8+3.1s
[4000/8000]	[L1: 0.0906][DIV: 0.1330][GRAD: 0.1842][VORT: 0.2486][Total: 0.6564]	4.7+3.1s
[4800/8000]	[L1: 0.0886][DIV: 0.1304][GRAD: 0.1802][VORT: 0.2442][Total: 0.6434]	4.7+3.1s
[5600/8000]	[L1: 0.0882][DIV: 0.1298][GRAD: 0.1794][VORT: 0.2441][Total: 0.6414]	4.7+3.1s
[6400/8000]	[L1: 0.0891][DIV: 0.1309][GRAD: 0.1811][VORT: 0.2458][Total: 0.6469]	4.7+3.1s
[7200/8000]	[L1: 0.0890][DIV: 0.1304][GRAD: 0.1809][VORT: 0.2462][Total: 0.6465]	4.7+3.1s
[8000/8000]	[L1: 0.0891][DIV: 0.1304][GRAD: 0.1810][VORT: 0.2458][Total: 0.6462]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.076761	vorticity_error: 0.683860	mean_abs_divergence: 0.117213
[DIV2K x2]	rel_l2_error: 0.054365	vorticity_error: 0.700258	mean_abs_divergence: 0.061035
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.041503	vorticity_error: 0.566136	mean_abs_divergence: 0.029466
Forward: 1.25s

Saving...
Total: 1.57s

[Epoch 258]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0908][DIV: 0.1329][GRAD: 0.1856][VORT: 0.2499][Total: 0.6592]	4.7+3.1s
[1600/8000]	[L1: 0.0892][DIV: 0.1311][GRAD: 0.1816][VORT: 0.2450][Total: 0.6469]	4.7+3.1s
[2400/8000]	[L1: 0.0881][DIV: 0.1296][GRAD: 0.1791][VORT: 0.2412][Total: 0.6379]	4.7+3.1s
[3200/8000]	[L1: 0.0898][DIV: 0.1321][GRAD: 0.1829][VORT: 0.2457][Total: 0.6505]	4.7+3.1s
[4000/8000]	[L1: 0.0887][DIV: 0.1303][GRAD: 0.1804][VORT: 0.2440][Total: 0.6433]	4.7+3.1s
[4800/8000]	[L1: 0.0898][DIV: 0.1314][GRAD: 0.1827][VORT: 0.2460][Total: 0.6498]	4.7+3.1s
[5600/8000]	[L1: 0.0901][DIV: 0.1317][GRAD: 0.1830][VORT: 0.2451][Total: 0.6498]	4.7+3.1s
[6400/8000]	[L1: 0.0883][DIV: 0.1294][GRAD: 0.1793][VORT: 0.2396][Total: 0.6367]	4.7+3.1s
[7200/8000]	[L1: 0.0892][DIV: 0.1306][GRAD: 0.1811][VORT: 0.2424][Total: 0.6434]	4.7+3.1s
[8000/8000]	[L1: 0.0894][DIV: 0.1309][GRAD: 0.1814][VORT: 0.2426][Total: 0.6442]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.052754	vorticity_error: 0.622851	mean_abs_divergence: 0.092271
[DIV2K x2]	rel_l2_error: 0.042904	vorticity_error: 0.548644	mean_abs_divergence: 0.047366
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.033174	vorticity_error: 0.568485	mean_abs_divergence: 0.022851
Forward: 1.29s

Saving...
Total: 1.60s

[Epoch 259]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0896][DIV: 0.1294][GRAD: 0.1826][VORT: 0.2474][Total: 0.6489]	4.7+3.1s
[1600/8000]	[L1: 0.0915][DIV: 0.1336][GRAD: 0.1858][VORT: 0.2464][Total: 0.6573]	4.7+3.1s
[2400/8000]	[L1: 0.0910][DIV: 0.1327][GRAD: 0.1851][VORT: 0.2453][Total: 0.6542]	4.7+3.1s
[3200/8000]	[L1: 0.0891][DIV: 0.1301][GRAD: 0.1809][VORT: 0.2405][Total: 0.6407]	4.7+3.1s
[4000/8000]	[L1: 0.0887][DIV: 0.1302][GRAD: 0.1801][VORT: 0.2383][Total: 0.6373]	4.7+3.1s
[4800/8000]	[L1: 0.0891][DIV: 0.1308][GRAD: 0.1811][VORT: 0.2399][Total: 0.6409]	4.7+3.1s
[5600/8000]	[L1: 0.0889][DIV: 0.1305][GRAD: 0.1807][VORT: 0.2388][Total: 0.6390]	4.7+3.1s
[6400/8000]	[L1: 0.0892][DIV: 0.1309][GRAD: 0.1812][VORT: 0.2395][Total: 0.6407]	4.7+3.1s
[7200/8000]	[L1: 0.0886][DIV: 0.1299][GRAD: 0.1799][VORT: 0.2384][Total: 0.6368]	4.7+3.1s
[8000/8000]	[L1: 0.0887][DIV: 0.1300][GRAD: 0.1802][VORT: 0.2383][Total: 0.6373]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.070184	vorticity_error: 2.243155	mean_abs_divergence: 0.113298
[DIV2K x2]	rel_l2_error: 0.057015	vorticity_error: 0.882362	mean_abs_divergence: 0.058616
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042745	vorticity_error: 0.876734	mean_abs_divergence: 0.028929
Forward: 1.24s

Saving...
Total: 1.55s

[Epoch 260]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0880][DIV: 0.1280][GRAD: 0.1785][VORT: 0.2344][Total: 0.6289]	4.7+3.1s
[1600/8000]	[L1: 0.0873][DIV: 0.1282][GRAD: 0.1772][VORT: 0.2377][Total: 0.6303]	4.7+3.1s
[2400/8000]	[L1: 0.0879][DIV: 0.1289][GRAD: 0.1784][VORT: 0.2395][Total: 0.6347]	4.7+3.1s
[3200/8000]	[L1: 0.0862][DIV: 0.1273][GRAD: 0.1749][VORT: 0.2334][Total: 0.6219]	4.7+3.1s
[4000/8000]	[L1: 0.0890][DIV: 0.1306][GRAD: 0.1807][VORT: 0.2409][Total: 0.6411]	4.7+3.1s
[4800/8000]	[L1: 0.0883][DIV: 0.1299][GRAD: 0.1791][VORT: 0.2379][Total: 0.6352]	4.7+3.1s
[5600/8000]	[L1: 0.0897][DIV: 0.1315][GRAD: 0.1821][VORT: 0.2415][Total: 0.6448]	4.7+3.1s
[6400/8000]	[L1: 0.0901][DIV: 0.1319][GRAD: 0.1830][VORT: 0.2428][Total: 0.6479]	4.7+3.1s
[7200/8000]	[L1: 0.0902][DIV: 0.1318][GRAD: 0.1832][VORT: 0.2443][Total: 0.6495]	4.7+3.1s
[8000/8000]	[L1: 0.0891][DIV: 0.1306][GRAD: 0.1809][VORT: 0.2420][Total: 0.6426]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.082555	vorticity_error: 1.035104	mean_abs_divergence: 0.118836
[DIV2K x2]	rel_l2_error: 0.067628	vorticity_error: 0.666536	mean_abs_divergence: 0.063035
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048845	vorticity_error: 0.790187	mean_abs_divergence: 0.030940
Forward: 1.29s

Saving...
Total: 1.60s

[Epoch 261]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0829][DIV: 0.1246][GRAD: 0.1680][VORT: 0.2235][Total: 0.5989]	4.7+3.1s
[1600/8000]	[L1: 0.0845][DIV: 0.1254][GRAD: 0.1717][VORT: 0.2282][Total: 0.6099]	4.7+3.1s
[2400/8000]	[L1: 0.0856][DIV: 0.1268][GRAD: 0.1740][VORT: 0.2313][Total: 0.6177]	4.7+3.1s
[3200/8000]	[L1: 0.0872][DIV: 0.1286][GRAD: 0.1774][VORT: 0.2355][Total: 0.6286]	4.7+3.1s
[4000/8000]	[L1: 0.0894][DIV: 0.1311][GRAD: 0.1818][VORT: 0.2409][Total: 0.6432]	4.7+3.1s
[4800/8000]	[L1: 0.0892][DIV: 0.1307][GRAD: 0.1812][VORT: 0.2409][Total: 0.6420]	4.8+3.1s
[5600/8000]	[L1: 0.0887][DIV: 0.1301][GRAD: 0.1804][VORT: 0.2410][Total: 0.6402]	4.7+3.1s
[6400/8000]	[L1: 0.0883][DIV: 0.1297][GRAD: 0.1796][VORT: 0.2397][Total: 0.6373]	4.7+3.1s
[7200/8000]	[L1: 0.0882][DIV: 0.1294][GRAD: 0.1793][VORT: 0.2395][Total: 0.6364]	4.7+3.1s
[8000/8000]	[L1: 0.0874][DIV: 0.1283][GRAD: 0.1775][VORT: 0.2368][Total: 0.6299]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.072434	vorticity_error: 2.266468	mean_abs_divergence: 0.129254
[DIV2K x2]	rel_l2_error: 0.057544	vorticity_error: 0.963679	mean_abs_divergence: 0.066728
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043637	vorticity_error: 1.169594	mean_abs_divergence: 0.032411
Forward: 1.31s

Saving...
Total: 1.65s

[Epoch 262]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0915][DIV: 0.1340][GRAD: 0.1864][VORT: 0.2517][Total: 0.6636]	4.7+3.1s
[1600/8000]	[L1: 0.0921][DIV: 0.1356][GRAD: 0.1871][VORT: 0.2484][Total: 0.6632]	4.7+3.1s
[2400/8000]	[L1: 0.0905][DIV: 0.1335][GRAD: 0.1838][VORT: 0.2452][Total: 0.6530]	4.8+3.1s
[3200/8000]	[L1: 0.0922][DIV: 0.1355][GRAD: 0.1871][VORT: 0.2481][Total: 0.6629]	4.7+3.1s
[4000/8000]	[L1: 0.0918][DIV: 0.1347][GRAD: 0.1867][VORT: 0.2492][Total: 0.6625]	4.7+3.1s
[4800/8000]	[L1: 0.0907][DIV: 0.1332][GRAD: 0.1844][VORT: 0.2460][Total: 0.6542]	4.7+3.1s
[5600/8000]	[L1: 0.0895][DIV: 0.1316][GRAD: 0.1822][VORT: 0.2442][Total: 0.6475]	4.7+3.1s
[6400/8000]	[L1: 0.0889][DIV: 0.1306][GRAD: 0.1808][VORT: 0.2422][Total: 0.6425]	4.7+3.1s
[7200/8000]	[L1: 0.0899][DIV: 0.1318][GRAD: 0.1829][VORT: 0.2442][Total: 0.6488]	4.7+3.1s
[8000/8000]	[L1: 0.0903][DIV: 0.1321][GRAD: 0.1838][VORT: 0.2464][Total: 0.6527]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.093990	vorticity_error: 0.833388	mean_abs_divergence: 0.138947
[DIV2K x2]	rel_l2_error: 0.074432	vorticity_error: 0.870352	mean_abs_divergence: 0.075588
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.050850	vorticity_error: 0.740868	mean_abs_divergence: 0.037758
Forward: 1.25s

Saving...
Total: 1.55s

[Epoch 263]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0970][DIV: 0.1399][GRAD: 0.1974][VORT: 0.2594][Total: 0.6938]	4.7+3.1s
[1600/8000]	[L1: 0.0922][DIV: 0.1339][GRAD: 0.1872][VORT: 0.2510][Total: 0.6643]	4.7+3.1s
[2400/8000]	[L1: 0.0914][DIV: 0.1327][GRAD: 0.1857][VORT: 0.2496][Total: 0.6593]	4.7+3.1s
[3200/8000]	[L1: 0.0919][DIV: 0.1334][GRAD: 0.1869][VORT: 0.2513][Total: 0.6634]	4.7+3.1s
[4000/8000]	[L1: 0.0909][DIV: 0.1323][GRAD: 0.1850][VORT: 0.2494][Total: 0.6575]	4.7+3.1s
[4800/8000]	[L1: 0.0894][DIV: 0.1311][GRAD: 0.1819][VORT: 0.2455][Total: 0.6479]	4.8+3.1s
[5600/8000]	[L1: 0.0888][DIV: 0.1301][GRAD: 0.1806][VORT: 0.2433][Total: 0.6429]	4.7+3.1s
[6400/8000]	[L1: 0.0893][DIV: 0.1308][GRAD: 0.1815][VORT: 0.2443][Total: 0.6459]	4.7+3.1s
[7200/8000]	[L1: 0.0891][DIV: 0.1306][GRAD: 0.1812][VORT: 0.2431][Total: 0.6440]	4.7+3.1s
[8000/8000]	[L1: 0.0888][DIV: 0.1303][GRAD: 0.1807][VORT: 0.2427][Total: 0.6426]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.087917	vorticity_error: 1.082116	mean_abs_divergence: 0.132481
[DIV2K x2]	rel_l2_error: 0.068756	vorticity_error: 1.150311	mean_abs_divergence: 0.071792
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.047444	vorticity_error: 0.959368	mean_abs_divergence: 0.035862
Forward: 1.27s

Saving...
Total: 1.58s

[Epoch 264]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0990][DIV: 0.1421][GRAD: 0.2019][VORT: 0.2747][Total: 0.7177]	4.7+3.1s
[1600/8000]	[L1: 0.0932][DIV: 0.1350][GRAD: 0.1903][VORT: 0.2593][Total: 0.6778]	4.7+3.1s
[2400/8000]	[L1: 0.0935][DIV: 0.1358][GRAD: 0.1905][VORT: 0.2594][Total: 0.6792]	4.7+3.1s
[3200/8000]	[L1: 0.0915][DIV: 0.1332][GRAD: 0.1865][VORT: 0.2547][Total: 0.6659]	4.7+3.1s
[4000/8000]	[L1: 0.0908][DIV: 0.1323][GRAD: 0.1851][VORT: 0.2528][Total: 0.6610]	4.7+3.1s
[4800/8000]	[L1: 0.0909][DIV: 0.1323][GRAD: 0.1852][VORT: 0.2528][Total: 0.6612]	4.8+3.1s
[5600/8000]	[L1: 0.0906][DIV: 0.1317][GRAD: 0.1845][VORT: 0.2522][Total: 0.6590]	4.7+3.1s
[6400/8000]	[L1: 0.0895][DIV: 0.1306][GRAD: 0.1822][VORT: 0.2479][Total: 0.6503]	4.7+3.1s
[7200/8000]	[L1: 0.0896][DIV: 0.1310][GRAD: 0.1825][VORT: 0.2478][Total: 0.6510]	4.7+3.1s
[8000/8000]	[L1: 0.0893][DIV: 0.1305][GRAD: 0.1820][VORT: 0.2470][Total: 0.6488]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.080498	vorticity_error: 2.468883	mean_abs_divergence: 0.118047
[DIV2K x2]	rel_l2_error: 0.064356	vorticity_error: 0.860412	mean_abs_divergence: 0.062562
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.050344	vorticity_error: 1.107954	mean_abs_divergence: 0.030694
Forward: 1.32s

Saving...
Total: 1.63s

[Epoch 265]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0889][DIV: 0.1284][GRAD: 0.1810][VORT: 0.2455][Total: 0.6438]	4.7+3.1s
[1600/8000]	[L1: 0.0881][DIV: 0.1281][GRAD: 0.1792][VORT: 0.2431][Total: 0.6385]	4.7+3.1s
[2400/8000]	[L1: 0.0912][DIV: 0.1323][GRAD: 0.1854][VORT: 0.2488][Total: 0.6577]	4.7+3.1s
[3200/8000]	[L1: 0.0902][DIV: 0.1310][GRAD: 0.1831][VORT: 0.2449][Total: 0.6492]	4.7+3.1s
[4000/8000]	[L1: 0.0900][DIV: 0.1310][GRAD: 0.1828][VORT: 0.2445][Total: 0.6483]	4.7+3.1s
[4800/8000]	[L1: 0.0898][DIV: 0.1306][GRAD: 0.1824][VORT: 0.2437][Total: 0.6465]	4.7+3.1s
[5600/8000]	[L1: 0.0905][DIV: 0.1314][GRAD: 0.1840][VORT: 0.2449][Total: 0.6508]	4.7+3.1s
[6400/8000]	[L1: 0.0913][DIV: 0.1327][GRAD: 0.1855][VORT: 0.2477][Total: 0.6571]	4.7+3.1s
[7200/8000]	[L1: 0.0922][DIV: 0.1337][GRAD: 0.1874][VORT: 0.2504][Total: 0.6638]	4.7+3.1s
[8000/8000]	[L1: 0.0918][DIV: 0.1333][GRAD: 0.1864][VORT: 0.2484][Total: 0.6600]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.079592	vorticity_error: 0.827682	mean_abs_divergence: 0.135816
[DIV2K x2]	rel_l2_error: 0.062418	vorticity_error: 0.947197	mean_abs_divergence: 0.072287
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043634	vorticity_error: 1.015990	mean_abs_divergence: 0.035168
Forward: 1.28s

Saving...
Total: 1.59s

[Epoch 266]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0823][DIV: 0.1224][GRAD: 0.1667][VORT: 0.2229][Total: 0.5943]	4.7+3.1s
[1600/8000]	[L1: 0.0878][DIV: 0.1285][GRAD: 0.1778][VORT: 0.2388][Total: 0.6329]	4.7+3.1s
[2400/8000]	[L1: 0.0873][DIV: 0.1281][GRAD: 0.1773][VORT: 0.2391][Total: 0.6318]	4.7+3.1s
[3200/8000]	[L1: 0.0856][DIV: 0.1256][GRAD: 0.1739][VORT: 0.2355][Total: 0.6205]	4.7+3.1s
[4000/8000]	[L1: 0.0860][DIV: 0.1265][GRAD: 0.1747][VORT: 0.2370][Total: 0.6242]	4.7+3.1s
[4800/8000]	[L1: 0.0866][DIV: 0.1273][GRAD: 0.1757][VORT: 0.2372][Total: 0.6268]	4.7+3.1s
[5600/8000]	[L1: 0.0879][DIV: 0.1292][GRAD: 0.1784][VORT: 0.2404][Total: 0.6358]	4.7+3.1s
[6400/8000]	[L1: 0.0891][DIV: 0.1306][GRAD: 0.1810][VORT: 0.2437][Total: 0.6444]	4.7+3.1s
[7200/8000]	[L1: 0.0898][DIV: 0.1313][GRAD: 0.1824][VORT: 0.2453][Total: 0.6488]	4.7+3.1s
[8000/8000]	[L1: 0.0903][DIV: 0.1321][GRAD: 0.1834][VORT: 0.2468][Total: 0.6526]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.094456	vorticity_error: 1.068659	mean_abs_divergence: 0.137527
[DIV2K x2]	rel_l2_error: 0.066966	vorticity_error: 1.350945	mean_abs_divergence: 0.073793
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.052610	vorticity_error: 1.130461	mean_abs_divergence: 0.036340
Forward: 1.27s

Saving...
Total: 1.59s

LapSRN(
  (head_x8): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (head_x4): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (head_x2): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (feature_extractor_x4): FeatureExtraction(
    (body): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
  )
  (feature_extractor_x2): FeatureExtraction(
    (body): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
  )
  (upsample_block_x4): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(32, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (upsample_block_x2): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(32, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (upsample_block_x1): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(32, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
LapSRN(
  (head_x8): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (head_x4): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (head_x2): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (feature_extractor_x4): FeatureExtraction(
    (body): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
  )
  (feature_extractor_x2): FeatureExtraction(
    (body): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
  )
  (upsample_block_x4): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(32, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (upsample_block_x2): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(32, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (upsample_block_x1): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(32, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
LapSRN(
  (head_x8): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (head_x4): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (head_x2): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (feature_extractor_x4): FeatureExtraction(
    (body): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
  )
  (feature_extractor_x2): FeatureExtraction(
    (body): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
  )
  (upsample_block_x4): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(32, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (upsample_block_x2): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(32, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (upsample_block_x1): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(32, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
LapSRN(
  (head_x8): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (head_x4): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (head_x2): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (feature_extractor_x4): FeatureExtraction(
    (body): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
  )
  (feature_extractor_x2): FeatureExtraction(
    (body): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
  )
  (upsample_block_x4): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(32, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (upsample_block_x2): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(32, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (upsample_block_x1): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(32, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 268]	Learning rate: 5.00e-6
[800/8000]	[L1: 0.0876][DIV: 0.1315][GRAD: 0.1797][VORT: 0.2405][Total: 0.6393]	4.7+3.2s
[1600/8000]	[L1: 0.0915][DIV: 0.1357][GRAD: 0.1878][VORT: 0.2524][Total: 0.6675]	4.5+3.3s
[2400/8000]	[L1: 0.0916][DIV: 0.1350][GRAD: 0.1880][VORT: 0.2539][Total: 0.6685]	4.5+3.3s
[3200/8000]	[L1: 0.0907][DIV: 0.1340][GRAD: 0.1862][VORT: 0.2510][Total: 0.6619]	4.5+3.3s
[4000/8000]	[L1: 0.0889][DIV: 0.1321][GRAD: 0.1825][VORT: 0.2451][Total: 0.6486]	4.5+3.3s
[4800/8000]	[L1: 0.0889][DIV: 0.1319][GRAD: 0.1825][VORT: 0.2446][Total: 0.6479]	4.5+3.2s
[5600/8000]	[L1: 0.0881][DIV: 0.1311][GRAD: 0.1810][VORT: 0.2433][Total: 0.6435]	4.4+3.3s
LapSRN(
  (head_x8): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (head_x4): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (head_x2): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (feature_extractor_x4): FeatureExtraction(
    (body): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
  )
  (feature_extractor_x2): FeatureExtraction(
    (body): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
  )
  (upsample_block_x4): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(32, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (upsample_block_x2): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(32, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (upsample_block_x1): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(32, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 268]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0960][DIV: 0.1378][GRAD: 0.1948][VORT: 0.2586][Total: 0.6872]	4.7+3.3s
[1600/8000]	[L1: 0.0925][DIV: 0.1335][GRAD: 0.1876][VORT: 0.2491][Total: 0.6626]	4.4+3.3s
[2400/8000]	[L1: 0.0865][DIV: 0.1261][GRAD: 0.1751][VORT: 0.2335][Total: 0.6211]	4.5+3.3s
[3200/8000]	[L1: 0.0876][DIV: 0.1279][GRAD: 0.1774][VORT: 0.2376][Total: 0.6305]	4.5+3.3s
[4000/8000]	[L1: 0.0873][DIV: 0.1279][GRAD: 0.1769][VORT: 0.2373][Total: 0.6294]	4.5+3.3s
[4800/8000]	[L1: 0.0871][DIV: 0.1280][GRAD: 0.1764][VORT: 0.2371][Total: 0.6285]	4.4+3.3s
[5600/8000]	[L1: 0.0875][DIV: 0.1281][GRAD: 0.1774][VORT: 0.2388][Total: 0.6317]	4.4+3.3s
[6400/8000]	[L1: 0.0867][DIV: 0.1271][GRAD: 0.1758][VORT: 0.2375][Total: 0.6271]	4.4+3.3s
[7200/8000]	[L1: 0.0869][DIV: 0.1274][GRAD: 0.1765][VORT: 0.2389][Total: 0.6297]	4.4+3.3s
[8000/8000]	[L1: 0.0877][DIV: 0.1281][GRAD: 0.1781][VORT: 0.2413][Total: 0.6352]	4.4+3.3s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.072508	vorticity_error: 0.883342	mean_abs_divergence: 0.115025
[DIV2K x2]	rel_l2_error: 0.055627	vorticity_error: 0.634604	mean_abs_divergence: 0.060154
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.041677	vorticity_error: 0.595561	mean_abs_divergence: 0.029212
[INFO] New best model found with rel_l2_error on final output: 0.041677
Forward: 1.29s

Saving...
Total: 1.78s

[Epoch 269]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0897][DIV: 0.1308][GRAD: 0.1832][VORT: 0.2442][Total: 0.6479]	4.5+3.4s
[1600/8000]	[L1: 0.0910][DIV: 0.1327][GRAD: 0.1858][VORT: 0.2493][Total: 0.6588]	4.5+3.4s
[2400/8000]	[L1: 0.0892][DIV: 0.1300][GRAD: 0.1817][VORT: 0.2425][Total: 0.6435]	4.6+3.4s
[3200/8000]	[L1: 0.0904][DIV: 0.1310][GRAD: 0.1841][VORT: 0.2468][Total: 0.6522]	4.5+3.4s
[4000/8000]	[L1: 0.0907][DIV: 0.1319][GRAD: 0.1847][VORT: 0.2465][Total: 0.6539]	4.6+3.4s
[4800/8000]	[L1: 0.0900][DIV: 0.1308][GRAD: 0.1835][VORT: 0.2463][Total: 0.6505]	4.6+3.4s
[5600/8000]	[L1: 0.0889][DIV: 0.1295][GRAD: 0.1813][VORT: 0.2445][Total: 0.6443]	4.5+3.4s
[6400/8000]	[L1: 0.0892][DIV: 0.1302][GRAD: 0.1817][VORT: 0.2447][Total: 0.6457]	4.5+3.4s
[7200/8000]	[L1: 0.0887][DIV: 0.1296][GRAD: 0.1808][VORT: 0.2443][Total: 0.6433]	4.5+3.4s
[8000/8000]	[L1: 0.0886][DIV: 0.1292][GRAD: 0.1805][VORT: 0.2440][Total: 0.6423]	4.6+3.6s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.072458	vorticity_error: 0.859674	mean_abs_divergence: 0.099177
[DIV2K x2]	rel_l2_error: 0.055675	vorticity_error: 0.837236	mean_abs_divergence: 0.050985
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.046053	vorticity_error: 1.236637	mean_abs_divergence: 0.024315
Forward: 1.27s

Saving...
Total: 1.59s

[Epoch 270]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0944][DIV: 0.1360][GRAD: 0.1922][VORT: 0.2596][Total: 0.6823]	4.6+3.4s
[1600/8000]	[L1: 0.0926][DIV: 0.1354][GRAD: 0.1883][VORT: 0.2503][Total: 0.6666]	4.6+3.4s
[2400/8000]	[L1: 0.0891][DIV: 0.1302][GRAD: 0.1812][VORT: 0.2421][Total: 0.6426]	4.5+3.4s
[3200/8000]	[L1: 0.0894][DIV: 0.1305][GRAD: 0.1819][VORT: 0.2442][Total: 0.6460]	4.6+3.4s
[4000/8000]	[L1: 0.0899][DIV: 0.1313][GRAD: 0.1828][VORT: 0.2453][Total: 0.6493]	4.6+3.4s
[4800/8000]	[L1: 0.0903][DIV: 0.1322][GRAD: 0.1834][VORT: 0.2460][Total: 0.6519]	4.6+3.4s
[5600/8000]	[L1: 0.0902][DIV: 0.1318][GRAD: 0.1833][VORT: 0.2464][Total: 0.6517]	4.5+3.4s
[6400/8000]	[L1: 0.0906][DIV: 0.1324][GRAD: 0.1843][VORT: 0.2479][Total: 0.6552]	4.6+3.4s
[7200/8000]	[L1: 0.0911][DIV: 0.1329][GRAD: 0.1854][VORT: 0.2504][Total: 0.6598]	4.5+3.5s
[8000/8000]	[L1: 0.0915][DIV: 0.1335][GRAD: 0.1862][VORT: 0.2511][Total: 0.6622]	4.5+3.4s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.079878	vorticity_error: 1.310434	mean_abs_divergence: 0.129344
[DIV2K x2]	rel_l2_error: 0.065145	vorticity_error: 1.002711	mean_abs_divergence: 0.068743
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043501	vorticity_error: 1.044976	mean_abs_divergence: 0.034645
Forward: 1.18s

Saving...
Total: 1.49s

[Epoch 271]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0900][DIV: 0.1329][GRAD: 0.1829][VORT: 0.2470][Total: 0.6529]	4.6+3.4s
[1600/8000]	[L1: 0.0912][DIV: 0.1344][GRAD: 0.1853][VORT: 0.2465][Total: 0.6573]	4.6+3.4s
[2400/8000]	[L1: 0.0929][DIV: 0.1359][GRAD: 0.1890][VORT: 0.2519][Total: 0.6697]	4.6+3.4s
[3200/8000]	[L1: 0.0927][DIV: 0.1351][GRAD: 0.1885][VORT: 0.2511][Total: 0.6675]	4.6+3.4s
[4000/8000]	[L1: 0.0918][DIV: 0.1338][GRAD: 0.1866][VORT: 0.2491][Total: 0.6613]	4.5+3.4s
[4800/8000]	[L1: 0.0916][DIV: 0.1331][GRAD: 0.1859][VORT: 0.2475][Total: 0.6581]	4.6+3.4s
[5600/8000]	[L1: 0.0902][DIV: 0.1313][GRAD: 0.1833][VORT: 0.2437][Total: 0.6485]	4.5+3.4s
[6400/8000]	[L1: 0.0912][DIV: 0.1325][GRAD: 0.1854][VORT: 0.2460][Total: 0.6551]	4.5+3.4s
[7200/8000]	[L1: 0.0910][DIV: 0.1321][GRAD: 0.1852][VORT: 0.2465][Total: 0.6548]	4.5+3.4s
[8000/8000]	[L1: 0.0907][DIV: 0.1317][GRAD: 0.1844][VORT: 0.2454][Total: 0.6522]	4.6+3.4s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.081779	vorticity_error: 0.898595	mean_abs_divergence: 0.118772
[DIV2K x2]	rel_l2_error: 0.061261	vorticity_error: 1.347584	mean_abs_divergence: 0.063289
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.047137	vorticity_error: 1.168285	mean_abs_divergence: 0.031066
Forward: 1.20s

Saving...
Total: 1.52s

[Epoch 272]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0917][DIV: 0.1325][GRAD: 0.1868][VORT: 0.2535][Total: 0.6644]	4.6+3.4s
[1600/8000]	[L1: 0.0941][DIV: 0.1346][GRAD: 0.1910][VORT: 0.2581][Total: 0.6778]	4.5+3.4s
[2400/8000]	[L1: 0.0908][DIV: 0.1313][GRAD: 0.1845][VORT: 0.2486][Total: 0.6552]	4.5+3.4s
[3200/8000]	[L1: 0.0932][DIV: 0.1353][GRAD: 0.1895][VORT: 0.2531][Total: 0.6711]	4.6+3.4s
[4000/8000]	[L1: 0.0920][DIV: 0.1336][GRAD: 0.1873][VORT: 0.2520][Total: 0.6650]	4.6+3.4s
[4800/8000]	[L1: 0.0906][DIV: 0.1317][GRAD: 0.1843][VORT: 0.2486][Total: 0.6552]	4.5+3.4s
[5600/8000]	[L1: 0.0911][DIV: 0.1325][GRAD: 0.1853][VORT: 0.2494][Total: 0.6583]	4.5+3.4s
[6400/8000]	[L1: 0.0915][DIV: 0.1332][GRAD: 0.1863][VORT: 0.2504][Total: 0.6614]	4.5+3.5s
[7200/8000]	[L1: 0.0903][DIV: 0.1318][GRAD: 0.1836][VORT: 0.2458][Total: 0.6514]	4.5+3.4s
[8000/8000]	[L1: 0.0907][DIV: 0.1322][GRAD: 0.1845][VORT: 0.2474][Total: 0.6547]	4.6+3.4s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.069934	vorticity_error: 0.578398	mean_abs_divergence: 0.096322
[DIV2K x2]	rel_l2_error: 0.050439	vorticity_error: 0.597956	mean_abs_divergence: 0.050196
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.040432	vorticity_error: 0.599700	mean_abs_divergence: 0.023916
[INFO] New best model found with rel_l2_error on final output: 0.040432
Forward: 1.20s

Saving...
Total: 1.55s

[Epoch 273]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0995][DIV: 0.1432][GRAD: 0.2032][VORT: 0.2757][Total: 0.7216]	4.6+3.4s
[1600/8000]	[L1: 0.0961][DIV: 0.1387][GRAD: 0.1958][VORT: 0.2661][Total: 0.6967]	4.6+3.4s
[2400/8000]	[L1: 0.0935][DIV: 0.1362][GRAD: 0.1908][VORT: 0.2564][Total: 0.6769]	4.5+3.4s
[3200/8000]	[L1: 0.0918][DIV: 0.1345][GRAD: 0.1873][VORT: 0.2518][Total: 0.6654]	4.6+3.4s
[4000/8000]	[L1: 0.0928][DIV: 0.1359][GRAD: 0.1891][VORT: 0.2542][Total: 0.6720]	4.6+3.4s
[4800/8000]	[L1: 0.0930][DIV: 0.1362][GRAD: 0.1896][VORT: 0.2552][Total: 0.6740]	4.6+3.4s
[5600/8000]	[L1: 0.0920][DIV: 0.1345][GRAD: 0.1878][VORT: 0.2538][Total: 0.6681]	4.5+3.4s
[6400/8000]	[L1: 0.0913][DIV: 0.1336][GRAD: 0.1864][VORT: 0.2522][Total: 0.6635]	4.6+3.4s
[7200/8000]	[L1: 0.0907][DIV: 0.1329][GRAD: 0.1850][VORT: 0.2505][Total: 0.6591]	4.5+3.4s
[8000/8000]	[L1: 0.0903][DIV: 0.1323][GRAD: 0.1842][VORT: 0.2494][Total: 0.6563]	4.6+3.4s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.075463	vorticity_error: 0.914681	mean_abs_divergence: 0.111487
[DIV2K x2]	rel_l2_error: 0.066084	vorticity_error: 0.882480	mean_abs_divergence: 0.059384
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048054	vorticity_error: 0.854217	mean_abs_divergence: 0.029043
Forward: 1.27s

Saving...
Total: 1.59s

[Epoch 274]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0865][DIV: 0.1250][GRAD: 0.1752][VORT: 0.2414][Total: 0.6280]	4.5+3.4s
[1600/8000]	[L1: 0.0844][DIV: 0.1242][GRAD: 0.1708][VORT: 0.2304][Total: 0.6098]	4.6+3.4s
[2400/8000]	[L1: 0.0841][DIV: 0.1240][GRAD: 0.1700][VORT: 0.2292][Total: 0.6072]	4.5+3.4s
[3200/8000]	[L1: 0.0847][DIV: 0.1245][GRAD: 0.1716][VORT: 0.2305][Total: 0.6113]	4.6+3.4s
[4000/8000]	[L1: 0.0847][DIV: 0.1247][GRAD: 0.1716][VORT: 0.2298][Total: 0.6108]	4.5+3.4s
[4800/8000]	[L1: 0.0841][DIV: 0.1243][GRAD: 0.1706][VORT: 0.2289][Total: 0.6079]	4.6+3.4s
[5600/8000]	[L1: 0.0844][DIV: 0.1249][GRAD: 0.1714][VORT: 0.2300][Total: 0.6107]	4.5+3.4s
[6400/8000]	[L1: 0.0845][DIV: 0.1252][GRAD: 0.1716][VORT: 0.2304][Total: 0.6116]	4.6+3.4s
[7200/8000]	[L1: 0.0851][DIV: 0.1259][GRAD: 0.1728][VORT: 0.2323][Total: 0.6161]	4.5+3.5s
[8000/8000]	[L1: 0.0856][DIV: 0.1262][GRAD: 0.1738][VORT: 0.2338][Total: 0.6193]	4.6+3.4s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.080933	vorticity_error: 0.644019	mean_abs_divergence: 0.113048
[DIV2K x2]	rel_l2_error: 0.057235	vorticity_error: 0.743291	mean_abs_divergence: 0.059099
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.046659	vorticity_error: 0.703314	mean_abs_divergence: 0.028408
Forward: 1.26s

Saving...
Total: 1.57s

[Epoch 275]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.1019][DIV: 0.1461][GRAD: 0.2072][VORT: 0.2758][Total: 0.7310]	4.6+3.4s
[1600/8000]	[L1: 0.0940][DIV: 0.1364][GRAD: 0.1913][VORT: 0.2552][Total: 0.6770]	4.5+3.5s
[2400/8000]	[L1: 0.0925][DIV: 0.1343][GRAD: 0.1880][VORT: 0.2509][Total: 0.6657]	4.5+3.4s
[3200/8000]	[L1: 0.0940][DIV: 0.1358][GRAD: 0.1913][VORT: 0.2568][Total: 0.6779]	4.6+3.4s
[4000/8000]	[L1: 0.0935][DIV: 0.1350][GRAD: 0.1902][VORT: 0.2562][Total: 0.6749]	4.5+3.4s
[4800/8000]	[L1: 0.0912][DIV: 0.1324][GRAD: 0.1855][VORT: 0.2510][Total: 0.6600]	4.5+3.4s
[5600/8000]	[L1: 0.0903][DIV: 0.1314][GRAD: 0.1837][VORT: 0.2479][Total: 0.6533]	4.6+3.4s
[6400/8000]	[L1: 0.0907][DIV: 0.1319][GRAD: 0.1845][VORT: 0.2487][Total: 0.6558]	4.5+3.4s
[7200/8000]	[L1: 0.0902][DIV: 0.1317][GRAD: 0.1834][VORT: 0.2469][Total: 0.6522]	4.5+3.4s
[8000/8000]	[L1: 0.0898][DIV: 0.1311][GRAD: 0.1825][VORT: 0.2463][Total: 0.6496]	4.5+3.4s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.091552	vorticity_error: 0.888558	mean_abs_divergence: 0.138747
[DIV2K x2]	rel_l2_error: 0.068307	vorticity_error: 1.103146	mean_abs_divergence: 0.071828
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.052635	vorticity_error: 1.124892	mean_abs_divergence: 0.034073
Forward: 1.20s

Saving...
Total: 1.50s

[Epoch 276]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0930][DIV: 0.1355][GRAD: 0.1889][VORT: 0.2497][Total: 0.6671]	4.6+3.4s
[1600/8000]	[L1: 0.0896][DIV: 0.1323][GRAD: 0.1821][VORT: 0.2416][Total: 0.6456]	4.5+3.4s
[2400/8000]	[L1: 0.0917][DIV: 0.1339][GRAD: 0.1867][VORT: 0.2506][Total: 0.6629]	4.6+3.4s
[3200/8000]	[L1: 0.0924][DIV: 0.1353][GRAD: 0.1880][VORT: 0.2531][Total: 0.6689]	4.6+3.4s
[4000/8000]	[L1: 0.0910][DIV: 0.1338][GRAD: 0.1851][VORT: 0.2495][Total: 0.6595]	4.6+3.4s
[4800/8000]	[L1: 0.0919][DIV: 0.1347][GRAD: 0.1869][VORT: 0.2510][Total: 0.6644]	4.5+3.4s
[5600/8000]	[L1: 0.0908][DIV: 0.1332][GRAD: 0.1848][VORT: 0.2485][Total: 0.6573]	4.5+3.3s
[6400/8000]	[L1: 0.0899][DIV: 0.1319][GRAD: 0.1829][VORT: 0.2473][Total: 0.6519]	4.5+3.4s
[7200/8000]	[L1: 0.0899][DIV: 0.1319][GRAD: 0.1829][VORT: 0.2482][Total: 0.6529]	4.5+3.4s
[8000/8000]	[L1: 0.0897][DIV: 0.1317][GRAD: 0.1825][VORT: 0.2472][Total: 0.6509]	4.5+3.4s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.085664	vorticity_error: 0.745654	mean_abs_divergence: 0.130860
[DIV2K x2]	rel_l2_error: 0.060852	vorticity_error: 0.641135	mean_abs_divergence: 0.069175
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.041862	vorticity_error: 0.523358	mean_abs_divergence: 0.033770
Forward: 1.22s

Saving...
Total: 1.52s

[Epoch 277]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0834][DIV: 0.1234][GRAD: 0.1701][VORT: 0.2281][Total: 0.6051]	4.6+3.3s
[1600/8000]	[L1: 0.0887][DIV: 0.1306][GRAD: 0.1806][VORT: 0.2388][Total: 0.6387]	4.5+3.4s
[2400/8000]	[L1: 0.0909][DIV: 0.1330][GRAD: 0.1851][VORT: 0.2441][Total: 0.6532]	4.6+3.4s
[3200/8000]	[L1: 0.0924][DIV: 0.1345][GRAD: 0.1880][VORT: 0.2488][Total: 0.6637]	4.5+3.4s
[4000/8000]	[L1: 0.0923][DIV: 0.1342][GRAD: 0.1879][VORT: 0.2496][Total: 0.6640]	4.5+3.4s
[4800/8000]	[L1: 0.0910][DIV: 0.1328][GRAD: 0.1851][VORT: 0.2452][Total: 0.6542]	4.5+3.4s
[5600/8000]	[L1: 0.0917][DIV: 0.1337][GRAD: 0.1864][VORT: 0.2466][Total: 0.6584]	4.6+3.3s
[6400/8000]	[L1: 0.0914][DIV: 0.1333][GRAD: 0.1857][VORT: 0.2465][Total: 0.6569]	4.5+3.4s
[7200/8000]	[L1: 0.0908][DIV: 0.1325][GRAD: 0.1844][VORT: 0.2453][Total: 0.6531]	4.5+3.4s
[8000/8000]	[L1: 0.0907][DIV: 0.1324][GRAD: 0.1841][VORT: 0.2453][Total: 0.6525]	4.5+3.4s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.084104	vorticity_error: 0.966445	mean_abs_divergence: 0.135437
[DIV2K x2]	rel_l2_error: 0.066618	vorticity_error: 1.005873	mean_abs_divergence: 0.072609
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.050192	vorticity_error: 0.846891	mean_abs_divergence: 0.035726
Forward: 1.25s

Saving...
Total: 1.57s

[Epoch 278]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0843][DIV: 0.1234][GRAD: 0.1716][VORT: 0.2311][Total: 0.6104]	4.6+3.4s
[1600/8000]	[L1: 0.0886][DIV: 0.1285][GRAD: 0.1804][VORT: 0.2459][Total: 0.6435]	4.5+3.4s
[2400/8000]	[L1: 0.0911][DIV: 0.1317][GRAD: 0.1856][VORT: 0.2505][Total: 0.6588]	4.5+3.4s
[3200/8000]	[L1: 0.0894][DIV: 0.1295][GRAD: 0.1817][VORT: 0.2439][Total: 0.6445]	4.6+3.4s
[4000/8000]	[L1: 0.0885][DIV: 0.1284][GRAD: 0.1801][VORT: 0.2441][Total: 0.6412]	4.5+3.4s
[4800/8000]	[L1: 0.0874][DIV: 0.1267][GRAD: 0.1779][VORT: 0.2419][Total: 0.6340]	4.5+3.4s
[5600/8000]	[L1: 0.0882][DIV: 0.1281][GRAD: 0.1793][VORT: 0.2426][Total: 0.6381]	4.6+3.4s
[6400/8000]	[L1: 0.0884][DIV: 0.1282][GRAD: 0.1797][VORT: 0.2426][Total: 0.6390]	4.5+3.4s
[7200/8000]	[L1: 0.0893][DIV: 0.1295][GRAD: 0.1815][VORT: 0.2448][Total: 0.6451]	4.5+3.4s
[8000/8000]	[L1: 0.0891][DIV: 0.1293][GRAD: 0.1810][VORT: 0.2439][Total: 0.6434]	4.5+3.4s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.068374	vorticity_error: 0.726423	mean_abs_divergence: 0.085165
[DIV2K x2]	rel_l2_error: 0.056473	vorticity_error: 0.753713	mean_abs_divergence: 0.043592
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043878	vorticity_error: 0.783110	mean_abs_divergence: 0.021296
Forward: 1.29s

Saving...
Total: 1.61s

[Epoch 279]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0832][DIV: 0.1228][GRAD: 0.1688][VORT: 0.2257][Total: 0.6005]	4.6+3.4s
[1600/8000]	[L1: 0.0878][DIV: 0.1281][GRAD: 0.1783][VORT: 0.2373][Total: 0.6316]	4.5+3.4s
[2400/8000]	[L1: 0.0895][DIV: 0.1309][GRAD: 0.1820][VORT: 0.2415][Total: 0.6440]	4.6+3.4s
[3200/8000]	[L1: 0.0907][DIV: 0.1326][GRAD: 0.1843][VORT: 0.2455][Total: 0.6531]	4.5+3.4s
[4000/8000]	[L1: 0.0911][DIV: 0.1327][GRAD: 0.1849][VORT: 0.2470][Total: 0.6558]	4.6+3.4s
[4800/8000]	[L1: 0.0906][DIV: 0.1322][GRAD: 0.1841][VORT: 0.2470][Total: 0.6538]	4.5+3.4s
[5600/8000]	[L1: 0.0909][DIV: 0.1326][GRAD: 0.1850][VORT: 0.2486][Total: 0.6570]	4.5+3.4s
[6400/8000]	[L1: 0.0914][DIV: 0.1333][GRAD: 0.1860][VORT: 0.2498][Total: 0.6606]	4.5+3.4s
[7200/8000]	[L1: 0.0916][DIV: 0.1334][GRAD: 0.1862][VORT: 0.2494][Total: 0.6606]	4.5+3.4s
[8000/8000]	[L1: 0.0915][DIV: 0.1333][GRAD: 0.1862][VORT: 0.2498][Total: 0.6608]	4.5+3.4s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.071059	vorticity_error: 2.288746	mean_abs_divergence: 0.111284
[DIV2K x2]	rel_l2_error: 0.056200	vorticity_error: 0.687586	mean_abs_divergence: 0.059031
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.038801	vorticity_error: 0.721930	mean_abs_divergence: 0.028313
[INFO] New best model found with rel_l2_error on final output: 0.038801
Forward: 1.25s

Saving...
Total: 1.59s

[Epoch 280]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0948][DIV: 0.1385][GRAD: 0.1916][VORT: 0.2511][Total: 0.6760]	4.6+3.3s
[1600/8000]	[L1: 0.0892][DIV: 0.1310][GRAD: 0.1809][VORT: 0.2407][Total: 0.6419]	4.5+3.4s
[2400/8000]	[L1: 0.0908][DIV: 0.1323][GRAD: 0.1848][VORT: 0.2470][Total: 0.6549]	4.6+3.4s
[3200/8000]	[L1: 0.0919][DIV: 0.1346][GRAD: 0.1868][VORT: 0.2492][Total: 0.6624]	4.5+3.4s
[4000/8000]	[L1: 0.0901][DIV: 0.1327][GRAD: 0.1832][VORT: 0.2458][Total: 0.6518]	4.6+3.4s
[4800/8000]	[L1: 0.0892][DIV: 0.1312][GRAD: 0.1810][VORT: 0.2434][Total: 0.6448]	4.5+3.4s
[5600/8000]	[L1: 0.0896][DIV: 0.1318][GRAD: 0.1821][VORT: 0.2456][Total: 0.6491]	4.5+3.4s
[6400/8000]	[L1: 0.0897][DIV: 0.1317][GRAD: 0.1822][VORT: 0.2462][Total: 0.6497]	4.5+3.4s
[7200/8000]	[L1: 0.0900][DIV: 0.1322][GRAD: 0.1829][VORT: 0.2471][Total: 0.6522]	4.6+3.4s
[8000/8000]	[L1: 0.0896][DIV: 0.1315][GRAD: 0.1820][VORT: 0.2460][Total: 0.6491]	4.5+3.4s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.086365	vorticity_error: 0.843112	mean_abs_divergence: 0.124616
[DIV2K x2]	rel_l2_error: 0.070622	vorticity_error: 1.020401	mean_abs_divergence: 0.067266
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.054521	vorticity_error: 0.817067	mean_abs_divergence: 0.033300
Forward: 1.16s

Saving...
Total: 1.47s

[Epoch 281]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0848][DIV: 0.1260][GRAD: 0.1732][VORT: 0.2376][Total: 0.6215]	4.5+3.4s
[1600/8000]	[L1: 0.0880][DIV: 0.1293][GRAD: 0.1799][VORT: 0.2462][Total: 0.6434]	4.5+3.4s
[2400/8000]	[L1: 0.0888][DIV: 0.1297][GRAD: 0.1819][VORT: 0.2511][Total: 0.6514]	4.6+3.4s
[3200/8000]	[L1: 0.0889][DIV: 0.1303][GRAD: 0.1818][VORT: 0.2489][Total: 0.6499]	4.5+3.4s
[4000/8000]	[L1: 0.0879][DIV: 0.1290][GRAD: 0.1797][VORT: 0.2464][Total: 0.6430]	4.5+3.4s
[4800/8000]	[L1: 0.0878][DIV: 0.1286][GRAD: 0.1793][VORT: 0.2458][Total: 0.6414]	4.5+3.4s
[5600/8000]	[L1: 0.0885][DIV: 0.1296][GRAD: 0.1804][VORT: 0.2455][Total: 0.6439]	4.5+3.4s
[6400/8000]	[L1: 0.0886][DIV: 0.1294][GRAD: 0.1806][VORT: 0.2458][Total: 0.6444]	4.5+3.4s
[7200/8000]	[L1: 0.0889][DIV: 0.1299][GRAD: 0.1811][VORT: 0.2460][Total: 0.6459]	4.5+3.4s
[8000/8000]	[L1: 0.0891][DIV: 0.1303][GRAD: 0.1817][VORT: 0.2471][Total: 0.6483]	4.5+3.4s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.080078	vorticity_error: 1.092159	mean_abs_divergence: 0.127167
[DIV2K x2]	rel_l2_error: 0.061164	vorticity_error: 0.728504	mean_abs_divergence: 0.066700
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.050238	vorticity_error: 0.892674	mean_abs_divergence: 0.032352
Forward: 1.25s

Saving...
Total: 1.57s

[Epoch 282]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0866][DIV: 0.1285][GRAD: 0.1758][VORT: 0.2404][Total: 0.6313]	4.6+3.4s
[1600/8000]	[L1: 0.0906][DIV: 0.1338][GRAD: 0.1843][VORT: 0.2507][Total: 0.6595]	4.5+3.4s
[2400/8000]	[L1: 0.0885][DIV: 0.1312][GRAD: 0.1799][VORT: 0.2428][Total: 0.6424]	4.6+3.4s
[3200/8000]	[L1: 0.0901][DIV: 0.1322][GRAD: 0.1832][VORT: 0.2470][Total: 0.6525]	4.5+3.4s
[4000/8000]	[L1: 0.0894][DIV: 0.1314][GRAD: 0.1816][VORT: 0.2446][Total: 0.6469]	4.6+3.4s
[4800/8000]	[L1: 0.0903][DIV: 0.1324][GRAD: 0.1834][VORT: 0.2470][Total: 0.6531]	4.5+3.4s
[5600/8000]	[L1: 0.0911][DIV: 0.1334][GRAD: 0.1852][VORT: 0.2490][Total: 0.6586]	4.5+3.4s
[6400/8000]	[L1: 0.0905][DIV: 0.1325][GRAD: 0.1841][VORT: 0.2489][Total: 0.6560]	4.5+3.4s
[7200/8000]	[L1: 0.0904][DIV: 0.1321][GRAD: 0.1838][VORT: 0.2482][Total: 0.6545]	4.6+3.4s
[8000/8000]	[L1: 0.0901][DIV: 0.1317][GRAD: 0.1833][VORT: 0.2486][Total: 0.6537]	4.5+3.4s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.074710	vorticity_error: 0.895161	mean_abs_divergence: 0.099410
[DIV2K x2]	rel_l2_error: 0.061024	vorticity_error: 0.864729	mean_abs_divergence: 0.053577
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048267	vorticity_error: 0.835367	mean_abs_divergence: 0.026394
Forward: 1.22s

Saving...
Total: 1.54s

[Epoch 283]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0889][DIV: 0.1283][GRAD: 0.1811][VORT: 0.2501][Total: 0.6484]	4.5+3.4s
[1600/8000]	[L1: 0.0915][DIV: 0.1328][GRAD: 0.1861][VORT: 0.2492][Total: 0.6596]	4.5+3.4s
[2400/8000]	[L1: 0.0922][DIV: 0.1336][GRAD: 0.1872][VORT: 0.2478][Total: 0.6608]	4.6+3.3s
[3200/8000]	[L1: 0.0913][DIV: 0.1324][GRAD: 0.1854][VORT: 0.2469][Total: 0.6559]	4.5+3.4s
[4000/8000]	[L1: 0.0902][DIV: 0.1315][GRAD: 0.1830][VORT: 0.2441][Total: 0.6488]	4.5+3.4s
[4800/8000]	[L1: 0.0899][DIV: 0.1314][GRAD: 0.1827][VORT: 0.2446][Total: 0.6487]	4.5+3.4s
[5600/8000]	[L1: 0.0908][DIV: 0.1325][GRAD: 0.1843][VORT: 0.2460][Total: 0.6536]	4.5+3.4s
[6400/8000]	[L1: 0.0913][DIV: 0.1331][GRAD: 0.1853][VORT: 0.2477][Total: 0.6574]	4.5+3.4s
[7200/8000]	[L1: 0.0902][DIV: 0.1317][GRAD: 0.1832][VORT: 0.2451][Total: 0.6502]	4.5+3.4s
[8000/8000]	[L1: 0.0898][DIV: 0.1314][GRAD: 0.1823][VORT: 0.2439][Total: 0.6474]	4.5+3.4s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.075718	vorticity_error: 0.549477	mean_abs_divergence: 0.120884
[DIV2K x2]	rel_l2_error: 0.058756	vorticity_error: 0.541478	mean_abs_divergence: 0.064730
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.040663	vorticity_error: 0.457724	mean_abs_divergence: 0.032030
Forward: 1.25s

Saving...
Total: 1.57s

[Epoch 284]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0905][DIV: 0.1332][GRAD: 0.1838][VORT: 0.2488][Total: 0.6563]	4.5+3.4s
[1600/8000]	[L1: 0.0891][DIV: 0.1299][GRAD: 0.1803][VORT: 0.2412][Total: 0.6404]	4.5+3.4s
[2400/8000]	[L1: 0.0888][DIV: 0.1306][GRAD: 0.1800][VORT: 0.2401][Total: 0.6395]	4.6+3.4s
[3200/8000]	[L1: 0.0895][DIV: 0.1309][GRAD: 0.1816][VORT: 0.2411][Total: 0.6430]	4.5+3.4s
[4000/8000]	[L1: 0.0906][DIV: 0.1326][GRAD: 0.1837][VORT: 0.2446][Total: 0.6515]	4.5+3.4s
[4800/8000]	[L1: 0.0912][DIV: 0.1335][GRAD: 0.1850][VORT: 0.2460][Total: 0.6557]	4.5+3.4s
[5600/8000]	[L1: 0.0918][DIV: 0.1339][GRAD: 0.1862][VORT: 0.2471][Total: 0.6590]	4.5+3.4s
[6400/8000]	[L1: 0.0922][DIV: 0.1344][GRAD: 0.1869][VORT: 0.2476][Total: 0.6611]	4.5+3.4s
[7200/8000]	[L1: 0.0919][DIV: 0.1340][GRAD: 0.1864][VORT: 0.2475][Total: 0.6598]	4.5+3.4s
[8000/8000]	[L1: 0.0919][DIV: 0.1339][GRAD: 0.1864][VORT: 0.2480][Total: 0.6603]	4.5+3.4s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.071717	vorticity_error: 0.554728	mean_abs_divergence: 0.090373
[DIV2K x2]	rel_l2_error: 0.050424	vorticity_error: 0.625310	mean_abs_divergence: 0.046185
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042442	vorticity_error: 0.531789	mean_abs_divergence: 0.022224
Forward: 1.27s

Saving...
Total: 1.59s

[Epoch 285]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0913][DIV: 0.1332][GRAD: 0.1861][VORT: 0.2508][Total: 0.6613]	4.5+3.4s
[1600/8000]	[L1: 0.0859][DIV: 0.1273][GRAD: 0.1742][VORT: 0.2319][Total: 0.6194]	4.5+3.4s
[2400/8000]	[L1: 0.0845][DIV: 0.1254][GRAD: 0.1716][VORT: 0.2322][Total: 0.6138]	4.6+3.4s
[3200/8000]	[L1: 0.0864][DIV: 0.1275][GRAD: 0.1756][VORT: 0.2366][Total: 0.6262]	4.5+3.4s
[4000/8000]	[L1: 0.0860][DIV: 0.1272][GRAD: 0.1749][VORT: 0.2363][Total: 0.6245]	4.6+3.3s
[4800/8000]	[L1: 0.0867][DIV: 0.1277][GRAD: 0.1763][VORT: 0.2387][Total: 0.6293]	4.5+3.4s
[5600/8000]	[L1: 0.0881][DIV: 0.1295][GRAD: 0.1791][VORT: 0.2416][Total: 0.6383]	4.6+3.4s
[6400/8000]	[L1: 0.0887][DIV: 0.1304][GRAD: 0.1803][VORT: 0.2428][Total: 0.6422]	4.5+3.4s
[7200/8000]	[L1: 0.0882][DIV: 0.1297][GRAD: 0.1793][VORT: 0.2414][Total: 0.6386]	4.5+3.4s
[8000/8000]	[L1: 0.0886][DIV: 0.1300][GRAD: 0.1799][VORT: 0.2423][Total: 0.6408]	4.5+3.4s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.091578	vorticity_error: 0.925877	mean_abs_divergence: 0.130841
[DIV2K x2]	rel_l2_error: 0.069060	vorticity_error: 1.083918	mean_abs_divergence: 0.068633
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.050043	vorticity_error: 0.892196	mean_abs_divergence: 0.032689
Forward: 1.27s

Saving...
Total: 1.60s

[Epoch 286]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0795][DIV: 0.1197][GRAD: 0.1604][VORT: 0.2187][Total: 0.5783]	4.5+3.4s
[1600/8000]	[L1: 0.0800][DIV: 0.1193][GRAD: 0.1618][VORT: 0.2203][Total: 0.5813]	4.5+3.4s
[2400/8000]	[L1: 0.0833][DIV: 0.1231][GRAD: 0.1689][VORT: 0.2293][Total: 0.6046]	4.6+3.4s
[3200/8000]	[L1: 0.0850][DIV: 0.1246][GRAD: 0.1723][VORT: 0.2337][Total: 0.6156]	4.5+3.4s
[4000/8000]	[L1: 0.0856][DIV: 0.1256][GRAD: 0.1737][VORT: 0.2346][Total: 0.6194]	4.5+3.4s
[4800/8000]	[L1: 0.0863][DIV: 0.1262][GRAD: 0.1755][VORT: 0.2368][Total: 0.6248]	4.5+3.4s
[5600/8000]	[L1: 0.0875][DIV: 0.1276][GRAD: 0.1779][VORT: 0.2402][Total: 0.6333]	4.5+3.4s
[6400/8000]	[L1: 0.0876][DIV: 0.1279][GRAD: 0.1780][VORT: 0.2395][Total: 0.6330]	4.5+3.4s
[7200/8000]	[L1: 0.0874][DIV: 0.1274][GRAD: 0.1775][VORT: 0.2397][Total: 0.6319]	4.5+3.4s
[8000/8000]	[L1: 0.0882][DIV: 0.1286][GRAD: 0.1793][VORT: 0.2417][Total: 0.6378]	4.5+3.4s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.074734	vorticity_error: 0.940274	mean_abs_divergence: 0.123801
[DIV2K x2]	rel_l2_error: 0.064347	vorticity_error: 1.129551	mean_abs_divergence: 0.066196
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.046264	vorticity_error: 1.369086	mean_abs_divergence: 0.033072
Forward: 1.29s

Saving...
Total: 1.61s

[Epoch 287]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0874][DIV: 0.1292][GRAD: 0.1785][VORT: 0.2438][Total: 0.6388]	4.5+3.4s
[1600/8000]	[L1: 0.0897][DIV: 0.1323][GRAD: 0.1826][VORT: 0.2433][Total: 0.6479]	4.5+3.4s
[2400/8000]	[L1: 0.0912][DIV: 0.1341][GRAD: 0.1852][VORT: 0.2463][Total: 0.6567]	4.6+3.4s
[3200/8000]	[L1: 0.0903][DIV: 0.1322][GRAD: 0.1838][VORT: 0.2459][Total: 0.6522]	4.5+3.4s
[4000/8000]	[L1: 0.0905][DIV: 0.1322][GRAD: 0.1841][VORT: 0.2469][Total: 0.6538]	4.5+3.4s
[4800/8000]	[L1: 0.0907][DIV: 0.1323][GRAD: 0.1846][VORT: 0.2482][Total: 0.6558]	4.6+3.4s
[5600/8000]	[L1: 0.0906][DIV: 0.1324][GRAD: 0.1842][VORT: 0.2486][Total: 0.6558]	4.5+3.4s
[6400/8000]	[L1: 0.0908][DIV: 0.1324][GRAD: 0.1845][VORT: 0.2484][Total: 0.6561]	4.5+3.4s
[7200/8000]	[L1: 0.0910][DIV: 0.1326][GRAD: 0.1853][VORT: 0.2503][Total: 0.6591]	4.5+3.4s
[8000/8000]	[L1: 0.0910][DIV: 0.1324][GRAD: 0.1850][VORT: 0.2497][Total: 0.6581]	4.5+3.4s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.067033	vorticity_error: 2.796820	mean_abs_divergence: 0.095524
[DIV2K x2]	rel_l2_error: 0.051033	vorticity_error: 0.917836	mean_abs_divergence: 0.048874
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.041032	vorticity_error: 0.870407	mean_abs_divergence: 0.023547
Forward: 1.26s

Saving...
Total: 1.58s

[Epoch 288]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0866][DIV: 0.1276][GRAD: 0.1766][VORT: 0.2410][Total: 0.6317]	4.5+3.4s
[1600/8000]	[L1: 0.0886][DIV: 0.1303][GRAD: 0.1811][VORT: 0.2464][Total: 0.6465]	4.6+3.3s
[2400/8000]	[L1: 0.0870][DIV: 0.1279][GRAD: 0.1777][VORT: 0.2448][Total: 0.6375]	4.5+3.4s
[3200/8000]	[L1: 0.0881][DIV: 0.1293][GRAD: 0.1796][VORT: 0.2456][Total: 0.6426]	4.6+3.3s
[4000/8000]	[L1: 0.0889][DIV: 0.1308][GRAD: 0.1812][VORT: 0.2472][Total: 0.6481]	4.5+3.4s
[4800/8000]	[L1: 0.0888][DIV: 0.1306][GRAD: 0.1812][VORT: 0.2466][Total: 0.6472]	4.6+3.4s
[5600/8000]	[L1: 0.0894][DIV: 0.1314][GRAD: 0.1824][VORT: 0.2469][Total: 0.6501]	4.5+3.4s
[6400/8000]	[L1: 0.0889][DIV: 0.1307][GRAD: 0.1813][VORT: 0.2457][Total: 0.6467]	4.5+3.4s
[7200/8000]	[L1: 0.0889][DIV: 0.1306][GRAD: 0.1812][VORT: 0.2452][Total: 0.6459]	4.5+3.4s
[8000/8000]	[L1: 0.0888][DIV: 0.1307][GRAD: 0.1811][VORT: 0.2440][Total: 0.6446]	4.6+3.4s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.077207	vorticity_error: 0.664374	mean_abs_divergence: 0.133946
[DIV2K x2]	rel_l2_error: 0.067980	vorticity_error: 0.658430	mean_abs_divergence: 0.071902
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.046023	vorticity_error: 0.617071	mean_abs_divergence: 0.035101
Forward: 1.26s

Saving...
Total: 1.58s

[Epoch 289]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0913][DIV: 0.1361][GRAD: 0.1868][VORT: 0.2588][Total: 0.6730]	4.5+3.4s
[1600/8000]	[L1: 0.0914][DIV: 0.1350][GRAD: 0.1861][VORT: 0.2561][Total: 0.6686]	4.6+3.4s
[2400/8000]	[L1: 0.0903][DIV: 0.1331][GRAD: 0.1837][VORT: 0.2528][Total: 0.6599]	4.6+3.5s
[3200/8000]	[L1: 0.0911][DIV: 0.1334][GRAD: 0.1853][VORT: 0.2530][Total: 0.6628]	4.6+3.4s
[4000/8000]	[L1: 0.0905][DIV: 0.1325][GRAD: 0.1842][VORT: 0.2516][Total: 0.6587]	4.5+3.4s
[4800/8000]	[L1: 0.0898][DIV: 0.1316][GRAD: 0.1827][VORT: 0.2496][Total: 0.6538]	4.6+3.4s
[5600/8000]	[L1: 0.0908][DIV: 0.1331][GRAD: 0.1849][VORT: 0.2513][Total: 0.6601]	4.5+3.4s
[6400/8000]	[L1: 0.0900][DIV: 0.1320][GRAD: 0.1832][VORT: 0.2490][Total: 0.6540]	4.5+3.4s
[7200/8000]	[L1: 0.0892][DIV: 0.1309][GRAD: 0.1815][VORT: 0.2468][Total: 0.6484]	4.6+3.4s
[8000/8000]	[L1: 0.0895][DIV: 0.1310][GRAD: 0.1821][VORT: 0.2470][Total: 0.6496]	4.5+3.4s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.073940	vorticity_error: 0.961258	mean_abs_divergence: 0.129449
[DIV2K x2]	rel_l2_error: 0.060990	vorticity_error: 0.948800	mean_abs_divergence: 0.067898
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.039910	vorticity_error: 0.986141	mean_abs_divergence: 0.032995
Forward: 1.24s

Saving...
Total: 1.57s

[Epoch 290]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0842][DIV: 0.1237][GRAD: 0.1709][VORT: 0.2355][Total: 0.6144]	4.6+3.4s
[1600/8000]	[L1: 0.0860][DIV: 0.1261][GRAD: 0.1746][VORT: 0.2393][Total: 0.6260]	4.6+3.4s
[2400/8000]	[L1: 0.0865][DIV: 0.1261][GRAD: 0.1756][VORT: 0.2416][Total: 0.6297]	4.6+3.4s
[3200/8000]	[L1: 0.0853][DIV: 0.1245][GRAD: 0.1730][VORT: 0.2375][Total: 0.6203]	4.5+3.4s
[4000/8000]	[L1: 0.0843][DIV: 0.1240][GRAD: 0.1710][VORT: 0.2336][Total: 0.6129]	4.5+3.4s
[4800/8000]	[L1: 0.0846][DIV: 0.1244][GRAD: 0.1715][VORT: 0.2328][Total: 0.6133]	4.6+3.4s
[5600/8000]	[L1: 0.0867][DIV: 0.1271][GRAD: 0.1760][VORT: 0.2391][Total: 0.6289]	4.5+3.4s
[6400/8000]	[L1: 0.0867][DIV: 0.1269][GRAD: 0.1761][VORT: 0.2390][Total: 0.6287]	4.5+3.4s
[7200/8000]	[L1: 0.0866][DIV: 0.1269][GRAD: 0.1759][VORT: 0.2386][Total: 0.6280]	4.5+3.4s
[8000/8000]	[L1: 0.0866][DIV: 0.1270][GRAD: 0.1759][VORT: 0.2388][Total: 0.6282]	4.5+3.4s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.080363	vorticity_error: 1.018167	mean_abs_divergence: 0.116276
[DIV2K x2]	rel_l2_error: 0.068339	vorticity_error: 1.024576	mean_abs_divergence: 0.061929
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.050424	vorticity_error: 1.246958	mean_abs_divergence: 0.029691
Forward: 1.28s

Saving...
Total: 1.60s

[Epoch 291]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0893][DIV: 0.1310][GRAD: 0.1807][VORT: 0.2412][Total: 0.6423]	4.5+3.4s
[1600/8000]	[L1: 0.0866][DIV: 0.1278][GRAD: 0.1757][VORT: 0.2332][Total: 0.6233]	4.6+3.4s
[2400/8000]	[L1: 0.0875][DIV: 0.1288][GRAD: 0.1776][VORT: 0.2371][Total: 0.6310]	4.6+3.4s
[3200/8000]	[L1: 0.0900][DIV: 0.1312][GRAD: 0.1830][VORT: 0.2446][Total: 0.6488]	4.6+3.4s
[4000/8000]	[L1: 0.0903][DIV: 0.1315][GRAD: 0.1836][VORT: 0.2454][Total: 0.6509]	4.5+3.4s
[4800/8000]	[L1: 0.0904][DIV: 0.1318][GRAD: 0.1839][VORT: 0.2461][Total: 0.6522]	4.5+3.4s
[5600/8000]	[L1: 0.0910][DIV: 0.1330][GRAD: 0.1852][VORT: 0.2479][Total: 0.6571]	4.5+3.4s
[6400/8000]	[L1: 0.0908][DIV: 0.1329][GRAD: 0.1847][VORT: 0.2467][Total: 0.6551]	4.6+3.4s
[7200/8000]	[L1: 0.0899][DIV: 0.1318][GRAD: 0.1830][VORT: 0.2450][Total: 0.6498]	4.6+3.4s
[8000/8000]	[L1: 0.0906][DIV: 0.1328][GRAD: 0.1844][VORT: 0.2467][Total: 0.6545]	4.6+3.4s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.096680	vorticity_error: 1.228411	mean_abs_divergence: 0.129049
[DIV2K x2]	rel_l2_error: 0.074806	vorticity_error: 1.100471	mean_abs_divergence: 0.070802
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.052261	vorticity_error: 1.113090	mean_abs_divergence: 0.035952
Forward: 1.30s

Saving...
Total: 1.63s

[Epoch 292]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0947][DIV: 0.1391][GRAD: 0.1919][VORT: 0.2519][Total: 0.6775]	4.6+3.4s
[1600/8000]	[L1: 0.0887][DIV: 0.1305][GRAD: 0.1799][VORT: 0.2377][Total: 0.6368]	4.6+3.4s
[2400/8000]	[L1: 0.0892][DIV: 0.1309][GRAD: 0.1814][VORT: 0.2426][Total: 0.6440]	4.6+3.4s
[3200/8000]	[L1: 0.0894][DIV: 0.1312][GRAD: 0.1819][VORT: 0.2431][Total: 0.6456]	4.6+3.4s
[4000/8000]	[L1: 0.0881][DIV: 0.1295][GRAD: 0.1789][VORT: 0.2391][Total: 0.6357]	4.5+3.4s
[4800/8000]	[L1: 0.0884][DIV: 0.1299][GRAD: 0.1796][VORT: 0.2396][Total: 0.6375]	4.6+3.4s
[5600/8000]	[L1: 0.0886][DIV: 0.1301][GRAD: 0.1800][VORT: 0.2402][Total: 0.6389]	4.5+3.4s
[6400/8000]	[L1: 0.0890][DIV: 0.1307][GRAD: 0.1810][VORT: 0.2417][Total: 0.6424]	4.5+3.4s
[7200/8000]	[L1: 0.0894][DIV: 0.1310][GRAD: 0.1817][VORT: 0.2427][Total: 0.6448]	4.6+3.4s
[8000/8000]	[L1: 0.0897][DIV: 0.1313][GRAD: 0.1824][VORT: 0.2437][Total: 0.6472]	4.6+3.4s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.087806	vorticity_error: 0.760525	mean_abs_divergence: 0.132609
[DIV2K x2]	rel_l2_error: 0.064488	vorticity_error: 0.864266	mean_abs_divergence: 0.069966
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.040498	vorticity_error: 0.638735	mean_abs_divergence: 0.034467
Forward: 1.23s

Saving...
Total: 1.55s

[Epoch 293]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0877][DIV: 0.1296][GRAD: 0.1787][VORT: 0.2404][Total: 0.6365]	4.6+3.4s
[1600/8000]	[L1: 0.0921][DIV: 0.1351][GRAD: 0.1874][VORT: 0.2503][Total: 0.6649]	4.6+3.4s
[2400/8000]	[L1: 0.0924][DIV: 0.1357][GRAD: 0.1879][VORT: 0.2487][Total: 0.6648]	4.6+3.4s
[3200/8000]	[L1: 0.0922][DIV: 0.1348][GRAD: 0.1874][VORT: 0.2491][Total: 0.6635]	4.5+3.4s
[4000/8000]	[L1: 0.0923][DIV: 0.1352][GRAD: 0.1873][VORT: 0.2483][Total: 0.6630]	4.5+3.4s
[4800/8000]	[L1: 0.0920][DIV: 0.1350][GRAD: 0.1868][VORT: 0.2495][Total: 0.6632]	4.5+3.4s
[5600/8000]	[L1: 0.0917][DIV: 0.1347][GRAD: 0.1862][VORT: 0.2488][Total: 0.6614]	4.6+3.4s
[6400/8000]	[L1: 0.0920][DIV: 0.1348][GRAD: 0.1868][VORT: 0.2495][Total: 0.6631]	4.5+3.4s
[7200/8000]	[L1: 0.0916][DIV: 0.1344][GRAD: 0.1861][VORT: 0.2476][Total: 0.6598]	4.6+3.4s
[8000/8000]	[L1: 0.0911][DIV: 0.1336][GRAD: 0.1852][VORT: 0.2475][Total: 0.6573]	4.5+3.4s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.076172	vorticity_error: 0.724671	mean_abs_divergence: 0.121868
[DIV2K x2]	rel_l2_error: 0.062620	vorticity_error: 0.703070	mean_abs_divergence: 0.064996
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044378	vorticity_error: 0.719491	mean_abs_divergence: 0.032128
Forward: 1.22s

Saving...
Total: 1.54s

[Epoch 294]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0872][DIV: 0.1273][GRAD: 0.1769][VORT: 0.2374][Total: 0.6289]	4.6+3.4s
[1600/8000]	[L1: 0.0854][DIV: 0.1253][GRAD: 0.1738][VORT: 0.2382][Total: 0.6226]	4.5+3.4s
[2400/8000]	[L1: 0.0848][DIV: 0.1251][GRAD: 0.1726][VORT: 0.2352][Total: 0.6177]	4.6+3.4s
[3200/8000]	[L1: 0.0857][DIV: 0.1261][GRAD: 0.1745][VORT: 0.2361][Total: 0.6224]	4.5+3.4s
[4000/8000]	[L1: 0.0859][DIV: 0.1261][GRAD: 0.1749][VORT: 0.2366][Total: 0.6235]	4.6+3.4s
[4800/8000]	[L1: 0.0855][DIV: 0.1258][GRAD: 0.1741][VORT: 0.2356][Total: 0.6210]	4.5+3.4s
[5600/8000]	[L1: 0.0862][DIV: 0.1268][GRAD: 0.1756][VORT: 0.2371][Total: 0.6257]	4.6+3.4s
[6400/8000]	[L1: 0.0861][DIV: 0.1267][GRAD: 0.1755][VORT: 0.2379][Total: 0.6263]	4.5+3.4s
[7200/8000]	[L1: 0.0861][DIV: 0.1268][GRAD: 0.1757][VORT: 0.2376][Total: 0.6261]	4.6+3.4s
[8000/8000]	[L1: 0.0867][DIV: 0.1275][GRAD: 0.1767][VORT: 0.2383][Total: 0.6292]	4.5+3.4s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.083583	vorticity_error: 0.766840	mean_abs_divergence: 0.115627
[DIV2K x2]	rel_l2_error: 0.061007	vorticity_error: 0.835990	mean_abs_divergence: 0.060358
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.051382	vorticity_error: 0.868776	mean_abs_divergence: 0.029646
Forward: 1.26s

Saving...
Total: 1.59s

[Epoch 295]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0881][DIV: 0.1318][GRAD: 0.1785][VORT: 0.2348][Total: 0.6332]	4.6+3.4s
[1600/8000]	[L1: 0.0865][DIV: 0.1292][GRAD: 0.1758][VORT: 0.2368][Total: 0.6284]	4.5+3.4s
[2400/8000]	[L1: 0.0887][DIV: 0.1318][GRAD: 0.1804][VORT: 0.2415][Total: 0.6423]	4.6+3.4s
[3200/8000]	[L1: 0.0861][DIV: 0.1277][GRAD: 0.1753][VORT: 0.2382][Total: 0.6274]	4.5+3.4s
[4000/8000]	[L1: 0.0881][DIV: 0.1302][GRAD: 0.1793][VORT: 0.2422][Total: 0.6397]	4.6+3.4s
[4800/8000]	[L1: 0.0889][DIV: 0.1308][GRAD: 0.1810][VORT: 0.2444][Total: 0.6452]	4.5+3.4s
[5600/8000]	[L1: 0.0890][DIV: 0.1308][GRAD: 0.1813][VORT: 0.2458][Total: 0.6469]	4.5+3.4s
[6400/8000]	[L1: 0.0891][DIV: 0.1309][GRAD: 0.1815][VORT: 0.2462][Total: 0.6477]	4.5+3.4s
[7200/8000]	[L1: 0.0899][DIV: 0.1317][GRAD: 0.1832][VORT: 0.2478][Total: 0.6526]	4.6+3.4s
[8000/8000]	[L1: 0.0899][DIV: 0.1315][GRAD: 0.1831][VORT: 0.2476][Total: 0.6520]	4.6+3.4s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.072319	vorticity_error: 0.685934	mean_abs_divergence: 0.111152
[DIV2K x2]	rel_l2_error: 0.054877	vorticity_error: 1.272386	mean_abs_divergence: 0.059063
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.040656	vorticity_error: 1.095561	mean_abs_divergence: 0.029154
Forward: 1.24s

Saving...
Total: 1.58s

[Epoch 296]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0920][DIV: 0.1341][GRAD: 0.1878][VORT: 0.2596][Total: 0.6736]	4.6+3.4s
[1600/8000]	[L1: 0.0905][DIV: 0.1323][GRAD: 0.1849][VORT: 0.2558][Total: 0.6635]	4.5+3.4s
[2400/8000]	[L1: 0.0911][DIV: 0.1338][GRAD: 0.1857][VORT: 0.2543][Total: 0.6649]	4.6+3.4s
[3200/8000]	[L1: 0.0909][DIV: 0.1331][GRAD: 0.1854][VORT: 0.2528][Total: 0.6622]	4.5+3.4s
[4000/8000]	[L1: 0.0908][DIV: 0.1333][GRAD: 0.1851][VORT: 0.2509][Total: 0.6601]	4.6+3.4s
[4800/8000]	[L1: 0.0905][DIV: 0.1330][GRAD: 0.1845][VORT: 0.2513][Total: 0.6593]	4.5+3.4s
[5600/8000]	[L1: 0.0903][DIV: 0.1326][GRAD: 0.1840][VORT: 0.2501][Total: 0.6570]	4.6+3.4s
[6400/8000]	[L1: 0.0907][DIV: 0.1327][GRAD: 0.1847][VORT: 0.2507][Total: 0.6589]	4.5+3.4s
[7200/8000]	[L1: 0.0911][DIV: 0.1330][GRAD: 0.1856][VORT: 0.2525][Total: 0.6622]	4.6+3.4s
[8000/8000]	[L1: 0.0908][DIV: 0.1327][GRAD: 0.1850][VORT: 0.2510][Total: 0.6595]	4.5+3.4s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.063235	vorticity_error: 0.879789	mean_abs_divergence: 0.083077
[DIV2K x2]	rel_l2_error: 0.053551	vorticity_error: 1.132319	mean_abs_divergence: 0.043081
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.041029	vorticity_error: 1.245802	mean_abs_divergence: 0.020814
Forward: 1.24s

Saving...
Total: 1.57s

[Epoch 297]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0885][DIV: 0.1322][GRAD: 0.1805][VORT: 0.2410][Total: 0.6421]	4.6+3.4s
[1600/8000]	[L1: 0.0838][DIV: 0.1247][GRAD: 0.1708][VORT: 0.2289][Total: 0.6082]	4.5+3.4s
[2400/8000]	[L1: 0.0861][DIV: 0.1275][GRAD: 0.1751][VORT: 0.2314][Total: 0.6201]	4.6+3.4s
[3200/8000]	[L1: 0.0886][DIV: 0.1310][GRAD: 0.1799][VORT: 0.2389][Total: 0.6383]	4.5+3.4s
[4000/8000]	[L1: 0.0906][DIV: 0.1330][GRAD: 0.1841][VORT: 0.2454][Total: 0.6531]	4.5+3.4s
[4800/8000]	[L1: 0.0899][DIV: 0.1318][GRAD: 0.1828][VORT: 0.2446][Total: 0.6490]	4.5+3.4s
[5600/8000]	[L1: 0.0896][DIV: 0.1313][GRAD: 0.1823][VORT: 0.2451][Total: 0.6483]	4.6+3.4s
[6400/8000]	[L1: 0.0899][DIV: 0.1318][GRAD: 0.1828][VORT: 0.2459][Total: 0.6503]	4.5+3.4s
[7200/8000]	[L1: 0.0907][DIV: 0.1326][GRAD: 0.1846][VORT: 0.2491][Total: 0.6570]	4.6+3.4s
[8000/8000]	[L1: 0.0908][DIV: 0.1327][GRAD: 0.1848][VORT: 0.2491][Total: 0.6573]	4.5+3.4s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.070784	vorticity_error: 0.753281	mean_abs_divergence: 0.116193
[DIV2K x2]	rel_l2_error: 0.058478	vorticity_error: 0.895681	mean_abs_divergence: 0.064008
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043787	vorticity_error: 0.690423	mean_abs_divergence: 0.031768
Forward: 1.26s

Saving...
Total: 1.59s

[Epoch 298]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0907][DIV: 0.1323][GRAD: 0.1839][VORT: 0.2465][Total: 0.6535]	4.6+3.4s
[1600/8000]	[L1: 0.0919][DIV: 0.1331][GRAD: 0.1867][VORT: 0.2508][Total: 0.6624]	4.5+3.5s
[2400/8000]	[L1: 0.0896][DIV: 0.1303][GRAD: 0.1820][VORT: 0.2447][Total: 0.6465]	4.6+3.4s
[3200/8000]	[L1: 0.0909][DIV: 0.1321][GRAD: 0.1849][VORT: 0.2470][Total: 0.6549]	4.5+3.4s
[4000/8000]	[L1: 0.0901][DIV: 0.1312][GRAD: 0.1832][VORT: 0.2449][Total: 0.6494]	4.5+3.4s
[4800/8000]	[L1: 0.0903][DIV: 0.1318][GRAD: 0.1839][VORT: 0.2465][Total: 0.6525]	4.5+3.4s
[5600/8000]	[L1: 0.0892][DIV: 0.1305][GRAD: 0.1816][VORT: 0.2442][Total: 0.6455]	4.6+3.4s
[6400/8000]	[L1: 0.0892][DIV: 0.1305][GRAD: 0.1814][VORT: 0.2430][Total: 0.6441]	4.5+3.4s
[7200/8000]	[L1: 0.0892][DIV: 0.1308][GRAD: 0.1814][VORT: 0.2428][Total: 0.6442]	4.6+3.4s
[8000/8000]	[L1: 0.0888][DIV: 0.1305][GRAD: 0.1806][VORT: 0.2414][Total: 0.6414]	4.6+3.4s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.081615	vorticity_error: 0.735841	mean_abs_divergence: 0.142167
[DIV2K x2]	rel_l2_error: 0.066525	vorticity_error: 0.896869	mean_abs_divergence: 0.077689
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.046322	vorticity_error: 0.841910	mean_abs_divergence: 0.038866
Forward: 1.26s

Saving...
Total: 1.59s

[Epoch 299]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0856][DIV: 0.1246][GRAD: 0.1740][VORT: 0.2408][Total: 0.6250]	4.6+3.4s
[1600/8000]	[L1: 0.0861][DIV: 0.1256][GRAD: 0.1747][VORT: 0.2392][Total: 0.6255]	4.5+3.4s
[2400/8000]	[L1: 0.0881][DIV: 0.1290][GRAD: 0.1790][VORT: 0.2439][Total: 0.6400]	4.6+3.4s
[3200/8000]	[L1: 0.0874][DIV: 0.1282][GRAD: 0.1777][VORT: 0.2416][Total: 0.6349]	4.5+3.4s
[4000/8000]	[L1: 0.0878][DIV: 0.1288][GRAD: 0.1787][VORT: 0.2412][Total: 0.6364]	4.6+3.4s
[4800/8000]	[L1: 0.0877][DIV: 0.1286][GRAD: 0.1785][VORT: 0.2408][Total: 0.6355]	4.5+3.4s
[5600/8000]	[L1: 0.0873][DIV: 0.1282][GRAD: 0.1778][VORT: 0.2408][Total: 0.6340]	4.6+3.4s
[6400/8000]	[L1: 0.0864][DIV: 0.1270][GRAD: 0.1758][VORT: 0.2385][Total: 0.6278]	4.5+3.4s
[7200/8000]	[L1: 0.0858][DIV: 0.1263][GRAD: 0.1747][VORT: 0.2367][Total: 0.6235]	4.6+3.4s
[8000/8000]	[L1: 0.0857][DIV: 0.1261][GRAD: 0.1745][VORT: 0.2367][Total: 0.6230]	4.6+3.4s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.089103	vorticity_error: 0.870813	mean_abs_divergence: 0.132058
[DIV2K x2]	rel_l2_error: 0.072508	vorticity_error: 0.873425	mean_abs_divergence: 0.069584
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048569	vorticity_error: 0.838776	mean_abs_divergence: 0.033941
Forward: 1.32s

Saving...
Total: 1.64s

[Epoch 300]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0938][DIV: 0.1361][GRAD: 0.1907][VORT: 0.2550][Total: 0.6756]	4.6+3.4s
[1600/8000]	[L1: 0.0937][DIV: 0.1359][GRAD: 0.1908][VORT: 0.2566][Total: 0.6769]	4.6+3.4s
[2400/8000]	[L1: 0.0918][DIV: 0.1342][GRAD: 0.1871][VORT: 0.2516][Total: 0.6647]	4.6+3.4s
[3200/8000]	[L1: 0.0903][DIV: 0.1319][GRAD: 0.1841][VORT: 0.2490][Total: 0.6551]	4.6+3.4s
[4000/8000]	[L1: 0.0907][DIV: 0.1326][GRAD: 0.1847][VORT: 0.2482][Total: 0.6562]	4.5+3.4s
[4800/8000]	[L1: 0.0906][DIV: 0.1321][GRAD: 0.1845][VORT: 0.2486][Total: 0.6558]	4.6+3.4s
[5600/8000]	[L1: 0.0902][DIV: 0.1318][GRAD: 0.1836][VORT: 0.2470][Total: 0.6526]	4.6+3.4s
[6400/8000]	[L1: 0.0899][DIV: 0.1314][GRAD: 0.1830][VORT: 0.2475][Total: 0.6518]	4.6+3.4s
[7200/8000]	[L1: 0.0898][DIV: 0.1315][GRAD: 0.1829][VORT: 0.2468][Total: 0.6510]	4.6+3.4s
[8000/8000]	[L1: 0.0896][DIV: 0.1315][GRAD: 0.1823][VORT: 0.2462][Total: 0.6496]	4.6+3.4s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.102030	vorticity_error: 0.888866	mean_abs_divergence: 0.163110
[DIV2K x2]	rel_l2_error: 0.081526	vorticity_error: 0.873470	mean_abs_divergence: 0.086622
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.054792	vorticity_error: 0.689134	mean_abs_divergence: 0.041917
Forward: 1.27s

Saving...
Total: 1.60s

[Epoch 301]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0924][DIV: 0.1365][GRAD: 0.1870][VORT: 0.2479][Total: 0.6637]	4.6+3.4s
[1600/8000]	[L1: 0.0922][DIV: 0.1347][GRAD: 0.1871][VORT: 0.2515][Total: 0.6655]	4.5+3.4s
[2400/8000]	[L1: 0.0919][DIV: 0.1342][GRAD: 0.1868][VORT: 0.2519][Total: 0.6648]	4.6+3.4s
[3200/8000]	[L1: 0.0920][DIV: 0.1347][GRAD: 0.1869][VORT: 0.2520][Total: 0.6657]	4.6+3.4s
[4000/8000]	[L1: 0.0920][DIV: 0.1345][GRAD: 0.1867][VORT: 0.2520][Total: 0.6652]	4.5+3.4s
[4800/8000]	[L1: 0.0906][DIV: 0.1325][GRAD: 0.1838][VORT: 0.2485][Total: 0.6554]	4.6+3.4s
[5600/8000]	[L1: 0.0924][DIV: 0.1348][GRAD: 0.1876][VORT: 0.2525][Total: 0.6673]	4.5+3.4s
[6400/8000]	[L1: 0.0922][DIV: 0.1345][GRAD: 0.1871][VORT: 0.2507][Total: 0.6645]	4.6+3.3s
[7200/8000]	[L1: 0.0917][DIV: 0.1338][GRAD: 0.1862][VORT: 0.2504][Total: 0.6620]	4.5+3.4s
[8000/8000]	[L1: 0.0912][DIV: 0.1332][GRAD: 0.1852][VORT: 0.2493][Total: 0.6588]	4.5+3.4s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.080784	vorticity_error: 0.826266	mean_abs_divergence: 0.135664
[DIV2K x2]	rel_l2_error: 0.063410	vorticity_error: 0.906343	mean_abs_divergence: 0.070036
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048026	vorticity_error: 0.746967	mean_abs_divergence: 0.033995
Forward: 1.25s

Saving...
Total: 1.57s

[Epoch 302]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0885][DIV: 0.1290][GRAD: 0.1809][VORT: 0.2529][Total: 0.6513]	4.5+3.3s
[1600/8000]	[L1: 0.0880][DIV: 0.1283][GRAD: 0.1793][VORT: 0.2446][Total: 0.6402]	4.6+3.4s
[2400/8000]	[L1: 0.0862][DIV: 0.1259][GRAD: 0.1754][VORT: 0.2372][Total: 0.6246]	4.6+3.4s
[3200/8000]	[L1: 0.0871][DIV: 0.1271][GRAD: 0.1772][VORT: 0.2390][Total: 0.6304]	4.6+3.4s
[4000/8000]	[L1: 0.0866][DIV: 0.1263][GRAD: 0.1764][VORT: 0.2401][Total: 0.6294]	4.5+3.4s
[4800/8000]	[L1: 0.0874][DIV: 0.1269][GRAD: 0.1779][VORT: 0.2427][Total: 0.6348]	4.6+3.4s
[5600/8000]	[L1: 0.0879][DIV: 0.1277][GRAD: 0.1789][VORT: 0.2442][Total: 0.6387]	4.5+3.4s
[6400/8000]	[L1: 0.0884][DIV: 0.1286][GRAD: 0.1799][VORT: 0.2447][Total: 0.6415]	4.6+3.4s
[7200/8000]	[L1: 0.0890][DIV: 0.1294][GRAD: 0.1811][VORT: 0.2459][Total: 0.6453]	4.5+3.4s
[8000/8000]	[L1: 0.0879][DIV: 0.1285][GRAD: 0.1789][VORT: 0.2430][Total: 0.6382]	4.5+3.4s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.088343	vorticity_error: 0.888520	mean_abs_divergence: 0.128712
[DIV2K x2]	rel_l2_error: 0.063000	vorticity_error: 0.983105	mean_abs_divergence: 0.066669
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042715	vorticity_error: 0.843075	mean_abs_divergence: 0.032041
Forward: 1.26s

Saving...
Total: 1.58s

[Epoch 303]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0860][DIV: 0.1275][GRAD: 0.1754][VORT: 0.2372][Total: 0.6262]	4.5+3.4s
[1600/8000]	[L1: 0.0886][DIV: 0.1308][GRAD: 0.1802][VORT: 0.2408][Total: 0.6404]	4.6+3.4s
[2400/8000]	[L1: 0.0881][DIV: 0.1303][GRAD: 0.1791][VORT: 0.2374][Total: 0.6350]	4.6+3.4s
[3200/8000]	[L1: 0.0904][DIV: 0.1333][GRAD: 0.1835][VORT: 0.2433][Total: 0.6505]	4.6+3.4s
[4000/8000]	[L1: 0.0901][DIV: 0.1327][GRAD: 0.1833][VORT: 0.2447][Total: 0.6508]	4.5+3.4s
[4800/8000]	[L1: 0.0890][DIV: 0.1309][GRAD: 0.1809][VORT: 0.2419][Total: 0.6426]	4.5+3.4s
[5600/8000]	[L1: 0.0882][DIV: 0.1299][GRAD: 0.1792][VORT: 0.2409][Total: 0.6383]	4.5+3.4s
[6400/8000]	[L1: 0.0883][DIV: 0.1295][GRAD: 0.1794][VORT: 0.2418][Total: 0.6390]	4.6+3.4s
[7200/8000]	[L1: 0.0883][DIV: 0.1297][GRAD: 0.1797][VORT: 0.2420][Total: 0.6396]	4.5+3.4s
[8000/8000]	[L1: 0.0883][DIV: 0.1296][GRAD: 0.1796][VORT: 0.2420][Total: 0.6396]	4.5+3.4s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.088450	vorticity_error: 0.927110	mean_abs_divergence: 0.140971
[DIV2K x2]	rel_l2_error: 0.065393	vorticity_error: 1.123840	mean_abs_divergence: 0.072823
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042427	vorticity_error: 0.919467	mean_abs_divergence: 0.035349
Forward: 1.22s

Saving...
Total: 1.55s

[Epoch 304]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0861][DIV: 0.1235][GRAD: 0.1755][VORT: 0.2496][Total: 0.6347]	4.6+3.4s
[1600/8000]	[L1: 0.0861][DIV: 0.1254][GRAD: 0.1755][VORT: 0.2446][Total: 0.6316]	4.5+3.4s
[2400/8000]	[L1: 0.0859][DIV: 0.1257][GRAD: 0.1752][VORT: 0.2436][Total: 0.6304]	4.6+3.4s
[3200/8000]	[L1: 0.0856][DIV: 0.1263][GRAD: 0.1743][VORT: 0.2402][Total: 0.6264]	4.5+3.4s
[4000/8000]	[L1: 0.0855][DIV: 0.1261][GRAD: 0.1741][VORT: 0.2399][Total: 0.6256]	4.5+3.4s
[4800/8000]	[L1: 0.0872][DIV: 0.1282][GRAD: 0.1774][VORT: 0.2432][Total: 0.6359]	4.5+3.3s
[5600/8000]	[L1: 0.0873][DIV: 0.1284][GRAD: 0.1776][VORT: 0.2428][Total: 0.6361]	4.5+3.4s
[6400/8000]	[L1: 0.0869][DIV: 0.1279][GRAD: 0.1769][VORT: 0.2418][Total: 0.6336]	4.5+3.3s
[7200/8000]	[L1: 0.0869][DIV: 0.1279][GRAD: 0.1768][VORT: 0.2411][Total: 0.6327]	4.5+3.4s
[8000/8000]	[L1: 0.0872][DIV: 0.1284][GRAD: 0.1775][VORT: 0.2419][Total: 0.6350]	4.6+3.4s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.071094	vorticity_error: 0.826387	mean_abs_divergence: 0.114598
[DIV2K x2]	rel_l2_error: 0.059839	vorticity_error: 0.755235	mean_abs_divergence: 0.059497
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.040597	vorticity_error: 0.815937	mean_abs_divergence: 0.029148
Forward: 1.22s

Saving...
Total: 1.54s

[Epoch 305]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0886][DIV: 0.1287][GRAD: 0.1804][VORT: 0.2426][Total: 0.6403]	4.5+3.4s
[1600/8000]	[L1: 0.0878][DIV: 0.1284][GRAD: 0.1784][VORT: 0.2379][Total: 0.6324]	4.5+3.4s
[2400/8000]	[L1: 0.0883][DIV: 0.1299][GRAD: 0.1795][VORT: 0.2378][Total: 0.6356]	4.6+3.4s
[3200/8000]	[L1: 0.0887][DIV: 0.1307][GRAD: 0.1806][VORT: 0.2411][Total: 0.6410]	4.6+3.3s
[4000/8000]	[L1: 0.0879][DIV: 0.1298][GRAD: 0.1791][VORT: 0.2423][Total: 0.6391]	4.5+3.4s
[4800/8000]	[L1: 0.0871][DIV: 0.1291][GRAD: 0.1774][VORT: 0.2401][Total: 0.6337]	4.5+3.4s
[5600/8000]	[L1: 0.0873][DIV: 0.1290][GRAD: 0.1778][VORT: 0.2411][Total: 0.6352]	4.5+3.4s
[6400/8000]	[L1: 0.0877][DIV: 0.1297][GRAD: 0.1786][VORT: 0.2426][Total: 0.6385]	4.6+3.4s
[7200/8000]	[L1: 0.0886][DIV: 0.1305][GRAD: 0.1805][VORT: 0.2446][Total: 0.6442]	4.5+3.4s
[8000/8000]	[L1: 0.0885][DIV: 0.1300][GRAD: 0.1802][VORT: 0.2442][Total: 0.6428]	4.5+3.4s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.099155	vorticity_error: 0.879541	mean_abs_divergence: 0.161438
[DIV2K x2]	rel_l2_error: 0.074650	vorticity_error: 1.252669	mean_abs_divergence: 0.087410
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048479	vorticity_error: 0.799120	mean_abs_divergence: 0.043547
Forward: 1.25s

Saving...
Total: 1.58s

[Epoch 306]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0858][DIV: 0.1260][GRAD: 0.1744][VORT: 0.2356][Total: 0.6217]	4.5+3.4s
[1600/8000]	[L1: 0.0892][DIV: 0.1300][GRAD: 0.1819][VORT: 0.2422][Total: 0.6432]	4.5+3.4s
[2400/8000]	[L1: 0.0877][DIV: 0.1275][GRAD: 0.1785][VORT: 0.2399][Total: 0.6336]	4.6+3.4s
[3200/8000]	[L1: 0.0875][DIV: 0.1275][GRAD: 0.1780][VORT: 0.2385][Total: 0.6315]	4.5+3.4s
[4000/8000]	[L1: 0.0872][DIV: 0.1269][GRAD: 0.1775][VORT: 0.2396][Total: 0.6311]	4.5+3.4s
[4800/8000]	[L1: 0.0869][DIV: 0.1268][GRAD: 0.1767][VORT: 0.2384][Total: 0.6287]	4.5+3.4s
[5600/8000]	[L1: 0.0875][DIV: 0.1279][GRAD: 0.1781][VORT: 0.2414][Total: 0.6349]	4.5+3.4s
[6400/8000]	[L1: 0.0872][DIV: 0.1277][GRAD: 0.1775][VORT: 0.2401][Total: 0.6325]	4.5+3.4s
[7200/8000]	[L1: 0.0866][DIV: 0.1273][GRAD: 0.1764][VORT: 0.2386][Total: 0.6289]	4.5+3.4s
[8000/8000]	[L1: 0.0864][DIV: 0.1268][GRAD: 0.1759][VORT: 0.2380][Total: 0.6270]	4.6+3.4s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.071156	vorticity_error: 0.624430	mean_abs_divergence: 0.111617
[DIV2K x2]	rel_l2_error: 0.058288	vorticity_error: 0.673844	mean_abs_divergence: 0.059150
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045082	vorticity_error: 0.677054	mean_abs_divergence: 0.028514
Forward: 1.20s

Saving...
Total: 1.52s

[Epoch 307]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0898][DIV: 0.1301][GRAD: 0.1836][VORT: 0.2551][Total: 0.6587]	4.4+3.3s
[1600/8000]	[L1: 0.0919][DIV: 0.1339][GRAD: 0.1875][VORT: 0.2596][Total: 0.6729]	4.5+3.3s
[2400/8000]	[L1: 0.0897][DIV: 0.1315][GRAD: 0.1826][VORT: 0.2496][Total: 0.6533]	4.5+3.3s
[3200/8000]	[L1: 0.0904][DIV: 0.1324][GRAD: 0.1843][VORT: 0.2496][Total: 0.6566]	4.5+3.3s
[4000/8000]	[L1: 0.0899][DIV: 0.1322][GRAD: 0.1833][VORT: 0.2479][Total: 0.6534]	4.4+3.3s
[4800/8000]	[L1: 0.0899][DIV: 0.1320][GRAD: 0.1831][VORT: 0.2461][Total: 0.6510]	4.4+3.3s
[5600/8000]	[L1: 0.0903][DIV: 0.1326][GRAD: 0.1842][VORT: 0.2476][Total: 0.6547]	4.4+3.3s
[6400/8000]	[L1: 0.0899][DIV: 0.1320][GRAD: 0.1833][VORT: 0.2456][Total: 0.6508]	4.5+3.3s
[7200/8000]	[L1: 0.0895][DIV: 0.1311][GRAD: 0.1824][VORT: 0.2449][Total: 0.6479]	4.4+3.3s
[8000/8000]	[L1: 0.0894][DIV: 0.1310][GRAD: 0.1822][VORT: 0.2447][Total: 0.6473]	4.5+3.3s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.083543	vorticity_error: 1.025138	mean_abs_divergence: 0.121435
[DIV2K x2]	rel_l2_error: 0.067116	vorticity_error: 1.166437	mean_abs_divergence: 0.064370
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045032	vorticity_error: 0.873218	mean_abs_divergence: 0.031948
Forward: 1.20s

Saving...
Total: 1.52s

[Epoch 308]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.1016][DIV: 0.1440][GRAD: 0.2056][VORT: 0.2710][Total: 0.7222]	4.4+3.3s
[1600/8000]	[L1: 0.0976][DIV: 0.1408][GRAD: 0.1979][VORT: 0.2630][Total: 0.6993]	4.5+3.3s
[2400/8000]	[L1: 0.0929][DIV: 0.1351][GRAD: 0.1883][VORT: 0.2525][Total: 0.6687]	4.5+3.3s
[3200/8000]	[L1: 0.0911][DIV: 0.1327][GRAD: 0.1849][VORT: 0.2502][Total: 0.6589]	4.5+3.3s
[4000/8000]	[L1: 0.0920][DIV: 0.1342][GRAD: 0.1868][VORT: 0.2520][Total: 0.6650]	4.4+3.3s
[4800/8000]	[L1: 0.0916][DIV: 0.1339][GRAD: 0.1861][VORT: 0.2506][Total: 0.6622]	4.5+3.3s
[5600/8000]	[L1: 0.0904][DIV: 0.1325][GRAD: 0.1835][VORT: 0.2468][Total: 0.6532]	4.4+3.3s
[6400/8000]	[L1: 0.0914][DIV: 0.1337][GRAD: 0.1854][VORT: 0.2486][Total: 0.6592]	4.5+3.3s
[7200/8000]	[L1: 0.0917][DIV: 0.1343][GRAD: 0.1861][VORT: 0.2488][Total: 0.6609]	4.4+3.3s
[8000/8000]	[L1: 0.0914][DIV: 0.1338][GRAD: 0.1856][VORT: 0.2493][Total: 0.6600]	4.5+3.3s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.063772	vorticity_error: 2.225700	mean_abs_divergence: 0.098640
[DIV2K x2]	rel_l2_error: 0.051930	vorticity_error: 0.739261	mean_abs_divergence: 0.051048
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.036537	vorticity_error: 0.765811	mean_abs_divergence: 0.024763
[INFO] New best model found with rel_l2_error on final output: 0.036537
Forward: 1.24s

Saving...
Total: 1.59s

[Epoch 309]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0886][DIV: 0.1299][GRAD: 0.1809][VORT: 0.2526][Total: 0.6520]	4.5+3.2s
[1600/8000]	[L1: 0.0915][DIV: 0.1340][GRAD: 0.1864][VORT: 0.2545][Total: 0.6664]	4.5+3.2s
[2400/8000]	[L1: 0.0919][DIV: 0.1343][GRAD: 0.1866][VORT: 0.2522][Total: 0.6651]	4.5+3.3s
[3200/8000]	[L1: 0.0915][DIV: 0.1336][GRAD: 0.1859][VORT: 0.2501][Total: 0.6611]	4.5+3.3s
[4000/8000]	[L1: 0.0912][DIV: 0.1329][GRAD: 0.1854][VORT: 0.2509][Total: 0.6604]	4.4+3.3s
[4800/8000]	[L1: 0.0918][DIV: 0.1337][GRAD: 0.1866][VORT: 0.2520][Total: 0.6642]	4.5+3.3s
[5600/8000]	[L1: 0.0901][DIV: 0.1317][GRAD: 0.1831][VORT: 0.2475][Total: 0.6524]	4.4+3.3s
[6400/8000]	[L1: 0.0908][DIV: 0.1324][GRAD: 0.1846][VORT: 0.2497][Total: 0.6576]	4.5+3.3s
[7200/8000]	[L1: 0.0902][DIV: 0.1316][GRAD: 0.1834][VORT: 0.2480][Total: 0.6531]	4.4+3.3s
[8000/8000]	[L1: 0.0907][DIV: 0.1324][GRAD: 0.1845][VORT: 0.2489][Total: 0.6565]	4.5+3.3s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.102270	vorticity_error: 0.903558	mean_abs_divergence: 0.129983
[DIV2K x2]	rel_l2_error: 0.070135	vorticity_error: 1.068381	mean_abs_divergence: 0.071530
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.058779	vorticity_error: 0.962693	mean_abs_divergence: 0.035620
Forward: 1.21s

Saving...
Total: 1.52s

[Epoch 310]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0817][DIV: 0.1210][GRAD: 0.1651][VORT: 0.2247][Total: 0.5925]	4.4+3.3s
[1600/8000]	[L1: 0.0860][DIV: 0.1266][GRAD: 0.1746][VORT: 0.2362][Total: 0.6235]	4.5+3.3s
[2400/8000]	[L1: 0.0898][DIV: 0.1314][GRAD: 0.1823][VORT: 0.2435][Total: 0.6470]	4.5+3.3s
[3200/8000]	[L1: 0.0892][DIV: 0.1307][GRAD: 0.1815][VORT: 0.2437][Total: 0.6451]	4.5+3.3s
[4000/8000]	[L1: 0.0907][DIV: 0.1329][GRAD: 0.1845][VORT: 0.2478][Total: 0.6559]	4.4+3.3s
[4800/8000]	[L1: 0.0908][DIV: 0.1329][GRAD: 0.1846][VORT: 0.2484][Total: 0.6567]	4.4+3.3s
[5600/8000]	[L1: 0.0906][DIV: 0.1324][GRAD: 0.1844][VORT: 0.2492][Total: 0.6565]	4.5+3.2s
[6400/8000]	[L1: 0.0910][DIV: 0.1331][GRAD: 0.1854][VORT: 0.2504][Total: 0.6599]	4.5+3.3s
[7200/8000]	[L1: 0.0903][DIV: 0.1323][GRAD: 0.1839][VORT: 0.2483][Total: 0.6548]	4.4+3.3s
[8000/8000]	[L1: 0.0895][DIV: 0.1314][GRAD: 0.1820][VORT: 0.2455][Total: 0.6484]	4.5+3.3s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.084879	vorticity_error: 0.730525	mean_abs_divergence: 0.131455
[DIV2K x2]	rel_l2_error: 0.068702	vorticity_error: 0.776954	mean_abs_divergence: 0.070249
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048086	vorticity_error: 0.579163	mean_abs_divergence: 0.033805
Forward: 1.22s

Saving...
Total: 1.54s

[Epoch 311]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0870][DIV: 0.1280][GRAD: 0.1766][VORT: 0.2372][Total: 0.6289]	4.4+3.3s
[1600/8000]	[L1: 0.0866][DIV: 0.1275][GRAD: 0.1755][VORT: 0.2355][Total: 0.6251]	4.5+3.3s
[2400/8000]	[L1: 0.0870][DIV: 0.1270][GRAD: 0.1767][VORT: 0.2408][Total: 0.6314]	4.5+3.2s
[3200/8000]	[L1: 0.0850][DIV: 0.1250][GRAD: 0.1724][VORT: 0.2335][Total: 0.6159]	4.5+3.3s
[4000/8000]	[L1: 0.0855][DIV: 0.1259][GRAD: 0.1735][VORT: 0.2342][Total: 0.6191]	4.5+3.3s
[4800/8000]	[L1: 0.0866][DIV: 0.1270][GRAD: 0.1756][VORT: 0.2359][Total: 0.6251]	4.5+3.3s
[5600/8000]	[L1: 0.0873][DIV: 0.1279][GRAD: 0.1770][VORT: 0.2377][Total: 0.6298]	4.4+3.3s
[6400/8000]	[L1: 0.0880][DIV: 0.1290][GRAD: 0.1786][VORT: 0.2385][Total: 0.6341]	4.4+3.3s
[7200/8000]	[L1: 0.0884][DIV: 0.1295][GRAD: 0.1793][VORT: 0.2390][Total: 0.6362]	4.4+3.3s
[8000/8000]	[L1: 0.0888][DIV: 0.1299][GRAD: 0.1801][VORT: 0.2411][Total: 0.6400]	4.4+3.3s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.087073	vorticity_error: 1.153898	mean_abs_divergence: 0.130921
[DIV2K x2]	rel_l2_error: 0.074301	vorticity_error: 3.824554	mean_abs_divergence: 0.072390
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.053758	vorticity_error: 1.230717	mean_abs_divergence: 0.036043
Forward: 1.28s

Saving...
Total: 1.61s

[Epoch 312]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0913][DIV: 0.1335][GRAD: 0.1846][VORT: 0.2452][Total: 0.6546]	4.4+3.2s
[1600/8000]	[L1: 0.0911][DIV: 0.1333][GRAD: 0.1849][VORT: 0.2470][Total: 0.6563]	4.4+3.3s
[2400/8000]	[L1: 0.0913][DIV: 0.1328][GRAD: 0.1852][VORT: 0.2499][Total: 0.6592]	4.4+3.3s
[3200/8000]	[L1: 0.0898][DIV: 0.1316][GRAD: 0.1821][VORT: 0.2441][Total: 0.6475]	4.5+3.2s
[4000/8000]	[L1: 0.0894][DIV: 0.1312][GRAD: 0.1813][VORT: 0.2415][Total: 0.6434]	4.5+3.3s
[4800/8000]	[L1: 0.0891][DIV: 0.1308][GRAD: 0.1809][VORT: 0.2424][Total: 0.6432]	4.4+3.3s
[5600/8000]	[L1: 0.0885][DIV: 0.1298][GRAD: 0.1799][VORT: 0.2415][Total: 0.6397]	4.5+3.3s
[6400/8000]	[L1: 0.0886][DIV: 0.1298][GRAD: 0.1800][VORT: 0.2412][Total: 0.6396]	4.4+3.3s
[7200/8000]	[L1: 0.0877][DIV: 0.1289][GRAD: 0.1783][VORT: 0.2390][Total: 0.6339]	4.5+3.3s
[8000/8000]	[L1: 0.0872][DIV: 0.1280][GRAD: 0.1773][VORT: 0.2385][Total: 0.6310]	4.4+3.3s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.084269	vorticity_error: 2.794786	mean_abs_divergence: 0.137081
[DIV2K x2]	rel_l2_error: 0.067696	vorticity_error: 1.255927	mean_abs_divergence: 0.073591
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044434	vorticity_error: 1.281245	mean_abs_divergence: 0.036450
Forward: 1.16s

Saving...
Total: 1.50s

[Epoch 313]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0953][DIV: 0.1405][GRAD: 0.1938][VORT: 0.2596][Total: 0.6892]	4.4+3.2s
[1600/8000]	[L1: 0.0958][DIV: 0.1394][GRAD: 0.1945][VORT: 0.2589][Total: 0.6887]	4.4+3.3s
[2400/8000]	[L1: 0.0951][DIV: 0.1385][GRAD: 0.1931][VORT: 0.2579][Total: 0.6845]	4.5+3.3s
[3200/8000]	[L1: 0.0933][DIV: 0.1359][GRAD: 0.1898][VORT: 0.2549][Total: 0.6739]	4.5+3.3s
[4000/8000]	[L1: 0.0929][DIV: 0.1357][GRAD: 0.1894][VORT: 0.2563][Total: 0.6742]	4.5+3.3s
[4800/8000]	[L1: 0.0908][DIV: 0.1330][GRAD: 0.1850][VORT: 0.2494][Total: 0.6580]	4.4+3.3s
[5600/8000]	[L1: 0.0912][DIV: 0.1331][GRAD: 0.1858][VORT: 0.2513][Total: 0.6615]	4.5+3.2s
[6400/8000]	[L1: 0.0911][DIV: 0.1331][GRAD: 0.1858][VORT: 0.2520][Total: 0.6621]	4.4+3.3s
[7200/8000]	[L1: 0.0901][DIV: 0.1318][GRAD: 0.1836][VORT: 0.2491][Total: 0.6547]	4.5+3.3s
[8000/8000]	[L1: 0.0910][DIV: 0.1326][GRAD: 0.1855][VORT: 0.2519][Total: 0.6609]	4.4+3.3s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.105808	vorticity_error: 0.790120	mean_abs_divergence: 0.130238
[DIV2K x2]	rel_l2_error: 0.081916	vorticity_error: 0.831242	mean_abs_divergence: 0.070279
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.057207	vorticity_error: 0.614408	mean_abs_divergence: 0.034656
Forward: 1.22s

Saving...
Total: 1.55s

[Epoch 314]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0943][DIV: 0.1359][GRAD: 0.1916][VORT: 0.2557][Total: 0.6775]	4.5+3.2s
[1600/8000]	[L1: 0.0912][DIV: 0.1315][GRAD: 0.1855][VORT: 0.2519][Total: 0.6601]	4.4+3.3s
[2400/8000]	[L1: 0.0883][DIV: 0.1288][GRAD: 0.1792][VORT: 0.2437][Total: 0.6400]	4.5+3.2s
[3200/8000]	[L1: 0.0881][DIV: 0.1290][GRAD: 0.1788][VORT: 0.2431][Total: 0.6390]	4.4+3.3s
[4000/8000]	[L1: 0.0883][DIV: 0.1293][GRAD: 0.1793][VORT: 0.2438][Total: 0.6407]	4.5+3.3s
[4800/8000]	[L1: 0.0893][DIV: 0.1304][GRAD: 0.1812][VORT: 0.2456][Total: 0.6465]	4.4+3.3s
[5600/8000]	[L1: 0.0887][DIV: 0.1297][GRAD: 0.1800][VORT: 0.2441][Total: 0.6425]	4.5+3.3s
[6400/8000]	[L1: 0.0893][DIV: 0.1307][GRAD: 0.1814][VORT: 0.2449][Total: 0.6463]	4.4+3.3s
[7200/8000]	[L1: 0.0895][DIV: 0.1305][GRAD: 0.1819][VORT: 0.2459][Total: 0.6477]	4.5+3.2s
[8000/8000]	[L1: 0.0896][DIV: 0.1307][GRAD: 0.1823][VORT: 0.2467][Total: 0.6492]	4.4+3.3s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.070199	vorticity_error: 0.807714	mean_abs_divergence: 0.105138
[DIV2K x2]	rel_l2_error: 0.064679	vorticity_error: 0.947077	mean_abs_divergence: 0.055311
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.051020	vorticity_error: 0.922757	mean_abs_divergence: 0.026790
Forward: 1.22s

Saving...
Total: 1.54s

[Epoch 315]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0930][DIV: 0.1340][GRAD: 0.1895][VORT: 0.2570][Total: 0.6734]	4.5+3.2s
[1600/8000]	[L1: 0.0887][DIV: 0.1294][GRAD: 0.1805][VORT: 0.2445][Total: 0.6432]	4.4+3.3s
[2400/8000]	[L1: 0.0875][DIV: 0.1282][GRAD: 0.1780][VORT: 0.2412][Total: 0.6349]	4.5+3.3s
[3200/8000]	[L1: 0.0890][DIV: 0.1302][GRAD: 0.1805][VORT: 0.2412][Total: 0.6408]	4.5+3.3s
[4000/8000]	[L1: 0.0892][DIV: 0.1307][GRAD: 0.1807][VORT: 0.2393][Total: 0.6399]	4.5+3.3s
[4800/8000]	[L1: 0.0891][DIV: 0.1309][GRAD: 0.1806][VORT: 0.2394][Total: 0.6400]	4.4+3.3s
[5600/8000]	[L1: 0.0885][DIV: 0.1298][GRAD: 0.1795][VORT: 0.2389][Total: 0.6367]	4.5+3.3s
[6400/8000]	[L1: 0.0883][DIV: 0.1291][GRAD: 0.1792][VORT: 0.2399][Total: 0.6365]	4.4+3.3s
[7200/8000]	[L1: 0.0885][DIV: 0.1294][GRAD: 0.1796][VORT: 0.2407][Total: 0.6382]	4.5+3.3s
[8000/8000]	[L1: 0.0879][DIV: 0.1288][GRAD: 0.1785][VORT: 0.2394][Total: 0.6345]	4.4+3.3s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.090790	vorticity_error: 1.002753	mean_abs_divergence: 0.122946
[DIV2K x2]	rel_l2_error: 0.072303	vorticity_error: 1.035309	mean_abs_divergence: 0.067524
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.051242	vorticity_error: 0.778866	mean_abs_divergence: 0.033676
Forward: 1.23s

Saving...
Total: 1.56s

[Epoch 316]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0958][DIV: 0.1388][GRAD: 0.1945][VORT: 0.2572][Total: 0.6863]	4.5+3.2s
[1600/8000]	[L1: 0.0908][DIV: 0.1343][GRAD: 0.1839][VORT: 0.2443][Total: 0.6533]	4.4+3.3s
[2400/8000]	[L1: 0.0897][DIV: 0.1323][GRAD: 0.1817][VORT: 0.2414][Total: 0.6452]	4.5+3.3s
[3200/8000]	[L1: 0.0893][DIV: 0.1315][GRAD: 0.1809][VORT: 0.2413][Total: 0.6431]	4.5+3.3s
[4000/8000]	[L1: 0.0909][DIV: 0.1332][GRAD: 0.1843][VORT: 0.2467][Total: 0.6551]	4.5+3.3s
[4800/8000]	[L1: 0.0893][DIV: 0.1308][GRAD: 0.1813][VORT: 0.2441][Total: 0.6455]	4.4+3.3s
[5600/8000]	[L1: 0.0890][DIV: 0.1302][GRAD: 0.1807][VORT: 0.2425][Total: 0.6423]	4.5+3.3s
[6400/8000]	[L1: 0.0883][DIV: 0.1291][GRAD: 0.1793][VORT: 0.2405][Total: 0.6371]	4.4+3.3s
[7200/8000]	[L1: 0.0880][DIV: 0.1288][GRAD: 0.1786][VORT: 0.2395][Total: 0.6350]	4.5+3.3s
[8000/8000]	[L1: 0.0880][DIV: 0.1288][GRAD: 0.1787][VORT: 0.2402][Total: 0.6357]	4.4+3.3s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.080568	vorticity_error: 0.985525	mean_abs_divergence: 0.124390
[DIV2K x2]	rel_l2_error: 0.065975	vorticity_error: 1.176845	mean_abs_divergence: 0.066477
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.049806	vorticity_error: 1.023186	mean_abs_divergence: 0.032957
Forward: 1.16s

Saving...
Total: 1.48s

[Epoch 317]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0880][DIV: 0.1291][GRAD: 0.1796][VORT: 0.2481][Total: 0.6448]	4.5+3.2s
[1600/8000]	[L1: 0.0888][DIV: 0.1292][GRAD: 0.1806][VORT: 0.2430][Total: 0.6417]	4.4+3.3s
[2400/8000]	[L1: 0.0877][DIV: 0.1286][GRAD: 0.1781][VORT: 0.2381][Total: 0.6326]	4.5+3.3s
[3200/8000]	[L1: 0.0906][DIV: 0.1319][GRAD: 0.1841][VORT: 0.2446][Total: 0.6513]	4.4+3.3s
[4000/8000]	[L1: 0.0900][DIV: 0.1309][GRAD: 0.1828][VORT: 0.2436][Total: 0.6473]	4.5+3.3s
[4800/8000]	[L1: 0.0891][DIV: 0.1297][GRAD: 0.1811][VORT: 0.2421][Total: 0.6419]	4.4+3.3s
[5600/8000]	[L1: 0.0890][DIV: 0.1295][GRAD: 0.1810][VORT: 0.2424][Total: 0.6419]	4.5+3.3s
[6400/8000]	[L1: 0.0883][DIV: 0.1288][GRAD: 0.1795][VORT: 0.2404][Total: 0.6371]	4.4+3.3s
[7200/8000]	[L1: 0.0881][DIV: 0.1282][GRAD: 0.1790][VORT: 0.2400][Total: 0.6353]	4.4+3.3s
[8000/8000]	[L1: 0.0884][DIV: 0.1287][GRAD: 0.1798][VORT: 0.2409][Total: 0.6377]	4.4+3.3s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.081547	vorticity_error: 0.846255	mean_abs_divergence: 0.122464
[DIV2K x2]	rel_l2_error: 0.064203	vorticity_error: 1.032446	mean_abs_divergence: 0.065468
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.047668	vorticity_error: 0.848510	mean_abs_divergence: 0.032567
Forward: 1.17s

Saving...
Total: 1.49s

[Epoch 318]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0817][DIV: 0.1218][GRAD: 0.1665][VORT: 0.2230][Total: 0.5930]	4.5+3.2s
[1600/8000]	[L1: 0.0813][DIV: 0.1212][GRAD: 0.1660][VORT: 0.2248][Total: 0.5934]	4.4+3.3s
[2400/8000]	[L1: 0.0863][DIV: 0.1265][GRAD: 0.1760][VORT: 0.2358][Total: 0.6247]	4.4+3.3s
[3200/8000]	[L1: 0.0871][DIV: 0.1275][GRAD: 0.1776][VORT: 0.2387][Total: 0.6310]	4.5+3.2s
[4000/8000]	[L1: 0.0893][DIV: 0.1305][GRAD: 0.1821][VORT: 0.2449][Total: 0.6469]	4.4+3.3s
[4800/8000]	[L1: 0.0902][DIV: 0.1318][GRAD: 0.1838][VORT: 0.2469][Total: 0.6527]	4.4+3.3s
[5600/8000]	[L1: 0.0893][DIV: 0.1310][GRAD: 0.1818][VORT: 0.2432][Total: 0.6454]	4.4+3.3s
[6400/8000]	[L1: 0.0891][DIV: 0.1307][GRAD: 0.1814][VORT: 0.2424][Total: 0.6435]	4.4+3.3s
[7200/8000]	[L1: 0.0880][DIV: 0.1294][GRAD: 0.1789][VORT: 0.2396][Total: 0.6360]	4.4+3.3s
[8000/8000]	[L1: 0.0882][DIV: 0.1296][GRAD: 0.1794][VORT: 0.2406][Total: 0.6377]	4.5+3.3s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.078049	vorticity_error: 0.866545	mean_abs_divergence: 0.124930
[DIV2K x2]	rel_l2_error: 0.060599	vorticity_error: 0.941584	mean_abs_divergence: 0.065847
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044943	vorticity_error: 0.814439	mean_abs_divergence: 0.031981
Forward: 1.17s

Saving...
Total: 1.49s

[Epoch 319]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0864][DIV: 0.1276][GRAD: 0.1756][VORT: 0.2339][Total: 0.6234]	4.5+3.3s
[1600/8000]	[L1: 0.0889][DIV: 0.1314][GRAD: 0.1806][VORT: 0.2419][Total: 0.6428]	4.4+3.3s
[2400/8000]	[L1: 0.0878][DIV: 0.1292][GRAD: 0.1783][VORT: 0.2406][Total: 0.6358]	4.4+3.3s
[3200/8000]	[L1: 0.0888][DIV: 0.1300][GRAD: 0.1802][VORT: 0.2435][Total: 0.6425]	4.5+3.3s
[4000/8000]	[L1: 0.0878][DIV: 0.1293][GRAD: 0.1781][VORT: 0.2408][Total: 0.6359]	4.4+3.3s
[4800/8000]	[L1: 0.0883][DIV: 0.1299][GRAD: 0.1792][VORT: 0.2420][Total: 0.6395]	4.5+3.3s
[5600/8000]	[L1: 0.0887][DIV: 0.1307][GRAD: 0.1801][VORT: 0.2423][Total: 0.6418]	4.4+3.3s
[6400/8000]	[L1: 0.0888][DIV: 0.1307][GRAD: 0.1803][VORT: 0.2431][Total: 0.6429]	4.5+3.3s
[7200/8000]	[L1: 0.0890][DIV: 0.1310][GRAD: 0.1807][VORT: 0.2438][Total: 0.6444]	4.4+3.3s
[8000/8000]	[L1: 0.0891][DIV: 0.1311][GRAD: 0.1810][VORT: 0.2437][Total: 0.6449]	4.5+3.3s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.075207	vorticity_error: 0.739400	mean_abs_divergence: 0.118030
[DIV2K x2]	rel_l2_error: 0.065644	vorticity_error: 0.751233	mean_abs_divergence: 0.062976
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.046833	vorticity_error: 0.791866	mean_abs_divergence: 0.031088
Forward: 1.23s

Saving...
Total: 1.56s

[Epoch 320]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0924][DIV: 0.1346][GRAD: 0.1873][VORT: 0.2457][Total: 0.6600]	4.5+3.3s
[1600/8000]	[L1: 0.0868][DIV: 0.1265][GRAD: 0.1762][VORT: 0.2367][Total: 0.6263]	4.5+3.3s
[2400/8000]	[L1: 0.0880][DIV: 0.1286][GRAD: 0.1785][VORT: 0.2397][Total: 0.6348]	4.5+3.3s
[3200/8000]	[L1: 0.0905][DIV: 0.1318][GRAD: 0.1839][VORT: 0.2488][Total: 0.6550]	4.5+3.2s
[4000/8000]	[L1: 0.0889][DIV: 0.1297][GRAD: 0.1807][VORT: 0.2433][Total: 0.6427]	4.4+3.3s
[4800/8000]	[L1: 0.0881][DIV: 0.1292][GRAD: 0.1791][VORT: 0.2404][Total: 0.6367]	4.5+3.2s
[5600/8000]	[L1: 0.0891][DIV: 0.1305][GRAD: 0.1810][VORT: 0.2432][Total: 0.6437]	4.4+3.3s
[6400/8000]	[L1: 0.0890][DIV: 0.1302][GRAD: 0.1810][VORT: 0.2450][Total: 0.6452]	4.5+3.3s
[7200/8000]	[L1: 0.0886][DIV: 0.1298][GRAD: 0.1803][VORT: 0.2434][Total: 0.6422]	4.4+3.3s
[8000/8000]	[L1: 0.0888][DIV: 0.1302][GRAD: 0.1807][VORT: 0.2441][Total: 0.6438]	4.5+3.3s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.071927	vorticity_error: 0.558281	mean_abs_divergence: 0.102508
[DIV2K x2]	rel_l2_error: 0.058502	vorticity_error: 0.650585	mean_abs_divergence: 0.054126
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.041138	vorticity_error: 0.479349	mean_abs_divergence: 0.026709
Forward: 1.19s

Saving...
Total: 1.52s

[Epoch 321]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0892][DIV: 0.1307][GRAD: 0.1807][VORT: 0.2389][Total: 0.6394]	4.4+3.3s
[1600/8000]	[L1: 0.0895][DIV: 0.1311][GRAD: 0.1822][VORT: 0.2446][Total: 0.6473]	4.5+3.3s
[2400/8000]	[L1: 0.0905][DIV: 0.1319][GRAD: 0.1838][VORT: 0.2450][Total: 0.6512]	4.4+3.3s
[3200/8000]	[L1: 0.0906][DIV: 0.1321][GRAD: 0.1840][VORT: 0.2449][Total: 0.6517]	4.5+3.2s
[4000/8000]	[L1: 0.0897][DIV: 0.1311][GRAD: 0.1820][VORT: 0.2432][Total: 0.6460]	4.4+3.3s
[4800/8000]	[L1: 0.0888][DIV: 0.1304][GRAD: 0.1804][VORT: 0.2422][Total: 0.6417]	4.5+3.3s
[5600/8000]	[L1: 0.0899][DIV: 0.1314][GRAD: 0.1826][VORT: 0.2454][Total: 0.6493]	4.4+3.3s
[6400/8000]	[L1: 0.0903][DIV: 0.1319][GRAD: 0.1834][VORT: 0.2460][Total: 0.6516]	4.5+3.3s
[7200/8000]	[L1: 0.0899][DIV: 0.1316][GRAD: 0.1827][VORT: 0.2449][Total: 0.6492]	4.4+3.3s
[8000/8000]	[L1: 0.0896][DIV: 0.1313][GRAD: 0.1820][VORT: 0.2441][Total: 0.6470]	4.5+3.3s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.073228	vorticity_error: 0.755483	mean_abs_divergence: 0.110973
[DIV2K x2]	rel_l2_error: 0.057198	vorticity_error: 1.084492	mean_abs_divergence: 0.058596
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044351	vorticity_error: 1.175067	mean_abs_divergence: 0.028429
Forward: 1.23s

Saving...
Total: 1.56s

[Epoch 322]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0923][DIV: 0.1347][GRAD: 0.1890][VORT: 0.2560][Total: 0.6721]	4.4+3.3s
[1600/8000]	[L1: 0.0901][DIV: 0.1328][GRAD: 0.1840][VORT: 0.2504][Total: 0.6573]	4.5+3.3s
[2400/8000]	[L1: 0.0920][DIV: 0.1349][GRAD: 0.1877][VORT: 0.2536][Total: 0.6682]	4.4+3.3s
[3200/8000]	[L1: 0.0904][DIV: 0.1326][GRAD: 0.1843][VORT: 0.2486][Total: 0.6559]	4.5+3.3s
[4000/8000]	[L1: 0.0918][DIV: 0.1345][GRAD: 0.1869][VORT: 0.2511][Total: 0.6643]	4.4+3.3s
[4800/8000]	[L1: 0.0900][DIV: 0.1325][GRAD: 0.1829][VORT: 0.2455][Total: 0.6508]	4.5+3.3s
[5600/8000]	[L1: 0.0902][DIV: 0.1325][GRAD: 0.1834][VORT: 0.2470][Total: 0.6531]	4.4+3.3s
[6400/8000]	[L1: 0.0898][DIV: 0.1322][GRAD: 0.1825][VORT: 0.2453][Total: 0.6498]	4.4+3.3s
[7200/8000]	[L1: 0.0890][DIV: 0.1308][GRAD: 0.1808][VORT: 0.2435][Total: 0.6441]	4.4+3.3s
[8000/8000]	[L1: 0.0889][DIV: 0.1307][GRAD: 0.1808][VORT: 0.2436][Total: 0.6440]	4.5+3.3s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.072216	vorticity_error: 0.590608	mean_abs_divergence: 0.115896
[DIV2K x2]	rel_l2_error: 0.057363	vorticity_error: 0.610218	mean_abs_divergence: 0.061318
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.041183	vorticity_error: 0.474391	mean_abs_divergence: 0.030073
Forward: 1.20s

Saving...
Total: 1.52s

[Epoch 323]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0858][DIV: 0.1246][GRAD: 0.1745][VORT: 0.2402][Total: 0.6251]	4.4+3.3s
[1600/8000]	[L1: 0.0855][DIV: 0.1249][GRAD: 0.1734][VORT: 0.2317][Total: 0.6155]	4.5+3.3s
[2400/8000]	[L1: 0.0884][DIV: 0.1287][GRAD: 0.1793][VORT: 0.2396][Total: 0.6360]	4.4+3.3s
[3200/8000]	[L1: 0.0856][DIV: 0.1254][GRAD: 0.1738][VORT: 0.2337][Total: 0.6186]	4.5+3.2s
[4000/8000]	[L1: 0.0846][DIV: 0.1240][GRAD: 0.1718][VORT: 0.2320][Total: 0.6125]	4.4+3.3s
[4800/8000]	[L1: 0.0851][DIV: 0.1249][GRAD: 0.1728][VORT: 0.2337][Total: 0.6165]	4.5+3.3s
[5600/8000]	[L1: 0.0850][DIV: 0.1247][GRAD: 0.1726][VORT: 0.2335][Total: 0.6158]	4.4+3.3s
[6400/8000]	[L1: 0.0850][DIV: 0.1248][GRAD: 0.1726][VORT: 0.2342][Total: 0.6166]	4.5+3.3s
[7200/8000]	[L1: 0.0858][DIV: 0.1257][GRAD: 0.1744][VORT: 0.2364][Total: 0.6223]	4.4+3.3s
[8000/8000]	[L1: 0.0863][DIV: 0.1265][GRAD: 0.1755][VORT: 0.2379][Total: 0.6262]	4.5+3.3s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.092414	vorticity_error: 1.087273	mean_abs_divergence: 0.129963
[DIV2K x2]	rel_l2_error: 0.072101	vorticity_error: 1.154752	mean_abs_divergence: 0.069273
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.050208	vorticity_error: 0.907636	mean_abs_divergence: 0.033647
Forward: 1.24s

Saving...
Total: 1.56s

[Epoch 324]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0950][DIV: 0.1381][GRAD: 0.1935][VORT: 0.2590][Total: 0.6856]	4.4+3.3s
[1600/8000]	[L1: 0.0941][DIV: 0.1373][GRAD: 0.1907][VORT: 0.2503][Total: 0.6723]	4.5+3.3s
[2400/8000]	[L1: 0.0916][DIV: 0.1339][GRAD: 0.1858][VORT: 0.2438][Total: 0.6551]	4.4+3.3s
[3200/8000]	[L1: 0.0887][DIV: 0.1303][GRAD: 0.1797][VORT: 0.2368][Total: 0.6355]	4.5+3.3s
[4000/8000]	[L1: 0.0895][DIV: 0.1313][GRAD: 0.1816][VORT: 0.2404][Total: 0.6427]	4.4+3.3s
[4800/8000]	[L1: 0.0892][DIV: 0.1314][GRAD: 0.1813][VORT: 0.2406][Total: 0.6426]	4.4+3.3s
[5600/8000]	[L1: 0.0893][DIV: 0.1313][GRAD: 0.1814][VORT: 0.2408][Total: 0.6428]	4.4+3.3s
[6400/8000]	[L1: 0.0893][DIV: 0.1311][GRAD: 0.1815][VORT: 0.2411][Total: 0.6430]	4.4+3.3s
[7200/8000]	[L1: 0.0903][DIV: 0.1321][GRAD: 0.1835][VORT: 0.2444][Total: 0.6503]	4.4+3.3s
[8000/8000]	[L1: 0.0899][DIV: 0.1318][GRAD: 0.1828][VORT: 0.2437][Total: 0.6482]	4.4+3.3s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.105320	vorticity_error: 1.248001	mean_abs_divergence: 0.119955
[DIV2K x2]	rel_l2_error: 0.074673	vorticity_error: 3.928622	mean_abs_divergence: 0.062588
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.057380	vorticity_error: 1.552037	mean_abs_divergence: 0.030231
Forward: 1.27s

Saving...
Total: 1.59s

[Epoch 325]	Learning rate: 5.00e-5
[800/8000]	[L1: 0.0937][DIV: 0.1356][GRAD: 0.1915][VORT: 0.2664][Total: 0.6873]	4.5+3.2s
[1600/8000]	[L1: 0.0957][DIV: 0.1382][GRAD: 0.1946][VORT: 0.2640][Total: 0.6925]	4.4+3.3s
[2400/8000]	[L1: 0.0919][DIV: 0.1337][GRAD: 0.1868][VORT: 0.2553][Total: 0.6678]	4.4+3.3s
[3200/8000]	[L1: 0.0910][DIV: 0.1323][GRAD: 0.1850][VORT: 0.2509][Total: 0.6593]	4.5+3.3s
[4000/8000]	[L1: 0.0910][DIV: 0.1324][GRAD: 0.1850][VORT: 0.2503][Total: 0.6587]	4.4+3.3s
[4800/8000]	[L1: 0.0905][DIV: 0.1317][GRAD: 0.1841][VORT: 0.2479][Total: 0.6542]	4.4+3.3s
[5600/8000]	[L1: 0.0911][DIV: 0.1328][GRAD: 0.1853][VORT: 0.2498][Total: 0.6590]	4.5+3.3s
[6400/8000]	[L1: 0.0904][DIV: 0.1318][GRAD: 0.1840][VORT: 0.2487][Total: 0.6549]	4.4+3.3s
[7200/8000]	[L1: 0.0902][DIV: 0.1316][GRAD: 0.1837][VORT: 0.2483][Total: 0.6537]	4.5+3.3s
[8000/8000]	[L1: 0.0900][DIV: 0.1313][GRAD: 0.1832][VORT: 0.2478][Total: 0.6524]	4.4+3.3s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.072213	vorticity_error: 0.944573	mean_abs_divergence: 0.110724
[DIV2K x2]	rel_l2_error: 0.061948	vorticity_error: 0.729897	mean_abs_divergence: 0.058105
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042323	vorticity_error: 0.803628	mean_abs_divergence: 0.028500
Forward: 1.23s

Saving...
Total: 1.57s

LapSRN(
  (head_x8): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (head_x4): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (head_x2): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (feature_extractor_x4): FeatureExtraction(
    (body): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
  )
  (feature_extractor_x2): FeatureExtraction(
    (body): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
  )
  (upsample_block_x4): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(32, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (upsample_block_x2): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(32, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (upsample_block_x1): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(32, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 327]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0955][DIV: 0.1392][GRAD: 0.1958][VORT: 0.2646][Total: 0.6952]	5.0+3.1s
[1600/8000]	[L1: 0.0932][DIV: 0.1365][GRAD: 0.1904][VORT: 0.2560][Total: 0.6761]	4.6+3.1s
[2400/8000]	[L1: 0.0909][DIV: 0.1331][GRAD: 0.1855][VORT: 0.2466][Total: 0.6560]	4.7+3.1s
[3200/8000]	[L1: 0.0913][DIV: 0.1339][GRAD: 0.1865][VORT: 0.2468][Total: 0.6586]	4.7+3.1s
[4000/8000]	[L1: 0.0897][DIV: 0.1320][GRAD: 0.1832][VORT: 0.2433][Total: 0.6483]	4.7+3.1s
[4800/8000]	[L1: 0.0900][DIV: 0.1324][GRAD: 0.1839][VORT: 0.2455][Total: 0.6518]	4.6+3.1s
[5600/8000]	[L1: 0.0894][DIV: 0.1316][GRAD: 0.1827][VORT: 0.2450][Total: 0.6488]	4.7+3.1s
[6400/8000]	[L1: 0.0898][DIV: 0.1320][GRAD: 0.1835][VORT: 0.2473][Total: 0.6526]	4.6+3.1s
[7200/8000]	[L1: 0.0889][DIV: 0.1312][GRAD: 0.1819][VORT: 0.2449][Total: 0.6469]	4.7+3.1s
[8000/8000]	[L1: 0.0896][DIV: 0.1323][GRAD: 0.1833][VORT: 0.2467][Total: 0.6518]	4.6+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.088220	vorticity_error: 0.980613	mean_abs_divergence: 0.128473
[DIV2K x2]	rel_l2_error: 0.067160	vorticity_error: 0.902343	mean_abs_divergence: 0.068163
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.047078	vorticity_error: 0.802006	mean_abs_divergence: 0.033350
[INFO] New best model found with rel_l2_error on final output: 0.047078
Forward: 1.28s

Saving...
Total: 1.71s

[Epoch 328]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0845][DIV: 0.1272][GRAD: 0.1720][VORT: 0.2328][Total: 0.6165]	4.8+3.0s
[1600/8000]	[L1: 0.0877][DIV: 0.1314][GRAD: 0.1791][VORT: 0.2459][Total: 0.6441]	4.7+3.1s
[2400/8000]	[L1: 0.0869][DIV: 0.1295][GRAD: 0.1770][VORT: 0.2402][Total: 0.6335]	4.7+3.1s
[3200/8000]	[L1: 0.0893][DIV: 0.1326][GRAD: 0.1821][VORT: 0.2466][Total: 0.6506]	4.7+3.1s
[4000/8000]	[L1: 0.0897][DIV: 0.1329][GRAD: 0.1832][VORT: 0.2482][Total: 0.6540]	4.8+3.1s
[4800/8000]	[L1: 0.0885][DIV: 0.1315][GRAD: 0.1807][VORT: 0.2449][Total: 0.6455]	4.7+3.1s
[5600/8000]	[L1: 0.0875][DIV: 0.1302][GRAD: 0.1785][VORT: 0.2414][Total: 0.6376]	4.7+3.1s
[6400/8000]	[L1: 0.0877][DIV: 0.1303][GRAD: 0.1787][VORT: 0.2408][Total: 0.6375]	4.7+3.1s
[7200/8000]	[L1: 0.0876][DIV: 0.1302][GRAD: 0.1787][VORT: 0.2409][Total: 0.6373]	4.7+3.1s
[8000/8000]	[L1: 0.0872][DIV: 0.1297][GRAD: 0.1781][VORT: 0.2401][Total: 0.6351]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.097113	vorticity_error: 0.954668	mean_abs_divergence: 0.129642
[DIV2K x2]	rel_l2_error: 0.076240	vorticity_error: 0.945273	mean_abs_divergence: 0.068797
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.057242	vorticity_error: 0.841034	mean_abs_divergence: 0.034000
Forward: 1.32s

Saving...
Total: 1.64s

[Epoch 329]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0893][DIV: 0.1308][GRAD: 0.1822][VORT: 0.2381][Total: 0.6404]	4.8+3.2s
[1600/8000]	[L1: 0.0879][DIV: 0.1297][GRAD: 0.1797][VORT: 0.2356][Total: 0.6328]	4.8+3.2s
[2400/8000]	[L1: 0.0887][DIV: 0.1308][GRAD: 0.1811][VORT: 0.2403][Total: 0.6409]	4.8+3.2s
[3200/8000]	[L1: 0.0895][DIV: 0.1316][GRAD: 0.1829][VORT: 0.2414][Total: 0.6453]	4.7+3.1s
[4000/8000]	[L1: 0.0899][DIV: 0.1324][GRAD: 0.1834][VORT: 0.2411][Total: 0.6468]	4.8+3.1s
[4800/8000]	[L1: 0.0893][DIV: 0.1318][GRAD: 0.1825][VORT: 0.2411][Total: 0.6447]	4.7+3.1s
[5600/8000]	[L1: 0.0886][DIV: 0.1304][GRAD: 0.1811][VORT: 0.2404][Total: 0.6404]	4.7+3.1s
[6400/8000]	[L1: 0.0889][DIV: 0.1309][GRAD: 0.1816][VORT: 0.2410][Total: 0.6424]	4.7+3.1s
[7200/8000]	[L1: 0.0884][DIV: 0.1303][GRAD: 0.1807][VORT: 0.2410][Total: 0.6404]	4.7+3.1s
[8000/8000]	[L1: 0.0874][DIV: 0.1290][GRAD: 0.1787][VORT: 0.2389][Total: 0.6339]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.096928	vorticity_error: 2.469414	mean_abs_divergence: 0.112140
[DIV2K x2]	rel_l2_error: 0.074944	vorticity_error: 1.453594	mean_abs_divergence: 0.061177
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.059602	vorticity_error: 1.242282	mean_abs_divergence: 0.030413
Forward: 1.32s

Saving...
Total: 1.64s

[Epoch 330]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0937][DIV: 0.1366][GRAD: 0.1915][VORT: 0.2499][Total: 0.6716]	4.7+3.1s
[1600/8000]	[L1: 0.0891][DIV: 0.1307][GRAD: 0.1826][VORT: 0.2446][Total: 0.6469]	4.7+3.1s
[2400/8000]	[L1: 0.0888][DIV: 0.1299][GRAD: 0.1818][VORT: 0.2444][Total: 0.6449]	4.7+3.1s
[3200/8000]	[L1: 0.0876][DIV: 0.1288][GRAD: 0.1793][VORT: 0.2420][Total: 0.6377]	4.8+3.1s
[4000/8000]	[L1: 0.0872][DIV: 0.1287][GRAD: 0.1785][VORT: 0.2422][Total: 0.6366]	4.7+3.1s
[4800/8000]	[L1: 0.0884][DIV: 0.1305][GRAD: 0.1809][VORT: 0.2454][Total: 0.6452]	4.7+3.1s
[5600/8000]	[L1: 0.0875][DIV: 0.1293][GRAD: 0.1791][VORT: 0.2430][Total: 0.6390]	4.7+3.1s
[6400/8000]	[L1: 0.0890][DIV: 0.1310][GRAD: 0.1821][VORT: 0.2472][Total: 0.6492]	4.7+3.1s
[7200/8000]	[L1: 0.0878][DIV: 0.1295][GRAD: 0.1796][VORT: 0.2431][Total: 0.6399]	4.7+3.1s
[8000/8000]	[L1: 0.0889][DIV: 0.1310][GRAD: 0.1816][VORT: 0.2449][Total: 0.6464]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.094059	vorticity_error: 0.766574	mean_abs_divergence: 0.116255
[DIV2K x2]	rel_l2_error: 0.068742	vorticity_error: 0.804886	mean_abs_divergence: 0.063052
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.053731	vorticity_error: 0.647185	mean_abs_divergence: 0.031361
Forward: 1.25s

Saving...
Total: 1.56s

[Epoch 331]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0945][DIV: 0.1380][GRAD: 0.1926][VORT: 0.2508][Total: 0.6758]	4.8+3.0s
[1600/8000]	[L1: 0.0851][DIV: 0.1261][GRAD: 0.1734][VORT: 0.2320][Total: 0.6165]	4.7+3.1s
[2400/8000]	[L1: 0.0853][DIV: 0.1264][GRAD: 0.1740][VORT: 0.2350][Total: 0.6208]	4.7+3.1s
[3200/8000]	[L1: 0.0846][DIV: 0.1255][GRAD: 0.1725][VORT: 0.2336][Total: 0.6162]	4.8+3.1s
[4000/8000]	[L1: 0.0856][DIV: 0.1268][GRAD: 0.1746][VORT: 0.2364][Total: 0.6234]	4.7+3.1s
[4800/8000]	[L1: 0.0855][DIV: 0.1269][GRAD: 0.1744][VORT: 0.2362][Total: 0.6231]	4.7+3.1s
[5600/8000]	[L1: 0.0865][DIV: 0.1280][GRAD: 0.1764][VORT: 0.2392][Total: 0.6300]	4.7+3.1s
[6400/8000]	[L1: 0.0862][DIV: 0.1274][GRAD: 0.1760][VORT: 0.2390][Total: 0.6286]	4.7+3.1s
[7200/8000]	[L1: 0.0865][DIV: 0.1277][GRAD: 0.1767][VORT: 0.2398][Total: 0.6307]	4.7+3.1s
[8000/8000]	[L1: 0.0867][DIV: 0.1278][GRAD: 0.1769][VORT: 0.2398][Total: 0.6311]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.076240	vorticity_error: 0.701009	mean_abs_divergence: 0.104743
[DIV2K x2]	rel_l2_error: 0.058450	vorticity_error: 0.829443	mean_abs_divergence: 0.055084
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.037952	vorticity_error: 0.948996	mean_abs_divergence: 0.026010
[INFO] New best model found with rel_l2_error on final output: 0.037952
Forward: 1.30s

Saving...
Total: 1.65s

[Epoch 332]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0870][DIV: 0.1285][GRAD: 0.1785][VORT: 0.2455][Total: 0.6395]	4.7+3.1s
[1600/8000]	[L1: 0.0884][DIV: 0.1301][GRAD: 0.1808][VORT: 0.2411][Total: 0.6404]	4.7+3.1s
[2400/8000]	[L1: 0.0889][DIV: 0.1308][GRAD: 0.1814][VORT: 0.2421][Total: 0.6432]	4.7+3.1s
[3200/8000]	[L1: 0.0896][DIV: 0.1322][GRAD: 0.1826][VORT: 0.2416][Total: 0.6460]	4.8+3.1s
[4000/8000]	[L1: 0.0897][DIV: 0.1322][GRAD: 0.1828][VORT: 0.2423][Total: 0.6470]	4.7+3.1s
[4800/8000]	[L1: 0.0895][DIV: 0.1320][GRAD: 0.1824][VORT: 0.2420][Total: 0.6459]	4.7+3.1s
[5600/8000]	[L1: 0.0898][DIV: 0.1323][GRAD: 0.1832][VORT: 0.2435][Total: 0.6488]	4.7+3.1s
[6400/8000]	[L1: 0.0895][DIV: 0.1318][GRAD: 0.1824][VORT: 0.2427][Total: 0.6463]	4.7+3.1s
[7200/8000]	[L1: 0.0891][DIV: 0.1313][GRAD: 0.1817][VORT: 0.2424][Total: 0.6445]	4.7+3.1s
[8000/8000]	[L1: 0.0887][DIV: 0.1308][GRAD: 0.1810][VORT: 0.2414][Total: 0.6419]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.108794	vorticity_error: 1.074108	mean_abs_divergence: 0.131505
[DIV2K x2]	rel_l2_error: 0.081728	vorticity_error: 1.086869	mean_abs_divergence: 0.067864
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.061907	vorticity_error: 1.306761	mean_abs_divergence: 0.032705
Forward: 1.30s

Saving...
Total: 1.62s

[Epoch 333]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0911][DIV: 0.1331][GRAD: 0.1858][VORT: 0.2470][Total: 0.6570]	4.7+3.1s
[1600/8000]	[L1: 0.0930][DIV: 0.1354][GRAD: 0.1901][VORT: 0.2546][Total: 0.6731]	4.7+3.1s
[2400/8000]	[L1: 0.0909][DIV: 0.1337][GRAD: 0.1857][VORT: 0.2466][Total: 0.6569]	4.7+3.1s
[3200/8000]	[L1: 0.0913][DIV: 0.1344][GRAD: 0.1866][VORT: 0.2477][Total: 0.6601]	4.7+3.1s
[4000/8000]	[L1: 0.0901][DIV: 0.1328][GRAD: 0.1839][VORT: 0.2445][Total: 0.6514]	4.7+3.1s
[4800/8000]	[L1: 0.0897][DIV: 0.1323][GRAD: 0.1829][VORT: 0.2434][Total: 0.6483]	4.7+3.1s
[5600/8000]	[L1: 0.0904][DIV: 0.1334][GRAD: 0.1844][VORT: 0.2456][Total: 0.6538]	4.7+3.1s
[6400/8000]	[L1: 0.0906][DIV: 0.1337][GRAD: 0.1848][VORT: 0.2449][Total: 0.6541]	4.7+3.1s
[7200/8000]	[L1: 0.0905][DIV: 0.1338][GRAD: 0.1846][VORT: 0.2452][Total: 0.6540]	4.7+3.1s
[8000/8000]	[L1: 0.0907][DIV: 0.1339][GRAD: 0.1851][VORT: 0.2460][Total: 0.6556]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.087570	vorticity_error: 0.983811	mean_abs_divergence: 0.142061
[DIV2K x2]	rel_l2_error: 0.069754	vorticity_error: 0.996479	mean_abs_divergence: 0.075309
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.051828	vorticity_error: 0.856152	mean_abs_divergence: 0.036856
Forward: 1.31s

Saving...
Total: 1.63s

[Epoch 334]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0883][DIV: 0.1297][GRAD: 0.1808][VORT: 0.2463][Total: 0.6451]	4.7+3.1s
[1600/8000]	[L1: 0.0910][DIV: 0.1343][GRAD: 0.1856][VORT: 0.2490][Total: 0.6599]	4.7+3.1s
[2400/8000]	[L1: 0.0913][DIV: 0.1338][GRAD: 0.1864][VORT: 0.2508][Total: 0.6623]	4.7+3.1s
[3200/8000]	[L1: 0.0896][DIV: 0.1318][GRAD: 0.1830][VORT: 0.2477][Total: 0.6522]	4.7+3.1s
[4000/8000]	[L1: 0.0907][DIV: 0.1330][GRAD: 0.1853][VORT: 0.2500][Total: 0.6591]	4.7+3.1s
[4800/8000]	[L1: 0.0897][DIV: 0.1316][GRAD: 0.1833][VORT: 0.2479][Total: 0.6525]	4.7+3.1s
[5600/8000]	[L1: 0.0899][DIV: 0.1320][GRAD: 0.1839][VORT: 0.2484][Total: 0.6543]	4.7+3.1s
[6400/8000]	[L1: 0.0896][DIV: 0.1317][GRAD: 0.1831][VORT: 0.2482][Total: 0.6526]	4.8+3.0s
[7200/8000]	[L1: 0.0885][DIV: 0.1302][GRAD: 0.1811][VORT: 0.2448][Total: 0.6447]	4.7+3.1s
[8000/8000]	[L1: 0.0886][DIV: 0.1305][GRAD: 0.1810][VORT: 0.2448][Total: 0.6449]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.080476	vorticity_error: 0.664540	mean_abs_divergence: 0.111380
[DIV2K x2]	rel_l2_error: 0.069572	vorticity_error: 0.751178	mean_abs_divergence: 0.060183
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.052691	vorticity_error: 0.630890	mean_abs_divergence: 0.029780
Forward: 1.24s

Saving...
Total: 1.56s

[Epoch 335]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0904][DIV: 0.1324][GRAD: 0.1843][VORT: 0.2377][Total: 0.6447]	4.7+3.1s
[1600/8000]	[L1: 0.0909][DIV: 0.1338][GRAD: 0.1856][VORT: 0.2463][Total: 0.6567]	4.7+3.1s
[2400/8000]	[L1: 0.0927][DIV: 0.1359][GRAD: 0.1894][VORT: 0.2527][Total: 0.6707]	4.8+3.1s
[3200/8000]	[L1: 0.0931][DIV: 0.1368][GRAD: 0.1899][VORT: 0.2539][Total: 0.6737]	4.7+3.1s
[4000/8000]	[L1: 0.0919][DIV: 0.1353][GRAD: 0.1874][VORT: 0.2498][Total: 0.6643]	4.7+3.1s
[4800/8000]	[L1: 0.0924][DIV: 0.1357][GRAD: 0.1885][VORT: 0.2512][Total: 0.6678]	4.7+3.1s
[5600/8000]	[L1: 0.0920][DIV: 0.1351][GRAD: 0.1877][VORT: 0.2502][Total: 0.6649]	4.7+3.1s
[6400/8000]	[L1: 0.0917][DIV: 0.1347][GRAD: 0.1872][VORT: 0.2505][Total: 0.6642]	4.7+3.1s
[7200/8000]	[L1: 0.0918][DIV: 0.1348][GRAD: 0.1874][VORT: 0.2503][Total: 0.6644]	4.7+3.1s
[8000/8000]	[L1: 0.0912][DIV: 0.1343][GRAD: 0.1861][VORT: 0.2483][Total: 0.6599]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.073327	vorticity_error: 1.171403	mean_abs_divergence: 0.089458
[DIV2K x2]	rel_l2_error: 0.058507	vorticity_error: 1.070333	mean_abs_divergence: 0.046750
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045398	vorticity_error: 0.950962	mean_abs_divergence: 0.023173
Forward: 1.29s

Saving...
Total: 1.62s

[Epoch 336]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0941][DIV: 0.1368][GRAD: 0.1927][VORT: 0.2576][Total: 0.6812]	4.7+3.1s
[1600/8000]	[L1: 0.0907][DIV: 0.1325][GRAD: 0.1859][VORT: 0.2514][Total: 0.6606]	4.7+3.1s
[2400/8000]	[L1: 0.0910][DIV: 0.1332][GRAD: 0.1867][VORT: 0.2532][Total: 0.6641]	4.7+3.1s
[3200/8000]	[L1: 0.0907][DIV: 0.1329][GRAD: 0.1861][VORT: 0.2524][Total: 0.6621]	4.7+3.1s
[4000/8000]	[L1: 0.0906][DIV: 0.1327][GRAD: 0.1858][VORT: 0.2524][Total: 0.6615]	4.7+3.1s
[4800/8000]	[L1: 0.0910][DIV: 0.1334][GRAD: 0.1864][VORT: 0.2533][Total: 0.6641]	4.7+3.1s
[5600/8000]	[L1: 0.0907][DIV: 0.1331][GRAD: 0.1859][VORT: 0.2531][Total: 0.6629]	4.7+3.1s
[6400/8000]	[L1: 0.0899][DIV: 0.1322][GRAD: 0.1842][VORT: 0.2506][Total: 0.6569]	4.7+3.1s
[7200/8000]	[L1: 0.0899][DIV: 0.1321][GRAD: 0.1841][VORT: 0.2502][Total: 0.6562]	4.7+3.1s
[8000/8000]	[L1: 0.0903][DIV: 0.1327][GRAD: 0.1850][VORT: 0.2508][Total: 0.6589]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.083348	vorticity_error: 0.857846	mean_abs_divergence: 0.132936
[DIV2K x2]	rel_l2_error: 0.063319	vorticity_error: 0.892428	mean_abs_divergence: 0.069851
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044676	vorticity_error: 0.702361	mean_abs_divergence: 0.033706
Forward: 1.25s

Saving...
Total: 1.58s

[Epoch 337]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0962][DIV: 0.1388][GRAD: 0.1966][VORT: 0.2714][Total: 0.7030]	4.7+3.1s
[1600/8000]	[L1: 0.0910][DIV: 0.1332][GRAD: 0.1859][VORT: 0.2535][Total: 0.6636]	5.0+3.1s
[2400/8000]	[L1: 0.0918][DIV: 0.1334][GRAD: 0.1871][VORT: 0.2531][Total: 0.6654]	4.8+3.2s
[3200/8000]	[L1: 0.0891][DIV: 0.1300][GRAD: 0.1819][VORT: 0.2465][Total: 0.6475]	4.8+3.2s
[4000/8000]	[L1: 0.0908][DIV: 0.1327][GRAD: 0.1858][VORT: 0.2518][Total: 0.6611]	4.8+3.2s
[4800/8000]	[L1: 0.0901][DIV: 0.1321][GRAD: 0.1844][VORT: 0.2500][Total: 0.6566]	4.8+3.2s
[5600/8000]	[L1: 0.0906][DIV: 0.1324][GRAD: 0.1852][VORT: 0.2512][Total: 0.6594]	4.8+3.2s
[6400/8000]	[L1: 0.0904][DIV: 0.1324][GRAD: 0.1850][VORT: 0.2512][Total: 0.6591]	4.8+3.2s
[7200/8000]	[L1: 0.0901][DIV: 0.1322][GRAD: 0.1843][VORT: 0.2495][Total: 0.6560]	4.8+3.2s
[8000/8000]	[L1: 0.0898][DIV: 0.1320][GRAD: 0.1836][VORT: 0.2485][Total: 0.6539]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.086856	vorticity_error: 0.783697	mean_abs_divergence: 0.114748
[DIV2K x2]	rel_l2_error: 0.057057	vorticity_error: 0.666706	mean_abs_divergence: 0.059806
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.047890	vorticity_error: 0.627843	mean_abs_divergence: 0.029646
Forward: 1.33s

Saving...
Total: 1.66s

[Epoch 338]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0961][DIV: 0.1410][GRAD: 0.1973][VORT: 0.2625][Total: 0.6968]	4.8+3.2s
[1600/8000]	[L1: 0.0921][DIV: 0.1350][GRAD: 0.1889][VORT: 0.2539][Total: 0.6700]	4.8+3.2s
[2400/8000]	[L1: 0.0912][DIV: 0.1337][GRAD: 0.1867][VORT: 0.2512][Total: 0.6627]	4.8+3.2s
[3200/8000]	[L1: 0.0920][DIV: 0.1347][GRAD: 0.1883][VORT: 0.2517][Total: 0.6667]	4.8+3.2s
[4000/8000]	[L1: 0.0915][DIV: 0.1341][GRAD: 0.1870][VORT: 0.2496][Total: 0.6622]	4.8+3.2s
[4800/8000]	[L1: 0.0915][DIV: 0.1343][GRAD: 0.1872][VORT: 0.2500][Total: 0.6630]	4.8+3.1s
[5600/8000]	[L1: 0.0911][DIV: 0.1336][GRAD: 0.1860][VORT: 0.2484][Total: 0.6591]	4.7+3.1s
[6400/8000]	[L1: 0.0914][DIV: 0.1339][GRAD: 0.1867][VORT: 0.2499][Total: 0.6620]	4.7+3.1s
[7200/8000]	[L1: 0.0912][DIV: 0.1337][GRAD: 0.1862][VORT: 0.2495][Total: 0.6606]	4.7+3.1s
[8000/8000]	[L1: 0.0910][DIV: 0.1334][GRAD: 0.1858][VORT: 0.2486][Total: 0.6588]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.073115	vorticity_error: 0.642769	mean_abs_divergence: 0.098959
[DIV2K x2]	rel_l2_error: 0.061420	vorticity_error: 0.596753	mean_abs_divergence: 0.050149
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043933	vorticity_error: 0.548160	mean_abs_divergence: 0.023395
Forward: 1.33s

Saving...
Total: 1.66s

[Epoch 339]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0861][DIV: 0.1277][GRAD: 0.1771][VORT: 0.2338][Total: 0.6249]	4.8+3.1s
[1600/8000]	[L1: 0.0870][DIV: 0.1291][GRAD: 0.1782][VORT: 0.2349][Total: 0.6293]	4.7+3.1s
[2400/8000]	[L1: 0.0844][DIV: 0.1255][GRAD: 0.1725][VORT: 0.2292][Total: 0.6116]	4.8+3.1s
[3200/8000]	[L1: 0.0849][DIV: 0.1259][GRAD: 0.1734][VORT: 0.2303][Total: 0.6146]	4.7+3.1s
[4000/8000]	[L1: 0.0843][DIV: 0.1253][GRAD: 0.1723][VORT: 0.2311][Total: 0.6131]	4.7+3.1s
[4800/8000]	[L1: 0.0849][DIV: 0.1264][GRAD: 0.1733][VORT: 0.2316][Total: 0.6161]	4.7+3.1s
[5600/8000]	[L1: 0.0855][DIV: 0.1270][GRAD: 0.1748][VORT: 0.2347][Total: 0.6220]	4.7+3.1s
[6400/8000]	[L1: 0.0861][DIV: 0.1276][GRAD: 0.1760][VORT: 0.2373][Total: 0.6270]	4.7+3.1s
[7200/8000]	[L1: 0.0866][DIV: 0.1285][GRAD: 0.1769][VORT: 0.2374][Total: 0.6295]	4.7+3.1s
[8000/8000]	[L1: 0.0867][DIV: 0.1286][GRAD: 0.1771][VORT: 0.2373][Total: 0.6296]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.088127	vorticity_error: 0.696196	mean_abs_divergence: 0.145594
[DIV2K x2]	rel_l2_error: 0.071286	vorticity_error: 0.730635	mean_abs_divergence: 0.076254
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.047904	vorticity_error: 0.600816	mean_abs_divergence: 0.036827
Forward: 1.27s

Saving...
Total: 1.60s

[Epoch 340]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0922][DIV: 0.1359][GRAD: 0.1879][VORT: 0.2432][Total: 0.6593]	4.7+3.1s
[1600/8000]	[L1: 0.0913][DIV: 0.1339][GRAD: 0.1865][VORT: 0.2476][Total: 0.6593]	4.7+3.1s
[2400/8000]	[L1: 0.0928][DIV: 0.1357][GRAD: 0.1894][VORT: 0.2510][Total: 0.6689]	4.8+3.1s
[3200/8000]	[L1: 0.0942][DIV: 0.1374][GRAD: 0.1923][VORT: 0.2548][Total: 0.6787]	4.7+3.1s
[4000/8000]	[L1: 0.0935][DIV: 0.1366][GRAD: 0.1908][VORT: 0.2532][Total: 0.6741]	4.7+3.1s
[4800/8000]	[L1: 0.0923][DIV: 0.1357][GRAD: 0.1883][VORT: 0.2501][Total: 0.6664]	4.7+3.1s
[5600/8000]	[L1: 0.0902][DIV: 0.1331][GRAD: 0.1841][VORT: 0.2449][Total: 0.6523]	4.7+3.1s
[6400/8000]	[L1: 0.0901][DIV: 0.1328][GRAD: 0.1839][VORT: 0.2459][Total: 0.6528]	4.7+3.1s
[7200/8000]	[L1: 0.0896][DIV: 0.1324][GRAD: 0.1829][VORT: 0.2447][Total: 0.6497]	4.7+3.1s
[8000/8000]	[L1: 0.0900][DIV: 0.1327][GRAD: 0.1838][VORT: 0.2460][Total: 0.6525]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.083423	vorticity_error: 1.049649	mean_abs_divergence: 0.117474
[DIV2K x2]	rel_l2_error: 0.068545	vorticity_error: 1.161199	mean_abs_divergence: 0.062661
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.053739	vorticity_error: 1.346618	mean_abs_divergence: 0.030654
Forward: 1.25s

Saving...
Total: 1.57s

[Epoch 341]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0839][DIV: 0.1242][GRAD: 0.1713][VORT: 0.2271][Total: 0.6066]	4.7+3.1s
[1600/8000]	[L1: 0.0861][DIV: 0.1262][GRAD: 0.1756][VORT: 0.2349][Total: 0.6228]	4.7+3.1s
[2400/8000]	[L1: 0.0854][DIV: 0.1262][GRAD: 0.1743][VORT: 0.2313][Total: 0.6172]	4.8+3.0s
[3200/8000]	[L1: 0.0868][DIV: 0.1279][GRAD: 0.1769][VORT: 0.2335][Total: 0.6251]	4.7+3.1s
[4000/8000]	[L1: 0.0856][DIV: 0.1266][GRAD: 0.1748][VORT: 0.2323][Total: 0.6193]	4.7+3.1s
[4800/8000]	[L1: 0.0873][DIV: 0.1291][GRAD: 0.1783][VORT: 0.2369][Total: 0.6316]	4.7+3.1s
[5600/8000]	[L1: 0.0881][DIV: 0.1300][GRAD: 0.1800][VORT: 0.2397][Total: 0.6378]	4.7+3.1s
[6400/8000]	[L1: 0.0886][DIV: 0.1308][GRAD: 0.1811][VORT: 0.2416][Total: 0.6422]	4.7+3.1s
[7200/8000]	[L1: 0.0890][DIV: 0.1311][GRAD: 0.1820][VORT: 0.2433][Total: 0.6455]	4.7+3.1s
[8000/8000]	[L1: 0.0890][DIV: 0.1311][GRAD: 0.1819][VORT: 0.2436][Total: 0.6455]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.081755	vorticity_error: 0.702722	mean_abs_divergence: 0.117728
[DIV2K x2]	rel_l2_error: 0.054423	vorticity_error: 0.680747	mean_abs_divergence: 0.063234
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044294	vorticity_error: 0.570960	mean_abs_divergence: 0.031218
Forward: 1.27s

Saving...
Total: 1.60s

[Epoch 342]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0888][DIV: 0.1297][GRAD: 0.1824][VORT: 0.2462][Total: 0.6470]	4.7+3.1s
[1600/8000]	[L1: 0.0889][DIV: 0.1303][GRAD: 0.1821][VORT: 0.2452][Total: 0.6465]	4.8+3.1s
[2400/8000]	[L1: 0.0901][DIV: 0.1322][GRAD: 0.1843][VORT: 0.2460][Total: 0.6527]	4.7+3.1s
[3200/8000]	[L1: 0.0910][DIV: 0.1334][GRAD: 0.1858][VORT: 0.2480][Total: 0.6582]	4.7+3.1s
[4000/8000]	[L1: 0.0913][DIV: 0.1337][GRAD: 0.1863][VORT: 0.2484][Total: 0.6597]	4.7+3.1s
[4800/8000]	[L1: 0.0918][DIV: 0.1346][GRAD: 0.1876][VORT: 0.2502][Total: 0.6642]	4.7+3.1s
[5600/8000]	[L1: 0.0916][DIV: 0.1344][GRAD: 0.1874][VORT: 0.2500][Total: 0.6635]	4.7+3.1s
[6400/8000]	[L1: 0.0914][DIV: 0.1343][GRAD: 0.1872][VORT: 0.2498][Total: 0.6627]	4.7+3.1s
[7200/8000]	[L1: 0.0904][DIV: 0.1332][GRAD: 0.1850][VORT: 0.2469][Total: 0.6555]	4.7+3.1s
[8000/8000]	[L1: 0.0907][DIV: 0.1338][GRAD: 0.1856][VORT: 0.2477][Total: 0.6577]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.080858	vorticity_error: 0.613927	mean_abs_divergence: 0.116168
[DIV2K x2]	rel_l2_error: 0.061183	vorticity_error: 0.632641	mean_abs_divergence: 0.062234
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045358	vorticity_error: 0.468425	mean_abs_divergence: 0.030566
Forward: 1.24s

Saving...
Total: 1.56s

[Epoch 343]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0867][DIV: 0.1272][GRAD: 0.1774][VORT: 0.2405][Total: 0.6318]	4.7+3.1s
[1600/8000]	[L1: 0.0887][DIV: 0.1298][GRAD: 0.1812][VORT: 0.2422][Total: 0.6418]	4.7+3.1s
[2400/8000]	[L1: 0.0913][DIV: 0.1334][GRAD: 0.1864][VORT: 0.2468][Total: 0.6579]	4.7+3.1s
[3200/8000]	[L1: 0.0914][DIV: 0.1338][GRAD: 0.1870][VORT: 0.2498][Total: 0.6620]	4.7+3.1s
[4000/8000]	[L1: 0.0890][DIV: 0.1307][GRAD: 0.1818][VORT: 0.2437][Total: 0.6452]	4.7+3.1s
[4800/8000]	[L1: 0.0902][DIV: 0.1326][GRAD: 0.1843][VORT: 0.2459][Total: 0.6530]	4.7+3.1s
[5600/8000]	[L1: 0.0912][DIV: 0.1341][GRAD: 0.1861][VORT: 0.2470][Total: 0.6583]	4.7+3.1s
[6400/8000]	[L1: 0.0905][DIV: 0.1330][GRAD: 0.1847][VORT: 0.2449][Total: 0.6531]	4.7+3.1s
[7200/8000]	[L1: 0.0901][DIV: 0.1326][GRAD: 0.1839][VORT: 0.2445][Total: 0.6511]	4.7+3.1s
[8000/8000]	[L1: 0.0899][DIV: 0.1323][GRAD: 0.1834][VORT: 0.2442][Total: 0.6499]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.085030	vorticity_error: 0.635748	mean_abs_divergence: 0.101926
[DIV2K x2]	rel_l2_error: 0.066647	vorticity_error: 0.665236	mean_abs_divergence: 0.054516
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.050115	vorticity_error: 0.548872	mean_abs_divergence: 0.026689
Forward: 1.28s

Saving...
Total: 1.60s

[Epoch 344]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0937][DIV: 0.1379][GRAD: 0.1918][VORT: 0.2538][Total: 0.6773]	4.8+3.1s
[1600/8000]	[L1: 0.0902][DIV: 0.1334][GRAD: 0.1849][VORT: 0.2471][Total: 0.6556]	4.7+3.1s
[2400/8000]	[L1: 0.0889][DIV: 0.1319][GRAD: 0.1817][VORT: 0.2407][Total: 0.6432]	4.7+3.1s
[3200/8000]	[L1: 0.0926][DIV: 0.1359][GRAD: 0.1892][VORT: 0.2519][Total: 0.6696]	4.7+3.1s
[4000/8000]	[L1: 0.0911][DIV: 0.1344][GRAD: 0.1858][VORT: 0.2469][Total: 0.6582]	4.7+3.1s
[4800/8000]	[L1: 0.0921][DIV: 0.1354][GRAD: 0.1880][VORT: 0.2492][Total: 0.6648]	4.7+3.1s
[5600/8000]	[L1: 0.0920][DIV: 0.1353][GRAD: 0.1880][VORT: 0.2495][Total: 0.6648]	4.7+3.1s
[6400/8000]	[L1: 0.0911][DIV: 0.1343][GRAD: 0.1862][VORT: 0.2475][Total: 0.6590]	4.7+3.1s
[7200/8000]	[L1: 0.0915][DIV: 0.1343][GRAD: 0.1871][VORT: 0.2495][Total: 0.6624]	4.7+3.1s
[8000/8000]	[L1: 0.0915][DIV: 0.1342][GRAD: 0.1872][VORT: 0.2494][Total: 0.6623]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.097654	vorticity_error: 1.118134	mean_abs_divergence: 0.143472
[DIV2K x2]	rel_l2_error: 0.073465	vorticity_error: 1.016332	mean_abs_divergence: 0.076766
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.050079	vorticity_error: 0.808448	mean_abs_divergence: 0.038506
Forward: 1.28s

Saving...
Total: 1.61s

[Epoch 345]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0904][DIV: 0.1338][GRAD: 0.1839][VORT: 0.2383][Total: 0.6463]	4.7+3.1s
[1600/8000]	[L1: 0.0891][DIV: 0.1318][GRAD: 0.1820][VORT: 0.2436][Total: 0.6466]	4.8+3.1s
[2400/8000]	[L1: 0.0894][DIV: 0.1310][GRAD: 0.1827][VORT: 0.2437][Total: 0.6468]	4.7+3.1s
[3200/8000]	[L1: 0.0882][DIV: 0.1297][GRAD: 0.1801][VORT: 0.2390][Total: 0.6370]	4.7+3.1s
[4000/8000]	[L1: 0.0892][DIV: 0.1313][GRAD: 0.1822][VORT: 0.2412][Total: 0.6438]	4.7+3.1s
[4800/8000]	[L1: 0.0877][DIV: 0.1293][GRAD: 0.1793][VORT: 0.2391][Total: 0.6355]	4.7+3.1s
[5600/8000]	[L1: 0.0874][DIV: 0.1291][GRAD: 0.1787][VORT: 0.2388][Total: 0.6339]	4.7+3.1s
[6400/8000]	[L1: 0.0872][DIV: 0.1287][GRAD: 0.1784][VORT: 0.2390][Total: 0.6333]	4.7+3.1s
[7200/8000]	[L1: 0.0878][DIV: 0.1294][GRAD: 0.1796][VORT: 0.2411][Total: 0.6379]	4.7+3.1s
[8000/8000]	[L1: 0.0883][DIV: 0.1300][GRAD: 0.1805][VORT: 0.2423][Total: 0.6412]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.086793	vorticity_error: 0.989513	mean_abs_divergence: 0.130092
[DIV2K x2]	rel_l2_error: 0.064794	vorticity_error: 0.817125	mean_abs_divergence: 0.066095
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043558	vorticity_error: 0.822446	mean_abs_divergence: 0.031534
Forward: 1.27s

Saving...
Total: 1.60s

[Epoch 346]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0845][DIV: 0.1244][GRAD: 0.1718][VORT: 0.2290][Total: 0.6097]	4.7+3.1s
[1600/8000]	[L1: 0.0889][DIV: 0.1319][GRAD: 0.1805][VORT: 0.2355][Total: 0.6368]	4.7+3.1s
[2400/8000]	[L1: 0.0882][DIV: 0.1305][GRAD: 0.1797][VORT: 0.2384][Total: 0.6367]	4.8+3.1s
[3200/8000]	[L1: 0.0882][DIV: 0.1305][GRAD: 0.1799][VORT: 0.2387][Total: 0.6373]	4.7+3.1s
[4000/8000]	[L1: 0.0887][DIV: 0.1311][GRAD: 0.1810][VORT: 0.2414][Total: 0.6421]	4.7+3.1s
[4800/8000]	[L1: 0.0878][DIV: 0.1299][GRAD: 0.1793][VORT: 0.2401][Total: 0.6371]	4.7+3.1s
[5600/8000]	[L1: 0.0880][DIV: 0.1299][GRAD: 0.1796][VORT: 0.2404][Total: 0.6378]	4.7+3.1s
[6400/8000]	[L1: 0.0871][DIV: 0.1289][GRAD: 0.1778][VORT: 0.2379][Total: 0.6316]	4.7+3.1s
[7200/8000]	[L1: 0.0859][DIV: 0.1276][GRAD: 0.1755][VORT: 0.2357][Total: 0.6247]	4.7+3.1s
[8000/8000]	[L1: 0.0856][DIV: 0.1273][GRAD: 0.1749][VORT: 0.2347][Total: 0.6225]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.084732	vorticity_error: 0.797428	mean_abs_divergence: 0.123389
[DIV2K x2]	rel_l2_error: 0.061985	vorticity_error: 0.859084	mean_abs_divergence: 0.066690
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.054367	vorticity_error: 1.082615	mean_abs_divergence: 0.032969
Forward: 1.26s

Saving...
Total: 1.58s

[Epoch 347]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0916][DIV: 0.1344][GRAD: 0.1876][VORT: 0.2484][Total: 0.6620]	4.7+3.1s
[1600/8000]	[L1: 0.0868][DIV: 0.1285][GRAD: 0.1770][VORT: 0.2360][Total: 0.6284]	4.7+3.1s
[2400/8000]	[L1: 0.0860][DIV: 0.1274][GRAD: 0.1753][VORT: 0.2320][Total: 0.6207]	4.8+3.1s
[3200/8000]	[L1: 0.0869][DIV: 0.1289][GRAD: 0.1775][VORT: 0.2368][Total: 0.6301]	4.7+3.1s
[4000/8000]	[L1: 0.0872][DIV: 0.1291][GRAD: 0.1783][VORT: 0.2372][Total: 0.6318]	4.7+3.1s
[4800/8000]	[L1: 0.0881][DIV: 0.1304][GRAD: 0.1800][VORT: 0.2383][Total: 0.6368]	4.7+3.1s
[5600/8000]	[L1: 0.0881][DIV: 0.1306][GRAD: 0.1799][VORT: 0.2385][Total: 0.6371]	4.7+3.1s
[6400/8000]	[L1: 0.0875][DIV: 0.1295][GRAD: 0.1787][VORT: 0.2373][Total: 0.6330]	4.7+3.1s
[7200/8000]	[L1: 0.0875][DIV: 0.1298][GRAD: 0.1787][VORT: 0.2366][Total: 0.6326]	4.7+3.1s
[8000/8000]	[L1: 0.0885][DIV: 0.1308][GRAD: 0.1808][VORT: 0.2403][Total: 0.6404]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.076824	vorticity_error: 2.626405	mean_abs_divergence: 0.119481
[DIV2K x2]	rel_l2_error: 0.055955	vorticity_error: 1.006709	mean_abs_divergence: 0.062725
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.046630	vorticity_error: 1.008672	mean_abs_divergence: 0.030399
Forward: 1.30s

Saving...
Total: 1.64s

[Epoch 348]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0902][DIV: 0.1300][GRAD: 0.1861][VORT: 0.2587][Total: 0.6651]	4.7+3.1s
[1600/8000]	[L1: 0.0851][DIV: 0.1243][GRAD: 0.1748][VORT: 0.2420][Total: 0.6262]	4.7+3.1s
[2400/8000]	[L1: 0.0847][DIV: 0.1245][GRAD: 0.1735][VORT: 0.2372][Total: 0.6199]	4.7+3.1s
[3200/8000]	[L1: 0.0863][DIV: 0.1270][GRAD: 0.1767][VORT: 0.2389][Total: 0.6289]	4.7+3.1s
[4000/8000]	[L1: 0.0866][DIV: 0.1274][GRAD: 0.1771][VORT: 0.2384][Total: 0.6296]	4.7+3.1s
[4800/8000]	[L1: 0.0861][DIV: 0.1270][GRAD: 0.1763][VORT: 0.2377][Total: 0.6271]	4.7+3.1s
[5600/8000]	[L1: 0.0868][DIV: 0.1280][GRAD: 0.1777][VORT: 0.2396][Total: 0.6321]	4.7+3.1s
[6400/8000]	[L1: 0.0867][DIV: 0.1282][GRAD: 0.1774][VORT: 0.2389][Total: 0.6312]	4.7+3.1s
[7200/8000]	[L1: 0.0859][DIV: 0.1270][GRAD: 0.1757][VORT: 0.2374][Total: 0.6260]	4.7+3.1s
[8000/8000]	[L1: 0.0861][DIV: 0.1273][GRAD: 0.1762][VORT: 0.2380][Total: 0.6276]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.064427	vorticity_error: 0.638753	mean_abs_divergence: 0.078031
[DIV2K x2]	rel_l2_error: 0.044898	vorticity_error: 0.666988	mean_abs_divergence: 0.041076
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043855	vorticity_error: 0.643573	mean_abs_divergence: 0.020159
Forward: 1.25s

Saving...
Total: 1.59s

[Epoch 349]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0873][DIV: 0.1284][GRAD: 0.1792][VORT: 0.2443][Total: 0.6391]	4.7+3.1s
[1600/8000]	[L1: 0.0883][DIV: 0.1304][GRAD: 0.1805][VORT: 0.2427][Total: 0.6419]	4.8+3.1s
[2400/8000]	[L1: 0.0908][DIV: 0.1337][GRAD: 0.1859][VORT: 0.2498][Total: 0.6602]	4.7+3.1s
[3200/8000]	[L1: 0.0890][DIV: 0.1317][GRAD: 0.1821][VORT: 0.2435][Total: 0.6463]	4.7+3.1s
[4000/8000]	[L1: 0.0888][DIV: 0.1319][GRAD: 0.1816][VORT: 0.2434][Total: 0.6456]	4.7+3.1s
[4800/8000]	[L1: 0.0892][DIV: 0.1321][GRAD: 0.1823][VORT: 0.2453][Total: 0.6489]	4.7+3.1s
[5600/8000]	[L1: 0.0884][DIV: 0.1312][GRAD: 0.1808][VORT: 0.2426][Total: 0.6430]	4.7+3.1s
[6400/8000]	[L1: 0.0881][DIV: 0.1307][GRAD: 0.1801][VORT: 0.2421][Total: 0.6410]	4.8+3.1s
[7200/8000]	[L1: 0.0887][DIV: 0.1315][GRAD: 0.1814][VORT: 0.2422][Total: 0.6438]	4.7+3.1s
[8000/8000]	[L1: 0.0883][DIV: 0.1308][GRAD: 0.1804][VORT: 0.2408][Total: 0.6403]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.092471	vorticity_error: 0.962607	mean_abs_divergence: 0.131555
[DIV2K x2]	rel_l2_error: 0.072645	vorticity_error: 0.823712	mean_abs_divergence: 0.071837
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048807	vorticity_error: 0.657032	mean_abs_divergence: 0.035319
Forward: 1.28s

Saving...
Total: 1.60s

[Epoch 350]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0869][DIV: 0.1305][GRAD: 0.1771][VORT: 0.2279][Total: 0.6223]	4.7+3.1s
[1600/8000]	[L1: 0.0835][DIV: 0.1254][GRAD: 0.1702][VORT: 0.2238][Total: 0.6029]	4.8+3.1s
[2400/8000]	[L1: 0.0881][DIV: 0.1313][GRAD: 0.1796][VORT: 0.2358][Total: 0.6348]	4.7+3.1s
[3200/8000]	[L1: 0.0878][DIV: 0.1305][GRAD: 0.1789][VORT: 0.2355][Total: 0.6327]	4.7+3.1s
[4000/8000]	[L1: 0.0880][DIV: 0.1307][GRAD: 0.1793][VORT: 0.2363][Total: 0.6343]	4.7+3.1s
[4800/8000]	[L1: 0.0878][DIV: 0.1304][GRAD: 0.1786][VORT: 0.2356][Total: 0.6323]	4.7+3.1s
[5600/8000]	[L1: 0.0868][DIV: 0.1292][GRAD: 0.1769][VORT: 0.2343][Total: 0.6272]	4.7+3.1s
[6400/8000]	[L1: 0.0869][DIV: 0.1292][GRAD: 0.1771][VORT: 0.2352][Total: 0.6285]	4.7+3.1s
[7200/8000]	[L1: 0.0866][DIV: 0.1290][GRAD: 0.1765][VORT: 0.2345][Total: 0.6266]	4.7+3.1s
[8000/8000]	[L1: 0.0873][DIV: 0.1296][GRAD: 0.1781][VORT: 0.2371][Total: 0.6320]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.108563	vorticity_error: 0.963598	mean_abs_divergence: 0.157834
[DIV2K x2]	rel_l2_error: 0.078311	vorticity_error: 0.969745	mean_abs_divergence: 0.082386
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.059415	vorticity_error: 0.783324	mean_abs_divergence: 0.040011
Forward: 1.28s

Saving...
Total: 1.62s

[Epoch 351]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0891][DIV: 0.1332][GRAD: 0.1827][VORT: 0.2465][Total: 0.6514]	4.7+3.1s
[1600/8000]	[L1: 0.0859][DIV: 0.1280][GRAD: 0.1764][VORT: 0.2398][Total: 0.6301]	4.8+3.0s
[2400/8000]	[L1: 0.0881][DIV: 0.1294][GRAD: 0.1811][VORT: 0.2489][Total: 0.6475]	4.7+3.1s
[3200/8000]	[L1: 0.0907][DIV: 0.1332][GRAD: 0.1859][VORT: 0.2537][Total: 0.6634]	4.7+3.1s
[4000/8000]	[L1: 0.0910][DIV: 0.1337][GRAD: 0.1867][VORT: 0.2538][Total: 0.6653]	4.7+3.1s
[4800/8000]	[L1: 0.0916][DIV: 0.1339][GRAD: 0.1880][VORT: 0.2555][Total: 0.6690]	4.7+3.1s
[5600/8000]	[L1: 0.0907][DIV: 0.1328][GRAD: 0.1859][VORT: 0.2523][Total: 0.6616]	4.7+3.1s
[6400/8000]	[L1: 0.0893][DIV: 0.1313][GRAD: 0.1830][VORT: 0.2482][Total: 0.6520]	4.7+3.1s
[7200/8000]	[L1: 0.0885][DIV: 0.1304][GRAD: 0.1814][VORT: 0.2463][Total: 0.6466]	4.7+3.1s
[8000/8000]	[L1: 0.0884][DIV: 0.1301][GRAD: 0.1811][VORT: 0.2459][Total: 0.6455]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.072603	vorticity_error: 0.820628	mean_abs_divergence: 0.098519
[DIV2K x2]	rel_l2_error: 0.056026	vorticity_error: 0.825294	mean_abs_divergence: 0.052261
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045627	vorticity_error: 0.682775	mean_abs_divergence: 0.026017
Forward: 1.32s

Saving...
Total: 1.65s

[Epoch 352]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0913][DIV: 0.1337][GRAD: 0.1862][VORT: 0.2476][Total: 0.6589]	4.7+3.1s
[1600/8000]	[L1: 0.0926][DIV: 0.1355][GRAD: 0.1886][VORT: 0.2487][Total: 0.6653]	4.8+3.1s
[2400/8000]	[L1: 0.0906][DIV: 0.1332][GRAD: 0.1848][VORT: 0.2455][Total: 0.6542]	4.7+3.1s
[3200/8000]	[L1: 0.0922][DIV: 0.1346][GRAD: 0.1879][VORT: 0.2469][Total: 0.6616]	4.7+3.1s
[4000/8000]	[L1: 0.0917][DIV: 0.1341][GRAD: 0.1870][VORT: 0.2459][Total: 0.6587]	4.7+3.1s
[4800/8000]	[L1: 0.0916][DIV: 0.1334][GRAD: 0.1872][VORT: 0.2480][Total: 0.6602]	4.7+3.1s
[5600/8000]	[L1: 0.0912][DIV: 0.1332][GRAD: 0.1864][VORT: 0.2478][Total: 0.6586]	4.7+3.1s
[6400/8000]	[L1: 0.0915][DIV: 0.1334][GRAD: 0.1869][VORT: 0.2486][Total: 0.6604]	4.7+3.1s
[7200/8000]	[L1: 0.0909][DIV: 0.1331][GRAD: 0.1857][VORT: 0.2465][Total: 0.6563]	4.7+3.1s
[8000/8000]	[L1: 0.0909][DIV: 0.1332][GRAD: 0.1856][VORT: 0.2476][Total: 0.6573]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.073239	vorticity_error: 2.899454	mean_abs_divergence: 0.113633
[DIV2K x2]	rel_l2_error: 0.056017	vorticity_error: 0.781171	mean_abs_divergence: 0.058783
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042418	vorticity_error: 0.735565	mean_abs_divergence: 0.028575
Forward: 1.27s

Saving...
Total: 1.59s

[Epoch 353]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0893][DIV: 0.1314][GRAD: 0.1817][VORT: 0.2383][Total: 0.6408]	4.7+3.1s
[1600/8000]	[L1: 0.0884][DIV: 0.1293][GRAD: 0.1800][VORT: 0.2402][Total: 0.6380]	4.8+3.1s
[2400/8000]	[L1: 0.0899][DIV: 0.1310][GRAD: 0.1835][VORT: 0.2485][Total: 0.6529]	4.7+3.1s
[3200/8000]	[L1: 0.0890][DIV: 0.1305][GRAD: 0.1818][VORT: 0.2471][Total: 0.6484]	4.7+3.1s
[4000/8000]	[L1: 0.0895][DIV: 0.1312][GRAD: 0.1829][VORT: 0.2480][Total: 0.6516]	4.7+3.1s
[4800/8000]	[L1: 0.0889][DIV: 0.1306][GRAD: 0.1818][VORT: 0.2461][Total: 0.6474]	4.7+3.1s
[5600/8000]	[L1: 0.0886][DIV: 0.1301][GRAD: 0.1812][VORT: 0.2453][Total: 0.6453]	4.7+3.1s
[6400/8000]	[L1: 0.0886][DIV: 0.1302][GRAD: 0.1810][VORT: 0.2444][Total: 0.6443]	4.7+3.1s
[7200/8000]	[L1: 0.0885][DIV: 0.1305][GRAD: 0.1810][VORT: 0.2444][Total: 0.6444]	4.7+3.1s
[8000/8000]	[L1: 0.0886][DIV: 0.1305][GRAD: 0.1811][VORT: 0.2442][Total: 0.6444]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.089088	vorticity_error: 0.895232	mean_abs_divergence: 0.112918
[DIV2K x2]	rel_l2_error: 0.068253	vorticity_error: 0.984209	mean_abs_divergence: 0.058886
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.055642	vorticity_error: 0.878015	mean_abs_divergence: 0.029217
Forward: 1.30s

Saving...
Total: 1.62s

[Epoch 354]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0835][DIV: 0.1254][GRAD: 0.1708][VORT: 0.2312][Total: 0.6109]	4.7+3.1s
[1600/8000]	[L1: 0.0863][DIV: 0.1268][GRAD: 0.1763][VORT: 0.2390][Total: 0.6285]	4.8+3.1s
[2400/8000]	[L1: 0.0843][DIV: 0.1247][GRAD: 0.1720][VORT: 0.2324][Total: 0.6134]	4.7+3.1s
[3200/8000]	[L1: 0.0852][DIV: 0.1258][GRAD: 0.1741][VORT: 0.2336][Total: 0.6187]	4.7+3.1s
[4000/8000]	[L1: 0.0861][DIV: 0.1272][GRAD: 0.1762][VORT: 0.2373][Total: 0.6267]	4.7+3.1s
[4800/8000]	[L1: 0.0881][DIV: 0.1300][GRAD: 0.1802][VORT: 0.2420][Total: 0.6403]	4.8+3.1s
[5600/8000]	[L1: 0.0881][DIV: 0.1299][GRAD: 0.1801][VORT: 0.2413][Total: 0.6394]	4.7+3.1s
[6400/8000]	[L1: 0.0880][DIV: 0.1298][GRAD: 0.1800][VORT: 0.2419][Total: 0.6396]	4.7+3.1s
[7200/8000]	[L1: 0.0894][DIV: 0.1318][GRAD: 0.1829][VORT: 0.2457][Total: 0.6497]	4.7+3.1s
[8000/8000]	[L1: 0.0897][DIV: 0.1319][GRAD: 0.1833][VORT: 0.2463][Total: 0.6512]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.074907	vorticity_error: 1.007550	mean_abs_divergence: 0.118347
[DIV2K x2]	rel_l2_error: 0.061867	vorticity_error: 0.917758	mean_abs_divergence: 0.061863
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045247	vorticity_error: 0.868833	mean_abs_divergence: 0.030291
Forward: 1.23s

Saving...
Total: 1.55s

[Epoch 355]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0913][DIV: 0.1328][GRAD: 0.1870][VORT: 0.2494][Total: 0.6605]	4.8+3.1s
[1600/8000]	[L1: 0.0891][DIV: 0.1322][GRAD: 0.1827][VORT: 0.2446][Total: 0.6487]	4.7+3.1s
[2400/8000]	[L1: 0.0917][DIV: 0.1348][GRAD: 0.1875][VORT: 0.2498][Total: 0.6638]	4.7+3.1s
[3200/8000]	[L1: 0.0936][DIV: 0.1373][GRAD: 0.1915][VORT: 0.2546][Total: 0.6770]	4.7+3.1s
[4000/8000]	[L1: 0.0935][DIV: 0.1372][GRAD: 0.1913][VORT: 0.2540][Total: 0.6759]	4.7+3.1s
[4800/8000]	[L1: 0.0934][DIV: 0.1371][GRAD: 0.1908][VORT: 0.2528][Total: 0.6741]	4.7+3.1s
[5600/8000]	[L1: 0.0929][DIV: 0.1368][GRAD: 0.1899][VORT: 0.2515][Total: 0.6711]	4.7+3.1s
[6400/8000]	[L1: 0.0922][DIV: 0.1359][GRAD: 0.1884][VORT: 0.2490][Total: 0.6655]	4.7+3.1s
[7200/8000]	[L1: 0.0917][DIV: 0.1352][GRAD: 0.1874][VORT: 0.2485][Total: 0.6628]	4.7+3.1s
[8000/8000]	[L1: 0.0908][DIV: 0.1340][GRAD: 0.1854][VORT: 0.2460][Total: 0.6563]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.079347	vorticity_error: 0.832125	mean_abs_divergence: 0.114819
[DIV2K x2]	rel_l2_error: 0.060451	vorticity_error: 0.670487	mean_abs_divergence: 0.060369
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.049284	vorticity_error: 0.673428	mean_abs_divergence: 0.029451
Forward: 1.32s

Saving...
Total: 1.66s

[Epoch 356]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0770][DIV: 0.1173][GRAD: 0.1576][VORT: 0.2181][Total: 0.5700]	4.8+3.1s
[1600/8000]	[L1: 0.0855][DIV: 0.1286][GRAD: 0.1748][VORT: 0.2370][Total: 0.6259]	4.7+3.1s
[2400/8000]	[L1: 0.0864][DIV: 0.1290][GRAD: 0.1767][VORT: 0.2394][Total: 0.6315]	4.7+3.1s
[3200/8000]	[L1: 0.0864][DIV: 0.1288][GRAD: 0.1768][VORT: 0.2394][Total: 0.6314]	4.7+3.1s
[4000/8000]	[L1: 0.0879][DIV: 0.1310][GRAD: 0.1799][VORT: 0.2422][Total: 0.6409]	4.7+3.1s
[4800/8000]	[L1: 0.0866][DIV: 0.1292][GRAD: 0.1773][VORT: 0.2383][Total: 0.6314]	4.7+3.1s
[5600/8000]	[L1: 0.0876][DIV: 0.1305][GRAD: 0.1795][VORT: 0.2408][Total: 0.6383]	4.7+3.1s
[6400/8000]	[L1: 0.0881][DIV: 0.1308][GRAD: 0.1804][VORT: 0.2426][Total: 0.6418]	4.7+3.1s
[7200/8000]	[L1: 0.0884][DIV: 0.1307][GRAD: 0.1809][VORT: 0.2438][Total: 0.6438]	4.7+3.1s
[8000/8000]	[L1: 0.0888][DIV: 0.1312][GRAD: 0.1819][VORT: 0.2451][Total: 0.6471]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.083757	vorticity_error: 1.077710	mean_abs_divergence: 0.126134
[DIV2K x2]	rel_l2_error: 0.065134	vorticity_error: 1.529970	mean_abs_divergence: 0.066816
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044061	vorticity_error: 1.123742	mean_abs_divergence: 0.032570
Forward: 1.29s

Saving...
Total: 1.61s

[Epoch 357]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0893][DIV: 0.1315][GRAD: 0.1809][VORT: 0.2371][Total: 0.6389]	4.7+3.1s
[1600/8000]	[L1: 0.0870][DIV: 0.1280][GRAD: 0.1769][VORT: 0.2347][Total: 0.6267]	4.8+3.1s
[2400/8000]	[L1: 0.0884][DIV: 0.1305][GRAD: 0.1800][VORT: 0.2403][Total: 0.6391]	4.7+3.1s
[3200/8000]	[L1: 0.0887][DIV: 0.1316][GRAD: 0.1805][VORT: 0.2397][Total: 0.6403]	4.8+3.1s
[4000/8000]	[L1: 0.0877][DIV: 0.1302][GRAD: 0.1785][VORT: 0.2378][Total: 0.6342]	4.7+3.1s
[4800/8000]	[L1: 0.0878][DIV: 0.1301][GRAD: 0.1789][VORT: 0.2386][Total: 0.6354]	4.7+3.1s
[5600/8000]	[L1: 0.0874][DIV: 0.1293][GRAD: 0.1783][VORT: 0.2390][Total: 0.6340]	4.7+3.1s
[6400/8000]	[L1: 0.0884][DIV: 0.1305][GRAD: 0.1804][VORT: 0.2425][Total: 0.6418]	4.7+3.1s
[7200/8000]	[L1: 0.0893][DIV: 0.1315][GRAD: 0.1823][VORT: 0.2445][Total: 0.6477]	4.7+3.1s
[8000/8000]	[L1: 0.0890][DIV: 0.1311][GRAD: 0.1816][VORT: 0.2439][Total: 0.6456]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.076258	vorticity_error: 0.641456	mean_abs_divergence: 0.124776
[DIV2K x2]	rel_l2_error: 0.063980	vorticity_error: 0.649383	mean_abs_divergence: 0.067157
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043712	vorticity_error: 0.503239	mean_abs_divergence: 0.033877
Forward: 1.31s

Saving...
Total: 1.64s

[Epoch 358]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0821][DIV: 0.1221][GRAD: 0.1678][VORT: 0.2316][Total: 0.6036]	4.7+3.1s
[1600/8000]	[L1: 0.0828][DIV: 0.1231][GRAD: 0.1696][VORT: 0.2338][Total: 0.6093]	4.8+3.1s
[2400/8000]	[L1: 0.0862][DIV: 0.1281][GRAD: 0.1763][VORT: 0.2394][Total: 0.6300]	4.7+3.1s
[3200/8000]	[L1: 0.0871][DIV: 0.1290][GRAD: 0.1780][VORT: 0.2421][Total: 0.6361]	4.7+3.1s
[4000/8000]	[L1: 0.0859][DIV: 0.1276][GRAD: 0.1755][VORT: 0.2366][Total: 0.6256]	4.7+3.1s
[4800/8000]	[L1: 0.0863][DIV: 0.1277][GRAD: 0.1764][VORT: 0.2379][Total: 0.6283]	4.8+3.1s
[5600/8000]	[L1: 0.0873][DIV: 0.1289][GRAD: 0.1785][VORT: 0.2401][Total: 0.6348]	4.7+3.1s
[6400/8000]	[L1: 0.0873][DIV: 0.1290][GRAD: 0.1787][VORT: 0.2418][Total: 0.6368]	4.7+3.1s
[7200/8000]	[L1: 0.0885][DIV: 0.1305][GRAD: 0.1812][VORT: 0.2447][Total: 0.6449]	4.7+3.1s
[8000/8000]	[L1: 0.0886][DIV: 0.1307][GRAD: 0.1811][VORT: 0.2450][Total: 0.6454]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.070754	vorticity_error: 0.759470	mean_abs_divergence: 0.123775
[DIV2K x2]	rel_l2_error: 0.054967	vorticity_error: 0.576392	mean_abs_divergence: 0.065395
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.039220	vorticity_error: 0.632640	mean_abs_divergence: 0.032289
Forward: 1.24s

Saving...
Total: 1.57s

[Epoch 359]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0935][DIV: 0.1388][GRAD: 0.1904][VORT: 0.2480][Total: 0.6707]	4.8+3.1s
[1600/8000]	[L1: 0.0933][DIV: 0.1374][GRAD: 0.1903][VORT: 0.2494][Total: 0.6705]	4.7+3.1s
[2400/8000]	[L1: 0.0904][DIV: 0.1335][GRAD: 0.1841][VORT: 0.2406][Total: 0.6485]	4.7+3.1s
[3200/8000]	[L1: 0.0877][DIV: 0.1300][GRAD: 0.1783][VORT: 0.2320][Total: 0.6280]	4.7+3.1s
[4000/8000]	[L1: 0.0882][DIV: 0.1305][GRAD: 0.1796][VORT: 0.2346][Total: 0.6329]	4.7+3.1s
[4800/8000]	[L1: 0.0888][DIV: 0.1315][GRAD: 0.1811][VORT: 0.2374][Total: 0.6388]	4.7+3.1s
[5600/8000]	[L1: 0.0887][DIV: 0.1313][GRAD: 0.1808][VORT: 0.2371][Total: 0.6380]	4.7+3.1s
[6400/8000]	[L1: 0.0891][DIV: 0.1317][GRAD: 0.1817][VORT: 0.2392][Total: 0.6417]	4.7+3.1s
[7200/8000]	[L1: 0.0884][DIV: 0.1309][GRAD: 0.1804][VORT: 0.2374][Total: 0.6372]	4.7+3.1s
[8000/8000]	[L1: 0.0884][DIV: 0.1309][GRAD: 0.1804][VORT: 0.2385][Total: 0.6383]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.081368	vorticity_error: 0.797646	mean_abs_divergence: 0.105786
[DIV2K x2]	rel_l2_error: 0.062248	vorticity_error: 0.685449	mean_abs_divergence: 0.055201
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.046148	vorticity_error: 0.594414	mean_abs_divergence: 0.026966
Forward: 1.25s

Saving...
Total: 1.57s

[Epoch 360]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0846][DIV: 0.1264][GRAD: 0.1737][VORT: 0.2384][Total: 0.6232]	4.8+3.0s
[1600/8000]	[L1: 0.0848][DIV: 0.1264][GRAD: 0.1739][VORT: 0.2366][Total: 0.6217]	4.7+3.1s
[2400/8000]	[L1: 0.0872][DIV: 0.1289][GRAD: 0.1787][VORT: 0.2437][Total: 0.6385]	4.7+3.1s
[3200/8000]	[L1: 0.0868][DIV: 0.1289][GRAD: 0.1779][VORT: 0.2418][Total: 0.6355]	4.7+3.1s
[4000/8000]	[L1: 0.0860][DIV: 0.1283][GRAD: 0.1762][VORT: 0.2390][Total: 0.6295]	4.7+3.1s
[4800/8000]	[L1: 0.0874][DIV: 0.1303][GRAD: 0.1789][VORT: 0.2414][Total: 0.6380]	4.7+3.1s
[5600/8000]	[L1: 0.0872][DIV: 0.1298][GRAD: 0.1785][VORT: 0.2410][Total: 0.6365]	4.7+3.1s
[6400/8000]	[L1: 0.0876][DIV: 0.1302][GRAD: 0.1791][VORT: 0.2421][Total: 0.6390]	4.7+3.1s
[7200/8000]	[L1: 0.0868][DIV: 0.1292][GRAD: 0.1776][VORT: 0.2403][Total: 0.6340]	4.7+3.1s
[8000/8000]	[L1: 0.0861][DIV: 0.1283][GRAD: 0.1759][VORT: 0.2373][Total: 0.6276]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.087390	vorticity_error: 0.761432	mean_abs_divergence: 0.132994
[DIV2K x2]	rel_l2_error: 0.066139	vorticity_error: 0.752433	mean_abs_divergence: 0.070071
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045999	vorticity_error: 0.617382	mean_abs_divergence: 0.034325
Forward: 1.31s

Saving...
Total: 1.64s

[Epoch 361]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0951][DIV: 0.1392][GRAD: 0.1949][VORT: 0.2587][Total: 0.6879]	4.8+3.1s
[1600/8000]	[L1: 0.0908][DIV: 0.1326][GRAD: 0.1860][VORT: 0.2495][Total: 0.6590]	4.7+3.1s
[2400/8000]	[L1: 0.0917][DIV: 0.1333][GRAD: 0.1879][VORT: 0.2528][Total: 0.6657]	4.7+3.1s
[3200/8000]	[L1: 0.0905][DIV: 0.1331][GRAD: 0.1852][VORT: 0.2466][Total: 0.6555]	4.7+3.1s
[4000/8000]	[L1: 0.0918][DIV: 0.1342][GRAD: 0.1879][VORT: 0.2511][Total: 0.6651]	4.7+3.1s
[4800/8000]	[L1: 0.0916][DIV: 0.1340][GRAD: 0.1875][VORT: 0.2511][Total: 0.6643]	4.7+3.1s
[5600/8000]	[L1: 0.0913][DIV: 0.1336][GRAD: 0.1867][VORT: 0.2508][Total: 0.6624]	4.7+3.1s
[6400/8000]	[L1: 0.0913][DIV: 0.1340][GRAD: 0.1866][VORT: 0.2497][Total: 0.6616]	4.7+3.1s
[7200/8000]	[L1: 0.0913][DIV: 0.1339][GRAD: 0.1868][VORT: 0.2497][Total: 0.6617]	4.7+3.1s
[8000/8000]	[L1: 0.0906][DIV: 0.1330][GRAD: 0.1854][VORT: 0.2486][Total: 0.6577]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.074711	vorticity_error: 0.825632	mean_abs_divergence: 0.126300
[DIV2K x2]	rel_l2_error: 0.059887	vorticity_error: 0.906167	mean_abs_divergence: 0.067822
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044753	vorticity_error: 0.897477	mean_abs_divergence: 0.033809
Forward: 1.32s

Saving...
Total: 1.65s

[Epoch 362]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0872][DIV: 0.1273][GRAD: 0.1791][VORT: 0.2415][Total: 0.6351]	4.8+3.1s
[1600/8000]	[L1: 0.0910][DIV: 0.1330][GRAD: 0.1869][VORT: 0.2510][Total: 0.6620]	4.7+3.1s
[2400/8000]	[L1: 0.0911][DIV: 0.1336][GRAD: 0.1871][VORT: 0.2514][Total: 0.6632]	4.7+3.1s
[3200/8000]	[L1: 0.0905][DIV: 0.1327][GRAD: 0.1858][VORT: 0.2500][Total: 0.6590]	4.7+3.1s
[4000/8000]	[L1: 0.0901][DIV: 0.1322][GRAD: 0.1847][VORT: 0.2489][Total: 0.6558]	4.7+3.1s
[4800/8000]	[L1: 0.0900][DIV: 0.1321][GRAD: 0.1847][VORT: 0.2488][Total: 0.6556]	4.7+3.1s
[5600/8000]	[L1: 0.0892][DIV: 0.1314][GRAD: 0.1829][VORT: 0.2463][Total: 0.6497]	4.7+3.1s
[6400/8000]	[L1: 0.0884][DIV: 0.1305][GRAD: 0.1813][VORT: 0.2440][Total: 0.6442]	4.7+3.1s
[7200/8000]	[L1: 0.0889][DIV: 0.1310][GRAD: 0.1821][VORT: 0.2452][Total: 0.6472]	4.7+3.1s
[8000/8000]	[L1: 0.0888][DIV: 0.1309][GRAD: 0.1818][VORT: 0.2447][Total: 0.6462]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.076012	vorticity_error: 0.695534	mean_abs_divergence: 0.128533
[DIV2K x2]	rel_l2_error: 0.063411	vorticity_error: 0.722968	mean_abs_divergence: 0.067125
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043914	vorticity_error: 0.660661	mean_abs_divergence: 0.032719
Forward: 1.33s

Saving...
Total: 1.66s

[Epoch 363]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0918][DIV: 0.1353][GRAD: 0.1867][VORT: 0.2440][Total: 0.6579]	4.8+3.1s
[1600/8000]	[L1: 0.0908][DIV: 0.1350][GRAD: 0.1845][VORT: 0.2399][Total: 0.6501]	4.7+3.1s
[2400/8000]	[L1: 0.0880][DIV: 0.1312][GRAD: 0.1790][VORT: 0.2350][Total: 0.6333]	4.7+3.1s
[3200/8000]	[L1: 0.0880][DIV: 0.1311][GRAD: 0.1793][VORT: 0.2362][Total: 0.6346]	4.7+3.1s
[4000/8000]	[L1: 0.0883][DIV: 0.1314][GRAD: 0.1799][VORT: 0.2374][Total: 0.6370]	4.7+3.1s
[4800/8000]	[L1: 0.0879][DIV: 0.1305][GRAD: 0.1794][VORT: 0.2376][Total: 0.6354]	4.7+3.1s
[5600/8000]	[L1: 0.0889][DIV: 0.1320][GRAD: 0.1815][VORT: 0.2404][Total: 0.6427]	4.7+3.1s
[6400/8000]	[L1: 0.0875][DIV: 0.1304][GRAD: 0.1784][VORT: 0.2365][Total: 0.6327]	4.7+3.1s
[7200/8000]	[L1: 0.0873][DIV: 0.1304][GRAD: 0.1782][VORT: 0.2359][Total: 0.6318]	4.7+3.1s
[8000/8000]	[L1: 0.0879][DIV: 0.1311][GRAD: 0.1795][VORT: 0.2386][Total: 0.6372]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.081812	vorticity_error: 0.949266	mean_abs_divergence: 0.105818
[DIV2K x2]	rel_l2_error: 0.067611	vorticity_error: 1.099645	mean_abs_divergence: 0.056520
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.052852	vorticity_error: 1.305220	mean_abs_divergence: 0.028154
Forward: 1.24s

Saving...
Total: 1.58s

[Epoch 364]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0894][DIV: 0.1305][GRAD: 0.1836][VORT: 0.2527][Total: 0.6563]	5.0+3.1s
[1600/8000]	[L1: 0.0876][DIV: 0.1297][GRAD: 0.1801][VORT: 0.2475][Total: 0.6448]	4.8+3.2s
[2400/8000]	[L1: 0.0875][DIV: 0.1302][GRAD: 0.1795][VORT: 0.2433][Total: 0.6404]	4.8+3.2s
[3200/8000]	[L1: 0.0875][DIV: 0.1295][GRAD: 0.1793][VORT: 0.2435][Total: 0.6400]	4.8+3.2s
[4000/8000]	[L1: 0.0881][DIV: 0.1300][GRAD: 0.1806][VORT: 0.2447][Total: 0.6434]	4.7+3.1s
[4800/8000]	[L1: 0.0871][DIV: 0.1285][GRAD: 0.1784][VORT: 0.2419][Total: 0.6359]	4.7+3.1s
[5600/8000]	[L1: 0.0872][DIV: 0.1286][GRAD: 0.1787][VORT: 0.2423][Total: 0.6368]	4.7+3.1s
[6400/8000]	[L1: 0.0878][DIV: 0.1295][GRAD: 0.1797][VORT: 0.2424][Total: 0.6395]	4.7+3.1s
[7200/8000]	[L1: 0.0881][DIV: 0.1301][GRAD: 0.1806][VORT: 0.2438][Total: 0.6426]	4.7+3.1s
[8000/8000]	[L1: 0.0885][DIV: 0.1304][GRAD: 0.1814][VORT: 0.2449][Total: 0.6452]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.080607	vorticity_error: 0.683846	mean_abs_divergence: 0.145010
[DIV2K x2]	rel_l2_error: 0.061581	vorticity_error: 0.663161	mean_abs_divergence: 0.075947
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043439	vorticity_error: 0.547895	mean_abs_divergence: 0.036375
Forward: 1.25s

Saving...
Total: 1.56s

[Epoch 365]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0892][DIV: 0.1309][GRAD: 0.1822][VORT: 0.2446][Total: 0.6468]	4.8+3.1s
[1600/8000]	[L1: 0.0889][DIV: 0.1313][GRAD: 0.1815][VORT: 0.2424][Total: 0.6442]	4.7+3.1s
[2400/8000]	[L1: 0.0870][DIV: 0.1291][GRAD: 0.1782][VORT: 0.2396][Total: 0.6340]	4.7+3.1s
[3200/8000]	[L1: 0.0887][DIV: 0.1311][GRAD: 0.1813][VORT: 0.2441][Total: 0.6452]	4.7+3.1s
[4000/8000]	[L1: 0.0884][DIV: 0.1303][GRAD: 0.1808][VORT: 0.2431][Total: 0.6426]	4.7+3.1s
[4800/8000]	[L1: 0.0874][DIV: 0.1292][GRAD: 0.1786][VORT: 0.2392][Total: 0.6344]	4.7+3.1s
[5600/8000]	[L1: 0.0875][DIV: 0.1296][GRAD: 0.1786][VORT: 0.2399][Total: 0.6356]	4.7+3.1s
[6400/8000]	[L1: 0.0866][DIV: 0.1284][GRAD: 0.1767][VORT: 0.2368][Total: 0.6285]	4.7+3.1s
[7200/8000]	[L1: 0.0869][DIV: 0.1289][GRAD: 0.1773][VORT: 0.2371][Total: 0.6303]	4.7+3.1s
[8000/8000]	[L1: 0.0869][DIV: 0.1288][GRAD: 0.1776][VORT: 0.2386][Total: 0.6319]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.072401	vorticity_error: 0.539593	mean_abs_divergence: 0.114273
[DIV2K x2]	rel_l2_error: 0.055745	vorticity_error: 3.662038	mean_abs_divergence: 0.061492
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043790	vorticity_error: 0.831748	mean_abs_divergence: 0.030162
Forward: 1.31s

Saving...
Total: 1.64s

[Epoch 366]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0823][DIV: 0.1246][GRAD: 0.1680][VORT: 0.2261][Total: 0.6010]	4.8+3.0s
[1600/8000]	[L1: 0.0875][DIV: 0.1299][GRAD: 0.1787][VORT: 0.2404][Total: 0.6364]	4.7+3.1s
[2400/8000]	[L1: 0.0906][DIV: 0.1338][GRAD: 0.1851][VORT: 0.2485][Total: 0.6580]	4.7+3.1s
[3200/8000]	[L1: 0.0880][DIV: 0.1307][GRAD: 0.1799][VORT: 0.2427][Total: 0.6412]	4.7+3.1s
[4000/8000]	[L1: 0.0890][DIV: 0.1319][GRAD: 0.1823][VORT: 0.2460][Total: 0.6491]	4.7+3.1s
[4800/8000]	[L1: 0.0895][DIV: 0.1324][GRAD: 0.1832][VORT: 0.2466][Total: 0.6517]	4.7+3.1s
[5600/8000]	[L1: 0.0890][DIV: 0.1315][GRAD: 0.1822][VORT: 0.2461][Total: 0.6488]	4.7+3.1s
[6400/8000]	[L1: 0.0885][DIV: 0.1308][GRAD: 0.1812][VORT: 0.2450][Total: 0.6456]	4.7+3.1s
[7200/8000]	[L1: 0.0885][DIV: 0.1309][GRAD: 0.1813][VORT: 0.2448][Total: 0.6455]	4.7+3.1s
[8000/8000]	[L1: 0.0882][DIV: 0.1306][GRAD: 0.1807][VORT: 0.2438][Total: 0.6433]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.081154	vorticity_error: 0.739127	mean_abs_divergence: 0.118223
[DIV2K x2]	rel_l2_error: 0.056474	vorticity_error: 0.742860	mean_abs_divergence: 0.062009
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042072	vorticity_error: 0.582242	mean_abs_divergence: 0.030506
Forward: 1.24s

Saving...
Total: 1.57s

[Epoch 367]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0882][DIV: 0.1310][GRAD: 0.1809][VORT: 0.2378][Total: 0.6378]	4.8+3.1s
[1600/8000]	[L1: 0.0886][DIV: 0.1312][GRAD: 0.1811][VORT: 0.2414][Total: 0.6423]	4.7+3.1s
[2400/8000]	[L1: 0.0876][DIV: 0.1306][GRAD: 0.1794][VORT: 0.2409][Total: 0.6386]	4.7+3.1s
[3200/8000]	[L1: 0.0876][DIV: 0.1302][GRAD: 0.1797][VORT: 0.2423][Total: 0.6399]	4.7+3.1s
[4000/8000]	[L1: 0.0865][DIV: 0.1286][GRAD: 0.1774][VORT: 0.2406][Total: 0.6331]	4.7+3.1s
[4800/8000]	[L1: 0.0863][DIV: 0.1286][GRAD: 0.1768][VORT: 0.2379][Total: 0.6297]	4.7+3.1s
[5600/8000]	[L1: 0.0865][DIV: 0.1288][GRAD: 0.1771][VORT: 0.2382][Total: 0.6306]	4.7+3.1s
[6400/8000]	[L1: 0.0869][DIV: 0.1294][GRAD: 0.1780][VORT: 0.2390][Total: 0.6333]	4.7+3.1s
[7200/8000]	[L1: 0.0871][DIV: 0.1293][GRAD: 0.1784][VORT: 0.2405][Total: 0.6353]	4.7+3.1s
[8000/8000]	[L1: 0.0882][DIV: 0.1305][GRAD: 0.1805][VORT: 0.2423][Total: 0.6414]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.088578	vorticity_error: 1.212060	mean_abs_divergence: 0.154408
[DIV2K x2]	rel_l2_error: 0.071874	vorticity_error: 0.953059	mean_abs_divergence: 0.082438
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.052362	vorticity_error: 1.013614	mean_abs_divergence: 0.040870
Forward: 1.28s

Saving...
Total: 1.60s

[Epoch 368]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0941][DIV: 0.1383][GRAD: 0.1921][VORT: 0.2570][Total: 0.6816]	4.8+3.1s
[1600/8000]	[L1: 0.0887][DIV: 0.1313][GRAD: 0.1812][VORT: 0.2437][Total: 0.6449]	4.7+3.1s
[2400/8000]	[L1: 0.0897][DIV: 0.1323][GRAD: 0.1832][VORT: 0.2439][Total: 0.6491]	4.7+3.1s
[3200/8000]	[L1: 0.0890][DIV: 0.1319][GRAD: 0.1820][VORT: 0.2427][Total: 0.6456]	4.7+3.1s
[4000/8000]	[L1: 0.0889][DIV: 0.1315][GRAD: 0.1818][VORT: 0.2438][Total: 0.6461]	4.7+3.1s
[4800/8000]	[L1: 0.0891][DIV: 0.1318][GRAD: 0.1819][VORT: 0.2440][Total: 0.6467]	4.7+3.1s
[5600/8000]	[L1: 0.0886][DIV: 0.1310][GRAD: 0.1808][VORT: 0.2425][Total: 0.6430]	4.7+3.1s
[6400/8000]	[L1: 0.0889][DIV: 0.1315][GRAD: 0.1817][VORT: 0.2438][Total: 0.6458]	4.8+3.1s
[7200/8000]	[L1: 0.0891][DIV: 0.1319][GRAD: 0.1819][VORT: 0.2436][Total: 0.6464]	4.7+3.1s
[8000/8000]	[L1: 0.0903][DIV: 0.1334][GRAD: 0.1844][VORT: 0.2470][Total: 0.6550]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.078619	vorticity_error: 0.828981	mean_abs_divergence: 0.121627
[DIV2K x2]	rel_l2_error: 0.061157	vorticity_error: 0.805350	mean_abs_divergence: 0.066353
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042389	vorticity_error: 0.752344	mean_abs_divergence: 0.032966
Forward: 1.30s

Saving...
Total: 1.68s

[Epoch 369]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0801][DIV: 0.1207][GRAD: 0.1638][VORT: 0.2261][Total: 0.5908]	4.8+3.0s
[1600/8000]	[L1: 0.0801][DIV: 0.1196][GRAD: 0.1642][VORT: 0.2296][Total: 0.5935]	4.8+3.1s
[2400/8000]	[L1: 0.0820][DIV: 0.1224][GRAD: 0.1674][VORT: 0.2304][Total: 0.6022]	4.7+3.1s
[3200/8000]	[L1: 0.0818][DIV: 0.1224][GRAD: 0.1672][VORT: 0.2296][Total: 0.6010]	4.7+3.1s
[4000/8000]	[L1: 0.0821][DIV: 0.1232][GRAD: 0.1676][VORT: 0.2285][Total: 0.6013]	4.7+3.1s
[4800/8000]	[L1: 0.0836][DIV: 0.1253][GRAD: 0.1707][VORT: 0.2301][Total: 0.6097]	4.7+3.1s
[5600/8000]	[L1: 0.0845][DIV: 0.1263][GRAD: 0.1725][VORT: 0.2320][Total: 0.6154]	4.7+3.1s
[6400/8000]	[L1: 0.0848][DIV: 0.1266][GRAD: 0.1732][VORT: 0.2329][Total: 0.6175]	4.7+3.1s
[7200/8000]	[L1: 0.0856][DIV: 0.1272][GRAD: 0.1748][VORT: 0.2349][Total: 0.6225]	4.7+3.1s
[8000/8000]	[L1: 0.0861][DIV: 0.1277][GRAD: 0.1758][VORT: 0.2357][Total: 0.6253]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.082327	vorticity_error: 0.816291	mean_abs_divergence: 0.136766
[DIV2K x2]	rel_l2_error: 0.071121	vorticity_error: 1.276123	mean_abs_divergence: 0.073501
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.049549	vorticity_error: 0.926178	mean_abs_divergence: 0.036321
Forward: 1.32s

Saving...
Total: 1.65s

[Epoch 370]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0879][DIV: 0.1280][GRAD: 0.1797][VORT: 0.2443][Total: 0.6398]	4.7+3.1s
[1600/8000]	[L1: 0.0815][DIV: 0.1204][GRAD: 0.1668][VORT: 0.2272][Total: 0.5959]	4.8+3.1s
[2400/8000]	[L1: 0.0837][DIV: 0.1234][GRAD: 0.1711][VORT: 0.2305][Total: 0.6087]	4.7+3.1s
[3200/8000]	[L1: 0.0846][DIV: 0.1255][GRAD: 0.1729][VORT: 0.2344][Total: 0.6173]	4.7+3.1s
[4000/8000]	[L1: 0.0855][DIV: 0.1262][GRAD: 0.1746][VORT: 0.2365][Total: 0.6228]	4.7+3.1s
[4800/8000]	[L1: 0.0856][DIV: 0.1265][GRAD: 0.1749][VORT: 0.2366][Total: 0.6236]	4.7+3.1s
[5600/8000]	[L1: 0.0856][DIV: 0.1267][GRAD: 0.1751][VORT: 0.2366][Total: 0.6240]	4.8+3.1s
[6400/8000]	[L1: 0.0864][DIV: 0.1276][GRAD: 0.1768][VORT: 0.2392][Total: 0.6300]	4.7+3.1s
[7200/8000]	[L1: 0.0863][DIV: 0.1273][GRAD: 0.1767][VORT: 0.2393][Total: 0.6296]	4.7+3.1s
[8000/8000]	[L1: 0.0859][DIV: 0.1272][GRAD: 0.1758][VORT: 0.2378][Total: 0.6267]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.073061	vorticity_error: 0.500877	mean_abs_divergence: 0.095630
[DIV2K x2]	rel_l2_error: 0.047020	vorticity_error: 0.793826	mean_abs_divergence: 0.049297
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042509	vorticity_error: 0.559031	mean_abs_divergence: 0.023811
Forward: 1.31s

Saving...
Total: 1.64s

[Epoch 371]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0943][DIV: 0.1378][GRAD: 0.1928][VORT: 0.2573][Total: 0.6822]	4.8+3.1s
[1600/8000]	[L1: 0.0891][DIV: 0.1317][GRAD: 0.1820][VORT: 0.2422][Total: 0.6449]	4.7+3.1s
[2400/8000]	[L1: 0.0872][DIV: 0.1295][GRAD: 0.1782][VORT: 0.2370][Total: 0.6319]	4.7+3.1s
[3200/8000]	[L1: 0.0878][DIV: 0.1300][GRAD: 0.1793][VORT: 0.2388][Total: 0.6359]	4.7+3.1s
[4000/8000]	[L1: 0.0885][DIV: 0.1305][GRAD: 0.1809][VORT: 0.2420][Total: 0.6418]	4.7+3.1s
[4800/8000]	[L1: 0.0875][DIV: 0.1289][GRAD: 0.1787][VORT: 0.2400][Total: 0.6350]	4.7+3.1s
[5600/8000]	[L1: 0.0883][DIV: 0.1299][GRAD: 0.1805][VORT: 0.2419][Total: 0.6406]	4.7+3.1s
[6400/8000]	[L1: 0.0886][DIV: 0.1304][GRAD: 0.1809][VORT: 0.2420][Total: 0.6419]	4.7+3.1s
[7200/8000]	[L1: 0.0891][DIV: 0.1311][GRAD: 0.1819][VORT: 0.2423][Total: 0.6445]	4.7+3.1s
[8000/8000]	[L1: 0.0892][DIV: 0.1314][GRAD: 0.1820][VORT: 0.2424][Total: 0.6449]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.114700	vorticity_error: 1.098730	mean_abs_divergence: 0.139046
[DIV2K x2]	rel_l2_error: 0.081979	vorticity_error: 1.381375	mean_abs_divergence: 0.072776
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.073480	vorticity_error: 1.235763	mean_abs_divergence: 0.035075
Forward: 1.29s

Saving...
Total: 1.62s

[Epoch 372]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0815][DIV: 0.1211][GRAD: 0.1666][VORT: 0.2226][Total: 0.5919]	4.8+3.1s
[1600/8000]	[L1: 0.0827][DIV: 0.1240][GRAD: 0.1692][VORT: 0.2234][Total: 0.5994]	4.7+3.1s
[2400/8000]	[L1: 0.0856][DIV: 0.1272][GRAD: 0.1748][VORT: 0.2308][Total: 0.6184]	4.7+3.1s
[3200/8000]	[L1: 0.0877][DIV: 0.1300][GRAD: 0.1791][VORT: 0.2351][Total: 0.6319]	4.7+3.1s
[4000/8000]	[L1: 0.0873][DIV: 0.1291][GRAD: 0.1783][VORT: 0.2352][Total: 0.6299]	4.7+3.1s
[4800/8000]	[L1: 0.0884][DIV: 0.1305][GRAD: 0.1806][VORT: 0.2384][Total: 0.6379]	4.7+3.1s
[5600/8000]	[L1: 0.0887][DIV: 0.1312][GRAD: 0.1812][VORT: 0.2394][Total: 0.6406]	4.7+3.1s
[6400/8000]	[L1: 0.0889][DIV: 0.1315][GRAD: 0.1817][VORT: 0.2413][Total: 0.6434]	4.7+3.1s
[7200/8000]	[L1: 0.0885][DIV: 0.1309][GRAD: 0.1807][VORT: 0.2403][Total: 0.6404]	4.7+3.1s
[8000/8000]	[L1: 0.0893][DIV: 0.1319][GRAD: 0.1824][VORT: 0.2419][Total: 0.6455]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.086285	vorticity_error: 2.013370	mean_abs_divergence: 0.114022
[DIV2K x2]	rel_l2_error: 0.067124	vorticity_error: 2.990580	mean_abs_divergence: 0.062062
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.050395	vorticity_error: 1.178617	mean_abs_divergence: 0.030920
Forward: 1.29s

Saving...
Total: 1.61s

[Epoch 373]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0863][DIV: 0.1260][GRAD: 0.1755][VORT: 0.2379][Total: 0.6257]	4.8+3.1s
[1600/8000]	[L1: 0.0890][DIV: 0.1306][GRAD: 0.1817][VORT: 0.2451][Total: 0.6465]	4.7+3.1s
[2400/8000]	[L1: 0.0923][DIV: 0.1353][GRAD: 0.1887][VORT: 0.2541][Total: 0.6702]	4.7+3.1s
[3200/8000]	[L1: 0.0928][DIV: 0.1355][GRAD: 0.1899][VORT: 0.2566][Total: 0.6747]	4.7+3.1s
[4000/8000]	[L1: 0.0910][DIV: 0.1330][GRAD: 0.1863][VORT: 0.2538][Total: 0.6640]	4.7+3.1s
[4800/8000]	[L1: 0.0894][DIV: 0.1308][GRAD: 0.1827][VORT: 0.2494][Total: 0.6522]	4.7+3.1s
[5600/8000]	[L1: 0.0901][DIV: 0.1316][GRAD: 0.1844][VORT: 0.2508][Total: 0.6569]	4.7+3.1s
[6400/8000]	[L1: 0.0898][DIV: 0.1310][GRAD: 0.1837][VORT: 0.2502][Total: 0.6547]	4.7+3.1s
[7200/8000]	[L1: 0.0886][DIV: 0.1294][GRAD: 0.1815][VORT: 0.2480][Total: 0.6475]	4.7+3.1s
[8000/8000]	[L1: 0.0889][DIV: 0.1298][GRAD: 0.1821][VORT: 0.2484][Total: 0.6492]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.081373	vorticity_error: 2.498632	mean_abs_divergence: 0.114412
[DIV2K x2]	rel_l2_error: 0.068945	vorticity_error: 0.835060	mean_abs_divergence: 0.058060
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044443	vorticity_error: 0.847187	mean_abs_divergence: 0.027864
Forward: 1.27s

Saving...
Total: 1.59s

[Epoch 374]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0894][DIV: 0.1309][GRAD: 0.1835][VORT: 0.2544][Total: 0.6582]	4.8+3.1s
[1600/8000]	[L1: 0.0852][DIV: 0.1265][GRAD: 0.1745][VORT: 0.2421][Total: 0.6283]	4.7+3.1s
[2400/8000]	[L1: 0.0854][DIV: 0.1265][GRAD: 0.1748][VORT: 0.2394][Total: 0.6260]	4.7+3.1s
[3200/8000]	[L1: 0.0882][DIV: 0.1302][GRAD: 0.1807][VORT: 0.2458][Total: 0.6449]	4.7+3.1s
[4000/8000]	[L1: 0.0893][DIV: 0.1316][GRAD: 0.1826][VORT: 0.2455][Total: 0.6489]	4.7+3.1s
[4800/8000]	[L1: 0.0890][DIV: 0.1311][GRAD: 0.1819][VORT: 0.2450][Total: 0.6470]	4.7+3.1s
[5600/8000]	[L1: 0.0886][DIV: 0.1304][GRAD: 0.1810][VORT: 0.2431][Total: 0.6430]	4.7+3.1s
[6400/8000]	[L1: 0.0880][DIV: 0.1298][GRAD: 0.1797][VORT: 0.2416][Total: 0.6390]	4.7+3.1s
[7200/8000]	[L1: 0.0880][DIV: 0.1296][GRAD: 0.1796][VORT: 0.2424][Total: 0.6396]	4.7+3.1s
[8000/8000]	[L1: 0.0882][DIV: 0.1301][GRAD: 0.1803][VORT: 0.2436][Total: 0.6423]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.082035	vorticity_error: 0.768627	mean_abs_divergence: 0.135089
[DIV2K x2]	rel_l2_error: 0.061943	vorticity_error: 0.781660	mean_abs_divergence: 0.072145
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.039902	vorticity_error: 0.691002	mean_abs_divergence: 0.035196
Forward: 1.34s

Saving...
Total: 1.67s

[Epoch 375]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0954][DIV: 0.1409][GRAD: 0.1935][VORT: 0.2589][Total: 0.6887]	4.8+3.1s
[1600/8000]	[L1: 0.0929][DIV: 0.1363][GRAD: 0.1892][VORT: 0.2541][Total: 0.6725]	4.7+3.1s
[2400/8000]	[L1: 0.0903][DIV: 0.1331][GRAD: 0.1843][VORT: 0.2462][Total: 0.6539]	4.7+3.1s
[3200/8000]	[L1: 0.0915][DIV: 0.1345][GRAD: 0.1868][VORT: 0.2507][Total: 0.6634]	4.7+3.1s
[4000/8000]	[L1: 0.0913][DIV: 0.1339][GRAD: 0.1865][VORT: 0.2511][Total: 0.6629]	4.7+3.1s
[4800/8000]	[L1: 0.0907][DIV: 0.1332][GRAD: 0.1851][VORT: 0.2491][Total: 0.6580]	4.7+3.1s
[5600/8000]	[L1: 0.0895][DIV: 0.1316][GRAD: 0.1827][VORT: 0.2468][Total: 0.6506]	4.7+3.1s
[6400/8000]	[L1: 0.0894][DIV: 0.1313][GRAD: 0.1824][VORT: 0.2459][Total: 0.6490]	4.7+3.1s
[7200/8000]	[L1: 0.0893][DIV: 0.1315][GRAD: 0.1824][VORT: 0.2458][Total: 0.6490]	4.7+3.1s
[8000/8000]	[L1: 0.0889][DIV: 0.1309][GRAD: 0.1815][VORT: 0.2447][Total: 0.6460]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.100271	vorticity_error: 1.134792	mean_abs_divergence: 0.153923
[DIV2K x2]	rel_l2_error: 0.076375	vorticity_error: 1.125787	mean_abs_divergence: 0.081034
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.049510	vorticity_error: 0.813432	mean_abs_divergence: 0.039669
Forward: 1.34s

Saving...
Total: 1.67s

[Epoch 376]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0861][DIV: 0.1288][GRAD: 0.1755][VORT: 0.2369][Total: 0.6273]	4.8+3.1s
[1600/8000]	[L1: 0.0854][DIV: 0.1270][GRAD: 0.1744][VORT: 0.2343][Total: 0.6212]	4.7+3.1s
[2400/8000]	[L1: 0.0846][DIV: 0.1259][GRAD: 0.1732][VORT: 0.2336][Total: 0.6173]	4.7+3.1s
[3200/8000]	[L1: 0.0850][DIV: 0.1270][GRAD: 0.1740][VORT: 0.2338][Total: 0.6197]	4.7+3.1s
[4000/8000]	[L1: 0.0859][DIV: 0.1274][GRAD: 0.1758][VORT: 0.2370][Total: 0.6262]	4.7+3.1s
[4800/8000]	[L1: 0.0872][DIV: 0.1292][GRAD: 0.1783][VORT: 0.2395][Total: 0.6341]	4.7+3.1s
[5600/8000]	[L1: 0.0875][DIV: 0.1293][GRAD: 0.1789][VORT: 0.2405][Total: 0.6363]	4.7+3.1s
[6400/8000]	[L1: 0.0877][DIV: 0.1293][GRAD: 0.1792][VORT: 0.2412][Total: 0.6375]	4.7+3.1s
[7200/8000]	[L1: 0.0875][DIV: 0.1291][GRAD: 0.1787][VORT: 0.2398][Total: 0.6351]	4.7+3.1s
[8000/8000]	[L1: 0.0879][DIV: 0.1295][GRAD: 0.1794][VORT: 0.2401][Total: 0.6369]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.082088	vorticity_error: 0.666609	mean_abs_divergence: 0.120723
[DIV2K x2]	rel_l2_error: 0.058817	vorticity_error: 0.730689	mean_abs_divergence: 0.062957
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.046378	vorticity_error: 0.607516	mean_abs_divergence: 0.030143
Forward: 1.35s

Saving...
Total: 1.68s

[Epoch 377]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0861][DIV: 0.1281][GRAD: 0.1762][VORT: 0.2441][Total: 0.6346]	4.8+3.1s
[1600/8000]	[L1: 0.0851][DIV: 0.1255][GRAD: 0.1742][VORT: 0.2385][Total: 0.6234]	4.7+3.1s
[2400/8000]	[L1: 0.0858][DIV: 0.1264][GRAD: 0.1758][VORT: 0.2415][Total: 0.6294]	4.7+3.1s
[3200/8000]	[L1: 0.0852][DIV: 0.1263][GRAD: 0.1745][VORT: 0.2379][Total: 0.6239]	4.7+3.1s
[4000/8000]	[L1: 0.0857][DIV: 0.1270][GRAD: 0.1756][VORT: 0.2386][Total: 0.6269]	4.7+3.1s
[4800/8000]	[L1: 0.0869][DIV: 0.1286][GRAD: 0.1779][VORT: 0.2412][Total: 0.6345]	4.7+3.1s
[5600/8000]	[L1: 0.0872][DIV: 0.1292][GRAD: 0.1785][VORT: 0.2404][Total: 0.6352]	4.7+3.1s
[6400/8000]	[L1: 0.0878][DIV: 0.1299][GRAD: 0.1796][VORT: 0.2428][Total: 0.6402]	4.7+3.1s
[7200/8000]	[L1: 0.0873][DIV: 0.1296][GRAD: 0.1787][VORT: 0.2415][Total: 0.6371]	4.7+3.1s
[8000/8000]	[L1: 0.0875][DIV: 0.1298][GRAD: 0.1791][VORT: 0.2423][Total: 0.6386]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.082992	vorticity_error: 0.912911	mean_abs_divergence: 0.115509
[DIV2K x2]	rel_l2_error: 0.062770	vorticity_error: 0.977893	mean_abs_divergence: 0.061744
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042337	vorticity_error: 0.779765	mean_abs_divergence: 0.030723
Forward: 1.35s

Saving...
Total: 1.69s

[Epoch 378]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0884][DIV: 0.1304][GRAD: 0.1795][VORT: 0.2398][Total: 0.6381]	4.8+3.0s
[1600/8000]	[L1: 0.0919][DIV: 0.1337][GRAD: 0.1866][VORT: 0.2440][Total: 0.6563]	4.7+3.1s
[2400/8000]	[L1: 0.0921][DIV: 0.1342][GRAD: 0.1874][VORT: 0.2486][Total: 0.6623]	4.7+3.1s
[3200/8000]	[L1: 0.0928][DIV: 0.1353][GRAD: 0.1891][VORT: 0.2513][Total: 0.6686]	4.7+3.1s
[4000/8000]	[L1: 0.0923][DIV: 0.1347][GRAD: 0.1882][VORT: 0.2515][Total: 0.6667]	4.7+3.1s
[4800/8000]	[L1: 0.0918][DIV: 0.1339][GRAD: 0.1874][VORT: 0.2502][Total: 0.6633]	4.7+3.1s
[5600/8000]	[L1: 0.0914][DIV: 0.1335][GRAD: 0.1867][VORT: 0.2498][Total: 0.6613]	4.7+3.1s
[6400/8000]	[L1: 0.0904][DIV: 0.1325][GRAD: 0.1846][VORT: 0.2468][Total: 0.6543]	4.7+3.1s
[7200/8000]	[L1: 0.0912][DIV: 0.1335][GRAD: 0.1863][VORT: 0.2499][Total: 0.6609]	4.7+3.1s
[8000/8000]	[L1: 0.0905][DIV: 0.1329][GRAD: 0.1849][VORT: 0.2473][Total: 0.6556]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.091037	vorticity_error: 0.895061	mean_abs_divergence: 0.148427
[DIV2K x2]	rel_l2_error: 0.068811	vorticity_error: 0.932594	mean_abs_divergence: 0.080225
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048936	vorticity_error: 0.779689	mean_abs_divergence: 0.040200
Forward: 1.35s

Saving...
Total: 1.69s

[Epoch 379]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0931][DIV: 0.1365][GRAD: 0.1903][VORT: 0.2506][Total: 0.6706]	4.8+3.1s
[1600/8000]	[L1: 0.0895][DIV: 0.1322][GRAD: 0.1831][VORT: 0.2421][Total: 0.6469]	4.7+3.1s
[2400/8000]	[L1: 0.0903][DIV: 0.1329][GRAD: 0.1848][VORT: 0.2473][Total: 0.6553]	4.7+3.1s
[3200/8000]	[L1: 0.0885][DIV: 0.1306][GRAD: 0.1809][VORT: 0.2430][Total: 0.6430]	4.7+3.1s
[4000/8000]	[L1: 0.0888][DIV: 0.1308][GRAD: 0.1818][VORT: 0.2449][Total: 0.6463]	4.7+3.1s
[4800/8000]	[L1: 0.0896][DIV: 0.1315][GRAD: 0.1836][VORT: 0.2465][Total: 0.6513]	4.7+3.1s
[5600/8000]	[L1: 0.0886][DIV: 0.1302][GRAD: 0.1814][VORT: 0.2438][Total: 0.6439]	4.7+3.1s
[6400/8000]	[L1: 0.0888][DIV: 0.1305][GRAD: 0.1817][VORT: 0.2425][Total: 0.6435]	4.7+3.1s
[7200/8000]	[L1: 0.0884][DIV: 0.1304][GRAD: 0.1808][VORT: 0.2410][Total: 0.6407]	5.0+3.1s
[8000/8000]	[L1: 0.0886][DIV: 0.1306][GRAD: 0.1811][VORT: 0.2408][Total: 0.6411]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.095018	vorticity_error: 0.767208	mean_abs_divergence: 0.140215
[DIV2K x2]	rel_l2_error: 0.066285	vorticity_error: 0.915184	mean_abs_divergence: 0.072458
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.053317	vorticity_error: 0.808257	mean_abs_divergence: 0.034947
Forward: 1.38s

Saving...
Total: 1.71s

[Epoch 380]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0956][DIV: 0.1385][GRAD: 0.1947][VORT: 0.2610][Total: 0.6898]	4.8+3.2s
[1600/8000]	[L1: 0.0921][DIV: 0.1344][GRAD: 0.1885][VORT: 0.2571][Total: 0.6720]	4.8+3.1s
[2400/8000]	[L1: 0.0923][DIV: 0.1350][GRAD: 0.1890][VORT: 0.2574][Total: 0.6737]	4.7+3.1s
[3200/8000]	[L1: 0.0926][DIV: 0.1353][GRAD: 0.1894][VORT: 0.2552][Total: 0.6725]	4.7+3.1s
[4000/8000]	[L1: 0.0928][DIV: 0.1356][GRAD: 0.1898][VORT: 0.2545][Total: 0.6726]	4.7+3.1s
[4800/8000]	[L1: 0.0919][DIV: 0.1348][GRAD: 0.1880][VORT: 0.2516][Total: 0.6663]	4.7+3.1s
[5600/8000]	[L1: 0.0919][DIV: 0.1345][GRAD: 0.1879][VORT: 0.2522][Total: 0.6666]	4.7+3.1s
[6400/8000]	[L1: 0.0916][DIV: 0.1340][GRAD: 0.1872][VORT: 0.2530][Total: 0.6658]	4.7+3.1s
[7200/8000]	[L1: 0.0903][DIV: 0.1325][GRAD: 0.1846][VORT: 0.2493][Total: 0.6568]	4.7+3.1s
[8000/8000]	[L1: 0.0905][DIV: 0.1328][GRAD: 0.1850][VORT: 0.2490][Total: 0.6574]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.083177	vorticity_error: 0.879814	mean_abs_divergence: 0.142145
[DIV2K x2]	rel_l2_error: 0.067101	vorticity_error: 1.143850	mean_abs_divergence: 0.077033
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043043	vorticity_error: 0.886146	mean_abs_divergence: 0.038091
Forward: 1.35s

Saving...
Total: 1.74s

[Epoch 381]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0929][DIV: 0.1366][GRAD: 0.1897][VORT: 0.2522][Total: 0.6714]	4.7+3.1s
[1600/8000]	[L1: 0.0878][DIV: 0.1307][GRAD: 0.1801][VORT: 0.2441][Total: 0.6426]	4.7+3.1s
[2400/8000]	[L1: 0.0890][DIV: 0.1315][GRAD: 0.1827][VORT: 0.2472][Total: 0.6505]	4.7+3.1s
[3200/8000]	[L1: 0.0899][DIV: 0.1322][GRAD: 0.1843][VORT: 0.2487][Total: 0.6552]	4.7+3.1s
[4000/8000]	[L1: 0.0918][DIV: 0.1346][GRAD: 0.1880][VORT: 0.2522][Total: 0.6666]	4.7+3.1s
[4800/8000]	[L1: 0.0921][DIV: 0.1351][GRAD: 0.1885][VORT: 0.2520][Total: 0.6677]	4.7+3.1s
[5600/8000]	[L1: 0.0903][DIV: 0.1329][GRAD: 0.1848][VORT: 0.2475][Total: 0.6555]	4.7+3.1s
[6400/8000]	[L1: 0.0899][DIV: 0.1323][GRAD: 0.1837][VORT: 0.2456][Total: 0.6515]	4.7+3.1s
[7200/8000]	[L1: 0.0893][DIV: 0.1316][GRAD: 0.1826][VORT: 0.2446][Total: 0.6481]	4.7+3.1s
[8000/8000]	[L1: 0.0896][DIV: 0.1317][GRAD: 0.1833][VORT: 0.2460][Total: 0.6506]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.100960	vorticity_error: 0.887807	mean_abs_divergence: 0.164152
[DIV2K x2]	rel_l2_error: 0.070338	vorticity_error: 0.852958	mean_abs_divergence: 0.086343
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.047486	vorticity_error: 0.630190	mean_abs_divergence: 0.042381
Forward: 1.35s

Saving...
Total: 1.68s

[Epoch 382]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0816][DIV: 0.1221][GRAD: 0.1666][VORT: 0.2249][Total: 0.5952]	4.7+3.1s
[1600/8000]	[L1: 0.0810][DIV: 0.1210][GRAD: 0.1649][VORT: 0.2190][Total: 0.5860]	4.8+3.1s
[2400/8000]	[L1: 0.0858][DIV: 0.1270][GRAD: 0.1751][VORT: 0.2328][Total: 0.6206]	4.7+3.1s
[3200/8000]	[L1: 0.0859][DIV: 0.1273][GRAD: 0.1755][VORT: 0.2336][Total: 0.6223]	4.7+3.1s
[4000/8000]	[L1: 0.0874][DIV: 0.1288][GRAD: 0.1785][VORT: 0.2374][Total: 0.6321]	4.7+3.1s
[4800/8000]	[L1: 0.0871][DIV: 0.1283][GRAD: 0.1779][VORT: 0.2365][Total: 0.6299]	4.7+3.1s
[5600/8000]	[L1: 0.0868][DIV: 0.1280][GRAD: 0.1773][VORT: 0.2357][Total: 0.6278]	4.7+3.1s
[6400/8000]	[L1: 0.0870][DIV: 0.1283][GRAD: 0.1779][VORT: 0.2374][Total: 0.6306]	4.7+3.1s
[7200/8000]	[L1: 0.0877][DIV: 0.1293][GRAD: 0.1792][VORT: 0.2392][Total: 0.6353]	4.7+3.1s
[8000/8000]	[L1: 0.0875][DIV: 0.1292][GRAD: 0.1788][VORT: 0.2399][Total: 0.6354]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.080212	vorticity_error: 0.862906	mean_abs_divergence: 0.111790
[DIV2K x2]	rel_l2_error: 0.061008	vorticity_error: 0.876089	mean_abs_divergence: 0.059995
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042589	vorticity_error: 0.766611	mean_abs_divergence: 0.029701
Forward: 1.32s

Saving...
Total: 1.66s

[Epoch 383]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0965][DIV: 0.1397][GRAD: 0.1980][VORT: 0.2636][Total: 0.6977]	4.8+3.0s
[1600/8000]	[L1: 0.0880][DIV: 0.1298][GRAD: 0.1811][VORT: 0.2443][Total: 0.6432]	4.7+3.1s
[2400/8000]	[L1: 0.0873][DIV: 0.1288][GRAD: 0.1794][VORT: 0.2419][Total: 0.6374]	4.7+3.1s
[3200/8000]	[L1: 0.0877][DIV: 0.1294][GRAD: 0.1797][VORT: 0.2422][Total: 0.6390]	4.7+3.1s
[4000/8000]	[L1: 0.0880][DIV: 0.1296][GRAD: 0.1804][VORT: 0.2436][Total: 0.6417]	4.7+3.1s
[4800/8000]	[L1: 0.0892][DIV: 0.1317][GRAD: 0.1828][VORT: 0.2478][Total: 0.6515]	4.7+3.1s
[5600/8000]	[L1: 0.0894][DIV: 0.1318][GRAD: 0.1831][VORT: 0.2474][Total: 0.6516]	4.7+3.1s
[6400/8000]	[L1: 0.0895][DIV: 0.1322][GRAD: 0.1834][VORT: 0.2467][Total: 0.6519]	4.7+3.1s
[7200/8000]	[L1: 0.0888][DIV: 0.1314][GRAD: 0.1818][VORT: 0.2443][Total: 0.6463]	4.7+3.1s
[8000/8000]	[L1: 0.0897][DIV: 0.1325][GRAD: 0.1836][VORT: 0.2466][Total: 0.6523]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.065212	vorticity_error: 0.664627	mean_abs_divergence: 0.088445
[DIV2K x2]	rel_l2_error: 0.053674	vorticity_error: 0.675712	mean_abs_divergence: 0.048800
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042046	vorticity_error: 0.647742	mean_abs_divergence: 0.023889
Forward: 1.33s

Saving...
Total: 1.68s

[Epoch 384]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0865][DIV: 0.1298][GRAD: 0.1770][VORT: 0.2365][Total: 0.6299]	4.8+3.0s
[1600/8000]	[L1: 0.0910][DIV: 0.1340][GRAD: 0.1868][VORT: 0.2521][Total: 0.6640]	4.7+3.1s
[2400/8000]	[L1: 0.0923][DIV: 0.1365][GRAD: 0.1896][VORT: 0.2558][Total: 0.6742]	4.7+3.1s
[3200/8000]	[L1: 0.0916][DIV: 0.1354][GRAD: 0.1880][VORT: 0.2525][Total: 0.6675]	4.7+3.1s
[4000/8000]	[L1: 0.0906][DIV: 0.1343][GRAD: 0.1856][VORT: 0.2489][Total: 0.6593]	4.7+3.1s
[4800/8000]	[L1: 0.0908][DIV: 0.1343][GRAD: 0.1861][VORT: 0.2500][Total: 0.6611]	4.7+3.1s
[5600/8000]	[L1: 0.0909][DIV: 0.1345][GRAD: 0.1860][VORT: 0.2495][Total: 0.6608]	4.7+3.1s
[6400/8000]	[L1: 0.0902][DIV: 0.1337][GRAD: 0.1846][VORT: 0.2483][Total: 0.6568]	4.7+3.1s
[7200/8000]	[L1: 0.0907][DIV: 0.1340][GRAD: 0.1855][VORT: 0.2497][Total: 0.6598]	4.7+3.1s
[8000/8000]	[L1: 0.0909][DIV: 0.1342][GRAD: 0.1860][VORT: 0.2509][Total: 0.6620]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.081981	vorticity_error: 0.943120	mean_abs_divergence: 0.136681
[DIV2K x2]	rel_l2_error: 0.061003	vorticity_error: 1.220760	mean_abs_divergence: 0.071352
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043132	vorticity_error: 0.937026	mean_abs_divergence: 0.034839
Forward: 1.27s

Saving...
Total: 1.61s

[Epoch 385]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0878][DIV: 0.1301][GRAD: 0.1794][VORT: 0.2411][Total: 0.6384]	4.8+3.0s
[1600/8000]	[L1: 0.0855][DIV: 0.1283][GRAD: 0.1746][VORT: 0.2305][Total: 0.6189]	4.7+3.1s
[2400/8000]	[L1: 0.0840][DIV: 0.1253][GRAD: 0.1715][VORT: 0.2294][Total: 0.6103]	4.7+3.1s
[3200/8000]	[L1: 0.0860][DIV: 0.1274][GRAD: 0.1756][VORT: 0.2348][Total: 0.6237]	4.7+3.1s
[4000/8000]	[L1: 0.0844][DIV: 0.1256][GRAD: 0.1723][VORT: 0.2307][Total: 0.6130]	4.7+3.1s
[4800/8000]	[L1: 0.0849][DIV: 0.1264][GRAD: 0.1733][VORT: 0.2317][Total: 0.6162]	4.7+3.1s
[5600/8000]	[L1: 0.0851][DIV: 0.1264][GRAD: 0.1735][VORT: 0.2323][Total: 0.6172]	4.7+3.1s
[6400/8000]	[L1: 0.0853][DIV: 0.1266][GRAD: 0.1741][VORT: 0.2326][Total: 0.6187]	4.7+3.1s
[7200/8000]	[L1: 0.0860][DIV: 0.1276][GRAD: 0.1755][VORT: 0.2341][Total: 0.6232]	4.7+3.1s
[8000/8000]	[L1: 0.0863][DIV: 0.1279][GRAD: 0.1762][VORT: 0.2346][Total: 0.6249]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.074181	vorticity_error: 0.820072	mean_abs_divergence: 0.105937
[DIV2K x2]	rel_l2_error: 0.055003	vorticity_error: 0.884043	mean_abs_divergence: 0.055597
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.039410	vorticity_error: 0.740744	mean_abs_divergence: 0.027631
Forward: 1.32s

Saving...
Total: 1.72s

[Epoch 386]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0880][DIV: 0.1292][GRAD: 0.1798][VORT: 0.2372][Total: 0.6342]	4.7+3.1s
[1600/8000]	[L1: 0.0856][DIV: 0.1264][GRAD: 0.1757][VORT: 0.2380][Total: 0.6257]	4.7+3.1s
[2400/8000]	[L1: 0.0885][DIV: 0.1298][GRAD: 0.1814][VORT: 0.2448][Total: 0.6445]	4.7+3.1s
[3200/8000]	[L1: 0.0890][DIV: 0.1309][GRAD: 0.1820][VORT: 0.2445][Total: 0.6464]	4.7+3.1s
[4000/8000]	[L1: 0.0888][DIV: 0.1308][GRAD: 0.1816][VORT: 0.2449][Total: 0.6460]	4.7+3.1s
[4800/8000]	[L1: 0.0895][DIV: 0.1315][GRAD: 0.1831][VORT: 0.2467][Total: 0.6507]	4.7+3.1s
[5600/8000]	[L1: 0.0900][DIV: 0.1325][GRAD: 0.1842][VORT: 0.2475][Total: 0.6542]	4.7+3.1s
[6400/8000]	[L1: 0.0895][DIV: 0.1320][GRAD: 0.1831][VORT: 0.2462][Total: 0.6508]	4.7+3.1s
[7200/8000]	[L1: 0.0885][DIV: 0.1307][GRAD: 0.1811][VORT: 0.2440][Total: 0.6442]	4.7+3.1s
[8000/8000]	[L1: 0.0877][DIV: 0.1296][GRAD: 0.1793][VORT: 0.2414][Total: 0.6381]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.072223	vorticity_error: 1.041007	mean_abs_divergence: 0.115448
[DIV2K x2]	rel_l2_error: 0.057121	vorticity_error: 1.164074	mean_abs_divergence: 0.060909
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048350	vorticity_error: 1.336127	mean_abs_divergence: 0.030011
Forward: 1.30s

Saving...
Total: 1.64s

[Epoch 387]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0919][DIV: 0.1341][GRAD: 0.1886][VORT: 0.2592][Total: 0.6738]	4.8+3.0s
[1600/8000]	[L1: 0.0894][DIV: 0.1309][GRAD: 0.1835][VORT: 0.2515][Total: 0.6552]	4.7+3.1s
[2400/8000]	[L1: 0.0886][DIV: 0.1301][GRAD: 0.1820][VORT: 0.2488][Total: 0.6495]	4.7+3.1s
[3200/8000]	[L1: 0.0895][DIV: 0.1314][GRAD: 0.1837][VORT: 0.2506][Total: 0.6552]	4.7+3.1s
[4000/8000]	[L1: 0.0902][DIV: 0.1323][GRAD: 0.1850][VORT: 0.2525][Total: 0.6599]	4.7+3.1s
[4800/8000]	[L1: 0.0898][DIV: 0.1321][GRAD: 0.1841][VORT: 0.2508][Total: 0.6569]	4.7+3.1s
[5600/8000]	[L1: 0.0896][DIV: 0.1321][GRAD: 0.1834][VORT: 0.2478][Total: 0.6529]	4.7+3.1s
[6400/8000]	[L1: 0.0904][DIV: 0.1330][GRAD: 0.1852][VORT: 0.2496][Total: 0.6582]	4.7+3.1s
[7200/8000]	[L1: 0.0896][DIV: 0.1320][GRAD: 0.1836][VORT: 0.2478][Total: 0.6530]	4.7+3.1s
[8000/8000]	[L1: 0.0897][DIV: 0.1320][GRAD: 0.1836][VORT: 0.2479][Total: 0.6532]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.072520	vorticity_error: 0.716640	mean_abs_divergence: 0.097041
[DIV2K x2]	rel_l2_error: 0.054148	vorticity_error: 0.688717	mean_abs_divergence: 0.049415
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044709	vorticity_error: 0.652870	mean_abs_divergence: 0.023476
Forward: 1.32s

Saving...
Total: 1.66s

[Epoch 388]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0958][DIV: 0.1402][GRAD: 0.1945][VORT: 0.2523][Total: 0.6828]	4.8+3.1s
[1600/8000]	[L1: 0.0963][DIV: 0.1408][GRAD: 0.1958][VORT: 0.2552][Total: 0.6881]	4.7+3.1s
[2400/8000]	[L1: 0.0954][DIV: 0.1392][GRAD: 0.1943][VORT: 0.2532][Total: 0.6821]	4.7+3.1s
[3200/8000]	[L1: 0.0923][DIV: 0.1359][GRAD: 0.1878][VORT: 0.2449][Total: 0.6609]	4.7+3.1s
[4000/8000]	[L1: 0.0936][DIV: 0.1379][GRAD: 0.1905][VORT: 0.2480][Total: 0.6700]	4.7+3.1s
[4800/8000]	[L1: 0.0924][DIV: 0.1363][GRAD: 0.1885][VORT: 0.2458][Total: 0.6630]	4.7+3.1s
[5600/8000]	[L1: 0.0916][DIV: 0.1355][GRAD: 0.1869][VORT: 0.2447][Total: 0.6587]	4.7+3.1s
[6400/8000]	[L1: 0.0908][DIV: 0.1344][GRAD: 0.1854][VORT: 0.2437][Total: 0.6543]	4.7+3.1s
[7200/8000]	[L1: 0.0915][DIV: 0.1353][GRAD: 0.1869][VORT: 0.2454][Total: 0.6591]	4.7+3.1s
[8000/8000]	[L1: 0.0916][DIV: 0.1352][GRAD: 0.1871][VORT: 0.2462][Total: 0.6600]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.090818	vorticity_error: 0.818449	mean_abs_divergence: 0.130441
[DIV2K x2]	rel_l2_error: 0.070207	vorticity_error: 0.884672	mean_abs_divergence: 0.066918
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.047328	vorticity_error: 0.921589	mean_abs_divergence: 0.032019
Forward: 1.30s

Saving...
Total: 1.63s

[Epoch 389]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0930][DIV: 0.1369][GRAD: 0.1910][VORT: 0.2519][Total: 0.6728]	4.8+3.1s
[1600/8000]	[L1: 0.0913][DIV: 0.1342][GRAD: 0.1872][VORT: 0.2474][Total: 0.6601]	4.7+3.1s
[2400/8000]	[L1: 0.0901][DIV: 0.1332][GRAD: 0.1847][VORT: 0.2460][Total: 0.6541]	4.7+3.1s
[3200/8000]	[L1: 0.0893][DIV: 0.1322][GRAD: 0.1826][VORT: 0.2426][Total: 0.6467]	4.7+3.1s
[4000/8000]	[L1: 0.0887][DIV: 0.1309][GRAD: 0.1816][VORT: 0.2436][Total: 0.6448]	4.7+3.1s
[4800/8000]	[L1: 0.0879][DIV: 0.1299][GRAD: 0.1797][VORT: 0.2418][Total: 0.6393]	4.7+3.1s
[5600/8000]	[L1: 0.0885][DIV: 0.1305][GRAD: 0.1811][VORT: 0.2434][Total: 0.6436]	4.7+3.1s
[6400/8000]	[L1: 0.0877][DIV: 0.1299][GRAD: 0.1793][VORT: 0.2406][Total: 0.6375]	4.7+3.1s
[7200/8000]	[L1: 0.0879][DIV: 0.1301][GRAD: 0.1797][VORT: 0.2411][Total: 0.6387]	4.7+3.1s
[8000/8000]	[L1: 0.0881][DIV: 0.1305][GRAD: 0.1802][VORT: 0.2416][Total: 0.6405]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.088809	vorticity_error: 1.094785	mean_abs_divergence: 0.119546
[DIV2K x2]	rel_l2_error: 0.064391	vorticity_error: 1.080570	mean_abs_divergence: 0.063123
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.049264	vorticity_error: 1.261739	mean_abs_divergence: 0.030996
Forward: 1.24s

Saving...
Total: 1.63s

[Epoch 390]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.1005][DIV: 0.1477][GRAD: 0.2053][VORT: 0.2683][Total: 0.7217]	4.7+3.1s
[1600/8000]	[L1: 0.0913][DIV: 0.1358][GRAD: 0.1865][VORT: 0.2475][Total: 0.6610]	4.7+3.1s
[2400/8000]	[L1: 0.0917][DIV: 0.1357][GRAD: 0.1878][VORT: 0.2491][Total: 0.6643]	4.7+3.1s
[3200/8000]	[L1: 0.0911][DIV: 0.1348][GRAD: 0.1865][VORT: 0.2464][Total: 0.6588]	4.7+3.1s
[4000/8000]	[L1: 0.0899][DIV: 0.1331][GRAD: 0.1840][VORT: 0.2451][Total: 0.6522]	4.7+3.1s
[4800/8000]	[L1: 0.0906][DIV: 0.1338][GRAD: 0.1855][VORT: 0.2470][Total: 0.6569]	4.7+3.1s
[5600/8000]	[L1: 0.0893][DIV: 0.1317][GRAD: 0.1827][VORT: 0.2433][Total: 0.6470]	4.7+3.1s
[6400/8000]	[L1: 0.0897][DIV: 0.1323][GRAD: 0.1832][VORT: 0.2429][Total: 0.6481]	4.7+3.1s
[7200/8000]	[L1: 0.0894][DIV: 0.1319][GRAD: 0.1826][VORT: 0.2425][Total: 0.6465]	4.7+3.1s
[8000/8000]	[L1: 0.0895][DIV: 0.1322][GRAD: 0.1830][VORT: 0.2432][Total: 0.6479]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.086188	vorticity_error: 1.172264	mean_abs_divergence: 0.142998
[DIV2K x2]	rel_l2_error: 0.064401	vorticity_error: 1.184744	mean_abs_divergence: 0.075437
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.049918	vorticity_error: 1.444519	mean_abs_divergence: 0.036693
Forward: 1.33s

Saving...
Total: 1.66s

[Epoch 391]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0878][DIV: 0.1295][GRAD: 0.1800][VORT: 0.2431][Total: 0.6403]	4.8+3.0s
[1600/8000]	[L1: 0.0874][DIV: 0.1289][GRAD: 0.1787][VORT: 0.2422][Total: 0.6371]	4.7+3.1s
[2400/8000]	[L1: 0.0865][DIV: 0.1279][GRAD: 0.1767][VORT: 0.2383][Total: 0.6294]	4.7+3.1s
[3200/8000]	[L1: 0.0861][DIV: 0.1276][GRAD: 0.1756][VORT: 0.2374][Total: 0.6267]	4.7+3.1s
[4000/8000]	[L1: 0.0879][DIV: 0.1300][GRAD: 0.1792][VORT: 0.2410][Total: 0.6382]	4.7+3.1s
[4800/8000]	[L1: 0.0893][DIV: 0.1313][GRAD: 0.1823][VORT: 0.2462][Total: 0.6491]	4.7+3.1s
[5600/8000]	[L1: 0.0887][DIV: 0.1305][GRAD: 0.1810][VORT: 0.2442][Total: 0.6444]	4.7+3.1s
[6400/8000]	[L1: 0.0882][DIV: 0.1302][GRAD: 0.1802][VORT: 0.2436][Total: 0.6422]	4.7+3.1s
[7200/8000]	[L1: 0.0884][DIV: 0.1304][GRAD: 0.1808][VORT: 0.2448][Total: 0.6444]	4.7+3.1s
[8000/8000]	[L1: 0.0884][DIV: 0.1305][GRAD: 0.1809][VORT: 0.2450][Total: 0.6449]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.093630	vorticity_error: 0.996471	mean_abs_divergence: 0.139723
[DIV2K x2]	rel_l2_error: 0.071569	vorticity_error: 1.066553	mean_abs_divergence: 0.075111
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.054916	vorticity_error: 1.022815	mean_abs_divergence: 0.037487
Forward: 1.32s

Saving...
Total: 1.65s

[Epoch 392]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0837][DIV: 0.1247][GRAD: 0.1705][VORT: 0.2276][Total: 0.6065]	4.8+3.0s
[1600/8000]	[L1: 0.0877][DIV: 0.1303][GRAD: 0.1793][VORT: 0.2440][Total: 0.6413]	4.7+3.1s
[2400/8000]	[L1: 0.0867][DIV: 0.1285][GRAD: 0.1771][VORT: 0.2389][Total: 0.6313]	4.7+3.1s
[3200/8000]	[L1: 0.0853][DIV: 0.1268][GRAD: 0.1741][VORT: 0.2353][Total: 0.6214]	4.7+3.1s
[4000/8000]	[L1: 0.0863][DIV: 0.1280][GRAD: 0.1762][VORT: 0.2386][Total: 0.6291]	4.7+3.1s
[4800/8000]	[L1: 0.0849][DIV: 0.1261][GRAD: 0.1734][VORT: 0.2358][Total: 0.6202]	4.7+3.1s
[5600/8000]	[L1: 0.0857][DIV: 0.1274][GRAD: 0.1751][VORT: 0.2370][Total: 0.6253]	4.7+3.1s
[6400/8000]	[L1: 0.0853][DIV: 0.1266][GRAD: 0.1743][VORT: 0.2367][Total: 0.6229]	4.7+3.1s
[7200/8000]	[L1: 0.0852][DIV: 0.1268][GRAD: 0.1741][VORT: 0.2361][Total: 0.6222]	4.7+3.1s
[8000/8000]	[L1: 0.0866][DIV: 0.1285][GRAD: 0.1769][VORT: 0.2388][Total: 0.6308]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.092109	vorticity_error: 0.768286	mean_abs_divergence: 0.114128
[DIV2K x2]	rel_l2_error: 0.063812	vorticity_error: 0.722420	mean_abs_divergence: 0.060330
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.049215	vorticity_error: 0.587992	mean_abs_divergence: 0.029613
Forward: 1.25s

Saving...
Total: 1.58s

[Epoch 393]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0853][DIV: 0.1258][GRAD: 0.1739][VORT: 0.2290][Total: 0.6140]	4.8+3.0s
[1600/8000]	[L1: 0.0828][DIV: 0.1228][GRAD: 0.1688][VORT: 0.2255][Total: 0.5999]	4.7+3.1s
[2400/8000]	[L1: 0.0844][DIV: 0.1243][GRAD: 0.1726][VORT: 0.2333][Total: 0.6146]	4.7+3.1s
[3200/8000]	[L1: 0.0861][DIV: 0.1262][GRAD: 0.1762][VORT: 0.2383][Total: 0.6269]	4.7+3.1s
[4000/8000]	[L1: 0.0867][DIV: 0.1276][GRAD: 0.1775][VORT: 0.2403][Total: 0.6321]	4.7+3.1s
[4800/8000]	[L1: 0.0877][DIV: 0.1289][GRAD: 0.1794][VORT: 0.2424][Total: 0.6384]	4.7+3.1s
[5600/8000]	[L1: 0.0872][DIV: 0.1287][GRAD: 0.1783][VORT: 0.2403][Total: 0.6345]	4.7+3.1s
[6400/8000]	[L1: 0.0868][DIV: 0.1281][GRAD: 0.1774][VORT: 0.2394][Total: 0.6317]	4.7+3.1s
[7200/8000]	[L1: 0.0869][DIV: 0.1280][GRAD: 0.1775][VORT: 0.2399][Total: 0.6323]	4.7+3.1s
[8000/8000]	[L1: 0.0869][DIV: 0.1280][GRAD: 0.1777][VORT: 0.2397][Total: 0.6323]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.082421	vorticity_error: 0.720078	mean_abs_divergence: 0.120853
[DIV2K x2]	rel_l2_error: 0.063265	vorticity_error: 0.768572	mean_abs_divergence: 0.061726
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048791	vorticity_error: 0.652328	mean_abs_divergence: 0.030032
Forward: 1.33s

Saving...
Total: 1.72s

[Epoch 394]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0911][DIV: 0.1335][GRAD: 0.1865][VORT: 0.2457][Total: 0.6567]	4.7+3.0s
[1600/8000]	[L1: 0.0949][DIV: 0.1383][GRAD: 0.1940][VORT: 0.2554][Total: 0.6826]	4.7+3.1s
[2400/8000]	[L1: 0.0966][DIV: 0.1404][GRAD: 0.1975][VORT: 0.2600][Total: 0.6945]	4.7+3.1s
[3200/8000]	[L1: 0.0934][DIV: 0.1368][GRAD: 0.1908][VORT: 0.2511][Total: 0.6722]	4.7+3.1s
[4000/8000]	[L1: 0.0915][DIV: 0.1346][GRAD: 0.1872][VORT: 0.2478][Total: 0.6611]	4.8+3.1s
[4800/8000]	[L1: 0.0914][DIV: 0.1344][GRAD: 0.1869][VORT: 0.2481][Total: 0.6608]	4.7+3.1s
[5600/8000]	[L1: 0.0903][DIV: 0.1332][GRAD: 0.1845][VORT: 0.2455][Total: 0.6535]	4.7+3.1s
[6400/8000]	[L1: 0.0894][DIV: 0.1320][GRAD: 0.1827][VORT: 0.2440][Total: 0.6481]	4.7+3.1s
[7200/8000]	[L1: 0.0905][DIV: 0.1331][GRAD: 0.1851][VORT: 0.2474][Total: 0.6562]	4.7+3.1s
[8000/8000]	[L1: 0.0901][DIV: 0.1327][GRAD: 0.1842][VORT: 0.2466][Total: 0.6535]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.066966	vorticity_error: 0.575866	mean_abs_divergence: 0.111134
[DIV2K x2]	rel_l2_error: 0.054379	vorticity_error: 0.556596	mean_abs_divergence: 0.059638
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.038965	vorticity_error: 0.477982	mean_abs_divergence: 0.029507
Forward: 1.25s

Saving...
Total: 1.58s

[Epoch 395]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0807][DIV: 0.1226][GRAD: 0.1642][VORT: 0.2219][Total: 0.5894]	4.8+3.0s
[1600/8000]	[L1: 0.0875][DIV: 0.1310][GRAD: 0.1786][VORT: 0.2374][Total: 0.6346]	4.7+3.1s
[2400/8000]	[L1: 0.0867][DIV: 0.1296][GRAD: 0.1769][VORT: 0.2363][Total: 0.6295]	4.7+3.1s
[3200/8000]	[L1: 0.0862][DIV: 0.1288][GRAD: 0.1762][VORT: 0.2365][Total: 0.6278]	4.7+3.1s
[4000/8000]	[L1: 0.0887][DIV: 0.1319][GRAD: 0.1810][VORT: 0.2412][Total: 0.6427]	4.7+3.1s
[4800/8000]	[L1: 0.0896][DIV: 0.1328][GRAD: 0.1829][VORT: 0.2436][Total: 0.6490]	4.7+3.1s
[5600/8000]	[L1: 0.0891][DIV: 0.1319][GRAD: 0.1820][VORT: 0.2435][Total: 0.6465]	4.7+3.1s
[6400/8000]	[L1: 0.0888][DIV: 0.1312][GRAD: 0.1813][VORT: 0.2424][Total: 0.6436]	4.7+3.1s
[7200/8000]	[L1: 0.0887][DIV: 0.1313][GRAD: 0.1811][VORT: 0.2415][Total: 0.6426]	4.7+3.1s
[8000/8000]	[L1: 0.0882][DIV: 0.1308][GRAD: 0.1803][VORT: 0.2413][Total: 0.6406]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.087305	vorticity_error: 0.900249	mean_abs_divergence: 0.111541
[DIV2K x2]	rel_l2_error: 0.067644	vorticity_error: 0.899752	mean_abs_divergence: 0.060167
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.051710	vorticity_error: 1.126467	mean_abs_divergence: 0.030148
Forward: 1.32s

Saving...
Total: 1.65s

[Epoch 396]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0891][DIV: 0.1328][GRAD: 0.1819][VORT: 0.2437][Total: 0.6475]	4.8+3.0s
[1600/8000]	[L1: 0.0903][DIV: 0.1338][GRAD: 0.1839][VORT: 0.2418][Total: 0.6497]	4.7+3.1s
[2400/8000]	[L1: 0.0890][DIV: 0.1323][GRAD: 0.1814][VORT: 0.2407][Total: 0.6434]	4.7+3.1s
[3200/8000]	[L1: 0.0896][DIV: 0.1333][GRAD: 0.1829][VORT: 0.2403][Total: 0.6461]	4.7+3.1s
[4000/8000]	[L1: 0.0907][DIV: 0.1345][GRAD: 0.1852][VORT: 0.2437][Total: 0.6540]	4.8+3.1s
[4800/8000]	[L1: 0.0903][DIV: 0.1338][GRAD: 0.1845][VORT: 0.2439][Total: 0.6524]	4.9+3.2s
[5600/8000]	[L1: 0.0906][DIV: 0.1337][GRAD: 0.1850][VORT: 0.2448][Total: 0.6541]	5.0+3.2s
[6400/8000]	[L1: 0.0899][DIV: 0.1328][GRAD: 0.1839][VORT: 0.2449][Total: 0.6516]	4.9+3.2s
[7200/8000]	[L1: 0.0903][DIV: 0.1334][GRAD: 0.1845][VORT: 0.2456][Total: 0.6539]	5.0+3.2s
[8000/8000]	[L1: 0.0905][DIV: 0.1336][GRAD: 0.1850][VORT: 0.2467][Total: 0.6558]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.083400	vorticity_error: 0.909918	mean_abs_divergence: 0.140303
[DIV2K x2]	rel_l2_error: 0.068387	vorticity_error: 0.955377	mean_abs_divergence: 0.074809
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.056998	vorticity_error: 1.167588	mean_abs_divergence: 0.036389
Forward: 1.35s

Saving...
Total: 1.69s

[Epoch 397]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0807][DIV: 0.1224][GRAD: 0.1646][VORT: 0.2227][Total: 0.5904]	5.1+3.2s
[1600/8000]	[L1: 0.0825][DIV: 0.1231][GRAD: 0.1678][VORT: 0.2255][Total: 0.5989]	4.8+3.1s
[2400/8000]	[L1: 0.0856][DIV: 0.1266][GRAD: 0.1743][VORT: 0.2334][Total: 0.6199]	4.9+3.2s
[3200/8000]	[L1: 0.0867][DIV: 0.1283][GRAD: 0.1767][VORT: 0.2372][Total: 0.6288]	4.8+3.1s
[4000/8000]	[L1: 0.0883][DIV: 0.1301][GRAD: 0.1803][VORT: 0.2431][Total: 0.6419]	4.7+3.1s
[4800/8000]	[L1: 0.0869][DIV: 0.1287][GRAD: 0.1774][VORT: 0.2393][Total: 0.6323]	5.0+3.2s
[5600/8000]	[L1: 0.0873][DIV: 0.1291][GRAD: 0.1780][VORT: 0.2400][Total: 0.6343]	4.8+3.1s
[6400/8000]	[L1: 0.0870][DIV: 0.1287][GRAD: 0.1775][VORT: 0.2397][Total: 0.6329]	4.7+3.1s
[7200/8000]	[L1: 0.0872][DIV: 0.1288][GRAD: 0.1781][VORT: 0.2404][Total: 0.6346]	4.7+3.1s
[8000/8000]	[L1: 0.0870][DIV: 0.1285][GRAD: 0.1777][VORT: 0.2393][Total: 0.6325]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.098802	vorticity_error: 1.060586	mean_abs_divergence: 0.145733
[DIV2K x2]	rel_l2_error: 0.069862	vorticity_error: 0.932283	mean_abs_divergence: 0.076568
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.046452	vorticity_error: 0.879470	mean_abs_divergence: 0.037277
Forward: 1.35s

Saving...
Total: 1.76s

[Epoch 398]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0749][DIV: 0.1126][GRAD: 0.1536][VORT: 0.2131][Total: 0.5542]	4.9+3.1s
[1600/8000]	[L1: 0.0821][DIV: 0.1216][GRAD: 0.1679][VORT: 0.2283][Total: 0.5999]	4.8+3.3s
[2400/8000]	[L1: 0.0863][DIV: 0.1274][GRAD: 0.1761][VORT: 0.2376][Total: 0.6274]	4.7+3.1s
[3200/8000]	[L1: 0.0859][DIV: 0.1265][GRAD: 0.1756][VORT: 0.2362][Total: 0.6243]	4.6+3.1s
[4000/8000]	[L1: 0.0863][DIV: 0.1272][GRAD: 0.1762][VORT: 0.2360][Total: 0.6257]	4.7+3.0s
[4800/8000]	[L1: 0.0874][DIV: 0.1287][GRAD: 0.1784][VORT: 0.2391][Total: 0.6336]	4.7+3.1s
[5600/8000]	[L1: 0.0881][DIV: 0.1300][GRAD: 0.1800][VORT: 0.2398][Total: 0.6378]	4.7+3.1s
[6400/8000]	[L1: 0.0875][DIV: 0.1290][GRAD: 0.1787][VORT: 0.2389][Total: 0.6341]	4.7+3.1s
[7200/8000]	[L1: 0.0867][DIV: 0.1279][GRAD: 0.1771][VORT: 0.2368][Total: 0.6285]	4.7+3.1s
[8000/8000]	[L1: 0.0869][DIV: 0.1285][GRAD: 0.1775][VORT: 0.2372][Total: 0.6301]	4.6+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.069124	vorticity_error: 0.930837	mean_abs_divergence: 0.117733
[DIV2K x2]	rel_l2_error: 0.060386	vorticity_error: 1.006217	mean_abs_divergence: 0.063041
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044446	vorticity_error: 0.897422	mean_abs_divergence: 0.030849
Forward: 1.28s

Saving...
Total: 1.62s

[Epoch 399]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0887][DIV: 0.1302][GRAD: 0.1818][VORT: 0.2519][Total: 0.6525]	4.8+3.0s
[1600/8000]	[L1: 0.0834][DIV: 0.1247][GRAD: 0.1709][VORT: 0.2336][Total: 0.6126]	4.6+3.1s
[2400/8000]	[L1: 0.0883][DIV: 0.1302][GRAD: 0.1810][VORT: 0.2432][Total: 0.6428]	4.7+3.1s
[3200/8000]	[L1: 0.0858][DIV: 0.1273][GRAD: 0.1758][VORT: 0.2367][Total: 0.6256]	4.7+3.1s
[4000/8000]	[L1: 0.0862][DIV: 0.1280][GRAD: 0.1766][VORT: 0.2365][Total: 0.6272]	4.7+3.1s
[4800/8000]	[L1: 0.0858][DIV: 0.1275][GRAD: 0.1754][VORT: 0.2345][Total: 0.6232]	4.7+3.1s
[5600/8000]	[L1: 0.0864][DIV: 0.1283][GRAD: 0.1768][VORT: 0.2365][Total: 0.6280]	4.7+3.1s
[6400/8000]	[L1: 0.0885][DIV: 0.1310][GRAD: 0.1811][VORT: 0.2415][Total: 0.6423]	4.6+3.1s
[7200/8000]	[L1: 0.0886][DIV: 0.1312][GRAD: 0.1813][VORT: 0.2415][Total: 0.6425]	4.7+3.1s
[8000/8000]	[L1: 0.0886][DIV: 0.1309][GRAD: 0.1814][VORT: 0.2421][Total: 0.6431]	4.6+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.071154	vorticity_error: 0.808675	mean_abs_divergence: 0.109381
[DIV2K x2]	rel_l2_error: 0.056195	vorticity_error: 0.788650	mean_abs_divergence: 0.058191
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.040187	vorticity_error: 0.736296	mean_abs_divergence: 0.028712
Forward: 1.31s

Saving...
Total: 1.64s

[Epoch 400]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0914][DIV: 0.1329][GRAD: 0.1872][VORT: 0.2582][Total: 0.6696]	4.8+3.0s
[1600/8000]	[L1: 0.0876][DIV: 0.1276][GRAD: 0.1794][VORT: 0.2448][Total: 0.6393]	4.7+3.1s
[2400/8000]	[L1: 0.0882][DIV: 0.1289][GRAD: 0.1806][VORT: 0.2477][Total: 0.6453]	4.7+3.1s
[3200/8000]	[L1: 0.0898][DIV: 0.1321][GRAD: 0.1836][VORT: 0.2485][Total: 0.6541]	4.6+3.1s
[4000/8000]	[L1: 0.0898][DIV: 0.1320][GRAD: 0.1834][VORT: 0.2469][Total: 0.6520]	4.7+3.1s
[4800/8000]	[L1: 0.0893][DIV: 0.1316][GRAD: 0.1825][VORT: 0.2444][Total: 0.6479]	4.6+3.1s
[5600/8000]	[L1: 0.0895][DIV: 0.1319][GRAD: 0.1830][VORT: 0.2447][Total: 0.6491]	4.7+3.1s
[6400/8000]	[L1: 0.0900][DIV: 0.1324][GRAD: 0.1839][VORT: 0.2457][Total: 0.6520]	4.7+3.1s
[7200/8000]	[L1: 0.0907][DIV: 0.1331][GRAD: 0.1851][VORT: 0.2470][Total: 0.6559]	4.7+3.1s
[8000/8000]	[L1: 0.0906][DIV: 0.1331][GRAD: 0.1851][VORT: 0.2473][Total: 0.6561]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.093137	vorticity_error: 0.983541	mean_abs_divergence: 0.143922
[DIV2K x2]	rel_l2_error: 0.066650	vorticity_error: 0.986893	mean_abs_divergence: 0.078335
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044272	vorticity_error: 0.724080	mean_abs_divergence: 0.039052
Forward: 1.27s

Saving...
Total: 1.60s

[Epoch 401]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0913][DIV: 0.1353][GRAD: 0.1866][VORT: 0.2479][Total: 0.6610]	4.8+3.0s
[1600/8000]	[L1: 0.0927][DIV: 0.1363][GRAD: 0.1901][VORT: 0.2569][Total: 0.6760]	4.6+3.1s
[2400/8000]	[L1: 0.0946][DIV: 0.1393][GRAD: 0.1937][VORT: 0.2583][Total: 0.6860]	4.7+3.1s
[3200/8000]	[L1: 0.0933][DIV: 0.1375][GRAD: 0.1910][VORT: 0.2567][Total: 0.6784]	4.7+3.1s
[4000/8000]	[L1: 0.0936][DIV: 0.1377][GRAD: 0.1915][VORT: 0.2574][Total: 0.6802]	4.7+3.1s
[4800/8000]	[L1: 0.0930][DIV: 0.1369][GRAD: 0.1903][VORT: 0.2554][Total: 0.6755]	4.7+3.1s
[5600/8000]	[L1: 0.0927][DIV: 0.1361][GRAD: 0.1897][VORT: 0.2554][Total: 0.6738]	4.7+3.1s
[6400/8000]	[L1: 0.0926][DIV: 0.1359][GRAD: 0.1896][VORT: 0.2553][Total: 0.6735]	4.6+3.1s
[7200/8000]	[L1: 0.0917][DIV: 0.1348][GRAD: 0.1877][VORT: 0.2528][Total: 0.6670]	4.7+3.1s
[8000/8000]	[L1: 0.0911][DIV: 0.1339][GRAD: 0.1862][VORT: 0.2503][Total: 0.6614]	4.6+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.084042	vorticity_error: 0.655278	mean_abs_divergence: 0.110204
[DIV2K x2]	rel_l2_error: 0.062142	vorticity_error: 0.611008	mean_abs_divergence: 0.058246
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.041321	vorticity_error: 0.474177	mean_abs_divergence: 0.028566
Forward: 1.31s

Saving...
Total: 1.70s

[Epoch 402]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0908][DIV: 0.1305][GRAD: 0.1848][VORT: 0.2489][Total: 0.6550]	4.7+3.0s
[1600/8000]	[L1: 0.0839][DIV: 0.1232][GRAD: 0.1708][VORT: 0.2297][Total: 0.6076]	4.6+3.1s
[2400/8000]	[L1: 0.0841][DIV: 0.1241][GRAD: 0.1712][VORT: 0.2302][Total: 0.6096]	4.7+3.1s
[3200/8000]	[L1: 0.0854][DIV: 0.1257][GRAD: 0.1743][VORT: 0.2354][Total: 0.6209]	4.6+3.1s
[4000/8000]	[L1: 0.0857][DIV: 0.1263][GRAD: 0.1748][VORT: 0.2366][Total: 0.6235]	4.7+3.0s
[4800/8000]	[L1: 0.0875][DIV: 0.1287][GRAD: 0.1785][VORT: 0.2411][Total: 0.6358]	4.6+3.1s
[5600/8000]	[L1: 0.0876][DIV: 0.1290][GRAD: 0.1787][VORT: 0.2403][Total: 0.6355]	4.7+3.1s
[6400/8000]	[L1: 0.0877][DIV: 0.1292][GRAD: 0.1789][VORT: 0.2405][Total: 0.6362]	4.7+3.1s
[7200/8000]	[L1: 0.0883][DIV: 0.1300][GRAD: 0.1803][VORT: 0.2431][Total: 0.6418]	4.7+3.1s
[8000/8000]	[L1: 0.0888][DIV: 0.1306][GRAD: 0.1813][VORT: 0.2452][Total: 0.6458]	4.6+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.097617	vorticity_error: 0.842125	mean_abs_divergence: 0.141405
[DIV2K x2]	rel_l2_error: 0.074739	vorticity_error: 0.852910	mean_abs_divergence: 0.074245
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.046756	vorticity_error: 0.667904	mean_abs_divergence: 0.036635
Forward: 1.25s

Saving...
Total: 1.58s

[Epoch 403]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0831][DIV: 0.1239][GRAD: 0.1703][VORT: 0.2262][Total: 0.6035]	4.8+3.0s
[1600/8000]	[L1: 0.0841][DIV: 0.1255][GRAD: 0.1716][VORT: 0.2272][Total: 0.6084]	4.6+3.1s
[2400/8000]	[L1: 0.0836][DIV: 0.1245][GRAD: 0.1707][VORT: 0.2276][Total: 0.6064]	4.7+3.1s
[3200/8000]	[L1: 0.0819][DIV: 0.1226][GRAD: 0.1672][VORT: 0.2248][Total: 0.5965]	4.7+3.1s
[4000/8000]	[L1: 0.0815][DIV: 0.1218][GRAD: 0.1665][VORT: 0.2245][Total: 0.5943]	4.7+3.1s
[4800/8000]	[L1: 0.0820][DIV: 0.1227][GRAD: 0.1675][VORT: 0.2267][Total: 0.5989]	4.7+3.1s
[5600/8000]	[L1: 0.0838][DIV: 0.1248][GRAD: 0.1712][VORT: 0.2326][Total: 0.6125]	4.7+3.1s
[6400/8000]	[L1: 0.0847][DIV: 0.1261][GRAD: 0.1730][VORT: 0.2342][Total: 0.6179]	4.7+3.1s
[7200/8000]	[L1: 0.0860][DIV: 0.1275][GRAD: 0.1758][VORT: 0.2371][Total: 0.6263]	4.7+3.1s
[8000/8000]	[L1: 0.0860][DIV: 0.1275][GRAD: 0.1758][VORT: 0.2375][Total: 0.6269]	4.6+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.069400	vorticity_error: 0.760537	mean_abs_divergence: 0.111900
[DIV2K x2]	rel_l2_error: 0.056629	vorticity_error: 0.796337	mean_abs_divergence: 0.059685
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.038246	vorticity_error: 0.796314	mean_abs_divergence: 0.029222
Forward: 1.28s

Saving...
Total: 1.61s

[Epoch 404]	Learning rate: 2.50e-5
[800/8000]	[L1: 0.0923][DIV: 0.1367][GRAD: 0.1884][VORT: 0.2561][Total: 0.6735]	4.8+3.0s
[1600/8000]	[L1: 0.0946][DIV: 0.1381][GRAD: 0.1932][VORT: 0.2602][Total: 0.6860]	4.7+3.1s
[2400/8000]	[L1: 0.0911][DIV: 0.1341][GRAD: 0.1859][VORT: 0.2492][Total: 0.6603]	4.9+3.1s
[3200/8000]	[L1: 0.0912][DIV: 0.1341][GRAD: 0.1864][VORT: 0.2495][Total: 0.6612]	4.9+3.2s
LapSRN(
  (head_x8): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (head_x4): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (head_x2): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (feature_extractor_x4): FeatureExtraction(
    (body): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
  )
  (feature_extractor_x2): FeatureExtraction(
    (body): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
  )
  (upsample_block_x4): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(32, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (upsample_block_x2): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(32, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (upsample_block_x1): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(32, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 404]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0861][DIV: 0.1263][GRAD: 0.1762][VORT: 0.2387][Total: 0.6273]	5.4+16.6s
[1600/8000]	[L1: 0.0833][DIV: 0.1239][GRAD: 0.1705][VORT: 0.2294][Total: 0.6071]	4.9+3.1s
[2400/8000]	[L1: 0.0848][DIV: 0.1257][GRAD: 0.1739][VORT: 0.2344][Total: 0.6187]	4.8+3.1s
[3200/8000]	[L1: 0.0868][DIV: 0.1283][GRAD: 0.1778][VORT: 0.2389][Total: 0.6317]	4.8+3.0s
[4000/8000]	[L1: 0.0869][DIV: 0.1287][GRAD: 0.1780][VORT: 0.2391][Total: 0.6327]	4.8+3.0s
[4800/8000]	[L1: 0.0870][DIV: 0.1291][GRAD: 0.1781][VORT: 0.2393][Total: 0.6335]	4.8+3.0s
[5600/8000]	[L1: 0.0872][DIV: 0.1296][GRAD: 0.1786][VORT: 0.2399][Total: 0.6354]	4.8+3.0s
[6400/8000]	[L1: 0.0874][DIV: 0.1297][GRAD: 0.1790][VORT: 0.2405][Total: 0.6365]	4.8+3.0s
[7200/8000]	[L1: 0.0868][DIV: 0.1293][GRAD: 0.1778][VORT: 0.2388][Total: 0.6327]	4.8+3.0s
[8000/8000]	[L1: 0.0877][DIV: 0.1304][GRAD: 0.1797][VORT: 0.2410][Total: 0.6388]	4.7+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.101577	vorticity_error: 0.879139	mean_abs_divergence: 0.150036
[DIV2K x2]	rel_l2_error: 0.078366	vorticity_error: 0.946311	mean_abs_divergence: 0.079299
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.053964	vorticity_error: 0.715120	mean_abs_divergence: 0.039194
[INFO] New best model found with rel_l2_error on final output: 0.053964
Forward: 15.42s

Saving...
Total: 15.85s

[Epoch 405]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0823][DIV: 0.1244][GRAD: 0.1684][VORT: 0.2254][Total: 0.6005]	5.0+16.5s
[1600/8000]	[L1: 0.0852][DIV: 0.1288][GRAD: 0.1741][VORT: 0.2328][Total: 0.6210]	4.8+3.0s
[2400/8000]	[L1: 0.0880][DIV: 0.1316][GRAD: 0.1800][VORT: 0.2414][Total: 0.6410]	4.7+3.1s
[3200/8000]	[L1: 0.0896][DIV: 0.1333][GRAD: 0.1832][VORT: 0.2447][Total: 0.6508]	4.8+3.0s
[4000/8000]	[L1: 0.0880][DIV: 0.1311][GRAD: 0.1800][VORT: 0.2413][Total: 0.6405]	4.8+3.0s
[4800/8000]	[L1: 0.0890][DIV: 0.1323][GRAD: 0.1821][VORT: 0.2433][Total: 0.6467]	4.8+3.0s
[5600/8000]	[L1: 0.0889][DIV: 0.1320][GRAD: 0.1818][VORT: 0.2425][Total: 0.6452]	4.8+3.0s
[6400/8000]	[L1: 0.0876][DIV: 0.1306][GRAD: 0.1792][VORT: 0.2397][Total: 0.6371]	4.8+3.0s
[7200/8000]	[L1: 0.0884][DIV: 0.1316][GRAD: 0.1807][VORT: 0.2414][Total: 0.6422]	4.7+3.0s
[8000/8000]	[L1: 0.0879][DIV: 0.1311][GRAD: 0.1799][VORT: 0.2408][Total: 0.6396]	4.8+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.060515	vorticity_error: 0.650865	mean_abs_divergence: 0.088967
[DIV2K x2]	rel_l2_error: 0.050912	vorticity_error: 0.697461	mean_abs_divergence: 0.047464
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.039248	vorticity_error: 0.614888	mean_abs_divergence: 0.023769
[INFO] New best model found with rel_l2_error on final output: 0.039248
Forward: 15.37s

Saving...
Total: 15.80s

[Epoch 406]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0856][DIV: 0.1277][GRAD: 0.1750][VORT: 0.2331][Total: 0.6214]	5.0+16.5s
[1600/8000]	[L1: 0.0848][DIV: 0.1258][GRAD: 0.1740][VORT: 0.2386][Total: 0.6232]	4.7+3.0s
[2400/8000]	[L1: 0.0898][DIV: 0.1322][GRAD: 0.1846][VORT: 0.2498][Total: 0.6564]	4.7+3.0s
[3200/8000]	[L1: 0.0899][DIV: 0.1328][GRAD: 0.1847][VORT: 0.2492][Total: 0.6567]	4.7+3.1s
[4000/8000]	[L1: 0.0889][DIV: 0.1317][GRAD: 0.1826][VORT: 0.2456][Total: 0.6489]	4.7+3.0s
[4800/8000]	[L1: 0.0882][DIV: 0.1310][GRAD: 0.1811][VORT: 0.2442][Total: 0.6444]	4.7+3.1s
[5600/8000]	[L1: 0.0872][DIV: 0.1295][GRAD: 0.1792][VORT: 0.2431][Total: 0.6390]	4.7+3.0s
[6400/8000]	[L1: 0.0878][DIV: 0.1303][GRAD: 0.1804][VORT: 0.2441][Total: 0.6427]	4.8+3.0s
[7200/8000]	[L1: 0.0876][DIV: 0.1300][GRAD: 0.1799][VORT: 0.2438][Total: 0.6414]	4.7+3.0s
[8000/8000]	[L1: 0.0883][DIV: 0.1309][GRAD: 0.1814][VORT: 0.2452][Total: 0.6459]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.080435	vorticity_error: 0.954133	mean_abs_divergence: 0.119339
[DIV2K x2]	rel_l2_error: 0.062638	vorticity_error: 0.882915	mean_abs_divergence: 0.065291
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045591	vorticity_error: 0.732518	mean_abs_divergence: 0.033241
Forward: 15.38s

Saving...
Total: 15.71s

[Epoch 407]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0872][DIV: 0.1307][GRAD: 0.1783][VORT: 0.2424][Total: 0.6385]	5.0+16.6s
[1600/8000]	[L1: 0.0875][DIV: 0.1308][GRAD: 0.1790][VORT: 0.2411][Total: 0.6383]	4.7+3.1s
[2400/8000]	[L1: 0.0849][DIV: 0.1273][GRAD: 0.1738][VORT: 0.2332][Total: 0.6192]	4.7+3.0s
[3200/8000]	[L1: 0.0861][DIV: 0.1283][GRAD: 0.1763][VORT: 0.2369][Total: 0.6276]	4.8+3.1s
[4000/8000]	[L1: 0.0873][DIV: 0.1295][GRAD: 0.1790][VORT: 0.2405][Total: 0.6362]	4.8+3.0s
[4800/8000]	[L1: 0.0882][DIV: 0.1307][GRAD: 0.1806][VORT: 0.2419][Total: 0.6414]	4.8+3.1s
[5600/8000]	[L1: 0.0887][DIV: 0.1316][GRAD: 0.1818][VORT: 0.2448][Total: 0.6470]	4.9+3.1s
[6400/8000]	[L1: 0.0892][DIV: 0.1324][GRAD: 0.1827][VORT: 0.2450][Total: 0.6493]	4.7+3.1s
[7200/8000]	[L1: 0.0887][DIV: 0.1317][GRAD: 0.1816][VORT: 0.2439][Total: 0.6459]	4.7+3.0s
[8000/8000]	[L1: 0.0902][DIV: 0.1336][GRAD: 0.1849][VORT: 0.2476][Total: 0.6563]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.088023	vorticity_error: 0.863463	mean_abs_divergence: 0.151831
[DIV2K x2]	rel_l2_error: 0.067086	vorticity_error: 0.749498	mean_abs_divergence: 0.080674
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045152	vorticity_error: 0.658629	mean_abs_divergence: 0.039394
Forward: 15.42s

Saving...
Total: 15.75s

[Epoch 408]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0954][DIV: 0.1389][GRAD: 0.1963][VORT: 0.2743][Total: 0.7049]	5.2+16.9s
[1600/8000]	[L1: 0.0891][DIV: 0.1314][GRAD: 0.1831][VORT: 0.2531][Total: 0.6567]	4.9+3.1s
[2400/8000]	[L1: 0.0880][DIV: 0.1299][GRAD: 0.1813][VORT: 0.2471][Total: 0.6462]	4.8+3.2s
[3200/8000]	[L1: 0.0889][DIV: 0.1311][GRAD: 0.1827][VORT: 0.2463][Total: 0.6490]	4.8+3.2s
[4000/8000]	[L1: 0.0878][DIV: 0.1294][GRAD: 0.1804][VORT: 0.2428][Total: 0.6403]	4.8+3.2s
[4800/8000]	[L1: 0.0881][DIV: 0.1298][GRAD: 0.1810][VORT: 0.2432][Total: 0.6422]	4.8+3.2s
[5600/8000]	[L1: 0.0882][DIV: 0.1297][GRAD: 0.1811][VORT: 0.2432][Total: 0.6421]	4.9+3.2s
[6400/8000]	[L1: 0.0897][DIV: 0.1320][GRAD: 0.1843][VORT: 0.2468][Total: 0.6529]	4.9+3.1s
[7200/8000]	[L1: 0.0901][DIV: 0.1325][GRAD: 0.1851][VORT: 0.2481][Total: 0.6557]	4.9+3.2s
[8000/8000]	[L1: 0.0905][DIV: 0.1330][GRAD: 0.1859][VORT: 0.2494][Total: 0.6587]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.089499	vorticity_error: 1.073647	mean_abs_divergence: 0.151217
[DIV2K x2]	rel_l2_error: 0.070690	vorticity_error: 0.895404	mean_abs_divergence: 0.081097
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.055307	vorticity_error: 0.856798	mean_abs_divergence: 0.039676
Forward: 15.52s

Saving...
Total: 15.90s

[Epoch 409]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0845][DIV: 0.1267][GRAD: 0.1727][VORT: 0.2247][Total: 0.6085]	5.1+16.9s
[1600/8000]	[L1: 0.0853][DIV: 0.1272][GRAD: 0.1741][VORT: 0.2298][Total: 0.6164]	4.8+3.2s
[2400/8000]	[L1: 0.0875][DIV: 0.1302][GRAD: 0.1788][VORT: 0.2357][Total: 0.6322]	4.8+3.2s
[3200/8000]	[L1: 0.0907][DIV: 0.1343][GRAD: 0.1854][VORT: 0.2434][Total: 0.6538]	4.9+3.1s
[4000/8000]	[L1: 0.0913][DIV: 0.1348][GRAD: 0.1868][VORT: 0.2454][Total: 0.6583]	4.9+3.2s
[4800/8000]	[L1: 0.0915][DIV: 0.1348][GRAD: 0.1872][VORT: 0.2458][Total: 0.6593]	4.9+3.2s
[5600/8000]	[L1: 0.0897][DIV: 0.1328][GRAD: 0.1833][VORT: 0.2403][Total: 0.6461]	4.8+3.2s
[6400/8000]	[L1: 0.0892][DIV: 0.1321][GRAD: 0.1824][VORT: 0.2402][Total: 0.6439]	4.9+3.1s
[7200/8000]	[L1: 0.0883][DIV: 0.1313][GRAD: 0.1806][VORT: 0.2380][Total: 0.6382]	4.9+3.1s
[8000/8000]	[L1: 0.0882][DIV: 0.1311][GRAD: 0.1803][VORT: 0.2377][Total: 0.6373]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.086078	vorticity_error: 0.927879	mean_abs_divergence: 0.112704
[DIV2K x2]	rel_l2_error: 0.067093	vorticity_error: 0.728237	mean_abs_divergence: 0.060374
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044752	vorticity_error: 0.607946	mean_abs_divergence: 0.030407
Forward: 15.52s

Saving...
Total: 15.88s

[Epoch 410]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0854][DIV: 0.1278][GRAD: 0.1761][VORT: 0.2388][Total: 0.6281]	5.2+16.9s
[1600/8000]	[L1: 0.0852][DIV: 0.1277][GRAD: 0.1750][VORT: 0.2351][Total: 0.6229]	4.9+3.2s
[2400/8000]	[L1: 0.0846][DIV: 0.1269][GRAD: 0.1738][VORT: 0.2342][Total: 0.6195]	4.9+3.2s
[3200/8000]	[L1: 0.0846][DIV: 0.1267][GRAD: 0.1736][VORT: 0.2343][Total: 0.6191]	4.9+3.1s
[4000/8000]	[L1: 0.0866][DIV: 0.1295][GRAD: 0.1776][VORT: 0.2387][Total: 0.6325]	4.9+3.2s
[4800/8000]	[L1: 0.0880][DIV: 0.1316][GRAD: 0.1807][VORT: 0.2431][Total: 0.6433]	4.8+3.2s
[5600/8000]	[L1: 0.0879][DIV: 0.1310][GRAD: 0.1802][VORT: 0.2423][Total: 0.6413]	4.8+3.2s
[6400/8000]	[L1: 0.0871][DIV: 0.1298][GRAD: 0.1783][VORT: 0.2395][Total: 0.6347]	4.8+3.2s
[7200/8000]	[L1: 0.0877][DIV: 0.1305][GRAD: 0.1796][VORT: 0.2407][Total: 0.6384]	4.8+3.2s
[8000/8000]	[L1: 0.0881][DIV: 0.1309][GRAD: 0.1803][VORT: 0.2406][Total: 0.6398]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.080892	vorticity_error: 0.757285	mean_abs_divergence: 0.122745
[DIV2K x2]	rel_l2_error: 0.060867	vorticity_error: 0.812577	mean_abs_divergence: 0.063572
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043065	vorticity_error: 0.738402	mean_abs_divergence: 0.031052
Forward: 15.52s

Saving...
Total: 15.83s

[Epoch 411]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0922][DIV: 0.1358][GRAD: 0.1883][VORT: 0.2453][Total: 0.6617]	5.1+17.1s
[1600/8000]	[L1: 0.0911][DIV: 0.1344][GRAD: 0.1866][VORT: 0.2452][Total: 0.6573]	4.9+3.2s
[2400/8000]	[L1: 0.0904][DIV: 0.1334][GRAD: 0.1851][VORT: 0.2460][Total: 0.6549]	4.9+3.2s
[3200/8000]	[L1: 0.0908][DIV: 0.1341][GRAD: 0.1860][VORT: 0.2487][Total: 0.6596]	4.9+3.2s
[4000/8000]	[L1: 0.0908][DIV: 0.1337][GRAD: 0.1859][VORT: 0.2476][Total: 0.6580]	4.8+3.2s
[4800/8000]	[L1: 0.0908][DIV: 0.1340][GRAD: 0.1858][VORT: 0.2473][Total: 0.6579]	4.9+3.2s
[5600/8000]	[L1: 0.0899][DIV: 0.1331][GRAD: 0.1842][VORT: 0.2450][Total: 0.6522]	4.8+3.2s
[6400/8000]	[L1: 0.0899][DIV: 0.1331][GRAD: 0.1842][VORT: 0.2456][Total: 0.6529]	4.8+3.2s
[7200/8000]	[L1: 0.0896][DIV: 0.1329][GRAD: 0.1833][VORT: 0.2440][Total: 0.6498]	4.8+3.2s
[8000/8000]	[L1: 0.0891][DIV: 0.1322][GRAD: 0.1825][VORT: 0.2429][Total: 0.6467]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.081910	vorticity_error: 1.154064	mean_abs_divergence: 0.098143
[DIV2K x2]	rel_l2_error: 0.062594	vorticity_error: 0.907708	mean_abs_divergence: 0.053378
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043254	vorticity_error: 0.752406	mean_abs_divergence: 0.026729
Forward: 15.48s

Saving...
Total: 15.86s

[Epoch 412]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0973][DIV: 0.1421][GRAD: 0.1982][VORT: 0.2630][Total: 0.7005]	5.2+16.8s
[1600/8000]	[L1: 0.0937][DIV: 0.1366][GRAD: 0.1922][VORT: 0.2561][Total: 0.6786]	4.8+3.2s
[2400/8000]	[L1: 0.0934][DIV: 0.1364][GRAD: 0.1913][VORT: 0.2546][Total: 0.6756]	4.8+3.2s
[3200/8000]	[L1: 0.0925][DIV: 0.1353][GRAD: 0.1894][VORT: 0.2511][Total: 0.6682]	4.9+3.1s
[4000/8000]	[L1: 0.0916][DIV: 0.1347][GRAD: 0.1877][VORT: 0.2489][Total: 0.6629]	4.9+3.1s
[4800/8000]	[L1: 0.0913][DIV: 0.1344][GRAD: 0.1870][VORT: 0.2476][Total: 0.6602]	4.9+3.1s
[5600/8000]	[L1: 0.0911][DIV: 0.1339][GRAD: 0.1866][VORT: 0.2477][Total: 0.6593]	4.8+3.2s
[6400/8000]	[L1: 0.0911][DIV: 0.1341][GRAD: 0.1866][VORT: 0.2476][Total: 0.6594]	4.9+3.1s
[7200/8000]	[L1: 0.0907][DIV: 0.1334][GRAD: 0.1859][VORT: 0.2470][Total: 0.6570]	4.9+3.2s
[8000/8000]	[L1: 0.0905][DIV: 0.1335][GRAD: 0.1853][VORT: 0.2460][Total: 0.6553]	4.9+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.060207	vorticity_error: 0.945938	mean_abs_divergence: 0.106894
[DIV2K x2]	rel_l2_error: 0.055702	vorticity_error: 0.690604	mean_abs_divergence: 0.055361
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.046798	vorticity_error: 0.855426	mean_abs_divergence: 0.027388
Forward: 15.49s

Saving...
Total: 15.80s

[Epoch 413]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0944][DIV: 0.1382][GRAD: 0.1934][VORT: 0.2592][Total: 0.6851]	5.1+16.8s
[1600/8000]	[L1: 0.0904][DIV: 0.1330][GRAD: 0.1853][VORT: 0.2505][Total: 0.6591]	4.9+3.2s
[2400/8000]	[L1: 0.0919][DIV: 0.1346][GRAD: 0.1885][VORT: 0.2544][Total: 0.6694]	4.8+3.2s
[3200/8000]	[L1: 0.0907][DIV: 0.1340][GRAD: 0.1859][VORT: 0.2493][Total: 0.6599]	4.8+3.2s
[4000/8000]	[L1: 0.0910][DIV: 0.1343][GRAD: 0.1863][VORT: 0.2484][Total: 0.6601]	4.8+3.2s
[4800/8000]	[L1: 0.0907][DIV: 0.1338][GRAD: 0.1859][VORT: 0.2474][Total: 0.6579]	4.8+3.2s
[5600/8000]	[L1: 0.0914][DIV: 0.1348][GRAD: 0.1873][VORT: 0.2495][Total: 0.6630]	4.8+3.2s
[6400/8000]	[L1: 0.0907][DIV: 0.1336][GRAD: 0.1861][VORT: 0.2481][Total: 0.6586]	4.9+3.2s
[7200/8000]	[L1: 0.0907][DIV: 0.1335][GRAD: 0.1860][VORT: 0.2489][Total: 0.6592]	4.8+3.2s
[8000/8000]	[L1: 0.0894][DIV: 0.1318][GRAD: 0.1834][VORT: 0.2463][Total: 0.6510]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.090451	vorticity_error: 0.783642	mean_abs_divergence: 0.120838
[DIV2K x2]	rel_l2_error: 0.062066	vorticity_error: 0.828505	mean_abs_divergence: 0.065654
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.054637	vorticity_error: 0.794819	mean_abs_divergence: 0.032513
Forward: 15.49s

Saving...
Total: 15.82s

[Epoch 414]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0868][DIV: 0.1278][GRAD: 0.1786][VORT: 0.2434][Total: 0.6366]	5.0+16.8s
[1600/8000]	[L1: 0.0885][DIV: 0.1306][GRAD: 0.1814][VORT: 0.2447][Total: 0.6453]	4.8+3.2s
[2400/8000]	[L1: 0.0907][DIV: 0.1340][GRAD: 0.1856][VORT: 0.2478][Total: 0.6582]	4.9+3.2s
[3200/8000]	[L1: 0.0908][DIV: 0.1340][GRAD: 0.1859][VORT: 0.2480][Total: 0.6588]	4.9+3.2s
[4000/8000]	[L1: 0.0914][DIV: 0.1350][GRAD: 0.1873][VORT: 0.2505][Total: 0.6642]	4.9+3.1s
[4800/8000]	[L1: 0.0903][DIV: 0.1337][GRAD: 0.1851][VORT: 0.2477][Total: 0.6568]	4.8+3.2s
[5600/8000]	[L1: 0.0892][DIV: 0.1320][GRAD: 0.1828][VORT: 0.2444][Total: 0.6484]	4.8+3.2s
[6400/8000]	[L1: 0.0894][DIV: 0.1324][GRAD: 0.1831][VORT: 0.2436][Total: 0.6485]	4.8+3.2s
[7200/8000]	[L1: 0.0897][DIV: 0.1329][GRAD: 0.1839][VORT: 0.2451][Total: 0.6516]	4.8+3.2s
[8000/8000]	[L1: 0.0904][DIV: 0.1336][GRAD: 0.1851][VORT: 0.2469][Total: 0.6559]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.061485	vorticity_error: 0.534054	mean_abs_divergence: 0.112143
[DIV2K x2]	rel_l2_error: 0.048584	vorticity_error: 0.479254	mean_abs_divergence: 0.060276
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.033076	vorticity_error: 0.431195	mean_abs_divergence: 0.029452
[INFO] New best model found with rel_l2_error on final output: 0.033076
Forward: 15.53s

Saving...
Total: 15.87s

[Epoch 415]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0874][DIV: 0.1307][GRAD: 0.1790][VORT: 0.2409][Total: 0.6381]	5.1+16.8s
[1600/8000]	[L1: 0.0859][DIV: 0.1276][GRAD: 0.1755][VORT: 0.2363][Total: 0.6253]	4.9+3.1s
[2400/8000]	[L1: 0.0887][DIV: 0.1311][GRAD: 0.1812][VORT: 0.2405][Total: 0.6415]	4.9+3.1s
[3200/8000]	[L1: 0.0885][DIV: 0.1307][GRAD: 0.1810][VORT: 0.2423][Total: 0.6424]	4.9+3.1s
[4000/8000]	[L1: 0.0893][DIV: 0.1320][GRAD: 0.1828][VORT: 0.2443][Total: 0.6484]	4.9+3.1s
[4800/8000]	[L1: 0.0884][DIV: 0.1310][GRAD: 0.1809][VORT: 0.2424][Total: 0.6426]	4.9+3.2s
[5600/8000]	[L1: 0.0889][DIV: 0.1318][GRAD: 0.1821][VORT: 0.2433][Total: 0.6460]	4.9+3.1s
[6400/8000]	[L1: 0.0890][DIV: 0.1321][GRAD: 0.1823][VORT: 0.2439][Total: 0.6474]	4.9+3.1s
[7200/8000]	[L1: 0.0890][DIV: 0.1321][GRAD: 0.1823][VORT: 0.2440][Total: 0.6474]	4.9+3.1s
[8000/8000]	[L1: 0.0888][DIV: 0.1318][GRAD: 0.1820][VORT: 0.2441][Total: 0.6467]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.066969	vorticity_error: 1.072546	mean_abs_divergence: 0.098427
[DIV2K x2]	rel_l2_error: 0.061240	vorticity_error: 0.798482	mean_abs_divergence: 0.051537
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.047405	vorticity_error: 0.783097	mean_abs_divergence: 0.025525
Forward: 15.67s

Saving...
Total: 16.06s

[Epoch 416]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0824][DIV: 0.1221][GRAD: 0.1696][VORT: 0.2388][Total: 0.6128]	5.1+16.9s
[1600/8000]	[L1: 0.0868][DIV: 0.1283][GRAD: 0.1779][VORT: 0.2457][Total: 0.6387]	4.8+3.2s
[2400/8000]	[L1: 0.0887][DIV: 0.1310][GRAD: 0.1817][VORT: 0.2466][Total: 0.6480]	4.8+3.2s
[3200/8000]	[L1: 0.0896][DIV: 0.1320][GRAD: 0.1838][VORT: 0.2493][Total: 0.6547]	4.8+3.2s
[4000/8000]	[L1: 0.0886][DIV: 0.1308][GRAD: 0.1820][VORT: 0.2480][Total: 0.6494]	4.8+3.2s
[4800/8000]	[L1: 0.0877][DIV: 0.1296][GRAD: 0.1801][VORT: 0.2454][Total: 0.6428]	4.8+3.2s
[5600/8000]	[L1: 0.0874][DIV: 0.1293][GRAD: 0.1795][VORT: 0.2440][Total: 0.6401]	4.8+3.2s
[6400/8000]	[L1: 0.0870][DIV: 0.1289][GRAD: 0.1786][VORT: 0.2428][Total: 0.6373]	4.8+3.2s
[7200/8000]	[L1: 0.0876][DIV: 0.1297][GRAD: 0.1797][VORT: 0.2431][Total: 0.6400]	4.9+3.2s
[8000/8000]	[L1: 0.0873][DIV: 0.1292][GRAD: 0.1791][VORT: 0.2426][Total: 0.6382]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.081020	vorticity_error: 0.971911	mean_abs_divergence: 0.131867
[DIV2K x2]	rel_l2_error: 0.065147	vorticity_error: 1.124964	mean_abs_divergence: 0.070270
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048890	vorticity_error: 0.824098	mean_abs_divergence: 0.035234
Forward: 15.59s

Saving...
Total: 15.90s

[Epoch 417]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0909][DIV: 0.1349][GRAD: 0.1862][VORT: 0.2498][Total: 0.6618]	5.2+16.9s
[1600/8000]	[L1: 0.0890][DIV: 0.1305][GRAD: 0.1828][VORT: 0.2476][Total: 0.6498]	4.8+3.2s
[2400/8000]	[L1: 0.0879][DIV: 0.1288][GRAD: 0.1806][VORT: 0.2462][Total: 0.6434]	4.9+3.1s
[3200/8000]	[L1: 0.0890][DIV: 0.1307][GRAD: 0.1828][VORT: 0.2471][Total: 0.6497]	4.9+3.1s
[4000/8000]	[L1: 0.0875][DIV: 0.1292][GRAD: 0.1795][VORT: 0.2434][Total: 0.6396]	4.9+3.1s
[4800/8000]	[L1: 0.0869][DIV: 0.1281][GRAD: 0.1785][VORT: 0.2421][Total: 0.6356]	4.8+3.2s
[5600/8000]	[L1: 0.0876][DIV: 0.1293][GRAD: 0.1798][VORT: 0.2433][Total: 0.6400]	4.9+3.1s
[6400/8000]	[L1: 0.0883][DIV: 0.1304][GRAD: 0.1812][VORT: 0.2446][Total: 0.6444]	4.9+3.1s
[7200/8000]	[L1: 0.0896][DIV: 0.1322][GRAD: 0.1837][VORT: 0.2473][Total: 0.6528]	4.9+3.1s
[8000/8000]	[L1: 0.0894][DIV: 0.1320][GRAD: 0.1835][VORT: 0.2466][Total: 0.6516]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.089163	vorticity_error: 0.821619	mean_abs_divergence: 0.097886
[DIV2K x2]	rel_l2_error: 0.062393	vorticity_error: 0.653269	mean_abs_divergence: 0.049867
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048104	vorticity_error: 0.528026	mean_abs_divergence: 0.024210
Forward: 15.61s

Saving...
Total: 15.92s

[Epoch 418]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0912][DIV: 0.1330][GRAD: 0.1873][VORT: 0.2564][Total: 0.6679]	5.3+16.7s
[1600/8000]	[L1: 0.0896][DIV: 0.1306][GRAD: 0.1841][VORT: 0.2495][Total: 0.6538]	4.8+3.2s
[2400/8000]	[L1: 0.0896][DIV: 0.1315][GRAD: 0.1837][VORT: 0.2469][Total: 0.6517]	4.9+3.1s
[3200/8000]	[L1: 0.0897][DIV: 0.1322][GRAD: 0.1837][VORT: 0.2455][Total: 0.6512]	4.9+3.1s
[4000/8000]	[L1: 0.0898][DIV: 0.1327][GRAD: 0.1838][VORT: 0.2463][Total: 0.6527]	4.9+3.1s
[4800/8000]	[L1: 0.0901][DIV: 0.1333][GRAD: 0.1844][VORT: 0.2465][Total: 0.6542]	4.9+3.1s
[5600/8000]	[L1: 0.0898][DIV: 0.1329][GRAD: 0.1839][VORT: 0.2458][Total: 0.6523]	4.9+3.1s
[6400/8000]	[L1: 0.0899][DIV: 0.1330][GRAD: 0.1840][VORT: 0.2455][Total: 0.6524]	4.9+3.1s
[7200/8000]	[L1: 0.0894][DIV: 0.1325][GRAD: 0.1829][VORT: 0.2435][Total: 0.6483]	4.9+3.1s
[8000/8000]	[L1: 0.0895][DIV: 0.1327][GRAD: 0.1832][VORT: 0.2439][Total: 0.6492]	4.9+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.095270	vorticity_error: 2.007561	mean_abs_divergence: 0.121917
[DIV2K x2]	rel_l2_error: 0.067693	vorticity_error: 1.061839	mean_abs_divergence: 0.062053
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.049355	vorticity_error: 0.880526	mean_abs_divergence: 0.029234
Forward: 15.50s

Saving...
Total: 15.80s

[Epoch 419]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0874][DIV: 0.1295][GRAD: 0.1792][VORT: 0.2360][Total: 0.6320]	5.1+18.2s
[1600/8000]	[L1: 0.0883][DIV: 0.1310][GRAD: 0.1808][VORT: 0.2357][Total: 0.6358]	4.9+3.1s
[2400/8000]	[L1: 0.0866][DIV: 0.1293][GRAD: 0.1772][VORT: 0.2322][Total: 0.6253]	4.9+3.1s
[3200/8000]	[L1: 0.0850][DIV: 0.1269][GRAD: 0.1741][VORT: 0.2297][Total: 0.6158]	4.9+3.1s
[4000/8000]	[L1: 0.0873][DIV: 0.1294][GRAD: 0.1786][VORT: 0.2346][Total: 0.6299]	4.9+3.1s
[4800/8000]	[L1: 0.0879][DIV: 0.1303][GRAD: 0.1801][VORT: 0.2373][Total: 0.6357]	4.9+3.1s
[5600/8000]	[L1: 0.0878][DIV: 0.1299][GRAD: 0.1798][VORT: 0.2374][Total: 0.6348]	4.9+3.1s
[6400/8000]	[L1: 0.0879][DIV: 0.1301][GRAD: 0.1799][VORT: 0.2376][Total: 0.6354]	4.9+3.1s
[7200/8000]	[L1: 0.0886][DIV: 0.1312][GRAD: 0.1813][VORT: 0.2392][Total: 0.6404]	4.9+3.1s
[8000/8000]	[L1: 0.0887][DIV: 0.1315][GRAD: 0.1815][VORT: 0.2384][Total: 0.6400]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.083454	vorticity_error: 0.710550	mean_abs_divergence: 0.119136
[DIV2K x2]	rel_l2_error: 0.068439	vorticity_error: 0.913103	mean_abs_divergence: 0.062831
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048118	vorticity_error: 1.039925	mean_abs_divergence: 0.030770
Forward: 15.43s

Saving...
Total: 15.81s

[Epoch 420]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0877][DIV: 0.1311][GRAD: 0.1799][VORT: 0.2451][Total: 0.6439]	5.1+16.8s
[1600/8000]	[L1: 0.0870][DIV: 0.1287][GRAD: 0.1786][VORT: 0.2420][Total: 0.6363]	4.9+3.1s
[2400/8000]	[L1: 0.0841][DIV: 0.1263][GRAD: 0.1730][VORT: 0.2353][Total: 0.6188]	4.9+3.2s
[3200/8000]	[L1: 0.0859][DIV: 0.1279][GRAD: 0.1768][VORT: 0.2405][Total: 0.6311]	4.9+3.1s
[4000/8000]	[L1: 0.0867][DIV: 0.1290][GRAD: 0.1782][VORT: 0.2423][Total: 0.6362]	4.9+3.1s
[4800/8000]	[L1: 0.0883][DIV: 0.1310][GRAD: 0.1815][VORT: 0.2468][Total: 0.6475]	4.9+3.1s
[5600/8000]	[L1: 0.0875][DIV: 0.1299][GRAD: 0.1796][VORT: 0.2434][Total: 0.6403]	4.9+3.1s
[6400/8000]	[L1: 0.0871][DIV: 0.1293][GRAD: 0.1788][VORT: 0.2424][Total: 0.6377]	4.8+3.2s
[7200/8000]	[L1: 0.0875][DIV: 0.1298][GRAD: 0.1796][VORT: 0.2433][Total: 0.6402]	4.9+3.1s
[8000/8000]	[L1: 0.0882][DIV: 0.1307][GRAD: 0.1810][VORT: 0.2448][Total: 0.6446]	4.9+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.076758	vorticity_error: 0.955127	mean_abs_divergence: 0.125121
[DIV2K x2]	rel_l2_error: 0.063575	vorticity_error: 1.166588	mean_abs_divergence: 0.065072
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.049542	vorticity_error: 1.124965	mean_abs_divergence: 0.031746
Forward: 15.52s

Saving...
Total: 15.83s

[Epoch 421]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0939][DIV: 0.1387][GRAD: 0.1929][VORT: 0.2635][Total: 0.6889]	5.0+16.8s
[1600/8000]	[L1: 0.0907][DIV: 0.1344][GRAD: 0.1857][VORT: 0.2497][Total: 0.6605]	4.9+3.2s
[2400/8000]	[L1: 0.0926][DIV: 0.1363][GRAD: 0.1896][VORT: 0.2546][Total: 0.6731]	4.8+3.2s
[3200/8000]	[L1: 0.0929][DIV: 0.1372][GRAD: 0.1901][VORT: 0.2547][Total: 0.6749]	4.8+3.2s
[4000/8000]	[L1: 0.0927][DIV: 0.1363][GRAD: 0.1897][VORT: 0.2536][Total: 0.6722]	4.8+3.2s
[4800/8000]	[L1: 0.0924][DIV: 0.1355][GRAD: 0.1890][VORT: 0.2529][Total: 0.6698]	4.8+3.2s
[5600/8000]	[L1: 0.0917][DIV: 0.1351][GRAD: 0.1876][VORT: 0.2505][Total: 0.6649]	4.9+3.2s
[6400/8000]	[L1: 0.0911][DIV: 0.1342][GRAD: 0.1866][VORT: 0.2508][Total: 0.6627]	4.8+3.2s
[7200/8000]	[L1: 0.0912][DIV: 0.1343][GRAD: 0.1870][VORT: 0.2510][Total: 0.6636]	4.8+3.2s
[8000/8000]	[L1: 0.0911][DIV: 0.1339][GRAD: 0.1868][VORT: 0.2506][Total: 0.6624]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.096886	vorticity_error: 1.032957	mean_abs_divergence: 0.146447
[DIV2K x2]	rel_l2_error: 0.082079	vorticity_error: 1.090494	mean_abs_divergence: 0.077031
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.058357	vorticity_error: 0.919603	mean_abs_divergence: 0.038146
Forward: 15.31s

Saving...
Total: 15.61s

[Epoch 422]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0916][DIV: 0.1329][GRAD: 0.1878][VORT: 0.2464][Total: 0.6587]	5.2+16.9s
[1600/8000]	[L1: 0.0915][DIV: 0.1345][GRAD: 0.1873][VORT: 0.2482][Total: 0.6615]	4.9+3.2s
[2400/8000]	[L1: 0.0913][DIV: 0.1342][GRAD: 0.1870][VORT: 0.2488][Total: 0.6613]	4.8+3.2s
[3200/8000]	[L1: 0.0926][DIV: 0.1358][GRAD: 0.1895][VORT: 0.2531][Total: 0.6710]	4.9+3.1s
[4000/8000]	[L1: 0.0909][DIV: 0.1337][GRAD: 0.1863][VORT: 0.2486][Total: 0.6595]	4.9+3.2s
[4800/8000]	[L1: 0.0905][DIV: 0.1332][GRAD: 0.1851][VORT: 0.2463][Total: 0.6550]	4.8+3.2s
[5600/8000]	[L1: 0.0889][DIV: 0.1312][GRAD: 0.1821][VORT: 0.2429][Total: 0.6451]	4.9+3.2s
[6400/8000]	[L1: 0.0878][DIV: 0.1298][GRAD: 0.1798][VORT: 0.2407][Total: 0.6381]	4.8+3.2s
[7200/8000]	[L1: 0.0874][DIV: 0.1296][GRAD: 0.1791][VORT: 0.2399][Total: 0.6361]	4.9+3.1s
[8000/8000]	[L1: 0.0879][DIV: 0.1302][GRAD: 0.1801][VORT: 0.2402][Total: 0.6384]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.095588	vorticity_error: 0.778560	mean_abs_divergence: 0.127575
[DIV2K x2]	rel_l2_error: 0.073081	vorticity_error: 0.760109	mean_abs_divergence: 0.067071
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.052802	vorticity_error: 0.665904	mean_abs_divergence: 0.032461
Forward: 15.52s

Saving...
Total: 15.83s

[Epoch 423]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0861][DIV: 0.1274][GRAD: 0.1759][VORT: 0.2342][Total: 0.6235]	5.1+16.7s
[1600/8000]	[L1: 0.0876][DIV: 0.1296][GRAD: 0.1791][VORT: 0.2396][Total: 0.6359]	4.9+3.1s
[2400/8000]	[L1: 0.0870][DIV: 0.1294][GRAD: 0.1781][VORT: 0.2417][Total: 0.6362]	4.8+3.2s
[3200/8000]	[L1: 0.0866][DIV: 0.1286][GRAD: 0.1774][VORT: 0.2403][Total: 0.6329]	4.9+3.2s
[4000/8000]	[L1: 0.0854][DIV: 0.1269][GRAD: 0.1751][VORT: 0.2379][Total: 0.6254]	4.8+3.2s
[4800/8000]	[L1: 0.0859][DIV: 0.1278][GRAD: 0.1759][VORT: 0.2388][Total: 0.6284]	4.9+3.2s
[5600/8000]	[L1: 0.0847][DIV: 0.1267][GRAD: 0.1734][VORT: 0.2341][Total: 0.6189]	4.8+3.2s
[6400/8000]	[L1: 0.0863][DIV: 0.1286][GRAD: 0.1766][VORT: 0.2374][Total: 0.6289]	4.9+3.2s
[7200/8000]	[L1: 0.0854][DIV: 0.1277][GRAD: 0.1747][VORT: 0.2355][Total: 0.6233]	4.8+3.2s
[8000/8000]	[L1: 0.0856][DIV: 0.1278][GRAD: 0.1755][VORT: 0.2368][Total: 0.6257]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.117163	vorticity_error: 1.354606	mean_abs_divergence: 0.148056
[DIV2K x2]	rel_l2_error: 0.086769	vorticity_error: 1.164526	mean_abs_divergence: 0.079638
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.066356	vorticity_error: 1.025800	mean_abs_divergence: 0.039308
Forward: 15.31s

Saving...
Total: 15.68s

[Epoch 424]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0861][DIV: 0.1271][GRAD: 0.1771][VORT: 0.2469][Total: 0.6373]	5.2+16.8s
[1600/8000]	[L1: 0.0918][DIV: 0.1350][GRAD: 0.1884][VORT: 0.2577][Total: 0.6728]	4.9+3.2s
[2400/8000]	[L1: 0.0929][DIV: 0.1364][GRAD: 0.1902][VORT: 0.2562][Total: 0.6757]	4.8+3.2s
[3200/8000]	[L1: 0.0905][DIV: 0.1338][GRAD: 0.1853][VORT: 0.2494][Total: 0.6589]	4.8+3.2s
[4000/8000]	[L1: 0.0920][DIV: 0.1354][GRAD: 0.1885][VORT: 0.2531][Total: 0.6689]	4.9+3.2s
[4800/8000]	[L1: 0.0906][DIV: 0.1334][GRAD: 0.1855][VORT: 0.2494][Total: 0.6588]	4.8+3.2s
[5600/8000]	[L1: 0.0892][DIV: 0.1319][GRAD: 0.1827][VORT: 0.2466][Total: 0.6504]	4.9+3.1s
[6400/8000]	[L1: 0.0892][DIV: 0.1317][GRAD: 0.1828][VORT: 0.2459][Total: 0.6496]	4.8+3.2s
[7200/8000]	[L1: 0.0893][DIV: 0.1317][GRAD: 0.1831][VORT: 0.2472][Total: 0.6514]	4.9+3.1s
[8000/8000]	[L1: 0.0888][DIV: 0.1311][GRAD: 0.1821][VORT: 0.2463][Total: 0.6483]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.086633	vorticity_error: 2.447525	mean_abs_divergence: 0.126366
[DIV2K x2]	rel_l2_error: 0.063124	vorticity_error: 0.750006	mean_abs_divergence: 0.067493
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.047569	vorticity_error: 0.782438	mean_abs_divergence: 0.033270
Forward: 15.42s

Saving...
Total: 15.75s

[Epoch 425]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0887][DIV: 0.1320][GRAD: 0.1812][VORT: 0.2375][Total: 0.6394]	5.1+16.7s
[1600/8000]	[L1: 0.0898][DIV: 0.1328][GRAD: 0.1842][VORT: 0.2457][Total: 0.6526]	4.8+3.2s
[2400/8000]	[L1: 0.0898][DIV: 0.1324][GRAD: 0.1842][VORT: 0.2469][Total: 0.6532]	4.8+3.2s
[3200/8000]	[L1: 0.0895][DIV: 0.1323][GRAD: 0.1837][VORT: 0.2475][Total: 0.6529]	4.8+3.2s
[4000/8000]	[L1: 0.0900][DIV: 0.1329][GRAD: 0.1847][VORT: 0.2482][Total: 0.6559]	4.8+3.2s
[4800/8000]	[L1: 0.0893][DIV: 0.1321][GRAD: 0.1833][VORT: 0.2468][Total: 0.6516]	4.8+3.2s
[5600/8000]	[L1: 0.0906][DIV: 0.1339][GRAD: 0.1858][VORT: 0.2493][Total: 0.6595]	4.9+3.1s
[6400/8000]	[L1: 0.0898][DIV: 0.1328][GRAD: 0.1843][VORT: 0.2475][Total: 0.6545]	4.8+3.2s
[7200/8000]	[L1: 0.0896][DIV: 0.1327][GRAD: 0.1836][VORT: 0.2464][Total: 0.6523]	4.8+3.2s
[8000/8000]	[L1: 0.0893][DIV: 0.1321][GRAD: 0.1831][VORT: 0.2460][Total: 0.6506]	4.7+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.089562	vorticity_error: 0.796732	mean_abs_divergence: 0.150708
[DIV2K x2]	rel_l2_error: 0.064287	vorticity_error: 0.800173	mean_abs_divergence: 0.079872
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045252	vorticity_error: 0.638130	mean_abs_divergence: 0.038823
Forward: 15.51s

Saving...
Total: 15.84s

[Epoch 426]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0910][DIV: 0.1325][GRAD: 0.1866][VORT: 0.2493][Total: 0.6594]	5.2+16.9s
[1600/8000]	[L1: 0.0877][DIV: 0.1290][GRAD: 0.1799][VORT: 0.2407][Total: 0.6373]	4.8+3.2s
[2400/8000]	[L1: 0.0854][DIV: 0.1270][GRAD: 0.1753][VORT: 0.2360][Total: 0.6237]	4.8+3.2s
[3200/8000]	[L1: 0.0851][DIV: 0.1269][GRAD: 0.1745][VORT: 0.2351][Total: 0.6216]	4.8+3.2s
[4000/8000]	[L1: 0.0848][DIV: 0.1268][GRAD: 0.1738][VORT: 0.2340][Total: 0.6194]	4.9+3.2s
[4800/8000]	[L1: 0.0852][DIV: 0.1275][GRAD: 0.1745][VORT: 0.2334][Total: 0.6206]	4.8+3.2s
[5600/8000]	[L1: 0.0854][DIV: 0.1275][GRAD: 0.1749][VORT: 0.2346][Total: 0.6224]	4.8+3.2s
[6400/8000]	[L1: 0.0856][DIV: 0.1277][GRAD: 0.1752][VORT: 0.2338][Total: 0.6222]	4.8+3.2s
[7200/8000]	[L1: 0.0860][DIV: 0.1280][GRAD: 0.1762][VORT: 0.2356][Total: 0.6259]	4.8+3.2s
[8000/8000]	[L1: 0.0863][DIV: 0.1285][GRAD: 0.1767][VORT: 0.2364][Total: 0.6278]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.084750	vorticity_error: 0.743595	mean_abs_divergence: 0.119330
[DIV2K x2]	rel_l2_error: 0.064452	vorticity_error: 0.720106	mean_abs_divergence: 0.064737
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045192	vorticity_error: 0.594030	mean_abs_divergence: 0.032745
Forward: 15.50s

Saving...
Total: 15.81s

[Epoch 427]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0870][DIV: 0.1300][GRAD: 0.1789][VORT: 0.2381][Total: 0.6340]	5.1+16.8s
[1600/8000]	[L1: 0.0900][DIV: 0.1336][GRAD: 0.1842][VORT: 0.2419][Total: 0.6497]	4.8+3.2s
[2400/8000]	[L1: 0.0893][DIV: 0.1330][GRAD: 0.1830][VORT: 0.2431][Total: 0.6485]	4.9+3.1s
[3200/8000]	[L1: 0.0892][DIV: 0.1327][GRAD: 0.1829][VORT: 0.2440][Total: 0.6486]	4.8+3.2s
[4000/8000]	[L1: 0.0881][DIV: 0.1310][GRAD: 0.1806][VORT: 0.2403][Total: 0.6401]	4.8+3.2s
[4800/8000]	[L1: 0.0888][DIV: 0.1319][GRAD: 0.1821][VORT: 0.2430][Total: 0.6458]	4.8+3.2s
[5600/8000]	[L1: 0.0899][DIV: 0.1330][GRAD: 0.1841][VORT: 0.2455][Total: 0.6524]	4.9+3.2s
[6400/8000]	[L1: 0.0913][DIV: 0.1346][GRAD: 0.1872][VORT: 0.2496][Total: 0.6627]	4.9+3.2s
[7200/8000]	[L1: 0.0903][DIV: 0.1334][GRAD: 0.1849][VORT: 0.2462][Total: 0.6547]	4.9+3.2s
[8000/8000]	[L1: 0.0901][DIV: 0.1331][GRAD: 0.1846][VORT: 0.2460][Total: 0.6538]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.096897	vorticity_error: 0.932566	mean_abs_divergence: 0.146605
[DIV2K x2]	rel_l2_error: 0.080490	vorticity_error: 1.098938	mean_abs_divergence: 0.076660
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.051669	vorticity_error: 1.054993	mean_abs_divergence: 0.037756
Forward: 15.66s

Saving...
Total: 15.97s

[Epoch 428]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0836][DIV: 0.1249][GRAD: 0.1718][VORT: 0.2324][Total: 0.6127]	5.2+16.7s
[1600/8000]	[L1: 0.0874][DIV: 0.1304][GRAD: 0.1792][VORT: 0.2386][Total: 0.6355]	4.9+3.2s
[2400/8000]	[L1: 0.0880][DIV: 0.1319][GRAD: 0.1805][VORT: 0.2409][Total: 0.6412]	4.9+3.2s
[3200/8000]	[L1: 0.0871][DIV: 0.1307][GRAD: 0.1783][VORT: 0.2390][Total: 0.6352]	4.9+3.2s
[4000/8000]	[L1: 0.0879][DIV: 0.1316][GRAD: 0.1799][VORT: 0.2405][Total: 0.6399]	4.9+3.2s
[4800/8000]	[L1: 0.0876][DIV: 0.1309][GRAD: 0.1793][VORT: 0.2405][Total: 0.6384]	4.9+3.2s
[5600/8000]	[L1: 0.0885][DIV: 0.1320][GRAD: 0.1812][VORT: 0.2433][Total: 0.6449]	4.9+3.1s
[6400/8000]	[L1: 0.0888][DIV: 0.1324][GRAD: 0.1817][VORT: 0.2429][Total: 0.6458]	4.9+3.1s
[7200/8000]	[L1: 0.0882][DIV: 0.1313][GRAD: 0.1805][VORT: 0.2416][Total: 0.6417]	4.9+3.1s
[8000/8000]	[L1: 0.0888][DIV: 0.1319][GRAD: 0.1817][VORT: 0.2431][Total: 0.6455]	4.9+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.083962	vorticity_error: 0.668435	mean_abs_divergence: 0.121660
[DIV2K x2]	rel_l2_error: 0.065976	vorticity_error: 0.698126	mean_abs_divergence: 0.062591
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042199	vorticity_error: 0.525976	mean_abs_divergence: 0.030270
Forward: 15.48s

Saving...
Total: 15.81s

[Epoch 429]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0932][DIV: 0.1380][GRAD: 0.1903][VORT: 0.2491][Total: 0.6706]	5.0+16.8s
[1600/8000]	[L1: 0.0901][DIV: 0.1336][GRAD: 0.1837][VORT: 0.2413][Total: 0.6487]	4.8+3.2s
[2400/8000]	[L1: 0.0888][DIV: 0.1318][GRAD: 0.1814][VORT: 0.2419][Total: 0.6439]	4.8+3.1s
[3200/8000]	[L1: 0.0915][DIV: 0.1350][GRAD: 0.1871][VORT: 0.2490][Total: 0.6626]	4.8+3.1s
[4000/8000]	[L1: 0.0910][DIV: 0.1342][GRAD: 0.1860][VORT: 0.2483][Total: 0.6594]	4.8+3.2s
[4800/8000]	[L1: 0.0913][DIV: 0.1349][GRAD: 0.1868][VORT: 0.2494][Total: 0.6624]	4.9+3.1s
[5600/8000]	[L1: 0.0917][DIV: 0.1353][GRAD: 0.1879][VORT: 0.2511][Total: 0.6660]	4.9+3.2s
[6400/8000]	[L1: 0.0921][DIV: 0.1359][GRAD: 0.1885][VORT: 0.2508][Total: 0.6673]	4.9+3.1s
[7200/8000]	[L1: 0.0912][DIV: 0.1347][GRAD: 0.1866][VORT: 0.2478][Total: 0.6602]	4.8+3.2s
[8000/8000]	[L1: 0.0916][DIV: 0.1350][GRAD: 0.1875][VORT: 0.2494][Total: 0.6635]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.094141	vorticity_error: 0.817585	mean_abs_divergence: 0.143122
[DIV2K x2]	rel_l2_error: 0.069282	vorticity_error: 1.168889	mean_abs_divergence: 0.078870
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.046229	vorticity_error: 0.757172	mean_abs_divergence: 0.039637
Forward: 15.44s

Saving...
Total: 15.76s

[Epoch 430]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0830][DIV: 0.1236][GRAD: 0.1699][VORT: 0.2288][Total: 0.6053]	5.1+16.7s
[1600/8000]	[L1: 0.0826][DIV: 0.1237][GRAD: 0.1692][VORT: 0.2283][Total: 0.6038]	4.9+3.1s
[2400/8000]	[L1: 0.0861][DIV: 0.1275][GRAD: 0.1761][VORT: 0.2347][Total: 0.6244]	4.9+3.1s
[3200/8000]	[L1: 0.0857][DIV: 0.1271][GRAD: 0.1754][VORT: 0.2357][Total: 0.6239]	4.9+3.2s
[4000/8000]	[L1: 0.0855][DIV: 0.1270][GRAD: 0.1750][VORT: 0.2345][Total: 0.6220]	4.9+3.1s
[4800/8000]	[L1: 0.0870][DIV: 0.1288][GRAD: 0.1781][VORT: 0.2395][Total: 0.6335]	4.9+3.1s
[5600/8000]	[L1: 0.0874][DIV: 0.1293][GRAD: 0.1790][VORT: 0.2401][Total: 0.6357]	4.9+3.1s
[6400/8000]	[L1: 0.0861][DIV: 0.1276][GRAD: 0.1764][VORT: 0.2364][Total: 0.6265]	4.9+3.1s
[7200/8000]	[L1: 0.0862][DIV: 0.1277][GRAD: 0.1764][VORT: 0.2364][Total: 0.6266]	4.9+3.1s
[8000/8000]	[L1: 0.0860][DIV: 0.1277][GRAD: 0.1761][VORT: 0.2358][Total: 0.6256]	4.9+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.077366	vorticity_error: 0.726915	mean_abs_divergence: 0.126084
[DIV2K x2]	rel_l2_error: 0.057070	vorticity_error: 0.668761	mean_abs_divergence: 0.068480
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.046834	vorticity_error: 0.637120	mean_abs_divergence: 0.033929
Forward: 15.51s

Saving...
Total: 15.81s

[Epoch 431]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0969][DIV: 0.1385][GRAD: 0.1989][VORT: 0.2717][Total: 0.7059]	5.1+16.8s
[1600/8000]	[L1: 0.0931][DIV: 0.1346][GRAD: 0.1908][VORT: 0.2580][Total: 0.6765]	4.8+3.2s
[2400/8000]	[L1: 0.0925][DIV: 0.1342][GRAD: 0.1898][VORT: 0.2568][Total: 0.6733]	4.9+3.2s
[3200/8000]	[L1: 0.0907][DIV: 0.1322][GRAD: 0.1860][VORT: 0.2501][Total: 0.6591]	4.9+3.2s
[4000/8000]	[L1: 0.0913][DIV: 0.1334][GRAD: 0.1872][VORT: 0.2505][Total: 0.6624]	4.8+3.1s
[4800/8000]	[L1: 0.0901][DIV: 0.1323][GRAD: 0.1847][VORT: 0.2469][Total: 0.6540]	4.8+3.2s
[5600/8000]	[L1: 0.0898][DIV: 0.1319][GRAD: 0.1840][VORT: 0.2464][Total: 0.6521]	4.8+3.2s
[6400/8000]	[L1: 0.0895][DIV: 0.1316][GRAD: 0.1833][VORT: 0.2439][Total: 0.6481]	4.9+3.2s
[7200/8000]	[L1: 0.0898][DIV: 0.1321][GRAD: 0.1839][VORT: 0.2444][Total: 0.6502]	4.8+3.2s
[8000/8000]	[L1: 0.0902][DIV: 0.1326][GRAD: 0.1848][VORT: 0.2454][Total: 0.6531]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.080018	vorticity_error: 0.688828	mean_abs_divergence: 0.127314
[DIV2K x2]	rel_l2_error: 0.059286	vorticity_error: 0.673774	mean_abs_divergence: 0.066879
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.039831	vorticity_error: 0.517244	mean_abs_divergence: 0.032935
Forward: 15.54s

Saving...
Total: 15.86s

[Epoch 432]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0911][DIV: 0.1345][GRAD: 0.1864][VORT: 0.2527][Total: 0.6647]	5.1+16.8s
[1600/8000]	[L1: 0.0906][DIV: 0.1345][GRAD: 0.1854][VORT: 0.2491][Total: 0.6595]	4.9+3.1s
[2400/8000]	[L1: 0.0897][DIV: 0.1329][GRAD: 0.1836][VORT: 0.2465][Total: 0.6527]	4.9+3.1s
[3200/8000]	[L1: 0.0900][DIV: 0.1338][GRAD: 0.1843][VORT: 0.2464][Total: 0.6545]	4.9+3.2s
[4000/8000]	[L1: 0.0893][DIV: 0.1330][GRAD: 0.1830][VORT: 0.2447][Total: 0.6500]	4.8+3.2s
[4800/8000]	[L1: 0.0897][DIV: 0.1330][GRAD: 0.1841][VORT: 0.2463][Total: 0.6530]	4.8+3.2s
[5600/8000]	[L1: 0.0897][DIV: 0.1329][GRAD: 0.1839][VORT: 0.2461][Total: 0.6526]	4.8+3.2s
[6400/8000]	[L1: 0.0899][DIV: 0.1331][GRAD: 0.1844][VORT: 0.2462][Total: 0.6536]	4.8+3.2s
[7200/8000]	[L1: 0.0896][DIV: 0.1329][GRAD: 0.1837][VORT: 0.2439][Total: 0.6502]	4.8+3.2s
[8000/8000]	[L1: 0.0893][DIV: 0.1324][GRAD: 0.1829][VORT: 0.2429][Total: 0.6474]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.086046	vorticity_error: 0.793294	mean_abs_divergence: 0.111211
[DIV2K x2]	rel_l2_error: 0.066406	vorticity_error: 0.735993	mean_abs_divergence: 0.059860
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044550	vorticity_error: 0.620627	mean_abs_divergence: 0.029771
Forward: 15.79s

Saving...
Total: 16.15s

[Epoch 433]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0906][DIV: 0.1344][GRAD: 0.1856][VORT: 0.2490][Total: 0.6595]	5.0+16.9s
[1600/8000]	[L1: 0.0911][DIV: 0.1356][GRAD: 0.1866][VORT: 0.2481][Total: 0.6613]	4.9+3.2s
[2400/8000]	[L1: 0.0880][DIV: 0.1301][GRAD: 0.1806][VORT: 0.2421][Total: 0.6408]	4.8+3.2s
[3200/8000]	[L1: 0.0897][DIV: 0.1325][GRAD: 0.1840][VORT: 0.2446][Total: 0.6508]	4.8+3.2s
[4000/8000]	[L1: 0.0896][DIV: 0.1324][GRAD: 0.1838][VORT: 0.2457][Total: 0.6515]	4.8+3.2s
[4800/8000]	[L1: 0.0900][DIV: 0.1331][GRAD: 0.1847][VORT: 0.2486][Total: 0.6564]	4.8+3.2s
[5600/8000]	[L1: 0.0901][DIV: 0.1332][GRAD: 0.1849][VORT: 0.2491][Total: 0.6572]	4.8+3.2s
[6400/8000]	[L1: 0.0889][DIV: 0.1318][GRAD: 0.1822][VORT: 0.2462][Total: 0.6490]	4.9+3.2s
[7200/8000]	[L1: 0.0877][DIV: 0.1301][GRAD: 0.1797][VORT: 0.2425][Total: 0.6399]	4.8+3.2s
[8000/8000]	[L1: 0.0889][DIV: 0.1314][GRAD: 0.1823][VORT: 0.2462][Total: 0.6488]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.070402	vorticity_error: 0.793486	mean_abs_divergence: 0.086629
[DIV2K x2]	rel_l2_error: 0.058811	vorticity_error: 0.973253	mean_abs_divergence: 0.045439
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045589	vorticity_error: 0.792241	mean_abs_divergence: 0.022317
Forward: 15.49s

Saving...
Total: 15.81s

[Epoch 434]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0828][DIV: 0.1249][GRAD: 0.1690][VORT: 0.2272][Total: 0.6038]	5.0+16.8s
[1600/8000]	[L1: 0.0852][DIV: 0.1278][GRAD: 0.1746][VORT: 0.2367][Total: 0.6243]	4.9+3.2s
[2400/8000]	[L1: 0.0872][DIV: 0.1302][GRAD: 0.1788][VORT: 0.2408][Total: 0.6370]	4.9+3.2s
[3200/8000]	[L1: 0.0867][DIV: 0.1299][GRAD: 0.1778][VORT: 0.2389][Total: 0.6333]	4.8+3.2s
[4000/8000]	[L1: 0.0881][DIV: 0.1316][GRAD: 0.1808][VORT: 0.2430][Total: 0.6435]	4.9+3.1s
[4800/8000]	[L1: 0.0870][DIV: 0.1301][GRAD: 0.1784][VORT: 0.2394][Total: 0.6348]	4.9+3.1s
[5600/8000]	[L1: 0.0866][DIV: 0.1296][GRAD: 0.1777][VORT: 0.2380][Total: 0.6320]	4.9+3.1s
[6400/8000]	[L1: 0.0866][DIV: 0.1296][GRAD: 0.1775][VORT: 0.2378][Total: 0.6314]	4.9+3.1s
[7200/8000]	[L1: 0.0865][DIV: 0.1291][GRAD: 0.1772][VORT: 0.2374][Total: 0.6302]	4.9+3.1s
[8000/8000]	[L1: 0.0864][DIV: 0.1291][GRAD: 0.1771][VORT: 0.2375][Total: 0.6301]	4.9+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.086813	vorticity_error: 0.655119	mean_abs_divergence: 0.117800
[DIV2K x2]	rel_l2_error: 0.066167	vorticity_error: 0.812138	mean_abs_divergence: 0.063593
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.052370	vorticity_error: 0.693525	mean_abs_divergence: 0.031615
Forward: 15.32s

Saving...
Total: 15.66s

[Epoch 435]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0881][DIV: 0.1308][GRAD: 0.1808][VORT: 0.2432][Total: 0.6430]	5.1+16.7s
[1600/8000]	[L1: 0.0883][DIV: 0.1323][GRAD: 0.1810][VORT: 0.2416][Total: 0.6432]	4.9+3.2s
[2400/8000]	[L1: 0.0891][DIV: 0.1330][GRAD: 0.1830][VORT: 0.2464][Total: 0.6515]	4.9+3.1s
[3200/8000]	[L1: 0.0893][DIV: 0.1323][GRAD: 0.1833][VORT: 0.2460][Total: 0.6509]	4.9+3.1s
[4000/8000]	[L1: 0.0879][DIV: 0.1309][GRAD: 0.1804][VORT: 0.2415][Total: 0.6407]	4.8+3.2s
[4800/8000]	[L1: 0.0874][DIV: 0.1299][GRAD: 0.1794][VORT: 0.2407][Total: 0.6375]	4.8+3.2s
[5600/8000]	[L1: 0.0863][DIV: 0.1283][GRAD: 0.1768][VORT: 0.2367][Total: 0.6280]	4.9+3.2s
[6400/8000]	[L1: 0.0858][DIV: 0.1274][GRAD: 0.1759][VORT: 0.2367][Total: 0.6258]	4.9+3.2s
[7200/8000]	[L1: 0.0853][DIV: 0.1266][GRAD: 0.1749][VORT: 0.2362][Total: 0.6231]	4.8+3.2s
[8000/8000]	[L1: 0.0859][DIV: 0.1273][GRAD: 0.1760][VORT: 0.2377][Total: 0.6268]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.097296	vorticity_error: 0.787588	mean_abs_divergence: 0.117308
[DIV2K x2]	rel_l2_error: 0.072501	vorticity_error: 1.056783	mean_abs_divergence: 0.061266
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.053380	vorticity_error: 1.007849	mean_abs_divergence: 0.029295
Forward: 15.35s

Saving...
Total: 15.67s

[Epoch 436]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0935][DIV: 0.1386][GRAD: 0.1914][VORT: 0.2421][Total: 0.6656]	5.1+16.8s
[1600/8000]	[L1: 0.0858][DIV: 0.1272][GRAD: 0.1756][VORT: 0.2288][Total: 0.6174]	4.9+3.2s
[2400/8000]	[L1: 0.0863][DIV: 0.1287][GRAD: 0.1771][VORT: 0.2356][Total: 0.6278]	4.8+3.2s
[3200/8000]	[L1: 0.0863][DIV: 0.1284][GRAD: 0.1772][VORT: 0.2368][Total: 0.6287]	4.8+3.2s
[4000/8000]	[L1: 0.0870][DIV: 0.1293][GRAD: 0.1788][VORT: 0.2400][Total: 0.6351]	4.9+3.2s
[4800/8000]	[L1: 0.0881][DIV: 0.1308][GRAD: 0.1811][VORT: 0.2434][Total: 0.6435]	4.8+3.2s
[5600/8000]	[L1: 0.0879][DIV: 0.1305][GRAD: 0.1806][VORT: 0.2432][Total: 0.6421]	4.8+3.2s
[6400/8000]	[L1: 0.0892][DIV: 0.1320][GRAD: 0.1831][VORT: 0.2460][Total: 0.6503]	4.8+3.2s
[7200/8000]	[L1: 0.0886][DIV: 0.1314][GRAD: 0.1820][VORT: 0.2451][Total: 0.6471]	4.8+3.2s
[8000/8000]	[L1: 0.0889][DIV: 0.1316][GRAD: 0.1827][VORT: 0.2463][Total: 0.6495]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.065176	vorticity_error: 0.607569	mean_abs_divergence: 0.110708
[DIV2K x2]	rel_l2_error: 0.049493	vorticity_error: 0.583819	mean_abs_divergence: 0.059000
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.038657	vorticity_error: 0.544978	mean_abs_divergence: 0.029297
Forward: 15.44s

Saving...
Total: 15.80s

[Epoch 437]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0906][DIV: 0.1325][GRAD: 0.1858][VORT: 0.2529][Total: 0.6618]	5.1+16.7s
[1600/8000]	[L1: 0.0860][DIV: 0.1269][GRAD: 0.1764][VORT: 0.2416][Total: 0.6309]	4.9+3.2s
[2400/8000]	[L1: 0.0876][DIV: 0.1296][GRAD: 0.1797][VORT: 0.2437][Total: 0.6407]	4.9+3.1s
[3200/8000]	[L1: 0.0868][DIV: 0.1287][GRAD: 0.1779][VORT: 0.2407][Total: 0.6341]	4.9+3.2s
[4000/8000]	[L1: 0.0879][DIV: 0.1301][GRAD: 0.1801][VORT: 0.2425][Total: 0.6406]	4.9+3.1s
[4800/8000]	[L1: 0.0877][DIV: 0.1296][GRAD: 0.1798][VORT: 0.2435][Total: 0.6407]	4.9+3.1s
[5600/8000]	[L1: 0.0883][DIV: 0.1306][GRAD: 0.1809][VORT: 0.2447][Total: 0.6445]	4.9+3.2s
[6400/8000]	[L1: 0.0891][DIV: 0.1318][GRAD: 0.1827][VORT: 0.2460][Total: 0.6495]	4.9+3.1s
[7200/8000]	[L1: 0.0889][DIV: 0.1317][GRAD: 0.1821][VORT: 0.2452][Total: 0.6479]	4.9+3.2s
[8000/8000]	[L1: 0.0890][DIV: 0.1319][GRAD: 0.1824][VORT: 0.2450][Total: 0.6484]	4.9+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.061522	vorticity_error: 0.422460	mean_abs_divergence: 0.111337
[DIV2K x2]	rel_l2_error: 0.051072	vorticity_error: 0.458376	mean_abs_divergence: 0.058055
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.034995	vorticity_error: 0.384873	mean_abs_divergence: 0.027864
Forward: 15.50s

Saving...
Total: 15.81s

[Epoch 438]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0891][DIV: 0.1319][GRAD: 0.1825][VORT: 0.2456][Total: 0.6491]	5.1+16.7s
[1600/8000]	[L1: 0.0905][DIV: 0.1337][GRAD: 0.1857][VORT: 0.2513][Total: 0.6613]	4.9+3.2s
[2400/8000]	[L1: 0.0916][DIV: 0.1345][GRAD: 0.1877][VORT: 0.2528][Total: 0.6667]	4.9+3.1s
[3200/8000]	[L1: 0.0914][DIV: 0.1346][GRAD: 0.1872][VORT: 0.2518][Total: 0.6650]	4.9+3.2s
[4000/8000]	[L1: 0.0913][DIV: 0.1343][GRAD: 0.1871][VORT: 0.2522][Total: 0.6648]	4.9+3.2s
[4800/8000]	[L1: 0.0909][DIV: 0.1339][GRAD: 0.1863][VORT: 0.2503][Total: 0.6614]	4.8+3.2s
[5600/8000]	[L1: 0.0908][DIV: 0.1339][GRAD: 0.1861][VORT: 0.2496][Total: 0.6603]	4.8+3.2s
[6400/8000]	[L1: 0.0908][DIV: 0.1338][GRAD: 0.1861][VORT: 0.2492][Total: 0.6600]	4.9+3.2s
[7200/8000]	[L1: 0.0914][DIV: 0.1343][GRAD: 0.1873][VORT: 0.2511][Total: 0.6641]	4.9+3.2s
[8000/8000]	[L1: 0.0914][DIV: 0.1345][GRAD: 0.1876][VORT: 0.2517][Total: 0.6652]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.077897	vorticity_error: 0.753929	mean_abs_divergence: 0.106112
[DIV2K x2]	rel_l2_error: 0.052831	vorticity_error: 0.759978	mean_abs_divergence: 0.056289
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048533	vorticity_error: 0.987268	mean_abs_divergence: 0.027464
Forward: 15.47s

Saving...
Total: 15.78s

[Epoch 439]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0855][DIV: 0.1276][GRAD: 0.1754][VORT: 0.2291][Total: 0.6176]	5.0+16.9s
[1600/8000]	[L1: 0.0887][DIV: 0.1313][GRAD: 0.1815][VORT: 0.2382][Total: 0.6397]	4.9+3.2s
[2400/8000]	[L1: 0.0858][DIV: 0.1273][GRAD: 0.1758][VORT: 0.2344][Total: 0.6233]	4.9+3.2s
[3200/8000]	[L1: 0.0871][DIV: 0.1294][GRAD: 0.1784][VORT: 0.2364][Total: 0.6312]	4.9+3.2s
[4000/8000]	[L1: 0.0877][DIV: 0.1302][GRAD: 0.1795][VORT: 0.2391][Total: 0.6365]	4.9+3.2s
[4800/8000]	[L1: 0.0884][DIV: 0.1312][GRAD: 0.1811][VORT: 0.2408][Total: 0.6416]	4.9+3.1s
[5600/8000]	[L1: 0.0885][DIV: 0.1312][GRAD: 0.1814][VORT: 0.2420][Total: 0.6431]	4.9+3.2s
[6400/8000]	[L1: 0.0891][DIV: 0.1318][GRAD: 0.1827][VORT: 0.2446][Total: 0.6482]	4.9+3.2s
[7200/8000]	[L1: 0.0882][DIV: 0.1304][GRAD: 0.1809][VORT: 0.2433][Total: 0.6427]	4.9+3.2s
[8000/8000]	[L1: 0.0873][DIV: 0.1293][GRAD: 0.1791][VORT: 0.2413][Total: 0.6371]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.071464	vorticity_error: 0.992844	mean_abs_divergence: 0.127932
[DIV2K x2]	rel_l2_error: 0.055302	vorticity_error: 1.026335	mean_abs_divergence: 0.065152
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045886	vorticity_error: 0.967298	mean_abs_divergence: 0.031298
Forward: 15.54s

Saving...
Total: 15.86s

[Epoch 440]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0845][DIV: 0.1259][GRAD: 0.1726][VORT: 0.2314][Total: 0.6144]	5.2+16.8s
[1600/8000]	[L1: 0.0835][DIV: 0.1239][GRAD: 0.1710][VORT: 0.2304][Total: 0.6088]	4.8+3.2s
[2400/8000]	[L1: 0.0846][DIV: 0.1255][GRAD: 0.1732][VORT: 0.2317][Total: 0.6150]	4.8+3.2s
[3200/8000]	[L1: 0.0844][DIV: 0.1252][GRAD: 0.1732][VORT: 0.2341][Total: 0.6170]	5.0+3.1s
[4000/8000]	[L1: 0.0859][DIV: 0.1275][GRAD: 0.1763][VORT: 0.2381][Total: 0.6278]	4.8+3.2s
[4800/8000]	[L1: 0.0853][DIV: 0.1270][GRAD: 0.1748][VORT: 0.2364][Total: 0.6235]	4.8+3.2s
[5600/8000]	[L1: 0.0858][DIV: 0.1275][GRAD: 0.1757][VORT: 0.2373][Total: 0.6263]	4.8+3.2s
[6400/8000]	[L1: 0.0860][DIV: 0.1278][GRAD: 0.1761][VORT: 0.2383][Total: 0.6280]	4.9+3.1s
[7200/8000]	[L1: 0.0865][DIV: 0.1285][GRAD: 0.1773][VORT: 0.2393][Total: 0.6316]	4.9+3.1s
[8000/8000]	[L1: 0.0869][DIV: 0.1289][GRAD: 0.1780][VORT: 0.2398][Total: 0.6337]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.084262	vorticity_error: 0.787270	mean_abs_divergence: 0.118134
[DIV2K x2]	rel_l2_error: 0.060396	vorticity_error: 0.675586	mean_abs_divergence: 0.060632
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.046639	vorticity_error: 0.596644	mean_abs_divergence: 0.029133
Forward: 15.45s

Saving...
Total: 15.77s

[Epoch 441]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0948][DIV: 0.1387][GRAD: 0.1939][VORT: 0.2515][Total: 0.6789]	5.1+16.8s
[1600/8000]	[L1: 0.0918][DIV: 0.1350][GRAD: 0.1882][VORT: 0.2481][Total: 0.6631]	4.9+3.1s
[2400/8000]	[L1: 0.0882][DIV: 0.1299][GRAD: 0.1807][VORT: 0.2405][Total: 0.6393]	4.8+3.2s
[3200/8000]	[L1: 0.0895][DIV: 0.1320][GRAD: 0.1835][VORT: 0.2440][Total: 0.6489]	4.8+3.2s
[4000/8000]	[L1: 0.0893][DIV: 0.1318][GRAD: 0.1832][VORT: 0.2437][Total: 0.6480]	4.8+3.2s
[4800/8000]	[L1: 0.0893][DIV: 0.1319][GRAD: 0.1830][VORT: 0.2438][Total: 0.6481]	4.9+3.1s
[5600/8000]	[L1: 0.0890][DIV: 0.1314][GRAD: 0.1822][VORT: 0.2424][Total: 0.6449]	4.8+3.2s
[6400/8000]	[L1: 0.0890][DIV: 0.1313][GRAD: 0.1825][VORT: 0.2441][Total: 0.6469]	4.8+3.2s
[7200/8000]	[L1: 0.0879][DIV: 0.1300][GRAD: 0.1802][VORT: 0.2411][Total: 0.6393]	4.8+3.2s
[8000/8000]	[L1: 0.0875][DIV: 0.1295][GRAD: 0.1795][VORT: 0.2397][Total: 0.6362]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.086498	vorticity_error: 0.897602	mean_abs_divergence: 0.146601
[DIV2K x2]	rel_l2_error: 0.067769	vorticity_error: 1.281844	mean_abs_divergence: 0.076151
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.051853	vorticity_error: 0.982457	mean_abs_divergence: 0.036607
Forward: 15.65s

Saving...
Total: 16.03s

[Epoch 442]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0860][DIV: 0.1255][GRAD: 0.1764][VORT: 0.2484][Total: 0.6363]	5.2+16.9s
[1600/8000]	[L1: 0.0883][DIV: 0.1296][GRAD: 0.1811][VORT: 0.2487][Total: 0.6476]	4.9+3.1s
[2400/8000]	[L1: 0.0889][DIV: 0.1306][GRAD: 0.1823][VORT: 0.2475][Total: 0.6494]	4.8+3.2s
[3200/8000]	[L1: 0.0903][DIV: 0.1321][GRAD: 0.1856][VORT: 0.2533][Total: 0.6613]	4.9+3.2s
[4000/8000]	[L1: 0.0905][DIV: 0.1328][GRAD: 0.1859][VORT: 0.2521][Total: 0.6613]	4.8+3.2s
[4800/8000]	[L1: 0.0892][DIV: 0.1315][GRAD: 0.1831][VORT: 0.2474][Total: 0.6513]	4.9+3.2s
[5600/8000]	[L1: 0.0885][DIV: 0.1307][GRAD: 0.1815][VORT: 0.2461][Total: 0.6467]	4.9+3.2s
[6400/8000]	[L1: 0.0885][DIV: 0.1309][GRAD: 0.1817][VORT: 0.2459][Total: 0.6470]	4.9+3.2s
[7200/8000]	[L1: 0.0888][DIV: 0.1312][GRAD: 0.1823][VORT: 0.2464][Total: 0.6488]	4.9+3.1s
[8000/8000]	[L1: 0.0883][DIV: 0.1306][GRAD: 0.1813][VORT: 0.2452][Total: 0.6453]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.091866	vorticity_error: 2.413163	mean_abs_divergence: 0.125859
[DIV2K x2]	rel_l2_error: 0.067127	vorticity_error: 3.742688	mean_abs_divergence: 0.064413
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.051457	vorticity_error: 1.140747	mean_abs_divergence: 0.030696
Forward: 15.46s

Saving...
Total: 15.78s

[Epoch 443]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0857][DIV: 0.1265][GRAD: 0.1746][VORT: 0.2381][Total: 0.6249]	5.1+16.8s
[1600/8000]	[L1: 0.0890][DIV: 0.1311][GRAD: 0.1819][VORT: 0.2473][Total: 0.6493]	4.9+3.2s
[2400/8000]	[L1: 0.0888][DIV: 0.1313][GRAD: 0.1820][VORT: 0.2469][Total: 0.6490]	4.8+3.2s
[3200/8000]	[L1: 0.0873][DIV: 0.1296][GRAD: 0.1791][VORT: 0.2416][Total: 0.6376]	4.8+3.2s
[4000/8000]	[L1: 0.0883][DIV: 0.1314][GRAD: 0.1809][VORT: 0.2426][Total: 0.6433]	4.8+3.2s
[4800/8000]	[L1: 0.0876][DIV: 0.1302][GRAD: 0.1794][VORT: 0.2418][Total: 0.6390]	4.9+3.2s
[5600/8000]	[L1: 0.0872][DIV: 0.1298][GRAD: 0.1787][VORT: 0.2414][Total: 0.6371]	4.9+3.1s
[6400/8000]	[L1: 0.0880][DIV: 0.1307][GRAD: 0.1803][VORT: 0.2434][Total: 0.6424]	4.9+3.2s
[7200/8000]	[L1: 0.0880][DIV: 0.1310][GRAD: 0.1804][VORT: 0.2434][Total: 0.6428]	4.8+3.2s
[8000/8000]	[L1: 0.0882][DIV: 0.1314][GRAD: 0.1807][VORT: 0.2433][Total: 0.6436]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.073946	vorticity_error: 2.230469	mean_abs_divergence: 0.099441
[DIV2K x2]	rel_l2_error: 0.055754	vorticity_error: 1.060323	mean_abs_divergence: 0.051615
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.053918	vorticity_error: 1.086251	mean_abs_divergence: 0.025136
Forward: 15.36s

Saving...
Total: 15.68s

[Epoch 444]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0798][DIV: 0.1211][GRAD: 0.1638][VORT: 0.2231][Total: 0.5878]	5.1+16.7s
[1600/8000]	[L1: 0.0840][DIV: 0.1264][GRAD: 0.1724][VORT: 0.2303][Total: 0.6131]	4.8+3.2s
[2400/8000]	[L1: 0.0822][DIV: 0.1247][GRAD: 0.1687][VORT: 0.2247][Total: 0.6003]	4.8+3.2s
[3200/8000]	[L1: 0.0825][DIV: 0.1251][GRAD: 0.1691][VORT: 0.2244][Total: 0.6011]	4.8+3.2s
[4000/8000]	[L1: 0.0828][DIV: 0.1254][GRAD: 0.1697][VORT: 0.2258][Total: 0.6037]	4.9+3.1s
[4800/8000]	[L1: 0.0840][DIV: 0.1264][GRAD: 0.1722][VORT: 0.2289][Total: 0.6116]	4.8+3.2s
[5600/8000]	[L1: 0.0857][DIV: 0.1283][GRAD: 0.1756][VORT: 0.2339][Total: 0.6235]	4.8+3.2s
[6400/8000]	[L1: 0.0864][DIV: 0.1291][GRAD: 0.1770][VORT: 0.2355][Total: 0.6279]	4.8+3.2s
[7200/8000]	[L1: 0.0858][DIV: 0.1284][GRAD: 0.1755][VORT: 0.2333][Total: 0.6230]	4.9+3.2s
[8000/8000]	[L1: 0.0853][DIV: 0.1277][GRAD: 0.1747][VORT: 0.2328][Total: 0.6206]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.078655	vorticity_error: 0.785943	mean_abs_divergence: 0.105870
[DIV2K x2]	rel_l2_error: 0.065037	vorticity_error: 0.795628	mean_abs_divergence: 0.054954
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.050339	vorticity_error: 1.087761	mean_abs_divergence: 0.026130
Forward: 15.29s

Saving...
Total: 15.61s

[Epoch 445]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0917][DIV: 0.1345][GRAD: 0.1882][VORT: 0.2536][Total: 0.6681]	5.2+16.7s
[1600/8000]	[L1: 0.0914][DIV: 0.1343][GRAD: 0.1878][VORT: 0.2525][Total: 0.6659]	4.9+3.2s
[2400/8000]	[L1: 0.0911][DIV: 0.1341][GRAD: 0.1872][VORT: 0.2508][Total: 0.6631]	4.9+3.1s
[3200/8000]	[L1: 0.0911][DIV: 0.1340][GRAD: 0.1871][VORT: 0.2498][Total: 0.6621]	4.9+3.1s
[4000/8000]	[L1: 0.0911][DIV: 0.1341][GRAD: 0.1870][VORT: 0.2493][Total: 0.6615]	4.9+3.2s
[4800/8000]	[L1: 0.0899][DIV: 0.1327][GRAD: 0.1846][VORT: 0.2459][Total: 0.6531]	4.9+3.1s
[5600/8000]	[L1: 0.0909][DIV: 0.1339][GRAD: 0.1865][VORT: 0.2464][Total: 0.6577]	4.9+3.1s
[6400/8000]	[L1: 0.0911][DIV: 0.1341][GRAD: 0.1867][VORT: 0.2466][Total: 0.6584]	4.9+3.1s
[7200/8000]	[L1: 0.0914][DIV: 0.1347][GRAD: 0.1876][VORT: 0.2480][Total: 0.6617]	4.9+3.1s
[8000/8000]	[L1: 0.0907][DIV: 0.1337][GRAD: 0.1862][VORT: 0.2469][Total: 0.6575]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.081599	vorticity_error: 0.830545	mean_abs_divergence: 0.118413
[DIV2K x2]	rel_l2_error: 0.069414	vorticity_error: 0.781234	mean_abs_divergence: 0.063991
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.046556	vorticity_error: 0.639448	mean_abs_divergence: 0.031903
Forward: 15.48s

Saving...
Total: 15.80s

[Epoch 446]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0856][DIV: 0.1271][GRAD: 0.1765][VORT: 0.2430][Total: 0.6322]	5.1+16.8s
[1600/8000]	[L1: 0.0865][DIV: 0.1278][GRAD: 0.1778][VORT: 0.2414][Total: 0.6335]	4.8+3.2s
[2400/8000]	[L1: 0.0857][DIV: 0.1274][GRAD: 0.1757][VORT: 0.2366][Total: 0.6254]	4.9+3.1s
[3200/8000]	[L1: 0.0864][DIV: 0.1284][GRAD: 0.1773][VORT: 0.2399][Total: 0.6320]	4.9+3.1s
[4000/8000]	[L1: 0.0862][DIV: 0.1284][GRAD: 0.1766][VORT: 0.2390][Total: 0.6301]	4.9+3.2s
[4800/8000]	[L1: 0.0866][DIV: 0.1286][GRAD: 0.1775][VORT: 0.2410][Total: 0.6337]	4.9+3.2s
[5600/8000]	[L1: 0.0865][DIV: 0.1284][GRAD: 0.1772][VORT: 0.2408][Total: 0.6329]	4.8+3.2s
[6400/8000]	[L1: 0.0875][DIV: 0.1296][GRAD: 0.1792][VORT: 0.2431][Total: 0.6393]	4.9+3.2s
[7200/8000]	[L1: 0.0873][DIV: 0.1295][GRAD: 0.1788][VORT: 0.2419][Total: 0.6374]	4.9+3.1s
[8000/8000]	[L1: 0.0882][DIV: 0.1305][GRAD: 0.1808][VORT: 0.2435][Total: 0.6430]	4.9+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.067668	vorticity_error: 0.574804	mean_abs_divergence: 0.116180
[DIV2K x2]	rel_l2_error: 0.056977	vorticity_error: 0.693098	mean_abs_divergence: 0.060371
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043310	vorticity_error: 0.597806	mean_abs_divergence: 0.029407
Forward: 15.46s

Saving...
Total: 15.78s

[Epoch 447]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0838][DIV: 0.1253][GRAD: 0.1721][VORT: 0.2346][Total: 0.6158]	5.0+17.0s
[1600/8000]	[L1: 0.0834][DIV: 0.1246][GRAD: 0.1711][VORT: 0.2278][Total: 0.6070]	4.8+3.2s
[2400/8000]	[L1: 0.0878][DIV: 0.1302][GRAD: 0.1798][VORT: 0.2378][Total: 0.6356]	4.9+3.1s
[3200/8000]	[L1: 0.0901][DIV: 0.1332][GRAD: 0.1845][VORT: 0.2445][Total: 0.6522]	4.8+3.2s
[4000/8000]	[L1: 0.0896][DIV: 0.1321][GRAD: 0.1837][VORT: 0.2454][Total: 0.6508]	4.9+3.1s
[4800/8000]	[L1: 0.0901][DIV: 0.1325][GRAD: 0.1848][VORT: 0.2465][Total: 0.6539]	4.9+3.1s
[5600/8000]	[L1: 0.0894][DIV: 0.1318][GRAD: 0.1834][VORT: 0.2451][Total: 0.6498]	4.9+3.1s
[6400/8000]	[L1: 0.0880][DIV: 0.1301][GRAD: 0.1805][VORT: 0.2416][Total: 0.6402]	4.9+3.1s
[7200/8000]	[L1: 0.0885][DIV: 0.1309][GRAD: 0.1815][VORT: 0.2428][Total: 0.6437]	4.9+3.1s
[8000/8000]	[L1: 0.0891][DIV: 0.1317][GRAD: 0.1826][VORT: 0.2443][Total: 0.6477]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.089158	vorticity_error: 1.020763	mean_abs_divergence: 0.134086
[DIV2K x2]	rel_l2_error: 0.068369	vorticity_error: 0.731713	mean_abs_divergence: 0.070377
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048288	vorticity_error: 0.673114	mean_abs_divergence: 0.034493
Forward: 15.52s

Saving...
Total: 15.84s

[Epoch 448]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0778][DIV: 0.1179][GRAD: 0.1585][VORT: 0.2161][Total: 0.5703]	5.1+16.8s
[1600/8000]	[L1: 0.0829][DIV: 0.1240][GRAD: 0.1696][VORT: 0.2294][Total: 0.6059]	4.8+3.2s
[2400/8000]	[L1: 0.0850][DIV: 0.1269][GRAD: 0.1739][VORT: 0.2333][Total: 0.6191]	4.9+3.1s
[3200/8000]	[L1: 0.0851][DIV: 0.1269][GRAD: 0.1741][VORT: 0.2335][Total: 0.6197]	4.9+3.1s
[4000/8000]	[L1: 0.0863][DIV: 0.1287][GRAD: 0.1764][VORT: 0.2350][Total: 0.6264]	4.8+3.2s
[4800/8000]	[L1: 0.0868][DIV: 0.1290][GRAD: 0.1775][VORT: 0.2358][Total: 0.6291]	5.0+3.1s
[5600/8000]	[L1: 0.0863][DIV: 0.1284][GRAD: 0.1765][VORT: 0.2354][Total: 0.6267]	4.8+3.2s
[6400/8000]	[L1: 0.0859][DIV: 0.1280][GRAD: 0.1757][VORT: 0.2345][Total: 0.6242]	4.9+3.2s
[7200/8000]	[L1: 0.0859][DIV: 0.1281][GRAD: 0.1759][VORT: 0.2357][Total: 0.6256]	4.9+3.1s
[8000/8000]	[L1: 0.0856][DIV: 0.1274][GRAD: 0.1754][VORT: 0.2361][Total: 0.6245]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.086935	vorticity_error: 0.825024	mean_abs_divergence: 0.119684
[DIV2K x2]	rel_l2_error: 0.064008	vorticity_error: 0.650757	mean_abs_divergence: 0.064234
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044672	vorticity_error: 0.551330	mean_abs_divergence: 0.031219
Forward: 15.43s

Saving...
Total: 15.75s

[Epoch 449]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0874][DIV: 0.1303][GRAD: 0.1790][VORT: 0.2349][Total: 0.6316]	5.1+16.8s
[1600/8000]	[L1: 0.0860][DIV: 0.1279][GRAD: 0.1763][VORT: 0.2320][Total: 0.6221]	4.9+3.2s
[2400/8000]	[L1: 0.0852][DIV: 0.1267][GRAD: 0.1748][VORT: 0.2337][Total: 0.6203]	4.9+3.2s
[3200/8000]	[L1: 0.0867][DIV: 0.1281][GRAD: 0.1778][VORT: 0.2382][Total: 0.6307]	4.9+3.1s
[4000/8000]	[L1: 0.0863][DIV: 0.1281][GRAD: 0.1773][VORT: 0.2394][Total: 0.6312]	4.9+3.1s
[4800/8000]	[L1: 0.0880][DIV: 0.1303][GRAD: 0.1807][VORT: 0.2433][Total: 0.6423]	4.9+3.1s
[5600/8000]	[L1: 0.0876][DIV: 0.1297][GRAD: 0.1799][VORT: 0.2424][Total: 0.6396]	4.9+3.1s
[6400/8000]	[L1: 0.0880][DIV: 0.1301][GRAD: 0.1807][VORT: 0.2437][Total: 0.6425]	4.9+3.1s
[7200/8000]	[L1: 0.0887][DIV: 0.1307][GRAD: 0.1821][VORT: 0.2455][Total: 0.6469]	4.9+3.1s
[8000/8000]	[L1: 0.0887][DIV: 0.1309][GRAD: 0.1820][VORT: 0.2452][Total: 0.6468]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.078145	vorticity_error: 0.761992	mean_abs_divergence: 0.127338
[DIV2K x2]	rel_l2_error: 0.062208	vorticity_error: 0.738027	mean_abs_divergence: 0.067533
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.040124	vorticity_error: 0.530176	mean_abs_divergence: 0.033405
Forward: 15.48s

Saving...
Total: 15.79s

[Epoch 450]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0930][DIV: 0.1365][GRAD: 0.1911][VORT: 0.2568][Total: 0.6774]	5.1+16.7s
[1600/8000]	[L1: 0.0882][DIV: 0.1312][GRAD: 0.1807][VORT: 0.2420][Total: 0.6422]	5.0+3.1s
[2400/8000]	[L1: 0.0883][DIV: 0.1311][GRAD: 0.1810][VORT: 0.2436][Total: 0.6441]	4.8+3.2s
[3200/8000]	[L1: 0.0892][DIV: 0.1322][GRAD: 0.1828][VORT: 0.2437][Total: 0.6480]	4.9+3.1s
[4000/8000]	[L1: 0.0903][DIV: 0.1339][GRAD: 0.1849][VORT: 0.2455][Total: 0.6547]	4.9+3.1s
[4800/8000]	[L1: 0.0908][DIV: 0.1344][GRAD: 0.1859][VORT: 0.2469][Total: 0.6580]	4.9+3.1s
[5600/8000]	[L1: 0.0898][DIV: 0.1332][GRAD: 0.1841][VORT: 0.2452][Total: 0.6523]	4.9+3.2s
[6400/8000]	[L1: 0.0907][DIV: 0.1339][GRAD: 0.1858][VORT: 0.2478][Total: 0.6582]	4.9+3.1s
[7200/8000]	[L1: 0.0905][DIV: 0.1337][GRAD: 0.1856][VORT: 0.2479][Total: 0.6578]	4.9+3.2s
[8000/8000]	[L1: 0.0909][DIV: 0.1340][GRAD: 0.1863][VORT: 0.2487][Total: 0.6599]	4.9+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.084425	vorticity_error: 0.834583	mean_abs_divergence: 0.103271
[DIV2K x2]	rel_l2_error: 0.060611	vorticity_error: 0.928266	mean_abs_divergence: 0.055702
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048641	vorticity_error: 0.723569	mean_abs_divergence: 0.027961
Forward: 15.41s

Saving...
Total: 15.79s

[Epoch 451]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0949][DIV: 0.1383][GRAD: 0.1948][VORT: 0.2620][Total: 0.6900]	5.0+16.8s
[1600/8000]	[L1: 0.0919][DIV: 0.1346][GRAD: 0.1887][VORT: 0.2549][Total: 0.6700]	4.8+3.2s
[2400/8000]	[L1: 0.0894][DIV: 0.1312][GRAD: 0.1836][VORT: 0.2478][Total: 0.6520]	4.8+3.2s
[3200/8000]	[L1: 0.0881][DIV: 0.1302][GRAD: 0.1809][VORT: 0.2441][Total: 0.6431]	4.8+3.2s
[4000/8000]	[L1: 0.0872][DIV: 0.1296][GRAD: 0.1790][VORT: 0.2416][Total: 0.6375]	4.8+3.2s
[4800/8000]	[L1: 0.0870][DIV: 0.1296][GRAD: 0.1786][VORT: 0.2414][Total: 0.6366]	4.9+3.2s
[5600/8000]	[L1: 0.0872][DIV: 0.1296][GRAD: 0.1789][VORT: 0.2414][Total: 0.6370]	4.8+3.2s
[6400/8000]	[L1: 0.0883][DIV: 0.1310][GRAD: 0.1812][VORT: 0.2439][Total: 0.6444]	4.8+3.2s
[7200/8000]	[L1: 0.0881][DIV: 0.1307][GRAD: 0.1809][VORT: 0.2432][Total: 0.6430]	4.9+3.1s
[8000/8000]	[L1: 0.0875][DIV: 0.1299][GRAD: 0.1796][VORT: 0.2417][Total: 0.6388]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.094304	vorticity_error: 1.183355	mean_abs_divergence: 0.121897
[DIV2K x2]	rel_l2_error: 0.071349	vorticity_error: 0.976097	mean_abs_divergence: 0.063491
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.052082	vorticity_error: 0.838104	mean_abs_divergence: 0.031154
Forward: 15.53s

Saving...
Total: 15.86s

[Epoch 452]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0797][DIV: 0.1192][GRAD: 0.1633][VORT: 0.2209][Total: 0.5832]	5.0+16.7s
[1600/8000]	[L1: 0.0828][DIV: 0.1248][GRAD: 0.1694][VORT: 0.2231][Total: 0.6001]	4.8+3.2s
[2400/8000]	[L1: 0.0851][DIV: 0.1271][GRAD: 0.1741][VORT: 0.2295][Total: 0.6159]	4.8+3.1s
[3200/8000]	[L1: 0.0862][DIV: 0.1284][GRAD: 0.1765][VORT: 0.2328][Total: 0.6239]	4.8+3.2s
[4000/8000]	[L1: 0.0877][DIV: 0.1301][GRAD: 0.1795][VORT: 0.2363][Total: 0.6336]	4.8+3.2s
[4800/8000]	[L1: 0.0886][DIV: 0.1313][GRAD: 0.1810][VORT: 0.2386][Total: 0.6394]	4.9+3.1s
[5600/8000]	[L1: 0.0896][DIV: 0.1324][GRAD: 0.1831][VORT: 0.2419][Total: 0.6470]	4.9+3.2s
[6400/8000]	[L1: 0.0895][DIV: 0.1322][GRAD: 0.1829][VORT: 0.2409][Total: 0.6454]	4.8+3.2s
[7200/8000]	[L1: 0.0898][DIV: 0.1324][GRAD: 0.1834][VORT: 0.2418][Total: 0.6474]	4.9+3.1s
[8000/8000]	[L1: 0.0895][DIV: 0.1320][GRAD: 0.1829][VORT: 0.2415][Total: 0.6458]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.097738	vorticity_error: 1.143204	mean_abs_divergence: 0.135873
[DIV2K x2]	rel_l2_error: 0.077701	vorticity_error: 1.640783	mean_abs_divergence: 0.070212
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.055938	vorticity_error: 1.425039	mean_abs_divergence: 0.034333
Forward: 15.41s

Saving...
Total: 15.74s

[Epoch 453]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0893][DIV: 0.1313][GRAD: 0.1839][VORT: 0.2578][Total: 0.6623]	5.1+16.7s
[1600/8000]	[L1: 0.0897][DIV: 0.1330][GRAD: 0.1841][VORT: 0.2561][Total: 0.6629]	4.9+3.1s
[2400/8000]	[L1: 0.0904][DIV: 0.1333][GRAD: 0.1860][VORT: 0.2591][Total: 0.6689]	4.8+3.2s
[3200/8000]	[L1: 0.0894][DIV: 0.1319][GRAD: 0.1836][VORT: 0.2540][Total: 0.6589]	4.9+3.2s
[4000/8000]	[L1: 0.0907][DIV: 0.1336][GRAD: 0.1862][VORT: 0.2553][Total: 0.6658]	4.9+3.2s
[4800/8000]	[L1: 0.0906][DIV: 0.1331][GRAD: 0.1859][VORT: 0.2535][Total: 0.6630]	4.8+3.2s
[5600/8000]	[L1: 0.0895][DIV: 0.1322][GRAD: 0.1836][VORT: 0.2491][Total: 0.6544]	4.8+3.2s
[6400/8000]	[L1: 0.0892][DIV: 0.1320][GRAD: 0.1830][VORT: 0.2482][Total: 0.6525]	4.8+3.2s
[7200/8000]	[L1: 0.0903][DIV: 0.1335][GRAD: 0.1850][VORT: 0.2503][Total: 0.6591]	4.8+3.2s
[8000/8000]	[L1: 0.0907][DIV: 0.1339][GRAD: 0.1858][VORT: 0.2511][Total: 0.6615]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.078167	vorticity_error: 0.720350	mean_abs_divergence: 0.132878
[DIV2K x2]	rel_l2_error: 0.057304	vorticity_error: 0.765557	mean_abs_divergence: 0.068505
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043430	vorticity_error: 0.718023	mean_abs_divergence: 0.032839
Forward: 15.38s

Saving...
Total: 15.70s

[Epoch 454]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0928][DIV: 0.1371][GRAD: 0.1891][VORT: 0.2446][Total: 0.6637]	5.0+16.8s
[1600/8000]	[L1: 0.0866][DIV: 0.1290][GRAD: 0.1766][VORT: 0.2284][Total: 0.6205]	4.8+3.2s
[2400/8000]	[L1: 0.0846][DIV: 0.1261][GRAD: 0.1727][VORT: 0.2253][Total: 0.6087]	4.9+3.1s
[3200/8000]	[L1: 0.0849][DIV: 0.1263][GRAD: 0.1737][VORT: 0.2300][Total: 0.6149]	4.8+3.2s
[4000/8000]	[L1: 0.0862][DIV: 0.1279][GRAD: 0.1766][VORT: 0.2348][Total: 0.6254]	4.9+3.1s
[4800/8000]	[L1: 0.0881][DIV: 0.1301][GRAD: 0.1805][VORT: 0.2395][Total: 0.6382]	4.8+3.2s
[5600/8000]	[L1: 0.0874][DIV: 0.1290][GRAD: 0.1793][VORT: 0.2394][Total: 0.6351]	4.8+3.2s
[6400/8000]	[L1: 0.0884][DIV: 0.1304][GRAD: 0.1812][VORT: 0.2416][Total: 0.6415]	4.8+3.2s
[7200/8000]	[L1: 0.0891][DIV: 0.1316][GRAD: 0.1828][VORT: 0.2430][Total: 0.6465]	4.9+3.2s
[8000/8000]	[L1: 0.0885][DIV: 0.1310][GRAD: 0.1815][VORT: 0.2410][Total: 0.6420]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.075674	vorticity_error: 0.530580	mean_abs_divergence: 0.121067
[DIV2K x2]	rel_l2_error: 0.060956	vorticity_error: 0.498027	mean_abs_divergence: 0.064284
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042878	vorticity_error: 0.444356	mean_abs_divergence: 0.030999
Forward: 15.33s

Saving...
Total: 15.64s

[Epoch 455]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0853][DIV: 0.1265][GRAD: 0.1747][VORT: 0.2352][Total: 0.6217]	5.2+16.6s
[1600/8000]	[L1: 0.0881][DIV: 0.1307][GRAD: 0.1796][VORT: 0.2378][Total: 0.6363]	4.9+3.1s
[2400/8000]	[L1: 0.0864][DIV: 0.1289][GRAD: 0.1763][VORT: 0.2337][Total: 0.6254]	4.9+3.1s
[3200/8000]	[L1: 0.0872][DIV: 0.1295][GRAD: 0.1787][VORT: 0.2404][Total: 0.6358]	4.8+3.2s
[4000/8000]	[L1: 0.0871][DIV: 0.1299][GRAD: 0.1784][VORT: 0.2407][Total: 0.6361]	4.9+3.1s
[4800/8000]	[L1: 0.0888][DIV: 0.1317][GRAD: 0.1818][VORT: 0.2446][Total: 0.6469]	4.9+3.2s
[5600/8000]	[L1: 0.0888][DIV: 0.1316][GRAD: 0.1821][VORT: 0.2458][Total: 0.6483]	4.9+3.1s
[6400/8000]	[L1: 0.0891][DIV: 0.1318][GRAD: 0.1827][VORT: 0.2468][Total: 0.6505]	4.9+3.2s
[7200/8000]	[L1: 0.0889][DIV: 0.1314][GRAD: 0.1823][VORT: 0.2478][Total: 0.6504]	4.9+3.1s
[8000/8000]	[L1: 0.0880][DIV: 0.1303][GRAD: 0.1806][VORT: 0.2453][Total: 0.6441]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.071694	vorticity_error: 0.667649	mean_abs_divergence: 0.101584
[DIV2K x2]	rel_l2_error: 0.054247	vorticity_error: 0.618746	mean_abs_divergence: 0.051085
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048178	vorticity_error: 0.624595	mean_abs_divergence: 0.023991
Forward: 15.50s

Saving...
Total: 15.88s

[Epoch 456]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0853][DIV: 0.1274][GRAD: 0.1744][VORT: 0.2339][Total: 0.6211]	5.1+16.8s
[1600/8000]	[L1: 0.0834][DIV: 0.1246][GRAD: 0.1706][VORT: 0.2302][Total: 0.6088]	4.8+3.2s
[2400/8000]	[L1: 0.0869][DIV: 0.1295][GRAD: 0.1775][VORT: 0.2371][Total: 0.6311]	4.8+3.2s
[3200/8000]	[L1: 0.0883][DIV: 0.1314][GRAD: 0.1804][VORT: 0.2420][Total: 0.6421]	4.8+3.2s
[4000/8000]	[L1: 0.0889][DIV: 0.1321][GRAD: 0.1817][VORT: 0.2432][Total: 0.6460]	4.9+3.1s
[4800/8000]	[L1: 0.0893][DIV: 0.1323][GRAD: 0.1825][VORT: 0.2435][Total: 0.6476]	4.8+3.2s
[5600/8000]	[L1: 0.0888][DIV: 0.1317][GRAD: 0.1817][VORT: 0.2439][Total: 0.6460]	4.8+3.2s
[6400/8000]	[L1: 0.0885][DIV: 0.1315][GRAD: 0.1812][VORT: 0.2422][Total: 0.6434]	4.9+3.2s
[7200/8000]	[L1: 0.0891][DIV: 0.1320][GRAD: 0.1824][VORT: 0.2442][Total: 0.6477]	4.9+3.1s
[8000/8000]	[L1: 0.0888][DIV: 0.1315][GRAD: 0.1820][VORT: 0.2439][Total: 0.6463]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.112749	vorticity_error: 1.092576	mean_abs_divergence: 0.140957
[DIV2K x2]	rel_l2_error: 0.084599	vorticity_error: 1.180847	mean_abs_divergence: 0.074549
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.059277	vorticity_error: 0.924127	mean_abs_divergence: 0.036806
Forward: 15.52s

Saving...
Total: 15.84s

[Epoch 457]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0829][DIV: 0.1243][GRAD: 0.1701][VORT: 0.2276][Total: 0.6048]	5.0+16.8s
[1600/8000]	[L1: 0.0842][DIV: 0.1252][GRAD: 0.1729][VORT: 0.2339][Total: 0.6162]	4.8+3.2s
[2400/8000]	[L1: 0.0850][DIV: 0.1266][GRAD: 0.1747][VORT: 0.2357][Total: 0.6220]	4.8+3.2s
[3200/8000]	[L1: 0.0854][DIV: 0.1270][GRAD: 0.1758][VORT: 0.2379][Total: 0.6261]	4.8+3.2s
[4000/8000]	[L1: 0.0866][DIV: 0.1281][GRAD: 0.1782][VORT: 0.2412][Total: 0.6341]	4.8+3.2s
[4800/8000]	[L1: 0.0874][DIV: 0.1291][GRAD: 0.1798][VORT: 0.2434][Total: 0.6396]	4.9+3.2s
[5600/8000]	[L1: 0.0862][DIV: 0.1276][GRAD: 0.1773][VORT: 0.2405][Total: 0.6316]	4.9+3.1s
[6400/8000]	[L1: 0.0847][DIV: 0.1258][GRAD: 0.1740][VORT: 0.2355][Total: 0.6200]	4.8+3.2s
[7200/8000]	[L1: 0.0854][DIV: 0.1271][GRAD: 0.1753][VORT: 0.2364][Total: 0.6243]	4.9+3.2s
[8000/8000]	[L1: 0.0856][DIV: 0.1271][GRAD: 0.1758][VORT: 0.2373][Total: 0.6257]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.075805	vorticity_error: 0.886030	mean_abs_divergence: 0.124180
[DIV2K x2]	rel_l2_error: 0.059961	vorticity_error: 0.902097	mean_abs_divergence: 0.065483
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.039889	vorticity_error: 0.692050	mean_abs_divergence: 0.031849
Forward: 15.51s

Saving...
Total: 15.83s

[Epoch 458]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0872][DIV: 0.1292][GRAD: 0.1783][VORT: 0.2386][Total: 0.6334]	5.1+16.8s
[1600/8000]	[L1: 0.0863][DIV: 0.1283][GRAD: 0.1765][VORT: 0.2386][Total: 0.6297]	4.9+3.2s
[2400/8000]	[L1: 0.0897][DIV: 0.1336][GRAD: 0.1836][VORT: 0.2446][Total: 0.6515]	4.9+3.2s
[3200/8000]	[L1: 0.0905][DIV: 0.1343][GRAD: 0.1850][VORT: 0.2443][Total: 0.6541]	4.9+3.1s
[4000/8000]	[L1: 0.0896][DIV: 0.1331][GRAD: 0.1831][VORT: 0.2424][Total: 0.6482]	4.9+3.1s
[4800/8000]	[L1: 0.0896][DIV: 0.1329][GRAD: 0.1832][VORT: 0.2430][Total: 0.6486]	4.9+3.2s
[5600/8000]	[L1: 0.0896][DIV: 0.1327][GRAD: 0.1831][VORT: 0.2432][Total: 0.6486]	4.9+3.2s
[6400/8000]	[L1: 0.0892][DIV: 0.1323][GRAD: 0.1824][VORT: 0.2428][Total: 0.6466]	4.9+3.1s
[7200/8000]	[L1: 0.0894][DIV: 0.1323][GRAD: 0.1829][VORT: 0.2442][Total: 0.6489]	4.9+3.2s
[8000/8000]	[L1: 0.0892][DIV: 0.1320][GRAD: 0.1827][VORT: 0.2444][Total: 0.6483]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.090305	vorticity_error: 0.970372	mean_abs_divergence: 0.133561
[DIV2K x2]	rel_l2_error: 0.063698	vorticity_error: 0.842285	mean_abs_divergence: 0.071818
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.051237	vorticity_error: 0.731482	mean_abs_divergence: 0.035901
Forward: 15.48s

Saving...
Total: 15.79s

[Epoch 459]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0848][DIV: 0.1266][GRAD: 0.1740][VORT: 0.2311][Total: 0.6165]	5.2+16.9s
[1600/8000]	[L1: 0.0868][DIV: 0.1301][GRAD: 0.1780][VORT: 0.2373][Total: 0.6322]	4.9+3.1s
[2400/8000]	[L1: 0.0851][DIV: 0.1272][GRAD: 0.1743][VORT: 0.2351][Total: 0.6217]	4.9+3.1s
[3200/8000]	[L1: 0.0840][DIV: 0.1261][GRAD: 0.1723][VORT: 0.2338][Total: 0.6162]	4.9+3.1s
[4000/8000]	[L1: 0.0840][DIV: 0.1258][GRAD: 0.1724][VORT: 0.2339][Total: 0.6161]	4.9+3.1s
[4800/8000]	[L1: 0.0847][DIV: 0.1265][GRAD: 0.1738][VORT: 0.2354][Total: 0.6205]	4.9+3.1s
[5600/8000]	[L1: 0.0864][DIV: 0.1285][GRAD: 0.1772][VORT: 0.2393][Total: 0.6314]	4.9+3.1s
[6400/8000]	[L1: 0.0861][DIV: 0.1279][GRAD: 0.1767][VORT: 0.2394][Total: 0.6302]	4.9+3.1s
[7200/8000]	[L1: 0.0863][DIV: 0.1281][GRAD: 0.1772][VORT: 0.2407][Total: 0.6323]	4.9+3.2s
[8000/8000]	[L1: 0.0867][DIV: 0.1286][GRAD: 0.1780][VORT: 0.2411][Total: 0.6343]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.072935	vorticity_error: 0.711964	mean_abs_divergence: 0.115050
[DIV2K x2]	rel_l2_error: 0.058201	vorticity_error: 0.856253	mean_abs_divergence: 0.060830
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042704	vorticity_error: 0.720678	mean_abs_divergence: 0.030003
Forward: 15.47s

Saving...
Total: 15.85s

[Epoch 460]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0949][DIV: 0.1377][GRAD: 0.1946][VORT: 0.2697][Total: 0.6970]	5.0+16.8s
[1600/8000]	[L1: 0.0942][DIV: 0.1372][GRAD: 0.1937][VORT: 0.2670][Total: 0.6922]	4.8+3.1s
[2400/8000]	[L1: 0.0928][DIV: 0.1360][GRAD: 0.1907][VORT: 0.2610][Total: 0.6805]	4.8+3.1s
[3200/8000]	[L1: 0.0919][DIV: 0.1357][GRAD: 0.1888][VORT: 0.2568][Total: 0.6732]	4.8+3.0s
[4000/8000]	[L1: 0.0907][DIV: 0.1345][GRAD: 0.1864][VORT: 0.2528][Total: 0.6644]	4.8+3.0s
[4800/8000]	[L1: 0.0900][DIV: 0.1338][GRAD: 0.1848][VORT: 0.2510][Total: 0.6596]	4.8+3.1s
[5600/8000]	[L1: 0.0895][DIV: 0.1329][GRAD: 0.1837][VORT: 0.2487][Total: 0.6548]	4.7+3.1s
[6400/8000]	[L1: 0.0898][DIV: 0.1334][GRAD: 0.1845][VORT: 0.2497][Total: 0.6574]	4.8+3.0s
[7200/8000]	[L1: 0.0892][DIV: 0.1326][GRAD: 0.1832][VORT: 0.2481][Total: 0.6531]	4.8+3.1s
[8000/8000]	[L1: 0.0892][DIV: 0.1325][GRAD: 0.1832][VORT: 0.2476][Total: 0.6525]	4.8+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.077090	vorticity_error: 0.852292	mean_abs_divergence: 0.114550
[DIV2K x2]	rel_l2_error: 0.063120	vorticity_error: 0.798550	mean_abs_divergence: 0.061111
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044804	vorticity_error: 0.742200	mean_abs_divergence: 0.030743
Forward: 15.33s

Saving...
Total: 15.66s

[Epoch 461]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0854][DIV: 0.1287][GRAD: 0.1749][VORT: 0.2326][Total: 0.6216]	5.1+16.6s
[1600/8000]	[L1: 0.0879][DIV: 0.1311][GRAD: 0.1797][VORT: 0.2386][Total: 0.6373]	4.8+3.1s
[2400/8000]	[L1: 0.0848][DIV: 0.1271][GRAD: 0.1734][VORT: 0.2317][Total: 0.6169]	4.7+3.1s
[3200/8000]	[L1: 0.0851][DIV: 0.1269][GRAD: 0.1740][VORT: 0.2323][Total: 0.6183]	4.8+3.0s
[4000/8000]	[L1: 0.0844][DIV: 0.1264][GRAD: 0.1725][VORT: 0.2295][Total: 0.6127]	4.7+3.1s
[4800/8000]	[L1: 0.0849][DIV: 0.1270][GRAD: 0.1736][VORT: 0.2310][Total: 0.6165]	4.8+3.1s
[5600/8000]	[L1: 0.0863][DIV: 0.1285][GRAD: 0.1764][VORT: 0.2361][Total: 0.6272]	4.8+3.1s
[6400/8000]	[L1: 0.0868][DIV: 0.1290][GRAD: 0.1777][VORT: 0.2378][Total: 0.6314]	4.8+3.0s
[7200/8000]	[L1: 0.0871][DIV: 0.1293][GRAD: 0.1783][VORT: 0.2386][Total: 0.6332]	4.8+3.0s
[8000/8000]	[L1: 0.0871][DIV: 0.1293][GRAD: 0.1784][VORT: 0.2378][Total: 0.6327]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.079957	vorticity_error: 0.807198	mean_abs_divergence: 0.127829
[DIV2K x2]	rel_l2_error: 0.060610	vorticity_error: 0.893761	mean_abs_divergence: 0.067912
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.040892	vorticity_error: 0.695013	mean_abs_divergence: 0.033679
Forward: 15.37s

Saving...
Total: 15.70s

[Epoch 462]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0873][DIV: 0.1307][GRAD: 0.1790][VORT: 0.2419][Total: 0.6388]	5.2+16.6s
[1600/8000]	[L1: 0.0852][DIV: 0.1272][GRAD: 0.1748][VORT: 0.2355][Total: 0.6227]	4.8+3.1s
[2400/8000]	[L1: 0.0853][DIV: 0.1269][GRAD: 0.1751][VORT: 0.2375][Total: 0.6248]	4.8+3.1s
[3200/8000]	[L1: 0.0856][DIV: 0.1273][GRAD: 0.1756][VORT: 0.2407][Total: 0.6291]	4.8+3.1s
[4000/8000]	[L1: 0.0867][DIV: 0.1287][GRAD: 0.1778][VORT: 0.2435][Total: 0.6367]	4.8+3.1s
[4800/8000]	[L1: 0.0866][DIV: 0.1290][GRAD: 0.1772][VORT: 0.2415][Total: 0.6343]	4.8+3.0s
[5600/8000]	[L1: 0.0860][DIV: 0.1283][GRAD: 0.1762][VORT: 0.2398][Total: 0.6303]	4.8+3.0s
[6400/8000]	[L1: 0.0869][DIV: 0.1295][GRAD: 0.1780][VORT: 0.2422][Total: 0.6365]	4.8+3.1s
[7200/8000]	[L1: 0.0868][DIV: 0.1290][GRAD: 0.1777][VORT: 0.2416][Total: 0.6351]	4.8+3.0s
[8000/8000]	[L1: 0.0866][DIV: 0.1288][GRAD: 0.1775][VORT: 0.2413][Total: 0.6343]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.074647	vorticity_error: 0.708501	mean_abs_divergence: 0.099822
[DIV2K x2]	rel_l2_error: 0.057677	vorticity_error: 0.517780	mean_abs_divergence: 0.053124
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.038590	vorticity_error: 0.477092	mean_abs_divergence: 0.026497
Forward: 15.35s

Saving...
Total: 15.68s

[Epoch 463]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0902][DIV: 0.1319][GRAD: 0.1850][VORT: 0.2498][Total: 0.6569]	5.1+16.6s
[1600/8000]	[L1: 0.0889][DIV: 0.1314][GRAD: 0.1823][VORT: 0.2432][Total: 0.6459]	4.8+3.1s
[2400/8000]	[L1: 0.0884][DIV: 0.1312][GRAD: 0.1812][VORT: 0.2420][Total: 0.6428]	4.8+3.0s
[3200/8000]	[L1: 0.0871][DIV: 0.1292][GRAD: 0.1785][VORT: 0.2404][Total: 0.6351]	4.8+3.0s
[4000/8000]	[L1: 0.0844][DIV: 0.1255][GRAD: 0.1730][VORT: 0.2339][Total: 0.6167]	4.8+3.0s
[4800/8000]	[L1: 0.0839][DIV: 0.1251][GRAD: 0.1721][VORT: 0.2320][Total: 0.6130]	4.8+3.1s
[5600/8000]	[L1: 0.0835][DIV: 0.1245][GRAD: 0.1713][VORT: 0.2310][Total: 0.6103]	4.8+3.0s
[6400/8000]	[L1: 0.0837][DIV: 0.1247][GRAD: 0.1715][VORT: 0.2310][Total: 0.6109]	4.8+3.0s
[7200/8000]	[L1: 0.0843][DIV: 0.1255][GRAD: 0.1727][VORT: 0.2325][Total: 0.6151]	4.8+3.0s
[8000/8000]	[L1: 0.0844][DIV: 0.1255][GRAD: 0.1731][VORT: 0.2334][Total: 0.6164]	4.8+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.095383	vorticity_error: 0.855867	mean_abs_divergence: 0.137419
[DIV2K x2]	rel_l2_error: 0.066957	vorticity_error: 1.224444	mean_abs_divergence: 0.073442
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.049016	vorticity_error: 0.813447	mean_abs_divergence: 0.036500
Forward: 15.35s

Saving...
Total: 15.67s

[Epoch 464]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0932][DIV: 0.1385][GRAD: 0.1905][VORT: 0.2559][Total: 0.6780]	5.1+16.6s
[1600/8000]	[L1: 0.0874][DIV: 0.1305][GRAD: 0.1789][VORT: 0.2405][Total: 0.6373]	4.9+3.0s
[2400/8000]	[L1: 0.0865][DIV: 0.1289][GRAD: 0.1773][VORT: 0.2390][Total: 0.6316]	4.8+3.1s
[3200/8000]	[L1: 0.0864][DIV: 0.1291][GRAD: 0.1769][VORT: 0.2371][Total: 0.6295]	4.8+3.0s
[4000/8000]	[L1: 0.0854][DIV: 0.1274][GRAD: 0.1749][VORT: 0.2360][Total: 0.6237]	4.8+3.1s
[4800/8000]	[L1: 0.0866][DIV: 0.1287][GRAD: 0.1776][VORT: 0.2393][Total: 0.6321]	4.8+3.0s
[5600/8000]	[L1: 0.0868][DIV: 0.1289][GRAD: 0.1779][VORT: 0.2387][Total: 0.6323]	4.8+3.0s
[6400/8000]	[L1: 0.0877][DIV: 0.1297][GRAD: 0.1796][VORT: 0.2404][Total: 0.6374]	4.8+3.0s
[7200/8000]	[L1: 0.0873][DIV: 0.1293][GRAD: 0.1788][VORT: 0.2388][Total: 0.6341]	4.8+3.0s
[8000/8000]	[L1: 0.0877][DIV: 0.1301][GRAD: 0.1797][VORT: 0.2398][Total: 0.6372]	4.8+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.056999	vorticity_error: 0.593572	mean_abs_divergence: 0.099096
[DIV2K x2]	rel_l2_error: 0.046895	vorticity_error: 0.646728	mean_abs_divergence: 0.052662
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.036921	vorticity_error: 0.496537	mean_abs_divergence: 0.026106
Forward: 15.34s

Saving...
Total: 15.72s

[Epoch 465]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0873][DIV: 0.1306][GRAD: 0.1800][VORT: 0.2410][Total: 0.6389]	5.1+16.6s
[1600/8000]	[L1: 0.0892][DIV: 0.1335][GRAD: 0.1831][VORT: 0.2456][Total: 0.6514]	4.8+3.1s
[2400/8000]	[L1: 0.0883][DIV: 0.1311][GRAD: 0.1811][VORT: 0.2422][Total: 0.6427]	4.7+3.1s
[3200/8000]	[L1: 0.0871][DIV: 0.1289][GRAD: 0.1787][VORT: 0.2399][Total: 0.6345]	4.7+3.1s
[4000/8000]	[L1: 0.0887][DIV: 0.1308][GRAD: 0.1822][VORT: 0.2438][Total: 0.6455]	4.7+3.1s
[4800/8000]	[L1: 0.0887][DIV: 0.1308][GRAD: 0.1820][VORT: 0.2438][Total: 0.6454]	4.8+3.1s
[5600/8000]	[L1: 0.0885][DIV: 0.1306][GRAD: 0.1818][VORT: 0.2436][Total: 0.6445]	4.8+3.1s
[6400/8000]	[L1: 0.0875][DIV: 0.1293][GRAD: 0.1796][VORT: 0.2401][Total: 0.6365]	4.8+3.1s
[7200/8000]	[L1: 0.0874][DIV: 0.1296][GRAD: 0.1794][VORT: 0.2402][Total: 0.6366]	4.8+3.0s
[8000/8000]	[L1: 0.0876][DIV: 0.1297][GRAD: 0.1799][VORT: 0.2409][Total: 0.6381]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.081939	vorticity_error: 0.810891	mean_abs_divergence: 0.121590
[DIV2K x2]	rel_l2_error: 0.064632	vorticity_error: 0.865128	mean_abs_divergence: 0.062489
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.049427	vorticity_error: 0.612907	mean_abs_divergence: 0.030063
Forward: 15.20s

Saving...
Total: 15.50s

[Epoch 466]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0973][DIV: 0.1433][GRAD: 0.1995][VORT: 0.2606][Total: 0.7007]	5.2+16.5s
[1600/8000]	[L1: 0.0914][DIV: 0.1359][GRAD: 0.1871][VORT: 0.2485][Total: 0.6628]	4.8+3.0s
[2400/8000]	[L1: 0.0901][DIV: 0.1343][GRAD: 0.1846][VORT: 0.2451][Total: 0.6540]	4.8+3.0s
[3200/8000]	[L1: 0.0896][DIV: 0.1332][GRAD: 0.1838][VORT: 0.2441][Total: 0.6508]	4.8+3.0s
[4000/8000]	[L1: 0.0906][DIV: 0.1338][GRAD: 0.1859][VORT: 0.2476][Total: 0.6578]	4.8+3.0s
[4800/8000]	[L1: 0.0906][DIV: 0.1336][GRAD: 0.1860][VORT: 0.2492][Total: 0.6594]	4.8+3.0s
[5600/8000]	[L1: 0.0900][DIV: 0.1329][GRAD: 0.1848][VORT: 0.2485][Total: 0.6562]	4.9+3.0s
[6400/8000]	[L1: 0.0899][DIV: 0.1329][GRAD: 0.1844][VORT: 0.2478][Total: 0.6552]	4.8+3.0s
[7200/8000]	[L1: 0.0888][DIV: 0.1313][GRAD: 0.1823][VORT: 0.2455][Total: 0.6479]	4.8+3.0s
[8000/8000]	[L1: 0.0896][DIV: 0.1326][GRAD: 0.1838][VORT: 0.2468][Total: 0.6528]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.058098	vorticity_error: 0.504778	mean_abs_divergence: 0.094811
[DIV2K x2]	rel_l2_error: 0.049800	vorticity_error: 0.505371	mean_abs_divergence: 0.051212
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043132	vorticity_error: 0.498310	mean_abs_divergence: 0.025341
Forward: 15.36s

Saving...
Total: 15.67s

[Epoch 467]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0848][DIV: 0.1241][GRAD: 0.1735][VORT: 0.2316][Total: 0.6140]	5.1+16.6s
[1600/8000]	[L1: 0.0864][DIV: 0.1278][GRAD: 0.1766][VORT: 0.2346][Total: 0.6254]	4.8+3.0s
[2400/8000]	[L1: 0.0874][DIV: 0.1289][GRAD: 0.1788][VORT: 0.2377][Total: 0.6328]	4.9+3.0s
[3200/8000]	[L1: 0.0878][DIV: 0.1297][GRAD: 0.1797][VORT: 0.2409][Total: 0.6381]	4.8+3.0s
[4000/8000]	[L1: 0.0874][DIV: 0.1293][GRAD: 0.1788][VORT: 0.2384][Total: 0.6339]	4.9+3.0s
[4800/8000]	[L1: 0.0861][DIV: 0.1279][GRAD: 0.1761][VORT: 0.2347][Total: 0.6247]	4.8+3.0s
[5600/8000]	[L1: 0.0869][DIV: 0.1290][GRAD: 0.1778][VORT: 0.2370][Total: 0.6308]	4.8+3.0s
[6400/8000]	[L1: 0.0864][DIV: 0.1283][GRAD: 0.1769][VORT: 0.2370][Total: 0.6286]	4.8+3.0s
[7200/8000]	[L1: 0.0869][DIV: 0.1289][GRAD: 0.1779][VORT: 0.2377][Total: 0.6314]	4.9+3.0s
[8000/8000]	[L1: 0.0870][DIV: 0.1289][GRAD: 0.1780][VORT: 0.2376][Total: 0.6315]	4.8+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.075307	vorticity_error: 0.841386	mean_abs_divergence: 0.116806
[DIV2K x2]	rel_l2_error: 0.056669	vorticity_error: 1.009790	mean_abs_divergence: 0.061871
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.040182	vorticity_error: 1.000499	mean_abs_divergence: 0.030188
Forward: 15.33s

Saving...
Total: 15.65s

[Epoch 468]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0930][DIV: 0.1396][GRAD: 0.1907][VORT: 0.2550][Total: 0.6783]	5.2+16.5s
[1600/8000]	[L1: 0.0857][DIV: 0.1282][GRAD: 0.1753][VORT: 0.2351][Total: 0.6243]	4.8+3.0s
[2400/8000]	[L1: 0.0859][DIV: 0.1279][GRAD: 0.1756][VORT: 0.2330][Total: 0.6224]	4.8+3.0s
[3200/8000]	[L1: 0.0885][DIV: 0.1308][GRAD: 0.1810][VORT: 0.2412][Total: 0.6414]	4.8+3.0s
[4000/8000]	[L1: 0.0885][DIV: 0.1310][GRAD: 0.1810][VORT: 0.2410][Total: 0.6415]	4.8+3.0s
[4800/8000]	[L1: 0.0877][DIV: 0.1300][GRAD: 0.1793][VORT: 0.2390][Total: 0.6360]	4.8+3.0s
[5600/8000]	[L1: 0.0868][DIV: 0.1289][GRAD: 0.1775][VORT: 0.2376][Total: 0.6308]	4.8+3.0s
[6400/8000]	[L1: 0.0875][DIV: 0.1300][GRAD: 0.1792][VORT: 0.2397][Total: 0.6364]	4.8+3.0s
[7200/8000]	[L1: 0.0868][DIV: 0.1290][GRAD: 0.1775][VORT: 0.2374][Total: 0.6307]	4.8+3.0s
[8000/8000]	[L1: 0.0861][DIV: 0.1280][GRAD: 0.1762][VORT: 0.2360][Total: 0.6263]	4.8+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.086274	vorticity_error: 1.005254	mean_abs_divergence: 0.115605
[DIV2K x2]	rel_l2_error: 0.066272	vorticity_error: 0.957060	mean_abs_divergence: 0.061828
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042147	vorticity_error: 0.715154	mean_abs_divergence: 0.030450
Forward: 15.36s

Saving...
Total: 15.67s

[Epoch 469]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0854][DIV: 0.1265][GRAD: 0.1745][VORT: 0.2316][Total: 0.6180]	5.2+16.5s
[1600/8000]	[L1: 0.0877][DIV: 0.1295][GRAD: 0.1795][VORT: 0.2399][Total: 0.6365]	4.8+3.0s
[2400/8000]	[L1: 0.0915][DIV: 0.1346][GRAD: 0.1872][VORT: 0.2494][Total: 0.6627]	4.8+3.0s
[3200/8000]	[L1: 0.0921][DIV: 0.1356][GRAD: 0.1885][VORT: 0.2511][Total: 0.6673]	4.8+3.0s
[4000/8000]	[L1: 0.0908][DIV: 0.1337][GRAD: 0.1856][VORT: 0.2472][Total: 0.6573]	4.8+3.0s
[4800/8000]	[L1: 0.0901][DIV: 0.1325][GRAD: 0.1843][VORT: 0.2456][Total: 0.6525]	4.8+3.0s
[5600/8000]	[L1: 0.0899][DIV: 0.1320][GRAD: 0.1838][VORT: 0.2451][Total: 0.6509]	4.8+3.0s
[6400/8000]	[L1: 0.0899][DIV: 0.1321][GRAD: 0.1839][VORT: 0.2452][Total: 0.6511]	4.8+3.0s
[7200/8000]	[L1: 0.0905][DIV: 0.1332][GRAD: 0.1851][VORT: 0.2466][Total: 0.6553]	4.8+3.0s
[8000/8000]	[L1: 0.0899][DIV: 0.1325][GRAD: 0.1840][VORT: 0.2459][Total: 0.6523]	4.9+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.093112	vorticity_error: 0.752683	mean_abs_divergence: 0.133722
[DIV2K x2]	rel_l2_error: 0.071957	vorticity_error: 0.858824	mean_abs_divergence: 0.072149
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.051332	vorticity_error: 0.804504	mean_abs_divergence: 0.035778
Forward: 15.36s

Saving...
Total: 15.68s

[Epoch 470]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0862][DIV: 0.1313][GRAD: 0.1759][VORT: 0.2296][Total: 0.6231]	5.1+16.7s
[1600/8000]	[L1: 0.0870][DIV: 0.1291][GRAD: 0.1781][VORT: 0.2376][Total: 0.6318]	4.8+3.0s
[2400/8000]	[L1: 0.0871][DIV: 0.1296][GRAD: 0.1784][VORT: 0.2380][Total: 0.6330]	4.8+3.1s
[3200/8000]	[L1: 0.0887][DIV: 0.1313][GRAD: 0.1819][VORT: 0.2424][Total: 0.6442]	4.8+3.1s
[4000/8000]	[L1: 0.0907][DIV: 0.1340][GRAD: 0.1862][VORT: 0.2486][Total: 0.6595]	4.8+3.1s
[4800/8000]	[L1: 0.0908][DIV: 0.1340][GRAD: 0.1864][VORT: 0.2505][Total: 0.6617]	4.8+3.0s
[5600/8000]	[L1: 0.0895][DIV: 0.1327][GRAD: 0.1839][VORT: 0.2470][Total: 0.6531]	4.8+3.1s
[6400/8000]	[L1: 0.0892][DIV: 0.1320][GRAD: 0.1830][VORT: 0.2457][Total: 0.6500]	4.8+3.0s
[7200/8000]	[L1: 0.0894][DIV: 0.1323][GRAD: 0.1834][VORT: 0.2462][Total: 0.6513]	4.8+3.0s
[8000/8000]	[L1: 0.0899][DIV: 0.1329][GRAD: 0.1844][VORT: 0.2474][Total: 0.6546]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.079980	vorticity_error: 0.851239	mean_abs_divergence: 0.121668
[DIV2K x2]	rel_l2_error: 0.063274	vorticity_error: 0.801164	mean_abs_divergence: 0.063203
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043828	vorticity_error: 0.667648	mean_abs_divergence: 0.030882
Forward: 15.32s

Saving...
Total: 15.65s

[Epoch 471]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0917][DIV: 0.1353][GRAD: 0.1882][VORT: 0.2473][Total: 0.6625]	5.1+16.6s
[1600/8000]	[L1: 0.0881][DIV: 0.1301][GRAD: 0.1807][VORT: 0.2401][Total: 0.6390]	4.8+3.1s
[2400/8000]	[L1: 0.0903][DIV: 0.1332][GRAD: 0.1849][VORT: 0.2465][Total: 0.6548]	4.8+3.1s
[3200/8000]	[L1: 0.0896][DIV: 0.1324][GRAD: 0.1834][VORT: 0.2440][Total: 0.6494]	4.7+3.1s
[4000/8000]	[L1: 0.0890][DIV: 0.1312][GRAD: 0.1823][VORT: 0.2435][Total: 0.6461]	4.8+3.0s
[4800/8000]	[L1: 0.0894][DIV: 0.1319][GRAD: 0.1832][VORT: 0.2466][Total: 0.6511]	4.8+3.1s
[5600/8000]	[L1: 0.0888][DIV: 0.1314][GRAD: 0.1819][VORT: 0.2446][Total: 0.6467]	4.8+3.0s
[6400/8000]	[L1: 0.0882][DIV: 0.1308][GRAD: 0.1805][VORT: 0.2420][Total: 0.6415]	4.8+3.1s
[7200/8000]	[L1: 0.0885][DIV: 0.1313][GRAD: 0.1812][VORT: 0.2427][Total: 0.6435]	4.8+3.0s
[8000/8000]	[L1: 0.0891][DIV: 0.1319][GRAD: 0.1824][VORT: 0.2436][Total: 0.6469]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.075462	vorticity_error: 0.632586	mean_abs_divergence: 0.115162
[DIV2K x2]	rel_l2_error: 0.059740	vorticity_error: 0.651266	mean_abs_divergence: 0.063258
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045288	vorticity_error: 0.483389	mean_abs_divergence: 0.031698
Forward: 15.40s

Saving...
Total: 15.71s

[Epoch 472]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0850][DIV: 0.1263][GRAD: 0.1742][VORT: 0.2350][Total: 0.6205]	5.1+16.6s
[1600/8000]	[L1: 0.0878][DIV: 0.1290][GRAD: 0.1799][VORT: 0.2432][Total: 0.6399]	4.8+3.1s
[2400/8000]	[L1: 0.0877][DIV: 0.1300][GRAD: 0.1798][VORT: 0.2419][Total: 0.6394]	4.8+3.0s
[3200/8000]	[L1: 0.0882][DIV: 0.1302][GRAD: 0.1807][VORT: 0.2446][Total: 0.6437]	4.8+3.0s
[4000/8000]	[L1: 0.0872][DIV: 0.1292][GRAD: 0.1786][VORT: 0.2394][Total: 0.6344]	4.8+3.0s
[4800/8000]	[L1: 0.0866][DIV: 0.1286][GRAD: 0.1773][VORT: 0.2384][Total: 0.6309]	4.7+3.0s
[5600/8000]	[L1: 0.0866][DIV: 0.1283][GRAD: 0.1775][VORT: 0.2400][Total: 0.6325]	4.8+3.0s
[6400/8000]	[L1: 0.0858][DIV: 0.1274][GRAD: 0.1757][VORT: 0.2373][Total: 0.6261]	4.8+3.0s
[7200/8000]	[L1: 0.0851][DIV: 0.1267][GRAD: 0.1745][VORT: 0.2355][Total: 0.6218]	4.8+3.0s
[8000/8000]	[L1: 0.0846][DIV: 0.1261][GRAD: 0.1734][VORT: 0.2340][Total: 0.6181]	4.8+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.074876	vorticity_error: 0.599366	mean_abs_divergence: 0.104832
[DIV2K x2]	rel_l2_error: 0.053781	vorticity_error: 0.599510	mean_abs_divergence: 0.052182
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.038760	vorticity_error: 0.509278	mean_abs_divergence: 0.024650
Forward: 15.40s

Saving...
Total: 15.71s

[Epoch 473]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0981][DIV: 0.1438][GRAD: 0.1995][VORT: 0.2629][Total: 0.7044]	5.1+16.7s
[1600/8000]	[L1: 0.0946][DIV: 0.1385][GRAD: 0.1932][VORT: 0.2544][Total: 0.6807]	4.8+3.0s
[2400/8000]	[L1: 0.0894][DIV: 0.1323][GRAD: 0.1828][VORT: 0.2440][Total: 0.6486]	4.8+3.1s
[3200/8000]	[L1: 0.0905][DIV: 0.1330][GRAD: 0.1851][VORT: 0.2472][Total: 0.6558]	4.8+3.0s
[4000/8000]	[L1: 0.0894][DIV: 0.1314][GRAD: 0.1827][VORT: 0.2446][Total: 0.6480]	4.7+3.1s
[4800/8000]	[L1: 0.0908][DIV: 0.1330][GRAD: 0.1858][VORT: 0.2489][Total: 0.6585]	4.8+3.0s
[5600/8000]	[L1: 0.0910][DIV: 0.1335][GRAD: 0.1863][VORT: 0.2502][Total: 0.6610]	4.8+3.1s
[6400/8000]	[L1: 0.0896][DIV: 0.1319][GRAD: 0.1835][VORT: 0.2467][Total: 0.6517]	4.8+3.1s
[7200/8000]	[L1: 0.0898][DIV: 0.1324][GRAD: 0.1838][VORT: 0.2468][Total: 0.6528]	4.8+3.1s
[8000/8000]	[L1: 0.0902][DIV: 0.1329][GRAD: 0.1847][VORT: 0.2479][Total: 0.6558]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.075735	vorticity_error: 0.728725	mean_abs_divergence: 0.113206
[DIV2K x2]	rel_l2_error: 0.056431	vorticity_error: 0.665720	mean_abs_divergence: 0.058895
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.037069	vorticity_error: 0.521502	mean_abs_divergence: 0.028364
Forward: 15.34s

Saving...
Total: 15.72s

[Epoch 474]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0916][DIV: 0.1345][GRAD: 0.1873][VORT: 0.2490][Total: 0.6624]	5.0+16.7s
[1600/8000]	[L1: 0.0903][DIV: 0.1332][GRAD: 0.1852][VORT: 0.2497][Total: 0.6584]	4.8+3.0s
[2400/8000]	[L1: 0.0925][DIV: 0.1361][GRAD: 0.1896][VORT: 0.2544][Total: 0.6726]	4.8+3.0s
[3200/8000]	[L1: 0.0928][DIV: 0.1365][GRAD: 0.1905][VORT: 0.2556][Total: 0.6754]	4.8+3.0s
[4000/8000]	[L1: 0.0934][DIV: 0.1375][GRAD: 0.1914][VORT: 0.2561][Total: 0.6784]	4.8+3.1s
[4800/8000]	[L1: 0.0922][DIV: 0.1361][GRAD: 0.1887][VORT: 0.2521][Total: 0.6691]	4.8+3.0s
[5600/8000]	[L1: 0.0926][DIV: 0.1366][GRAD: 0.1897][VORT: 0.2534][Total: 0.6723]	4.8+3.1s
[6400/8000]	[L1: 0.0916][DIV: 0.1353][GRAD: 0.1876][VORT: 0.2506][Total: 0.6651]	4.8+3.0s
[7200/8000]	[L1: 0.0912][DIV: 0.1346][GRAD: 0.1869][VORT: 0.2499][Total: 0.6625]	4.8+3.0s
[8000/8000]	[L1: 0.0907][DIV: 0.1338][GRAD: 0.1860][VORT: 0.2495][Total: 0.6601]	4.8+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.088639	vorticity_error: 0.878020	mean_abs_divergence: 0.139247
[DIV2K x2]	rel_l2_error: 0.069700	vorticity_error: 0.852480	mean_abs_divergence: 0.072316
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043851	vorticity_error: 0.646044	mean_abs_divergence: 0.035460
Forward: 15.25s

Saving...
Total: 15.58s

[Epoch 475]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0802][DIV: 0.1191][GRAD: 0.1651][VORT: 0.2236][Total: 0.5880]	5.1+16.5s
[1600/8000]	[L1: 0.0821][DIV: 0.1229][GRAD: 0.1688][VORT: 0.2299][Total: 0.6037]	4.7+3.1s
[2400/8000]	[L1: 0.0869][DIV: 0.1282][GRAD: 0.1784][VORT: 0.2417][Total: 0.6352]	4.8+3.0s
[3200/8000]	[L1: 0.0877][DIV: 0.1296][GRAD: 0.1802][VORT: 0.2436][Total: 0.6411]	4.7+3.0s
[4000/8000]	[L1: 0.0868][DIV: 0.1285][GRAD: 0.1782][VORT: 0.2405][Total: 0.6340]	4.8+3.0s
[4800/8000]	[L1: 0.0866][DIV: 0.1284][GRAD: 0.1779][VORT: 0.2398][Total: 0.6328]	4.8+3.0s
[5600/8000]	[L1: 0.0861][DIV: 0.1280][GRAD: 0.1769][VORT: 0.2387][Total: 0.6297]	4.8+3.0s
[6400/8000]	[L1: 0.0864][DIV: 0.1281][GRAD: 0.1775][VORT: 0.2383][Total: 0.6303]	4.8+3.1s
[7200/8000]	[L1: 0.0866][DIV: 0.1285][GRAD: 0.1777][VORT: 0.2375][Total: 0.6302]	4.8+3.0s
[8000/8000]	[L1: 0.0877][DIV: 0.1298][GRAD: 0.1798][VORT: 0.2391][Total: 0.6363]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.070214	vorticity_error: 0.716292	mean_abs_divergence: 0.114648
[DIV2K x2]	rel_l2_error: 0.057429	vorticity_error: 0.727580	mean_abs_divergence: 0.060949
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045817	vorticity_error: 0.872058	mean_abs_divergence: 0.029856
Forward: 15.38s

Saving...
Total: 15.70s

[Epoch 476]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0841][DIV: 0.1244][GRAD: 0.1732][VORT: 0.2355][Total: 0.6172]	5.1+16.6s
[1600/8000]	[L1: 0.0893][DIV: 0.1310][GRAD: 0.1831][VORT: 0.2422][Total: 0.6456]	4.8+3.1s
[2400/8000]	[L1: 0.0897][DIV: 0.1316][GRAD: 0.1841][VORT: 0.2468][Total: 0.6522]	4.8+3.1s
[3200/8000]	[L1: 0.0899][DIV: 0.1321][GRAD: 0.1845][VORT: 0.2474][Total: 0.6539]	4.8+3.0s
[4000/8000]	[L1: 0.0875][DIV: 0.1294][GRAD: 0.1795][VORT: 0.2406][Total: 0.6371]	4.8+3.0s
[4800/8000]	[L1: 0.0878][DIV: 0.1300][GRAD: 0.1800][VORT: 0.2401][Total: 0.6379]	4.8+3.1s
[5600/8000]	[L1: 0.0875][DIV: 0.1293][GRAD: 0.1793][VORT: 0.2392][Total: 0.6354]	4.8+3.1s
[6400/8000]	[L1: 0.0877][DIV: 0.1297][GRAD: 0.1797][VORT: 0.2395][Total: 0.6366]	4.8+3.1s
[7200/8000]	[L1: 0.0875][DIV: 0.1294][GRAD: 0.1791][VORT: 0.2382][Total: 0.6342]	4.8+3.0s
[8000/8000]	[L1: 0.0882][DIV: 0.1306][GRAD: 0.1806][VORT: 0.2391][Total: 0.6386]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.097642	vorticity_error: 0.778252	mean_abs_divergence: 0.145938
[DIV2K x2]	rel_l2_error: 0.073371	vorticity_error: 0.814321	mean_abs_divergence: 0.078351
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.047490	vorticity_error: 0.626438	mean_abs_divergence: 0.039005
Forward: 15.36s

Saving...
Total: 15.68s

[Epoch 477]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0917][DIV: 0.1363][GRAD: 0.1881][VORT: 0.2509][Total: 0.6671]	5.1+16.6s
[1600/8000]	[L1: 0.0886][DIV: 0.1322][GRAD: 0.1812][VORT: 0.2424][Total: 0.6444]	4.8+3.0s
[2400/8000]	[L1: 0.0862][DIV: 0.1295][GRAD: 0.1764][VORT: 0.2355][Total: 0.6276]	4.8+3.1s
[3200/8000]	[L1: 0.0847][DIV: 0.1271][GRAD: 0.1732][VORT: 0.2307][Total: 0.6158]	4.8+3.0s
[4000/8000]	[L1: 0.0855][DIV: 0.1279][GRAD: 0.1747][VORT: 0.2320][Total: 0.6201]	4.8+3.1s
[4800/8000]	[L1: 0.0860][DIV: 0.1284][GRAD: 0.1758][VORT: 0.2345][Total: 0.6247]	4.8+3.0s
[5600/8000]	[L1: 0.0867][DIV: 0.1292][GRAD: 0.1772][VORT: 0.2359][Total: 0.6290]	4.7+3.1s
[6400/8000]	[L1: 0.0867][DIV: 0.1293][GRAD: 0.1773][VORT: 0.2362][Total: 0.6294]	4.8+3.0s
[7200/8000]	[L1: 0.0869][DIV: 0.1299][GRAD: 0.1777][VORT: 0.2366][Total: 0.6311]	4.7+3.1s
[8000/8000]	[L1: 0.0874][DIV: 0.1305][GRAD: 0.1788][VORT: 0.2374][Total: 0.6341]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.070653	vorticity_error: 0.687775	mean_abs_divergence: 0.114215
[DIV2K x2]	rel_l2_error: 0.060050	vorticity_error: 0.655301	mean_abs_divergence: 0.058966
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045014	vorticity_error: 0.532616	mean_abs_divergence: 0.028636
Forward: 15.36s

Saving...
Total: 15.75s

[Epoch 478]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0809][DIV: 0.1215][GRAD: 0.1654][VORT: 0.2218][Total: 0.5895]	5.0+16.6s
[1600/8000]	[L1: 0.0841][DIV: 0.1256][GRAD: 0.1721][VORT: 0.2304][Total: 0.6121]	4.8+3.1s
[2400/8000]	[L1: 0.0834][DIV: 0.1252][GRAD: 0.1707][VORT: 0.2299][Total: 0.6091]	4.8+3.0s
[3200/8000]	[L1: 0.0864][DIV: 0.1290][GRAD: 0.1773][VORT: 0.2388][Total: 0.6314]	4.8+3.1s
[4000/8000]	[L1: 0.0883][DIV: 0.1311][GRAD: 0.1810][VORT: 0.2425][Total: 0.6428]	4.8+3.1s
[4800/8000]	[L1: 0.0888][DIV: 0.1318][GRAD: 0.1823][VORT: 0.2459][Total: 0.6488]	4.8+3.1s
[5600/8000]	[L1: 0.0888][DIV: 0.1317][GRAD: 0.1821][VORT: 0.2456][Total: 0.6482]	4.7+3.1s
[6400/8000]	[L1: 0.0895][DIV: 0.1324][GRAD: 0.1838][VORT: 0.2478][Total: 0.6535]	4.8+3.0s
[7200/8000]	[L1: 0.0893][DIV: 0.1322][GRAD: 0.1833][VORT: 0.2475][Total: 0.6523]	4.8+3.1s
[8000/8000]	[L1: 0.0889][DIV: 0.1319][GRAD: 0.1826][VORT: 0.2473][Total: 0.6507]	4.8+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.098444	vorticity_error: 1.379537	mean_abs_divergence: 0.134441
[DIV2K x2]	rel_l2_error: 0.080700	vorticity_error: 1.042433	mean_abs_divergence: 0.071242
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.056103	vorticity_error: 0.900166	mean_abs_divergence: 0.035738
Forward: 15.21s

Saving...
Total: 15.54s

[Epoch 479]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0950][DIV: 0.1397][GRAD: 0.1946][VORT: 0.2567][Total: 0.6860]	5.1+16.5s
[1600/8000]	[L1: 0.0890][DIV: 0.1321][GRAD: 0.1821][VORT: 0.2406][Total: 0.6438]	4.8+3.1s
[2400/8000]	[L1: 0.0884][DIV: 0.1304][GRAD: 0.1814][VORT: 0.2427][Total: 0.6429]	4.8+3.0s
[3200/8000]	[L1: 0.0885][DIV: 0.1307][GRAD: 0.1817][VORT: 0.2438][Total: 0.6447]	4.8+3.0s
[4000/8000]	[L1: 0.0884][DIV: 0.1305][GRAD: 0.1816][VORT: 0.2444][Total: 0.6449]	4.8+3.0s
[4800/8000]	[L1: 0.0891][DIV: 0.1311][GRAD: 0.1830][VORT: 0.2474][Total: 0.6507]	4.8+3.1s
[5600/8000]	[L1: 0.0893][DIV: 0.1314][GRAD: 0.1833][VORT: 0.2477][Total: 0.6517]	4.8+3.0s
[6400/8000]	[L1: 0.0894][DIV: 0.1316][GRAD: 0.1835][VORT: 0.2486][Total: 0.6531]	4.8+3.1s
[7200/8000]	[L1: 0.0895][DIV: 0.1320][GRAD: 0.1837][VORT: 0.2479][Total: 0.6531]	4.8+3.0s
[8000/8000]	[L1: 0.0895][DIV: 0.1320][GRAD: 0.1835][VORT: 0.2473][Total: 0.6523]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.075041	vorticity_error: 0.744496	mean_abs_divergence: 0.122249
[DIV2K x2]	rel_l2_error: 0.059270	vorticity_error: 0.680593	mean_abs_divergence: 0.065074
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.039186	vorticity_error: 0.585812	mean_abs_divergence: 0.032516
Forward: 15.32s

Saving...
Total: 15.63s

[Epoch 480]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0917][DIV: 0.1339][GRAD: 0.1872][VORT: 0.2491][Total: 0.6618]	5.1+16.6s
[1600/8000]	[L1: 0.0874][DIV: 0.1294][GRAD: 0.1788][VORT: 0.2378][Total: 0.6334]	4.8+3.1s
[2400/8000]	[L1: 0.0891][DIV: 0.1319][GRAD: 0.1822][VORT: 0.2423][Total: 0.6454]	4.8+3.1s
[3200/8000]	[L1: 0.0877][DIV: 0.1295][GRAD: 0.1793][VORT: 0.2392][Total: 0.6356]	4.8+3.1s
[4000/8000]	[L1: 0.0873][DIV: 0.1290][GRAD: 0.1785][VORT: 0.2385][Total: 0.6333]	4.9+3.0s
[4800/8000]	[L1: 0.0868][DIV: 0.1284][GRAD: 0.1776][VORT: 0.2375][Total: 0.6302]	4.7+3.1s
[5600/8000]	[L1: 0.0875][DIV: 0.1293][GRAD: 0.1791][VORT: 0.2393][Total: 0.6351]	4.8+3.0s
[6400/8000]	[L1: 0.0873][DIV: 0.1291][GRAD: 0.1785][VORT: 0.2384][Total: 0.6333]	4.8+3.1s
[7200/8000]	[L1: 0.0873][DIV: 0.1289][GRAD: 0.1787][VORT: 0.2395][Total: 0.6343]	4.8+3.1s
[8000/8000]	[L1: 0.0875][DIV: 0.1291][GRAD: 0.1790][VORT: 0.2400][Total: 0.6356]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.076879	vorticity_error: 0.762906	mean_abs_divergence: 0.134488
[DIV2K x2]	rel_l2_error: 0.060276	vorticity_error: 0.726614	mean_abs_divergence: 0.070054
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.041286	vorticity_error: 0.681907	mean_abs_divergence: 0.034000
Forward: 15.34s

Saving...
Total: 15.66s

[Epoch 481]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0886][DIV: 0.1306][GRAD: 0.1802][VORT: 0.2350][Total: 0.6345]	5.1+16.8s
[1600/8000]	[L1: 0.0834][DIV: 0.1249][GRAD: 0.1703][VORT: 0.2273][Total: 0.6060]	4.8+3.1s
[2400/8000]	[L1: 0.0842][DIV: 0.1257][GRAD: 0.1718][VORT: 0.2255][Total: 0.6073]	4.7+3.0s
[3200/8000]	[L1: 0.0852][DIV: 0.1270][GRAD: 0.1742][VORT: 0.2307][Total: 0.6171]	4.8+3.1s
[4000/8000]	[L1: 0.0875][DIV: 0.1297][GRAD: 0.1791][VORT: 0.2374][Total: 0.6336]	4.8+3.1s
[4800/8000]	[L1: 0.0875][DIV: 0.1299][GRAD: 0.1792][VORT: 0.2370][Total: 0.6336]	4.8+3.0s
[5600/8000]	[L1: 0.0883][DIV: 0.1309][GRAD: 0.1810][VORT: 0.2403][Total: 0.6405]	4.8+3.1s
[6400/8000]	[L1: 0.0882][DIV: 0.1309][GRAD: 0.1808][VORT: 0.2413][Total: 0.6412]	4.8+3.1s
[7200/8000]	[L1: 0.0876][DIV: 0.1301][GRAD: 0.1796][VORT: 0.2401][Total: 0.6374]	4.8+3.1s
[8000/8000]	[L1: 0.0879][DIV: 0.1305][GRAD: 0.1801][VORT: 0.2402][Total: 0.6387]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.096121	vorticity_error: 0.949557	mean_abs_divergence: 0.147681
[DIV2K x2]	rel_l2_error: 0.070783	vorticity_error: 1.013531	mean_abs_divergence: 0.079262
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.046798	vorticity_error: 0.815718	mean_abs_divergence: 0.039703
Forward: 15.40s

Saving...
Total: 15.72s

[Epoch 482]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0868][DIV: 0.1290][GRAD: 0.1790][VORT: 0.2461][Total: 0.6409]	5.2+16.6s
[1600/8000]	[L1: 0.0877][DIV: 0.1304][GRAD: 0.1802][VORT: 0.2459][Total: 0.6442]	4.8+3.0s
[2400/8000]	[L1: 0.0874][DIV: 0.1300][GRAD: 0.1795][VORT: 0.2451][Total: 0.6420]	4.8+3.0s
[3200/8000]	[L1: 0.0859][DIV: 0.1280][GRAD: 0.1761][VORT: 0.2397][Total: 0.6298]	4.8+3.0s
[4000/8000]	[L1: 0.0867][DIV: 0.1292][GRAD: 0.1778][VORT: 0.2416][Total: 0.6353]	4.8+3.1s
[4800/8000]	[L1: 0.0870][DIV: 0.1295][GRAD: 0.1784][VORT: 0.2428][Total: 0.6377]	4.8+3.1s
[5600/8000]	[L1: 0.0889][DIV: 0.1319][GRAD: 0.1822][VORT: 0.2467][Total: 0.6497]	4.8+3.1s
[6400/8000]	[L1: 0.0895][DIV: 0.1323][GRAD: 0.1833][VORT: 0.2474][Total: 0.6524]	4.8+3.1s
[7200/8000]	[L1: 0.0896][DIV: 0.1325][GRAD: 0.1835][VORT: 0.2476][Total: 0.6532]	4.8+3.1s
[8000/8000]	[L1: 0.0898][DIV: 0.1329][GRAD: 0.1840][VORT: 0.2480][Total: 0.6548]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.080507	vorticity_error: 0.694635	mean_abs_divergence: 0.130017
[DIV2K x2]	rel_l2_error: 0.062904	vorticity_error: 2.463260	mean_abs_divergence: 0.067700
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.046224	vorticity_error: 0.896370	mean_abs_divergence: 0.033076
Forward: 15.30s

Saving...
Total: 15.67s

[Epoch 483]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0884][DIV: 0.1302][GRAD: 0.1825][VORT: 0.2468][Total: 0.6479]	5.0+16.6s
[1600/8000]	[L1: 0.0902][DIV: 0.1334][GRAD: 0.1859][VORT: 0.2542][Total: 0.6637]	4.8+3.1s
[2400/8000]	[L1: 0.0869][DIV: 0.1292][GRAD: 0.1788][VORT: 0.2453][Total: 0.6402]	4.8+3.1s
[3200/8000]	[L1: 0.0870][DIV: 0.1299][GRAD: 0.1788][VORT: 0.2429][Total: 0.6387]	4.8+3.1s
[4000/8000]	[L1: 0.0869][DIV: 0.1297][GRAD: 0.1784][VORT: 0.2429][Total: 0.6379]	4.7+3.1s
[4800/8000]	[L1: 0.0877][DIV: 0.1308][GRAD: 0.1800][VORT: 0.2437][Total: 0.6421]	4.7+3.1s
[5600/8000]	[L1: 0.0869][DIV: 0.1294][GRAD: 0.1784][VORT: 0.2428][Total: 0.6375]	4.8+3.1s
[6400/8000]	[L1: 0.0869][DIV: 0.1295][GRAD: 0.1784][VORT: 0.2421][Total: 0.6368]	4.8+3.0s
[7200/8000]	[L1: 0.0875][DIV: 0.1299][GRAD: 0.1795][VORT: 0.2427][Total: 0.6395]	4.8+3.1s
[8000/8000]	[L1: 0.0878][DIV: 0.1303][GRAD: 0.1802][VORT: 0.2437][Total: 0.6421]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.092477	vorticity_error: 1.051654	mean_abs_divergence: 0.139838
[DIV2K x2]	rel_l2_error: 0.071965	vorticity_error: 0.963136	mean_abs_divergence: 0.074900
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048590	vorticity_error: 0.845563	mean_abs_divergence: 0.037121
Forward: 15.33s

Saving...
Total: 15.66s

[Epoch 484]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0860][DIV: 0.1267][GRAD: 0.1760][VORT: 0.2374][Total: 0.6261]	5.0+16.5s
[1600/8000]	[L1: 0.0885][DIV: 0.1299][GRAD: 0.1817][VORT: 0.2439][Total: 0.6439]	4.7+3.1s
[2400/8000]	[L1: 0.0859][DIV: 0.1275][GRAD: 0.1765][VORT: 0.2395][Total: 0.6295]	4.8+3.0s
[3200/8000]	[L1: 0.0851][DIV: 0.1264][GRAD: 0.1750][VORT: 0.2388][Total: 0.6254]	4.8+3.1s
[4000/8000]	[L1: 0.0849][DIV: 0.1264][GRAD: 0.1743][VORT: 0.2381][Total: 0.6237]	4.8+3.1s
[4800/8000]	[L1: 0.0862][DIV: 0.1282][GRAD: 0.1768][VORT: 0.2409][Total: 0.6320]	4.8+3.0s
[5600/8000]	[L1: 0.0872][DIV: 0.1295][GRAD: 0.1788][VORT: 0.2435][Total: 0.6391]	4.8+3.1s
[6400/8000]	[L1: 0.0875][DIV: 0.1299][GRAD: 0.1796][VORT: 0.2440][Total: 0.6409]	4.8+3.1s
[7200/8000]	[L1: 0.0878][DIV: 0.1304][GRAD: 0.1800][VORT: 0.2438][Total: 0.6420]	4.8+3.0s
[8000/8000]	[L1: 0.0883][DIV: 0.1310][GRAD: 0.1808][VORT: 0.2437][Total: 0.6437]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.055001	vorticity_error: 0.584761	mean_abs_divergence: 0.101503
[DIV2K x2]	rel_l2_error: 0.046129	vorticity_error: 0.760690	mean_abs_divergence: 0.051709
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.034922	vorticity_error: 0.815897	mean_abs_divergence: 0.024728
Forward: 15.38s

Saving...
Total: 15.70s

[Epoch 485]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0870][DIV: 0.1282][GRAD: 0.1793][VORT: 0.2470][Total: 0.6414]	5.1+16.6s
[1600/8000]	[L1: 0.0879][DIV: 0.1296][GRAD: 0.1803][VORT: 0.2443][Total: 0.6421]	4.8+3.1s
[2400/8000]	[L1: 0.0882][DIV: 0.1308][GRAD: 0.1806][VORT: 0.2422][Total: 0.6418]	4.8+3.1s
[3200/8000]	[L1: 0.0872][DIV: 0.1296][GRAD: 0.1784][VORT: 0.2402][Total: 0.6354]	4.8+3.1s
[4000/8000]	[L1: 0.0875][DIV: 0.1301][GRAD: 0.1790][VORT: 0.2411][Total: 0.6377]	4.8+3.1s
[4800/8000]	[L1: 0.0867][DIV: 0.1290][GRAD: 0.1776][VORT: 0.2403][Total: 0.6336]	4.8+3.1s
[5600/8000]	[L1: 0.0860][DIV: 0.1282][GRAD: 0.1761][VORT: 0.2376][Total: 0.6280]	4.8+3.1s
[6400/8000]	[L1: 0.0871][DIV: 0.1295][GRAD: 0.1783][VORT: 0.2396][Total: 0.6345]	4.7+3.1s
[7200/8000]	[L1: 0.0870][DIV: 0.1293][GRAD: 0.1780][VORT: 0.2385][Total: 0.6327]	4.8+3.1s
[8000/8000]	[L1: 0.0866][DIV: 0.1291][GRAD: 0.1773][VORT: 0.2379][Total: 0.6310]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.092734	vorticity_error: 0.990346	mean_abs_divergence: 0.142469
[DIV2K x2]	rel_l2_error: 0.071006	vorticity_error: 1.120007	mean_abs_divergence: 0.074063
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.049751	vorticity_error: 1.016984	mean_abs_divergence: 0.036743
Forward: 15.44s

Saving...
Total: 15.77s

[Epoch 486]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0891][DIV: 0.1319][GRAD: 0.1825][VORT: 0.2474][Total: 0.6508]	5.1+16.6s
[1600/8000]	[L1: 0.0861][DIV: 0.1287][GRAD: 0.1771][VORT: 0.2372][Total: 0.6290]	4.8+3.0s
[2400/8000]	[L1: 0.0879][DIV: 0.1305][GRAD: 0.1807][VORT: 0.2424][Total: 0.6415]	4.7+3.1s
[3200/8000]	[L1: 0.0897][DIV: 0.1325][GRAD: 0.1841][VORT: 0.2468][Total: 0.6531]	4.8+3.1s
[4000/8000]	[L1: 0.0892][DIV: 0.1319][GRAD: 0.1827][VORT: 0.2435][Total: 0.6473]	4.7+3.1s
[4800/8000]	[L1: 0.0894][DIV: 0.1321][GRAD: 0.1833][VORT: 0.2454][Total: 0.6503]	4.8+3.0s
[5600/8000]	[L1: 0.0892][DIV: 0.1318][GRAD: 0.1831][VORT: 0.2464][Total: 0.6505]	4.7+3.1s
[6400/8000]	[L1: 0.0896][DIV: 0.1321][GRAD: 0.1838][VORT: 0.2461][Total: 0.6516]	4.7+3.1s
[7200/8000]	[L1: 0.0900][DIV: 0.1326][GRAD: 0.1846][VORT: 0.2472][Total: 0.6544]	4.7+3.1s
[8000/8000]	[L1: 0.0906][DIV: 0.1333][GRAD: 0.1858][VORT: 0.2492][Total: 0.6588]	4.8+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.083646	vorticity_error: 0.801295	mean_abs_divergence: 0.142414
[DIV2K x2]	rel_l2_error: 0.070960	vorticity_error: 0.923385	mean_abs_divergence: 0.074182
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048803	vorticity_error: 0.989281	mean_abs_divergence: 0.035936
Forward: 15.37s

Saving...
Total: 15.69s

[Epoch 487]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0954][DIV: 0.1398][GRAD: 0.1959][VORT: 0.2623][Total: 0.6934]	5.0+16.6s
[1600/8000]	[L1: 0.0962][DIV: 0.1403][GRAD: 0.1974][VORT: 0.2621][Total: 0.6961]	4.8+3.0s
[2400/8000]	[L1: 0.0946][DIV: 0.1378][GRAD: 0.1940][VORT: 0.2578][Total: 0.6841]	4.7+3.1s
[3200/8000]	[L1: 0.0954][DIV: 0.1390][GRAD: 0.1956][VORT: 0.2596][Total: 0.6895]	4.8+3.1s
[4000/8000]	[L1: 0.0938][DIV: 0.1371][GRAD: 0.1924][VORT: 0.2547][Total: 0.6779]	4.8+3.1s
[4800/8000]	[L1: 0.0933][DIV: 0.1366][GRAD: 0.1910][VORT: 0.2520][Total: 0.6729]	4.8+3.1s
[5600/8000]	[L1: 0.0923][DIV: 0.1355][GRAD: 0.1889][VORT: 0.2498][Total: 0.6665]	4.8+3.1s
[6400/8000]	[L1: 0.0910][DIV: 0.1342][GRAD: 0.1863][VORT: 0.2457][Total: 0.6571]	4.9+3.0s
[7200/8000]	[L1: 0.0908][DIV: 0.1340][GRAD: 0.1858][VORT: 0.2457][Total: 0.6563]	4.8+3.1s
[8000/8000]	[L1: 0.0905][DIV: 0.1337][GRAD: 0.1854][VORT: 0.2453][Total: 0.6549]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.073776	vorticity_error: 0.680194	mean_abs_divergence: 0.099640
[DIV2K x2]	rel_l2_error: 0.051936	vorticity_error: 0.847560	mean_abs_divergence: 0.051614
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.047334	vorticity_error: 0.859914	mean_abs_divergence: 0.025262
Forward: 15.24s

Saving...
Total: 15.57s

[Epoch 488]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0823][DIV: 0.1243][GRAD: 0.1687][VORT: 0.2233][Total: 0.5985]	5.1+16.5s
[1600/8000]	[L1: 0.0877][DIV: 0.1305][GRAD: 0.1799][VORT: 0.2401][Total: 0.6382]	4.7+3.1s
[2400/8000]	[L1: 0.0883][DIV: 0.1307][GRAD: 0.1808][VORT: 0.2407][Total: 0.6405]	4.7+3.1s
[3200/8000]	[L1: 0.0864][DIV: 0.1282][GRAD: 0.1767][VORT: 0.2348][Total: 0.6260]	4.7+3.1s
[4000/8000]	[L1: 0.0866][DIV: 0.1289][GRAD: 0.1770][VORT: 0.2346][Total: 0.6271]	4.8+3.1s
[4800/8000]	[L1: 0.0860][DIV: 0.1276][GRAD: 0.1757][VORT: 0.2329][Total: 0.6222]	4.8+3.1s
[5600/8000]	[L1: 0.0862][DIV: 0.1279][GRAD: 0.1764][VORT: 0.2345][Total: 0.6250]	4.8+3.1s
[6400/8000]	[L1: 0.0870][DIV: 0.1291][GRAD: 0.1781][VORT: 0.2365][Total: 0.6308]	4.7+3.1s
[7200/8000]	[L1: 0.0867][DIV: 0.1288][GRAD: 0.1775][VORT: 0.2364][Total: 0.6293]	4.8+3.1s
[8000/8000]	[L1: 0.0871][DIV: 0.1292][GRAD: 0.1783][VORT: 0.2371][Total: 0.6318]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.082040	vorticity_error: 0.970428	mean_abs_divergence: 0.118547
[DIV2K x2]	rel_l2_error: 0.066604	vorticity_error: 1.061032	mean_abs_divergence: 0.062098
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043837	vorticity_error: 0.782520	mean_abs_divergence: 0.030380
Forward: 15.27s

Saving...
Total: 15.60s

[Epoch 489]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0868][DIV: 0.1270][GRAD: 0.1780][VORT: 0.2352][Total: 0.6270]	5.1+16.6s
[1600/8000]	[L1: 0.0908][DIV: 0.1327][GRAD: 0.1865][VORT: 0.2501][Total: 0.6600]	4.8+3.1s
[2400/8000]	[L1: 0.0925][DIV: 0.1352][GRAD: 0.1897][VORT: 0.2531][Total: 0.6706]	4.8+3.1s
[3200/8000]	[L1: 0.0911][DIV: 0.1338][GRAD: 0.1870][VORT: 0.2509][Total: 0.6629]	4.8+3.0s
[4000/8000]	[L1: 0.0910][DIV: 0.1338][GRAD: 0.1867][VORT: 0.2497][Total: 0.6613]	4.8+3.1s
[4800/8000]	[L1: 0.0906][DIV: 0.1337][GRAD: 0.1857][VORT: 0.2474][Total: 0.6574]	4.8+3.1s
[5600/8000]	[L1: 0.0893][DIV: 0.1320][GRAD: 0.1831][VORT: 0.2437][Total: 0.6481]	4.8+3.1s
[6400/8000]	[L1: 0.0897][DIV: 0.1324][GRAD: 0.1837][VORT: 0.2435][Total: 0.6493]	4.8+3.1s
[7200/8000]	[L1: 0.0888][DIV: 0.1312][GRAD: 0.1818][VORT: 0.2414][Total: 0.6432]	4.8+3.1s
[8000/8000]	[L1: 0.0881][DIV: 0.1304][GRAD: 0.1806][VORT: 0.2410][Total: 0.6400]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.101645	vorticity_error: 0.953438	mean_abs_divergence: 0.148698
[DIV2K x2]	rel_l2_error: 0.077745	vorticity_error: 0.926282	mean_abs_divergence: 0.077820
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048709	vorticity_error: 0.755548	mean_abs_divergence: 0.037641
Forward: 15.33s

Saving...
Total: 15.65s

[Epoch 490]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0834][DIV: 0.1223][GRAD: 0.1702][VORT: 0.2336][Total: 0.6094]	5.0+16.7s
[1600/8000]	[L1: 0.0853][DIV: 0.1260][GRAD: 0.1744][VORT: 0.2367][Total: 0.6224]	4.8+3.0s
[2400/8000]	[L1: 0.0850][DIV: 0.1272][GRAD: 0.1742][VORT: 0.2345][Total: 0.6209]	4.8+3.1s
[3200/8000]	[L1: 0.0851][DIV: 0.1272][GRAD: 0.1739][VORT: 0.2331][Total: 0.6193]	4.8+3.1s
[4000/8000]	[L1: 0.0847][DIV: 0.1265][GRAD: 0.1731][VORT: 0.2331][Total: 0.6175]	4.8+3.0s
[4800/8000]	[L1: 0.0845][DIV: 0.1265][GRAD: 0.1727][VORT: 0.2317][Total: 0.6154]	4.8+3.1s
[5600/8000]	[L1: 0.0855][DIV: 0.1279][GRAD: 0.1748][VORT: 0.2344][Total: 0.6225]	4.8+3.1s
[6400/8000]	[L1: 0.0860][DIV: 0.1286][GRAD: 0.1757][VORT: 0.2350][Total: 0.6252]	4.8+3.1s
[7200/8000]	[L1: 0.0858][DIV: 0.1284][GRAD: 0.1754][VORT: 0.2359][Total: 0.6254]	4.8+3.0s
[8000/8000]	[L1: 0.0860][DIV: 0.1288][GRAD: 0.1758][VORT: 0.2363][Total: 0.6268]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.075372	vorticity_error: 0.890879	mean_abs_divergence: 0.126608
[DIV2K x2]	rel_l2_error: 0.058974	vorticity_error: 0.763095	mean_abs_divergence: 0.066702
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043703	vorticity_error: 0.637121	mean_abs_divergence: 0.032826
Forward: 15.35s

Saving...
Total: 15.73s

[Epoch 491]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0925][DIV: 0.1387][GRAD: 0.1887][VORT: 0.2431][Total: 0.6629]	5.0+16.6s
[1600/8000]	[L1: 0.0891][DIV: 0.1338][GRAD: 0.1818][VORT: 0.2359][Total: 0.6406]	4.8+3.0s
[2400/8000]	[L1: 0.0887][DIV: 0.1325][GRAD: 0.1814][VORT: 0.2389][Total: 0.6415]	4.8+3.1s
[3200/8000]	[L1: 0.0891][DIV: 0.1322][GRAD: 0.1820][VORT: 0.2400][Total: 0.6433]	4.8+3.1s
[4000/8000]	[L1: 0.0885][DIV: 0.1319][GRAD: 0.1811][VORT: 0.2386][Total: 0.6401]	4.8+3.1s
[4800/8000]	[L1: 0.0874][DIV: 0.1301][GRAD: 0.1788][VORT: 0.2364][Total: 0.6327]	4.8+3.1s
[5600/8000]	[L1: 0.0882][DIV: 0.1310][GRAD: 0.1805][VORT: 0.2385][Total: 0.6382]	4.8+3.1s
[6400/8000]	[L1: 0.0885][DIV: 0.1315][GRAD: 0.1810][VORT: 0.2396][Total: 0.6406]	4.8+3.1s
[7200/8000]	[L1: 0.0876][DIV: 0.1302][GRAD: 0.1792][VORT: 0.2377][Total: 0.6347]	4.8+3.1s
[8000/8000]	[L1: 0.0874][DIV: 0.1299][GRAD: 0.1789][VORT: 0.2376][Total: 0.6338]	4.8+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.072804	vorticity_error: 0.778267	mean_abs_divergence: 0.119686
[DIV2K x2]	rel_l2_error: 0.060312	vorticity_error: 0.801911	mean_abs_divergence: 0.064673
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042475	vorticity_error: 0.613961	mean_abs_divergence: 0.032281
Forward: 15.30s

Saving...
Total: 15.62s

[Epoch 492]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0940][DIV: 0.1379][GRAD: 0.1943][VORT: 0.2619][Total: 0.6881]	5.1+16.6s
[1600/8000]	[L1: 0.0909][DIV: 0.1336][GRAD: 0.1871][VORT: 0.2534][Total: 0.6650]	4.8+3.1s
[2400/8000]	[L1: 0.0901][DIV: 0.1329][GRAD: 0.1848][VORT: 0.2474][Total: 0.6552]	4.8+3.1s
[3200/8000]	[L1: 0.0904][DIV: 0.1330][GRAD: 0.1854][VORT: 0.2491][Total: 0.6579]	4.8+3.1s
[4000/8000]	[L1: 0.0892][DIV: 0.1318][GRAD: 0.1832][VORT: 0.2490][Total: 0.6532]	4.8+3.1s
[4800/8000]	[L1: 0.0897][DIV: 0.1323][GRAD: 0.1840][VORT: 0.2489][Total: 0.6549]	4.8+3.0s
[5600/8000]	[L1: 0.0890][DIV: 0.1313][GRAD: 0.1827][VORT: 0.2462][Total: 0.6492]	4.8+3.0s
[6400/8000]	[L1: 0.0902][DIV: 0.1327][GRAD: 0.1850][VORT: 0.2488][Total: 0.6566]	4.8+3.0s
[7200/8000]	[L1: 0.0893][DIV: 0.1316][GRAD: 0.1831][VORT: 0.2455][Total: 0.6494]	4.8+3.1s
[8000/8000]	[L1: 0.0893][DIV: 0.1313][GRAD: 0.1830][VORT: 0.2458][Total: 0.6495]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.082146	vorticity_error: 2.993191	mean_abs_divergence: 0.123630
[DIV2K x2]	rel_l2_error: 0.067710	vorticity_error: 0.778591	mean_abs_divergence: 0.063802
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.050361	vorticity_error: 0.732919	mean_abs_divergence: 0.031011
Forward: 15.35s

Saving...
Total: 15.67s

[Epoch 493]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0941][DIV: 0.1372][GRAD: 0.1927][VORT: 0.2575][Total: 0.6814]	5.1+16.6s
[1600/8000]	[L1: 0.0913][DIV: 0.1331][GRAD: 0.1880][VORT: 0.2547][Total: 0.6671]	4.8+3.1s
[2400/8000]	[L1: 0.0881][DIV: 0.1294][GRAD: 0.1809][VORT: 0.2451][Total: 0.6435]	4.8+3.1s
[3200/8000]	[L1: 0.0887][DIV: 0.1307][GRAD: 0.1822][VORT: 0.2457][Total: 0.6473]	4.7+3.1s
[4000/8000]	[L1: 0.0880][DIV: 0.1300][GRAD: 0.1803][VORT: 0.2412][Total: 0.6394]	4.8+3.1s
[4800/8000]	[L1: 0.0889][DIV: 0.1310][GRAD: 0.1823][VORT: 0.2435][Total: 0.6458]	4.8+3.1s
[5600/8000]	[L1: 0.0895][DIV: 0.1318][GRAD: 0.1833][VORT: 0.2441][Total: 0.6487]	4.8+3.0s
[6400/8000]	[L1: 0.0879][DIV: 0.1298][GRAD: 0.1803][VORT: 0.2407][Total: 0.6388]	4.8+3.1s
[7200/8000]	[L1: 0.0877][DIV: 0.1296][GRAD: 0.1796][VORT: 0.2397][Total: 0.6366]	4.8+3.1s
[8000/8000]	[L1: 0.0869][DIV: 0.1288][GRAD: 0.1780][VORT: 0.2375][Total: 0.6312]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.082003	vorticity_error: 0.854599	mean_abs_divergence: 0.111835
[DIV2K x2]	rel_l2_error: 0.062634	vorticity_error: 0.834766	mean_abs_divergence: 0.060062
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042390	vorticity_error: 0.677930	mean_abs_divergence: 0.029713
Forward: 15.34s

Saving...
Total: 15.65s

[Epoch 494]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0879][DIV: 0.1284][GRAD: 0.1806][VORT: 0.2476][Total: 0.6445]	5.1+16.6s
[1600/8000]	[L1: 0.0870][DIV: 0.1284][GRAD: 0.1786][VORT: 0.2453][Total: 0.6392]	4.8+3.0s
[2400/8000]	[L1: 0.0886][DIV: 0.1305][GRAD: 0.1817][VORT: 0.2484][Total: 0.6491]	4.8+3.1s
[3200/8000]	[L1: 0.0887][DIV: 0.1307][GRAD: 0.1819][VORT: 0.2468][Total: 0.6480]	4.8+3.0s
[4000/8000]	[L1: 0.0903][DIV: 0.1328][GRAD: 0.1853][VORT: 0.2502][Total: 0.6586]	4.8+3.1s
[4800/8000]	[L1: 0.0908][DIV: 0.1333][GRAD: 0.1863][VORT: 0.2503][Total: 0.6607]	4.8+3.1s
[5600/8000]	[L1: 0.0907][DIV: 0.1334][GRAD: 0.1861][VORT: 0.2497][Total: 0.6599]	4.8+3.1s
[6400/8000]	[L1: 0.0898][DIV: 0.1322][GRAD: 0.1842][VORT: 0.2477][Total: 0.6538]	4.8+3.1s
[7200/8000]	[L1: 0.0891][DIV: 0.1315][GRAD: 0.1827][VORT: 0.2457][Total: 0.6490]	4.7+3.1s
[8000/8000]	[L1: 0.0895][DIV: 0.1320][GRAD: 0.1836][VORT: 0.2462][Total: 0.6514]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.094024	vorticity_error: 0.989116	mean_abs_divergence: 0.127797
[DIV2K x2]	rel_l2_error: 0.076673	vorticity_error: 0.940001	mean_abs_divergence: 0.067843
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.049693	vorticity_error: 0.789389	mean_abs_divergence: 0.033740
Forward: 15.40s

Saving...
Total: 15.73s

[Epoch 495]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0776][DIV: 0.1155][GRAD: 0.1594][VORT: 0.2232][Total: 0.5757]	5.0+16.6s
[1600/8000]	[L1: 0.0859][DIV: 0.1270][GRAD: 0.1763][VORT: 0.2441][Total: 0.6333]	4.9+3.0s
[2400/8000]	[L1: 0.0863][DIV: 0.1276][GRAD: 0.1768][VORT: 0.2407][Total: 0.6313]	4.8+3.1s
[3200/8000]	[L1: 0.0861][DIV: 0.1279][GRAD: 0.1765][VORT: 0.2390][Total: 0.6295]	4.8+3.0s
[4000/8000]	[L1: 0.0895][DIV: 0.1323][GRAD: 0.1835][VORT: 0.2466][Total: 0.6518]	4.8+3.1s
[4800/8000]	[L1: 0.0879][DIV: 0.1304][GRAD: 0.1804][VORT: 0.2420][Total: 0.6406]	4.8+3.0s
[5600/8000]	[L1: 0.0882][DIV: 0.1308][GRAD: 0.1811][VORT: 0.2440][Total: 0.6440]	4.8+3.1s
[6400/8000]	[L1: 0.0893][DIV: 0.1323][GRAD: 0.1835][VORT: 0.2466][Total: 0.6518]	4.8+3.0s
[7200/8000]	[L1: 0.0889][DIV: 0.1319][GRAD: 0.1827][VORT: 0.2459][Total: 0.6494]	4.7+3.1s
[8000/8000]	[L1: 0.0888][DIV: 0.1317][GRAD: 0.1821][VORT: 0.2442][Total: 0.6468]	4.8+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.077590	vorticity_error: 0.729710	mean_abs_divergence: 0.109910
[DIV2K x2]	rel_l2_error: 0.068849	vorticity_error: 0.728022	mean_abs_divergence: 0.056044
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.051530	vorticity_error: 0.597968	mean_abs_divergence: 0.027353
Forward: 15.35s

Saving...
Total: 15.72s

[Epoch 496]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0830][DIV: 0.1231][GRAD: 0.1705][VORT: 0.2317][Total: 0.6083]	5.0+16.6s
[1600/8000]	[L1: 0.0866][DIV: 0.1275][GRAD: 0.1777][VORT: 0.2396][Total: 0.6314]	4.8+3.0s
[2400/8000]	[L1: 0.0877][DIV: 0.1291][GRAD: 0.1801][VORT: 0.2431][Total: 0.6400]	4.8+3.1s
[3200/8000]	[L1: 0.0868][DIV: 0.1283][GRAD: 0.1783][VORT: 0.2421][Total: 0.6355]	4.8+3.0s
[4000/8000]	[L1: 0.0871][DIV: 0.1290][GRAD: 0.1789][VORT: 0.2426][Total: 0.6376]	4.8+3.1s
[4800/8000]	[L1: 0.0868][DIV: 0.1288][GRAD: 0.1783][VORT: 0.2410][Total: 0.6348]	4.8+3.0s
[5600/8000]	[L1: 0.0868][DIV: 0.1288][GRAD: 0.1782][VORT: 0.2402][Total: 0.6340]	4.8+3.1s
[6400/8000]	[L1: 0.0878][DIV: 0.1300][GRAD: 0.1803][VORT: 0.2426][Total: 0.6406]	4.8+3.1s
[7200/8000]	[L1: 0.0873][DIV: 0.1295][GRAD: 0.1793][VORT: 0.2407][Total: 0.6368]	4.8+3.0s
[8000/8000]	[L1: 0.0873][DIV: 0.1296][GRAD: 0.1792][VORT: 0.2404][Total: 0.6365]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.093815	vorticity_error: 0.987080	mean_abs_divergence: 0.114950
[DIV2K x2]	rel_l2_error: 0.065713	vorticity_error: 1.445301	mean_abs_divergence: 0.061624
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.050908	vorticity_error: 0.946652	mean_abs_divergence: 0.030216
Forward: 15.31s

Saving...
Total: 15.64s

[Epoch 497]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0873][DIV: 0.1324][GRAD: 0.1783][VORT: 0.2360][Total: 0.6339]	5.1+16.6s
[1600/8000]	[L1: 0.0877][DIV: 0.1320][GRAD: 0.1797][VORT: 0.2407][Total: 0.6402]	4.8+3.1s
[2400/8000]	[L1: 0.0882][DIV: 0.1321][GRAD: 0.1806][VORT: 0.2418][Total: 0.6428]	4.8+3.1s
[3200/8000]	[L1: 0.0900][DIV: 0.1342][GRAD: 0.1842][VORT: 0.2461][Total: 0.6544]	4.8+3.1s
[4000/8000]	[L1: 0.0891][DIV: 0.1330][GRAD: 0.1827][VORT: 0.2439][Total: 0.6486]	4.8+3.1s
[4800/8000]	[L1: 0.0890][DIV: 0.1326][GRAD: 0.1825][VORT: 0.2437][Total: 0.6478]	4.7+3.1s
[5600/8000]	[L1: 0.0882][DIV: 0.1315][GRAD: 0.1809][VORT: 0.2431][Total: 0.6438]	4.8+3.1s
[6400/8000]	[L1: 0.0887][DIV: 0.1320][GRAD: 0.1819][VORT: 0.2438][Total: 0.6463]	4.8+3.1s
[7200/8000]	[L1: 0.0893][DIV: 0.1327][GRAD: 0.1831][VORT: 0.2449][Total: 0.6500]	4.8+3.1s
[8000/8000]	[L1: 0.0894][DIV: 0.1326][GRAD: 0.1833][VORT: 0.2460][Total: 0.6513]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.071805	vorticity_error: 0.673940	mean_abs_divergence: 0.115634
[DIV2K x2]	rel_l2_error: 0.061807	vorticity_error: 0.696807	mean_abs_divergence: 0.060325
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.041717	vorticity_error: 0.555606	mean_abs_divergence: 0.029589
Forward: 15.42s

Saving...
Total: 15.75s

[Epoch 498]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0908][DIV: 0.1347][GRAD: 0.1870][VORT: 0.2544][Total: 0.6668]	5.0+16.7s
[1600/8000]	[L1: 0.0936][DIV: 0.1375][GRAD: 0.1925][VORT: 0.2602][Total: 0.6838]	4.7+3.1s
[2400/8000]	[L1: 0.0925][DIV: 0.1359][GRAD: 0.1900][VORT: 0.2538][Total: 0.6722]	4.8+3.0s
[3200/8000]	[L1: 0.0914][DIV: 0.1350][GRAD: 0.1879][VORT: 0.2512][Total: 0.6655]	4.7+3.1s
[4000/8000]	[L1: 0.0913][DIV: 0.1347][GRAD: 0.1874][VORT: 0.2507][Total: 0.6641]	4.8+3.0s
[4800/8000]	[L1: 0.0905][DIV: 0.1336][GRAD: 0.1857][VORT: 0.2485][Total: 0.6584]	4.7+3.1s
[5600/8000]	[L1: 0.0900][DIV: 0.1327][GRAD: 0.1845][VORT: 0.2470][Total: 0.6542]	4.8+3.0s
[6400/8000]	[L1: 0.0898][DIV: 0.1324][GRAD: 0.1843][VORT: 0.2478][Total: 0.6543]	4.7+3.1s
[7200/8000]	[L1: 0.0889][DIV: 0.1312][GRAD: 0.1825][VORT: 0.2453][Total: 0.6480]	4.8+3.0s
[8000/8000]	[L1: 0.0889][DIV: 0.1310][GRAD: 0.1825][VORT: 0.2449][Total: 0.6473]	4.8+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.081649	vorticity_error: 0.588800	mean_abs_divergence: 0.142585
[DIV2K x2]	rel_l2_error: 0.059648	vorticity_error: 0.520711	mean_abs_divergence: 0.076704
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.040551	vorticity_error: 0.459430	mean_abs_divergence: 0.037757
Forward: 15.38s

Saving...
Total: 15.71s

[Epoch 499]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0877][DIV: 0.1301][GRAD: 0.1799][VORT: 0.2380][Total: 0.6357]	5.1+16.6s
[1600/8000]	[L1: 0.0870][DIV: 0.1297][GRAD: 0.1779][VORT: 0.2351][Total: 0.6298]	4.8+3.1s
[2400/8000]	[L1: 0.0871][DIV: 0.1293][GRAD: 0.1785][VORT: 0.2384][Total: 0.6333]	4.8+3.0s
[3200/8000]	[L1: 0.0882][DIV: 0.1308][GRAD: 0.1806][VORT: 0.2421][Total: 0.6417]	4.8+3.0s
[4000/8000]	[L1: 0.0882][DIV: 0.1312][GRAD: 0.1807][VORT: 0.2413][Total: 0.6414]	4.7+3.1s
[4800/8000]	[L1: 0.0895][DIV: 0.1328][GRAD: 0.1833][VORT: 0.2443][Total: 0.6498]	4.8+3.1s
[5600/8000]	[L1: 0.0890][DIV: 0.1321][GRAD: 0.1823][VORT: 0.2438][Total: 0.6472]	4.8+3.1s
[6400/8000]	[L1: 0.0873][DIV: 0.1299][GRAD: 0.1788][VORT: 0.2395][Total: 0.6354]	4.8+3.1s
[7200/8000]	[L1: 0.0880][DIV: 0.1310][GRAD: 0.1803][VORT: 0.2418][Total: 0.6411]	4.7+3.1s
[8000/8000]	[L1: 0.0879][DIV: 0.1306][GRAD: 0.1802][VORT: 0.2423][Total: 0.6410]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.079765	vorticity_error: 2.184303	mean_abs_divergence: 0.117014
[DIV2K x2]	rel_l2_error: 0.065012	vorticity_error: 0.693293	mean_abs_divergence: 0.060061
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.051336	vorticity_error: 0.801318	mean_abs_divergence: 0.028934
Forward: 15.35s

Saving...
Total: 15.67s

[Epoch 500]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0812][DIV: 0.1228][GRAD: 0.1667][VORT: 0.2254][Total: 0.5961]	5.0+16.7s
[1600/8000]	[L1: 0.0871][DIV: 0.1304][GRAD: 0.1780][VORT: 0.2392][Total: 0.6347]	4.8+3.0s
[2400/8000]	[L1: 0.0891][DIV: 0.1328][GRAD: 0.1822][VORT: 0.2445][Total: 0.6486]	4.8+3.0s
[3200/8000]	[L1: 0.0895][DIV: 0.1325][GRAD: 0.1827][VORT: 0.2430][Total: 0.6476]	4.8+3.0s
[4000/8000]	[L1: 0.0894][DIV: 0.1321][GRAD: 0.1826][VORT: 0.2434][Total: 0.6473]	4.8+3.1s
[4800/8000]	[L1: 0.0891][DIV: 0.1315][GRAD: 0.1823][VORT: 0.2440][Total: 0.6469]	4.8+3.1s
[5600/8000]	[L1: 0.0892][DIV: 0.1314][GRAD: 0.1826][VORT: 0.2445][Total: 0.6478]	4.7+3.1s
[6400/8000]	[L1: 0.0878][DIV: 0.1296][GRAD: 0.1798][VORT: 0.2409][Total: 0.6381]	4.8+3.1s
[7200/8000]	[L1: 0.0882][DIV: 0.1301][GRAD: 0.1806][VORT: 0.2420][Total: 0.6410]	4.8+3.1s
[8000/8000]	[L1: 0.0892][DIV: 0.1313][GRAD: 0.1826][VORT: 0.2449][Total: 0.6479]	4.8+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.100331	vorticity_error: 0.895593	mean_abs_divergence: 0.116494
[DIV2K x2]	rel_l2_error: 0.065893	vorticity_error: 1.259538	mean_abs_divergence: 0.061732
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.065008	vorticity_error: 1.007292	mean_abs_divergence: 0.030382
Forward: 15.18s

Saving...
Total: 15.50s

[Epoch 501]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0922][DIV: 0.1342][GRAD: 0.1891][VORT: 0.2475][Total: 0.6630]	5.0+16.4s
[1600/8000]	[L1: 0.0953][DIV: 0.1387][GRAD: 0.1952][VORT: 0.2550][Total: 0.6842]	4.8+3.0s
[2400/8000]	[L1: 0.0946][DIV: 0.1386][GRAD: 0.1939][VORT: 0.2544][Total: 0.6816]	4.8+3.0s
[3200/8000]	[L1: 0.0942][DIV: 0.1377][GRAD: 0.1933][VORT: 0.2544][Total: 0.6795]	4.8+3.0s
[4000/8000]	[L1: 0.0925][DIV: 0.1357][GRAD: 0.1897][VORT: 0.2506][Total: 0.6685]	4.8+3.1s
[4800/8000]	[L1: 0.0924][DIV: 0.1357][GRAD: 0.1896][VORT: 0.2495][Total: 0.6673]	4.8+3.0s
[5600/8000]	[L1: 0.0921][DIV: 0.1355][GRAD: 0.1889][VORT: 0.2487][Total: 0.6652]	4.8+3.1s
[6400/8000]	[L1: 0.0915][DIV: 0.1348][GRAD: 0.1874][VORT: 0.2472][Total: 0.6609]	4.7+3.1s
[7200/8000]	[L1: 0.0907][DIV: 0.1337][GRAD: 0.1859][VORT: 0.2456][Total: 0.6559]	4.9+3.0s
[8000/8000]	[L1: 0.0900][DIV: 0.1330][GRAD: 0.1846][VORT: 0.2447][Total: 0.6523]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.096190	vorticity_error: 0.976540	mean_abs_divergence: 0.132227
[DIV2K x2]	rel_l2_error: 0.077087	vorticity_error: 0.909708	mean_abs_divergence: 0.071143
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.050343	vorticity_error: 0.678549	mean_abs_divergence: 0.035886
Forward: 15.26s

Saving...
Total: 15.59s

[Epoch 502]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0867][DIV: 0.1311][GRAD: 0.1765][VORT: 0.2315][Total: 0.6258]	5.2+16.5s
[1600/8000]	[L1: 0.0887][DIV: 0.1320][GRAD: 0.1810][VORT: 0.2393][Total: 0.6410]	4.8+3.1s
[2400/8000]	[L1: 0.0896][DIV: 0.1325][GRAD: 0.1831][VORT: 0.2424][Total: 0.6476]	4.8+3.1s
[3200/8000]	[L1: 0.0871][DIV: 0.1295][GRAD: 0.1781][VORT: 0.2368][Total: 0.6314]	4.7+3.1s
[4000/8000]	[L1: 0.0879][DIV: 0.1311][GRAD: 0.1799][VORT: 0.2378][Total: 0.6368]	4.8+3.1s
[4800/8000]	[L1: 0.0872][DIV: 0.1302][GRAD: 0.1786][VORT: 0.2381][Total: 0.6341]	4.8+3.0s
[5600/8000]	[L1: 0.0872][DIV: 0.1299][GRAD: 0.1787][VORT: 0.2383][Total: 0.6341]	4.8+3.1s
[6400/8000]	[L1: 0.0871][DIV: 0.1295][GRAD: 0.1785][VORT: 0.2395][Total: 0.6346]	4.7+3.1s
[7200/8000]	[L1: 0.0883][DIV: 0.1309][GRAD: 0.1812][VORT: 0.2432][Total: 0.6436]	4.8+3.0s
[8000/8000]	[L1: 0.0875][DIV: 0.1298][GRAD: 0.1795][VORT: 0.2409][Total: 0.6378]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.081489	vorticity_error: 2.670089	mean_abs_divergence: 0.117345
[DIV2K x2]	rel_l2_error: 0.062179	vorticity_error: 1.181276	mean_abs_divergence: 0.062584
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042991	vorticity_error: 1.074690	mean_abs_divergence: 0.030693
Forward: 15.39s

Saving...
Total: 15.72s

[Epoch 503]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0876][DIV: 0.1291][GRAD: 0.1783][VORT: 0.2393][Total: 0.6342]	5.0+16.6s
[1600/8000]	[L1: 0.0877][DIV: 0.1297][GRAD: 0.1793][VORT: 0.2429][Total: 0.6396]	4.8+3.0s
[2400/8000]	[L1: 0.0848][DIV: 0.1264][GRAD: 0.1734][VORT: 0.2338][Total: 0.6183]	4.7+3.1s
[3200/8000]	[L1: 0.0846][DIV: 0.1262][GRAD: 0.1729][VORT: 0.2326][Total: 0.6163]	4.8+3.0s
[4000/8000]	[L1: 0.0858][DIV: 0.1278][GRAD: 0.1754][VORT: 0.2351][Total: 0.6240]	4.7+3.1s
[4800/8000]	[L1: 0.0852][DIV: 0.1269][GRAD: 0.1744][VORT: 0.2347][Total: 0.6212]	4.8+3.0s
[5600/8000]	[L1: 0.0857][DIV: 0.1276][GRAD: 0.1757][VORT: 0.2366][Total: 0.6257]	4.8+3.1s
[6400/8000]	[L1: 0.0854][DIV: 0.1272][GRAD: 0.1750][VORT: 0.2353][Total: 0.6228]	4.8+3.1s
[7200/8000]	[L1: 0.0855][DIV: 0.1273][GRAD: 0.1750][VORT: 0.2352][Total: 0.6230]	4.8+3.1s
[8000/8000]	[L1: 0.0856][DIV: 0.1274][GRAD: 0.1752][VORT: 0.2350][Total: 0.6233]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.088641	vorticity_error: 0.842361	mean_abs_divergence: 0.129138
[DIV2K x2]	rel_l2_error: 0.068789	vorticity_error: 1.010737	mean_abs_divergence: 0.069013
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048914	vorticity_error: 0.763656	mean_abs_divergence: 0.034323
Forward: 15.50s

Saving...
Total: 15.82s

[Epoch 504]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0840][DIV: 0.1246][GRAD: 0.1725][VORT: 0.2353][Total: 0.6164]	5.1+16.6s
[1600/8000]	[L1: 0.0828][DIV: 0.1237][GRAD: 0.1700][VORT: 0.2314][Total: 0.6079]	4.9+3.0s
[2400/8000]	[L1: 0.0851][DIV: 0.1260][GRAD: 0.1744][VORT: 0.2351][Total: 0.6206]	4.7+3.1s
[3200/8000]	[L1: 0.0868][DIV: 0.1280][GRAD: 0.1781][VORT: 0.2398][Total: 0.6327]	4.8+3.1s
[4000/8000]	[L1: 0.0863][DIV: 0.1275][GRAD: 0.1770][VORT: 0.2381][Total: 0.6289]	4.7+3.1s
[4800/8000]	[L1: 0.0869][DIV: 0.1282][GRAD: 0.1783][VORT: 0.2400][Total: 0.6334]	4.8+3.0s
[5600/8000]	[L1: 0.0876][DIV: 0.1293][GRAD: 0.1795][VORT: 0.2401][Total: 0.6365]	4.7+3.1s
[6400/8000]	[L1: 0.0884][DIV: 0.1301][GRAD: 0.1811][VORT: 0.2423][Total: 0.6419]	4.8+3.0s
[7200/8000]	[L1: 0.0888][DIV: 0.1305][GRAD: 0.1819][VORT: 0.2443][Total: 0.6454]	4.8+3.0s
[8000/8000]	[L1: 0.0887][DIV: 0.1306][GRAD: 0.1817][VORT: 0.2437][Total: 0.6447]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.076960	vorticity_error: 0.526511	mean_abs_divergence: 0.130785
[DIV2K x2]	rel_l2_error: 0.055989	vorticity_error: 0.483667	mean_abs_divergence: 0.071346
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.038887	vorticity_error: 0.416513	mean_abs_divergence: 0.035614
Forward: 15.35s

Saving...
Total: 15.74s

[Epoch 505]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0901][DIV: 0.1323][GRAD: 0.1845][VORT: 0.2514][Total: 0.6583]	5.1+16.5s
[1600/8000]	[L1: 0.0936][DIV: 0.1368][GRAD: 0.1922][VORT: 0.2606][Total: 0.6833]	4.8+3.1s
[2400/8000]	[L1: 0.0882][DIV: 0.1305][GRAD: 0.1808][VORT: 0.2433][Total: 0.6428]	4.8+3.0s
[3200/8000]	[L1: 0.0876][DIV: 0.1299][GRAD: 0.1794][VORT: 0.2404][Total: 0.6374]	4.8+3.1s
[4000/8000]	[L1: 0.0883][DIV: 0.1304][GRAD: 0.1810][VORT: 0.2423][Total: 0.6419]	4.8+3.1s
[4800/8000]	[L1: 0.0879][DIV: 0.1299][GRAD: 0.1802][VORT: 0.2419][Total: 0.6399]	4.7+3.1s
[5600/8000]	[L1: 0.0876][DIV: 0.1297][GRAD: 0.1797][VORT: 0.2421][Total: 0.6392]	4.8+3.0s
[6400/8000]	[L1: 0.0879][DIV: 0.1299][GRAD: 0.1801][VORT: 0.2417][Total: 0.6396]	4.8+3.1s
[7200/8000]	[L1: 0.0877][DIV: 0.1295][GRAD: 0.1798][VORT: 0.2413][Total: 0.6383]	4.8+3.0s
[8000/8000]	[L1: 0.0876][DIV: 0.1294][GRAD: 0.1797][VORT: 0.2416][Total: 0.6383]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.122376	vorticity_error: 0.947774	mean_abs_divergence: 0.152869
[DIV2K x2]	rel_l2_error: 0.079830	vorticity_error: 0.897746	mean_abs_divergence: 0.081162
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.059156	vorticity_error: 0.799542	mean_abs_divergence: 0.039388
Forward: 15.40s

Saving...
Total: 15.71s

[Epoch 506]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0897][DIV: 0.1334][GRAD: 0.1835][VORT: 0.2430][Total: 0.6496]	5.0+16.6s
[1600/8000]	[L1: 0.0880][DIV: 0.1314][GRAD: 0.1805][VORT: 0.2418][Total: 0.6416]	4.8+3.1s
[2400/8000]	[L1: 0.0896][DIV: 0.1325][GRAD: 0.1844][VORT: 0.2492][Total: 0.6556]	4.8+3.1s
[3200/8000]	[L1: 0.0886][DIV: 0.1312][GRAD: 0.1822][VORT: 0.2461][Total: 0.6481]	4.7+3.1s
[4000/8000]	[L1: 0.0880][DIV: 0.1306][GRAD: 0.1809][VORT: 0.2446][Total: 0.6441]	4.8+3.0s
[4800/8000]	[L1: 0.0870][DIV: 0.1291][GRAD: 0.1787][VORT: 0.2431][Total: 0.6379]	4.8+3.1s
[5600/8000]	[L1: 0.0868][DIV: 0.1288][GRAD: 0.1784][VORT: 0.2433][Total: 0.6372]	4.9+3.0s
[6400/8000]	[L1: 0.0876][DIV: 0.1300][GRAD: 0.1801][VORT: 0.2441][Total: 0.6418]	4.8+3.1s
[7200/8000]	[L1: 0.0878][DIV: 0.1302][GRAD: 0.1804][VORT: 0.2441][Total: 0.6425]	4.8+3.0s
[8000/8000]	[L1: 0.0879][DIV: 0.1304][GRAD: 0.1805][VORT: 0.2437][Total: 0.6425]	4.8+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.062087	vorticity_error: 0.678562	mean_abs_divergence: 0.099699
[DIV2K x2]	rel_l2_error: 0.045219	vorticity_error: 0.768059	mean_abs_divergence: 0.051267
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.041246	vorticity_error: 0.689727	mean_abs_divergence: 0.024751
Forward: 15.48s

Saving...
Total: 15.80s

[Epoch 507]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0850][DIV: 0.1294][GRAD: 0.1729][VORT: 0.2276][Total: 0.6148]	5.0+16.7s
[1600/8000]	[L1: 0.0859][DIV: 0.1285][GRAD: 0.1763][VORT: 0.2395][Total: 0.6302]	4.7+3.1s
[2400/8000]	[L1: 0.0845][DIV: 0.1259][GRAD: 0.1739][VORT: 0.2381][Total: 0.6224]	4.8+3.1s
[3200/8000]	[L1: 0.0857][DIV: 0.1274][GRAD: 0.1764][VORT: 0.2405][Total: 0.6301]	4.8+3.0s
[4000/8000]	[L1: 0.0861][DIV: 0.1284][GRAD: 0.1768][VORT: 0.2394][Total: 0.6307]	4.8+3.1s
[4800/8000]	[L1: 0.0865][DIV: 0.1289][GRAD: 0.1778][VORT: 0.2403][Total: 0.6335]	4.7+3.1s
[5600/8000]	[L1: 0.0878][DIV: 0.1309][GRAD: 0.1804][VORT: 0.2429][Total: 0.6420]	4.8+3.1s
[6400/8000]	[L1: 0.0877][DIV: 0.1308][GRAD: 0.1802][VORT: 0.2421][Total: 0.6408]	4.8+3.1s
[7200/8000]	[L1: 0.0878][DIV: 0.1307][GRAD: 0.1803][VORT: 0.2425][Total: 0.6413]	4.7+3.1s
[8000/8000]	[L1: 0.0879][DIV: 0.1308][GRAD: 0.1802][VORT: 0.2430][Total: 0.6418]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.079595	vorticity_error: 0.619490	mean_abs_divergence: 0.097803
[DIV2K x2]	rel_l2_error: 0.065468	vorticity_error: 0.561882	mean_abs_divergence: 0.052134
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.047563	vorticity_error: 0.517836	mean_abs_divergence: 0.025856
Forward: 15.45s

Saving...
Total: 15.78s

[Epoch 508]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0903][DIV: 0.1325][GRAD: 0.1862][VORT: 0.2558][Total: 0.6649]	5.0+17.2s
[1600/8000]	[L1: 0.0898][DIV: 0.1326][GRAD: 0.1843][VORT: 0.2493][Total: 0.6560]	4.9+3.0s
[2400/8000]	[L1: 0.0884][DIV: 0.1304][GRAD: 0.1816][VORT: 0.2432][Total: 0.6435]	4.7+3.1s
[3200/8000]	[L1: 0.0870][DIV: 0.1283][GRAD: 0.1786][VORT: 0.2398][Total: 0.6336]	4.8+3.1s
[4000/8000]	[L1: 0.0886][DIV: 0.1303][GRAD: 0.1819][VORT: 0.2446][Total: 0.6454]	4.8+3.1s
[4800/8000]	[L1: 0.0894][DIV: 0.1313][GRAD: 0.1835][VORT: 0.2455][Total: 0.6497]	4.8+3.1s
[5600/8000]	[L1: 0.0890][DIV: 0.1308][GRAD: 0.1829][VORT: 0.2464][Total: 0.6491]	4.8+3.1s
[6400/8000]	[L1: 0.0879][DIV: 0.1294][GRAD: 0.1805][VORT: 0.2434][Total: 0.6412]	4.8+3.1s
[7200/8000]	[L1: 0.0880][DIV: 0.1297][GRAD: 0.1808][VORT: 0.2438][Total: 0.6423]	4.8+3.1s
[8000/8000]	[L1: 0.0884][DIV: 0.1303][GRAD: 0.1815][VORT: 0.2443][Total: 0.6445]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.078246	vorticity_error: 0.652241	mean_abs_divergence: 0.106027
[DIV2K x2]	rel_l2_error: 0.059419	vorticity_error: 1.004136	mean_abs_divergence: 0.057283
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.040921	vorticity_error: 0.648429	mean_abs_divergence: 0.028316
Forward: 15.64s

Saving...
Total: 16.01s

[Epoch 509]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0875][DIV: 0.1285][GRAD: 0.1789][VORT: 0.2393][Total: 0.6342]	5.1+16.8s
[1600/8000]	[L1: 0.0898][DIV: 0.1315][GRAD: 0.1842][VORT: 0.2497][Total: 0.6552]	4.8+3.1s
[2400/8000]	[L1: 0.0922][DIV: 0.1352][GRAD: 0.1891][VORT: 0.2542][Total: 0.6707]	4.8+3.1s
[3200/8000]	[L1: 0.0896][DIV: 0.1322][GRAD: 0.1834][VORT: 0.2454][Total: 0.6506]	4.8+3.1s
[4000/8000]	[L1: 0.0898][DIV: 0.1331][GRAD: 0.1839][VORT: 0.2450][Total: 0.6519]	4.8+3.0s
[4800/8000]	[L1: 0.0897][DIV: 0.1325][GRAD: 0.1840][VORT: 0.2468][Total: 0.6530]	4.7+3.1s
[5600/8000]	[L1: 0.0900][DIV: 0.1330][GRAD: 0.1847][VORT: 0.2470][Total: 0.6547]	4.8+3.0s
[6400/8000]	[L1: 0.0891][DIV: 0.1318][GRAD: 0.1827][VORT: 0.2446][Total: 0.6482]	4.8+3.0s
[7200/8000]	[L1: 0.0885][DIV: 0.1310][GRAD: 0.1815][VORT: 0.2429][Total: 0.6439]	4.8+3.0s
[8000/8000]	[L1: 0.0885][DIV: 0.1311][GRAD: 0.1815][VORT: 0.2428][Total: 0.6439]	4.7+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.091788	vorticity_error: 0.952596	mean_abs_divergence: 0.149632
[DIV2K x2]	rel_l2_error: 0.071027	vorticity_error: 0.885252	mean_abs_divergence: 0.076948
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.050377	vorticity_error: 0.789666	mean_abs_divergence: 0.037130
Forward: 15.29s

Saving...
Total: 15.61s

[Epoch 510]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0844][DIV: 0.1260][GRAD: 0.1736][VORT: 0.2405][Total: 0.6244]	5.1+16.6s
[1600/8000]	[L1: 0.0874][DIV: 0.1300][GRAD: 0.1795][VORT: 0.2458][Total: 0.6426]	4.8+3.0s
[2400/8000]	[L1: 0.0842][DIV: 0.1247][GRAD: 0.1734][VORT: 0.2400][Total: 0.6223]	4.8+3.0s
[3200/8000]	[L1: 0.0845][DIV: 0.1253][GRAD: 0.1738][VORT: 0.2405][Total: 0.6241]	4.8+3.0s
[4000/8000]	[L1: 0.0855][DIV: 0.1267][GRAD: 0.1755][VORT: 0.2405][Total: 0.6282]	4.8+3.1s
[4800/8000]	[L1: 0.0863][DIV: 0.1277][GRAD: 0.1770][VORT: 0.2416][Total: 0.6325]	4.7+3.1s
[5600/8000]	[L1: 0.0864][DIV: 0.1277][GRAD: 0.1773][VORT: 0.2428][Total: 0.6343]	4.9+3.0s
[6400/8000]	[L1: 0.0867][DIV: 0.1281][GRAD: 0.1778][VORT: 0.2432][Total: 0.6358]	4.7+3.1s
[7200/8000]	[L1: 0.0875][DIV: 0.1291][GRAD: 0.1795][VORT: 0.2452][Total: 0.6414]	4.8+3.1s
[8000/8000]	[L1: 0.0876][DIV: 0.1294][GRAD: 0.1798][VORT: 0.2450][Total: 0.6419]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.084052	vorticity_error: 0.781302	mean_abs_divergence: 0.133088
[DIV2K x2]	rel_l2_error: 0.069795	vorticity_error: 0.983111	mean_abs_divergence: 0.070730
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.050433	vorticity_error: 0.816450	mean_abs_divergence: 0.034838
Forward: 15.44s

Saving...
Total: 15.77s

[Epoch 511]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0950][DIV: 0.1383][GRAD: 0.1934][VORT: 0.2533][Total: 0.6800]	5.0+16.8s
[1600/8000]	[L1: 0.0890][DIV: 0.1310][GRAD: 0.1814][VORT: 0.2394][Total: 0.6408]	4.8+3.1s
[2400/8000]	[L1: 0.0897][DIV: 0.1326][GRAD: 0.1830][VORT: 0.2402][Total: 0.6456]	4.8+3.1s
[3200/8000]	[L1: 0.0892][DIV: 0.1316][GRAD: 0.1821][VORT: 0.2386][Total: 0.6415]	4.8+3.1s
[4000/8000]	[L1: 0.0879][DIV: 0.1302][GRAD: 0.1798][VORT: 0.2374][Total: 0.6354]	4.9+3.0s
[4800/8000]	[L1: 0.0883][DIV: 0.1306][GRAD: 0.1807][VORT: 0.2391][Total: 0.6388]	4.7+3.1s
[5600/8000]	[L1: 0.0877][DIV: 0.1298][GRAD: 0.1796][VORT: 0.2384][Total: 0.6355]	4.8+3.1s
[6400/8000]	[L1: 0.0878][DIV: 0.1296][GRAD: 0.1797][VORT: 0.2385][Total: 0.6356]	4.8+3.0s
[7200/8000]	[L1: 0.0888][DIV: 0.1307][GRAD: 0.1819][VORT: 0.2422][Total: 0.6436]	4.8+3.1s
[8000/8000]	[L1: 0.0888][DIV: 0.1306][GRAD: 0.1818][VORT: 0.2420][Total: 0.6432]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.092100	vorticity_error: 0.848160	mean_abs_divergence: 0.122167
[DIV2K x2]	rel_l2_error: 0.071996	vorticity_error: 4.147669	mean_abs_divergence: 0.066363
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.051285	vorticity_error: 1.079503	mean_abs_divergence: 0.033643
Forward: 15.51s

Saving...
Total: 15.84s

[Epoch 512]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0870][DIV: 0.1304][GRAD: 0.1779][VORT: 0.2386][Total: 0.6340]	5.0+16.7s
[1600/8000]	[L1: 0.0867][DIV: 0.1291][GRAD: 0.1773][VORT: 0.2360][Total: 0.6291]	4.8+3.1s
[2400/8000]	[L1: 0.0869][DIV: 0.1288][GRAD: 0.1779][VORT: 0.2368][Total: 0.6304]	4.8+3.0s
[3200/8000]	[L1: 0.0877][DIV: 0.1296][GRAD: 0.1795][VORT: 0.2403][Total: 0.6371]	4.8+3.1s
[4000/8000]	[L1: 0.0874][DIV: 0.1293][GRAD: 0.1791][VORT: 0.2410][Total: 0.6368]	4.8+3.1s
[4800/8000]	[L1: 0.0877][DIV: 0.1298][GRAD: 0.1797][VORT: 0.2416][Total: 0.6388]	4.8+3.0s
[5600/8000]	[L1: 0.0878][DIV: 0.1296][GRAD: 0.1801][VORT: 0.2432][Total: 0.6406]	4.8+3.0s
[6400/8000]	[L1: 0.0887][DIV: 0.1305][GRAD: 0.1819][VORT: 0.2448][Total: 0.6459]	4.8+3.0s
[7200/8000]	[L1: 0.0878][DIV: 0.1295][GRAD: 0.1800][VORT: 0.2422][Total: 0.6394]	4.8+3.1s
[8000/8000]	[L1: 0.0879][DIV: 0.1299][GRAD: 0.1802][VORT: 0.2420][Total: 0.6401]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.082895	vorticity_error: 0.759782	mean_abs_divergence: 0.118235
[DIV2K x2]	rel_l2_error: 0.068143	vorticity_error: 1.187538	mean_abs_divergence: 0.062705
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.050061	vorticity_error: 1.007896	mean_abs_divergence: 0.031055
Forward: 15.54s

Saving...
Total: 15.87s

[Epoch 513]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0880][DIV: 0.1282][GRAD: 0.1804][VORT: 0.2378][Total: 0.6344]	5.1+16.7s
[1600/8000]	[L1: 0.0864][DIV: 0.1277][GRAD: 0.1764][VORT: 0.2333][Total: 0.6238]	4.8+3.0s
[2400/8000]	[L1: 0.0890][DIV: 0.1313][GRAD: 0.1818][VORT: 0.2404][Total: 0.6425]	4.8+3.1s
[3200/8000]	[L1: 0.0900][DIV: 0.1321][GRAD: 0.1840][VORT: 0.2427][Total: 0.6488]	4.8+3.1s
[4000/8000]	[L1: 0.0891][DIV: 0.1310][GRAD: 0.1824][VORT: 0.2423][Total: 0.6448]	4.8+3.0s
[4800/8000]	[L1: 0.0889][DIV: 0.1313][GRAD: 0.1822][VORT: 0.2417][Total: 0.6442]	4.8+3.0s
[5600/8000]	[L1: 0.0885][DIV: 0.1310][GRAD: 0.1813][VORT: 0.2409][Total: 0.6417]	4.8+3.0s
[6400/8000]	[L1: 0.0893][DIV: 0.1322][GRAD: 0.1830][VORT: 0.2422][Total: 0.6466]	4.8+3.1s
[7200/8000]	[L1: 0.0893][DIV: 0.1323][GRAD: 0.1828][VORT: 0.2419][Total: 0.6463]	4.8+3.1s
[8000/8000]	[L1: 0.0897][DIV: 0.1328][GRAD: 0.1837][VORT: 0.2432][Total: 0.6494]	4.8+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.088010	vorticity_error: 0.744381	mean_abs_divergence: 0.117105
[DIV2K x2]	rel_l2_error: 0.067974	vorticity_error: 0.894517	mean_abs_divergence: 0.063606
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044838	vorticity_error: 0.896686	mean_abs_divergence: 0.031714
Forward: 15.32s

Saving...
Total: 15.64s

[Epoch 514]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0895][DIV: 0.1326][GRAD: 0.1835][VORT: 0.2484][Total: 0.6540]	5.0+16.7s
[1600/8000]	[L1: 0.0880][DIV: 0.1308][GRAD: 0.1806][VORT: 0.2455][Total: 0.6449]	4.8+3.0s
[2400/8000]	[L1: 0.0874][DIV: 0.1301][GRAD: 0.1791][VORT: 0.2418][Total: 0.6385]	4.8+3.0s
[3200/8000]	[L1: 0.0864][DIV: 0.1288][GRAD: 0.1767][VORT: 0.2360][Total: 0.6280]	4.8+3.0s
[4000/8000]	[L1: 0.0869][DIV: 0.1296][GRAD: 0.1778][VORT: 0.2369][Total: 0.6313]	4.8+3.1s
[4800/8000]	[L1: 0.0862][DIV: 0.1286][GRAD: 0.1762][VORT: 0.2351][Total: 0.6261]	4.8+3.1s
[5600/8000]	[L1: 0.0862][DIV: 0.1288][GRAD: 0.1761][VORT: 0.2349][Total: 0.6260]	4.8+3.0s
[6400/8000]	[L1: 0.0866][DIV: 0.1293][GRAD: 0.1770][VORT: 0.2359][Total: 0.6288]	4.8+3.0s
[7200/8000]	[L1: 0.0873][DIV: 0.1301][GRAD: 0.1785][VORT: 0.2375][Total: 0.6334]	4.8+3.0s
[8000/8000]	[L1: 0.0870][DIV: 0.1296][GRAD: 0.1778][VORT: 0.2364][Total: 0.6306]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.065877	vorticity_error: 0.731708	mean_abs_divergence: 0.101460
[DIV2K x2]	rel_l2_error: 0.049282	vorticity_error: 0.483485	mean_abs_divergence: 0.051812
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.038929	vorticity_error: 0.439203	mean_abs_divergence: 0.024750
Forward: 15.45s

Saving...
Total: 15.78s

[Epoch 515]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0811][DIV: 0.1221][GRAD: 0.1656][VORT: 0.2170][Total: 0.5859]	5.1+16.7s
[1600/8000]	[L1: 0.0847][DIV: 0.1267][GRAD: 0.1733][VORT: 0.2275][Total: 0.6122]	4.7+3.1s
[2400/8000]	[L1: 0.0897][DIV: 0.1322][GRAD: 0.1837][VORT: 0.2423][Total: 0.6479]	4.7+3.1s
[3200/8000]	[L1: 0.0889][DIV: 0.1313][GRAD: 0.1819][VORT: 0.2410][Total: 0.6431]	4.8+3.1s
[4000/8000]	[L1: 0.0887][DIV: 0.1307][GRAD: 0.1815][VORT: 0.2414][Total: 0.6423]	4.8+3.1s
[4800/8000]	[L1: 0.0892][DIV: 0.1313][GRAD: 0.1829][VORT: 0.2426][Total: 0.6461]	4.8+3.1s
[5600/8000]	[L1: 0.0891][DIV: 0.1314][GRAD: 0.1826][VORT: 0.2431][Total: 0.6461]	4.8+3.0s
[6400/8000]	[L1: 0.0874][DIV: 0.1295][GRAD: 0.1791][VORT: 0.2393][Total: 0.6353]	4.8+3.1s
[7200/8000]	[L1: 0.0873][DIV: 0.1292][GRAD: 0.1789][VORT: 0.2391][Total: 0.6345]	4.8+3.0s
[8000/8000]	[L1: 0.0867][DIV: 0.1285][GRAD: 0.1777][VORT: 0.2374][Total: 0.6305]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.084690	vorticity_error: 0.878390	mean_abs_divergence: 0.144615
[DIV2K x2]	rel_l2_error: 0.064226	vorticity_error: 4.109881	mean_abs_divergence: 0.076032
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045775	vorticity_error: 1.037309	mean_abs_divergence: 0.037338
Forward: 15.38s

Saving...
Total: 15.70s

[Epoch 516]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0851][DIV: 0.1269][GRAD: 0.1734][VORT: 0.2276][Total: 0.6130]	5.0+16.7s
[1600/8000]	[L1: 0.0905][DIV: 0.1343][GRAD: 0.1847][VORT: 0.2451][Total: 0.6545]	4.8+3.0s
[2400/8000]	[L1: 0.0898][DIV: 0.1331][GRAD: 0.1835][VORT: 0.2460][Total: 0.6523]	4.8+3.0s
[3200/8000]	[L1: 0.0892][DIV: 0.1321][GRAD: 0.1826][VORT: 0.2470][Total: 0.6508]	4.8+3.0s
[4000/8000]	[L1: 0.0905][DIV: 0.1333][GRAD: 0.1856][VORT: 0.2531][Total: 0.6626]	4.8+3.0s
[4800/8000]	[L1: 0.0907][DIV: 0.1330][GRAD: 0.1859][VORT: 0.2526][Total: 0.6622]	4.8+3.1s
[5600/8000]	[L1: 0.0897][DIV: 0.1319][GRAD: 0.1839][VORT: 0.2495][Total: 0.6551]	4.8+3.0s
[6400/8000]	[L1: 0.0901][DIV: 0.1323][GRAD: 0.1847][VORT: 0.2501][Total: 0.6571]	4.8+3.1s
[7200/8000]	[L1: 0.0900][DIV: 0.1323][GRAD: 0.1845][VORT: 0.2496][Total: 0.6564]	4.8+3.0s
[8000/8000]	[L1: 0.0899][DIV: 0.1324][GRAD: 0.1842][VORT: 0.2495][Total: 0.6561]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.081931	vorticity_error: 0.875140	mean_abs_divergence: 0.117879
[DIV2K x2]	rel_l2_error: 0.058373	vorticity_error: 0.862651	mean_abs_divergence: 0.061379
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044992	vorticity_error: 0.641566	mean_abs_divergence: 0.030120
Forward: 15.48s

Saving...
Total: 15.80s

[Epoch 517]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0904][DIV: 0.1319][GRAD: 0.1844][VORT: 0.2415][Total: 0.6481]	5.1+16.7s
[1600/8000]	[L1: 0.0913][DIV: 0.1327][GRAD: 0.1869][VORT: 0.2480][Total: 0.6589]	4.8+3.1s
[2400/8000]	[L1: 0.0914][DIV: 0.1341][GRAD: 0.1866][VORT: 0.2450][Total: 0.6571]	4.7+3.1s
[3200/8000]	[L1: 0.0896][DIV: 0.1322][GRAD: 0.1829][VORT: 0.2424][Total: 0.6471]	4.8+3.1s
[4000/8000]	[L1: 0.0886][DIV: 0.1310][GRAD: 0.1811][VORT: 0.2398][Total: 0.6406]	4.7+3.1s
[4800/8000]	[L1: 0.0890][DIV: 0.1315][GRAD: 0.1822][VORT: 0.2414][Total: 0.6442]	4.8+3.1s
[5600/8000]	[L1: 0.0889][DIV: 0.1314][GRAD: 0.1821][VORT: 0.2411][Total: 0.6435]	4.8+3.1s
[6400/8000]	[L1: 0.0885][DIV: 0.1311][GRAD: 0.1813][VORT: 0.2402][Total: 0.6411]	4.8+3.0s
[7200/8000]	[L1: 0.0885][DIV: 0.1308][GRAD: 0.1813][VORT: 0.2410][Total: 0.6416]	4.8+3.1s
[8000/8000]	[L1: 0.0881][DIV: 0.1304][GRAD: 0.1804][VORT: 0.2395][Total: 0.6383]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.088592	vorticity_error: 2.830248	mean_abs_divergence: 0.136229
[DIV2K x2]	rel_l2_error: 0.070640	vorticity_error: 1.149129	mean_abs_divergence: 0.071476
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.046286	vorticity_error: 1.164586	mean_abs_divergence: 0.035151
Forward: 15.57s

Saving...
Total: 15.95s

[Epoch 518]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0894][DIV: 0.1324][GRAD: 0.1828][VORT: 0.2455][Total: 0.6501]	5.0+16.7s
[1600/8000]	[L1: 0.0863][DIV: 0.1278][GRAD: 0.1770][VORT: 0.2424][Total: 0.6335]	4.8+3.1s
[2400/8000]	[L1: 0.0879][DIV: 0.1291][GRAD: 0.1809][VORT: 0.2502][Total: 0.6481]	4.8+3.1s
[3200/8000]	[L1: 0.0892][DIV: 0.1306][GRAD: 0.1831][VORT: 0.2503][Total: 0.6532]	4.8+3.1s
[4000/8000]	[L1: 0.0887][DIV: 0.1302][GRAD: 0.1819][VORT: 0.2475][Total: 0.6483]	4.8+3.0s
[4800/8000]	[L1: 0.0878][DIV: 0.1288][GRAD: 0.1801][VORT: 0.2459][Total: 0.6425]	4.8+3.1s
[5600/8000]	[L1: 0.0874][DIV: 0.1285][GRAD: 0.1792][VORT: 0.2444][Total: 0.6395]	4.8+3.1s
[6400/8000]	[L1: 0.0871][DIV: 0.1281][GRAD: 0.1787][VORT: 0.2443][Total: 0.6382]	4.8+3.0s
[7200/8000]	[L1: 0.0875][DIV: 0.1287][GRAD: 0.1794][VORT: 0.2447][Total: 0.6403]	4.8+3.1s
[8000/8000]	[L1: 0.0873][DIV: 0.1284][GRAD: 0.1790][VORT: 0.2437][Total: 0.6385]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.074892	vorticity_error: 0.680727	mean_abs_divergence: 0.113916
[DIV2K x2]	rel_l2_error: 0.058994	vorticity_error: 0.767499	mean_abs_divergence: 0.060927
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.039153	vorticity_error: 0.626830	mean_abs_divergence: 0.029943
Forward: 15.38s

Saving...
Total: 15.70s

[Epoch 519]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0796][DIV: 0.1218][GRAD: 0.1622][VORT: 0.2170][Total: 0.5806]	5.0+16.6s
[1600/8000]	[L1: 0.0872][DIV: 0.1310][GRAD: 0.1774][VORT: 0.2324][Total: 0.6279]	4.7+3.1s
[2400/8000]	[L1: 0.0852][DIV: 0.1284][GRAD: 0.1737][VORT: 0.2280][Total: 0.6153]	4.8+3.1s
[3200/8000]	[L1: 0.0859][DIV: 0.1288][GRAD: 0.1750][VORT: 0.2304][Total: 0.6200]	4.8+3.1s
[4000/8000]	[L1: 0.0875][DIV: 0.1305][GRAD: 0.1787][VORT: 0.2367][Total: 0.6334]	4.8+3.1s
[4800/8000]	[L1: 0.0885][DIV: 0.1319][GRAD: 0.1810][VORT: 0.2396][Total: 0.6410]	4.7+3.1s
[5600/8000]	[L1: 0.0888][DIV: 0.1322][GRAD: 0.1818][VORT: 0.2428][Total: 0.6456]	4.8+3.0s
[6400/8000]	[L1: 0.0890][DIV: 0.1324][GRAD: 0.1823][VORT: 0.2434][Total: 0.6471]	4.8+3.1s
[7200/8000]	[L1: 0.0896][DIV: 0.1330][GRAD: 0.1837][VORT: 0.2459][Total: 0.6522]	4.8+3.1s
[8000/8000]	[L1: 0.0901][DIV: 0.1335][GRAD: 0.1846][VORT: 0.2469][Total: 0.6551]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.087447	vorticity_error: 0.774732	mean_abs_divergence: 0.116392
[DIV2K x2]	rel_l2_error: 0.059288	vorticity_error: 0.891418	mean_abs_divergence: 0.061399
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044462	vorticity_error: 0.690951	mean_abs_divergence: 0.029852
Forward: 15.42s

Saving...
Total: 15.75s

[Epoch 520]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0875][DIV: 0.1286][GRAD: 0.1810][VORT: 0.2481][Total: 0.6452]	5.1+16.8s
[1600/8000]	[L1: 0.0912][DIV: 0.1344][GRAD: 0.1878][VORT: 0.2522][Total: 0.6655]	4.8+3.1s
[2400/8000]	[L1: 0.0921][DIV: 0.1358][GRAD: 0.1888][VORT: 0.2495][Total: 0.6661]	4.8+3.1s
[3200/8000]	[L1: 0.0931][DIV: 0.1366][GRAD: 0.1910][VORT: 0.2528][Total: 0.6736]	4.8+3.1s
[4000/8000]	[L1: 0.0917][DIV: 0.1349][GRAD: 0.1881][VORT: 0.2503][Total: 0.6650]	4.8+3.1s
[4800/8000]	[L1: 0.0911][DIV: 0.1339][GRAD: 0.1866][VORT: 0.2485][Total: 0.6600]	4.8+3.1s
[5600/8000]	[L1: 0.0915][DIV: 0.1344][GRAD: 0.1874][VORT: 0.2494][Total: 0.6626]	4.8+3.1s
[6400/8000]	[L1: 0.0913][DIV: 0.1344][GRAD: 0.1870][VORT: 0.2493][Total: 0.6620]	4.8+3.1s
[7200/8000]	[L1: 0.0906][DIV: 0.1334][GRAD: 0.1855][VORT: 0.2472][Total: 0.6567]	4.8+3.0s
[8000/8000]	[L1: 0.0900][DIV: 0.1325][GRAD: 0.1843][VORT: 0.2454][Total: 0.6522]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.072594	vorticity_error: 0.734431	mean_abs_divergence: 0.101728
[DIV2K x2]	rel_l2_error: 0.056142	vorticity_error: 0.720996	mean_abs_divergence: 0.053308
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043066	vorticity_error: 0.567964	mean_abs_divergence: 0.026292
Forward: 15.54s

Saving...
Total: 15.87s

[Epoch 521]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0871][DIV: 0.1279][GRAD: 0.1796][VORT: 0.2452][Total: 0.6398]	5.0+16.7s
[1600/8000]	[L1: 0.0890][DIV: 0.1309][GRAD: 0.1824][VORT: 0.2464][Total: 0.6486]	4.8+3.0s
[2400/8000]	[L1: 0.0877][DIV: 0.1306][GRAD: 0.1799][VORT: 0.2428][Total: 0.6409]	4.8+3.0s
[3200/8000]	[L1: 0.0899][DIV: 0.1331][GRAD: 0.1846][VORT: 0.2476][Total: 0.6551]	4.8+3.0s
[4000/8000]	[L1: 0.0908][DIV: 0.1340][GRAD: 0.1865][VORT: 0.2500][Total: 0.6614]	4.8+3.0s
[4800/8000]	[L1: 0.0910][DIV: 0.1339][GRAD: 0.1868][VORT: 0.2511][Total: 0.6627]	4.8+3.0s
[5600/8000]	[L1: 0.0897][DIV: 0.1322][GRAD: 0.1840][VORT: 0.2471][Total: 0.6530]	4.7+3.0s
[6400/8000]	[L1: 0.0896][DIV: 0.1320][GRAD: 0.1839][VORT: 0.2470][Total: 0.6524]	4.8+3.0s
[7200/8000]	[L1: 0.0888][DIV: 0.1312][GRAD: 0.1823][VORT: 0.2447][Total: 0.6470]	4.7+3.1s
[8000/8000]	[L1: 0.0890][DIV: 0.1314][GRAD: 0.1825][VORT: 0.2442][Total: 0.6472]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.092525	vorticity_error: 0.690013	mean_abs_divergence: 0.112911
[DIV2K x2]	rel_l2_error: 0.066136	vorticity_error: 0.702300	mean_abs_divergence: 0.058677
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.049026	vorticity_error: 0.598315	mean_abs_divergence: 0.028386
Forward: 15.43s

Saving...
Total: 15.82s

[Epoch 522]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0923][DIV: 0.1354][GRAD: 0.1906][VORT: 0.2591][Total: 0.6773]	4.9+16.7s
[1600/8000]	[L1: 0.0933][DIV: 0.1375][GRAD: 0.1915][VORT: 0.2560][Total: 0.6783]	5.0+3.1s
[2400/8000]	[L1: 0.0937][DIV: 0.1374][GRAD: 0.1925][VORT: 0.2578][Total: 0.6814]	4.9+3.2s
[3200/8000]	[L1: 0.0944][DIV: 0.1386][GRAD: 0.1936][VORT: 0.2549][Total: 0.6815]	5.0+3.3s
[4000/8000]	[L1: 0.0944][DIV: 0.1382][GRAD: 0.1933][VORT: 0.2533][Total: 0.6791]	4.8+3.1s
[4800/8000]	[L1: 0.0933][DIV: 0.1368][GRAD: 0.1910][VORT: 0.2498][Total: 0.6709]	4.8+3.0s
[5600/8000]	[L1: 0.0919][DIV: 0.1352][GRAD: 0.1882][VORT: 0.2475][Total: 0.6629]	4.8+3.1s
[6400/8000]	[L1: 0.0912][DIV: 0.1345][GRAD: 0.1867][VORT: 0.2451][Total: 0.6576]	4.8+3.1s
[7200/8000]	[L1: 0.0901][DIV: 0.1331][GRAD: 0.1844][VORT: 0.2431][Total: 0.6505]	4.8+3.0s
[8000/8000]	[L1: 0.0901][DIV: 0.1331][GRAD: 0.1845][VORT: 0.2438][Total: 0.6515]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.090349	vorticity_error: 0.658347	mean_abs_divergence: 0.119409
[DIV2K x2]	rel_l2_error: 0.067823	vorticity_error: 0.695199	mean_abs_divergence: 0.062679
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.047064	vorticity_error: 0.596309	mean_abs_divergence: 0.031224
Forward: 15.39s

Saving...
Total: 15.71s

[Epoch 523]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0924][DIV: 0.1361][GRAD: 0.1895][VORT: 0.2561][Total: 0.6741]	5.0+16.7s
[1600/8000]	[L1: 0.0932][DIV: 0.1362][GRAD: 0.1907][VORT: 0.2540][Total: 0.6742]	4.8+3.0s
[2400/8000]	[L1: 0.0923][DIV: 0.1354][GRAD: 0.1885][VORT: 0.2518][Total: 0.6679]	4.8+3.0s
[3200/8000]	[L1: 0.0904][DIV: 0.1328][GRAD: 0.1850][VORT: 0.2480][Total: 0.6562]	4.8+3.0s
[4000/8000]	[L1: 0.0911][DIV: 0.1335][GRAD: 0.1865][VORT: 0.2506][Total: 0.6617]	4.8+3.0s
[4800/8000]	[L1: 0.0916][DIV: 0.1339][GRAD: 0.1875][VORT: 0.2523][Total: 0.6654]	4.8+3.0s
[5600/8000]	[L1: 0.0908][DIV: 0.1334][GRAD: 0.1860][VORT: 0.2501][Total: 0.6604]	4.8+3.0s
[6400/8000]	[L1: 0.0904][DIV: 0.1330][GRAD: 0.1853][VORT: 0.2499][Total: 0.6587]	4.8+3.0s
[7200/8000]	[L1: 0.0899][DIV: 0.1325][GRAD: 0.1844][VORT: 0.2486][Total: 0.6554]	4.8+3.1s
[8000/8000]	[L1: 0.0899][DIV: 0.1324][GRAD: 0.1845][VORT: 0.2495][Total: 0.6563]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.095486	vorticity_error: 0.721377	mean_abs_divergence: 0.121340
[DIV2K x2]	rel_l2_error: 0.071174	vorticity_error: 0.992699	mean_abs_divergence: 0.064568
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.053429	vorticity_error: 0.940843	mean_abs_divergence: 0.031397
Forward: 15.38s

Saving...
Total: 15.71s

[Epoch 524]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0798][DIV: 0.1229][GRAD: 0.1626][VORT: 0.2091][Total: 0.5744]	5.0+16.6s
[1600/8000]	[L1: 0.0844][DIV: 0.1278][GRAD: 0.1724][VORT: 0.2301][Total: 0.6146]	4.7+3.1s
[2400/8000]	[L1: 0.0849][DIV: 0.1280][GRAD: 0.1737][VORT: 0.2321][Total: 0.6188]	4.8+3.1s
[3200/8000]	[L1: 0.0860][DIV: 0.1291][GRAD: 0.1763][VORT: 0.2382][Total: 0.6297]	4.7+3.1s
[4000/8000]	[L1: 0.0858][DIV: 0.1285][GRAD: 0.1759][VORT: 0.2374][Total: 0.6275]	4.8+3.0s
[4800/8000]	[L1: 0.0864][DIV: 0.1292][GRAD: 0.1772][VORT: 0.2384][Total: 0.6312]	4.8+3.1s
[5600/8000]	[L1: 0.0859][DIV: 0.1281][GRAD: 0.1761][VORT: 0.2369][Total: 0.6270]	4.8+3.0s
[6400/8000]	[L1: 0.0863][DIV: 0.1285][GRAD: 0.1766][VORT: 0.2369][Total: 0.6284]	4.8+3.1s
[7200/8000]	[L1: 0.0861][DIV: 0.1281][GRAD: 0.1761][VORT: 0.2362][Total: 0.6265]	4.8+3.1s
[8000/8000]	[L1: 0.0876][DIV: 0.1299][GRAD: 0.1793][VORT: 0.2396][Total: 0.6364]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.064410	vorticity_error: 0.518222	mean_abs_divergence: 0.093260
[DIV2K x2]	rel_l2_error: 0.046030	vorticity_error: 0.501802	mean_abs_divergence: 0.050274
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.036940	vorticity_error: 0.457552	mean_abs_divergence: 0.024822
Forward: 15.49s

Saving...
Total: 15.80s

[Epoch 525]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0852][DIV: 0.1269][GRAD: 0.1755][VORT: 0.2432][Total: 0.6309]	5.1+16.7s
[1600/8000]	[L1: 0.0869][DIV: 0.1288][GRAD: 0.1788][VORT: 0.2455][Total: 0.6401]	4.8+3.0s
[2400/8000]	[L1: 0.0863][DIV: 0.1280][GRAD: 0.1771][VORT: 0.2382][Total: 0.6295]	4.9+3.0s
[3200/8000]	[L1: 0.0869][DIV: 0.1291][GRAD: 0.1785][VORT: 0.2401][Total: 0.6346]	4.7+3.1s
[4000/8000]	[L1: 0.0869][DIV: 0.1292][GRAD: 0.1784][VORT: 0.2391][Total: 0.6337]	4.8+3.0s
[4800/8000]	[L1: 0.0885][DIV: 0.1314][GRAD: 0.1815][VORT: 0.2427][Total: 0.6441]	4.8+3.1s
[5600/8000]	[L1: 0.0888][DIV: 0.1315][GRAD: 0.1822][VORT: 0.2435][Total: 0.6461]	4.8+3.0s
[6400/8000]	[L1: 0.0885][DIV: 0.1314][GRAD: 0.1815][VORT: 0.2422][Total: 0.6435]	4.8+3.0s
[7200/8000]	[L1: 0.0882][DIV: 0.1311][GRAD: 0.1810][VORT: 0.2412][Total: 0.6416]	4.8+3.0s
[8000/8000]	[L1: 0.0879][DIV: 0.1307][GRAD: 0.1804][VORT: 0.2408][Total: 0.6398]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.101998	vorticity_error: 0.779225	mean_abs_divergence: 0.122226
[DIV2K x2]	rel_l2_error: 0.068272	vorticity_error: 0.783370	mean_abs_divergence: 0.063955
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.051072	vorticity_error: 0.624196	mean_abs_divergence: 0.031510
Forward: 15.79s

Saving...
Total: 16.11s

[Epoch 526]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0932][DIV: 0.1365][GRAD: 0.1907][VORT: 0.2586][Total: 0.6790]	5.0+16.9s
[1600/8000]	[L1: 0.0902][DIV: 0.1334][GRAD: 0.1849][VORT: 0.2521][Total: 0.6606]	4.8+3.0s
[2400/8000]	[L1: 0.0908][DIV: 0.1342][GRAD: 0.1861][VORT: 0.2540][Total: 0.6652]	4.8+3.0s
[3200/8000]	[L1: 0.0905][DIV: 0.1341][GRAD: 0.1852][VORT: 0.2508][Total: 0.6606]	4.9+3.0s
[4000/8000]	[L1: 0.0880][DIV: 0.1308][GRAD: 0.1802][VORT: 0.2430][Total: 0.6421]	4.8+3.0s
[4800/8000]	[L1: 0.0888][DIV: 0.1319][GRAD: 0.1821][VORT: 0.2457][Total: 0.6486]	4.8+3.0s
[5600/8000]	[L1: 0.0887][DIV: 0.1316][GRAD: 0.1816][VORT: 0.2443][Total: 0.6461]	4.8+3.0s
[6400/8000]	[L1: 0.0881][DIV: 0.1306][GRAD: 0.1803][VORT: 0.2422][Total: 0.6412]	4.8+3.0s
[7200/8000]	[L1: 0.0893][DIV: 0.1323][GRAD: 0.1830][VORT: 0.2453][Total: 0.6499]	4.9+3.0s
[8000/8000]	[L1: 0.0897][DIV: 0.1327][GRAD: 0.1839][VORT: 0.2465][Total: 0.6528]	5.0+2.9s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.075679	vorticity_error: 0.648066	mean_abs_divergence: 0.116759
[DIV2K x2]	rel_l2_error: 0.063468	vorticity_error: 0.694536	mean_abs_divergence: 0.060787
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043696	vorticity_error: 0.590247	mean_abs_divergence: 0.029437
Forward: 16.42s

Saving...
Total: 16.79s

[Epoch 527]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0908][DIV: 0.1325][GRAD: 0.1866][VORT: 0.2494][Total: 0.6593]	5.1+16.9s
[1600/8000]	[L1: 0.0862][DIV: 0.1278][GRAD: 0.1770][VORT: 0.2362][Total: 0.6272]	4.9+3.0s
[2400/8000]	[L1: 0.0859][DIV: 0.1269][GRAD: 0.1761][VORT: 0.2340][Total: 0.6229]	4.8+3.0s
[3200/8000]	[L1: 0.0867][DIV: 0.1280][GRAD: 0.1777][VORT: 0.2369][Total: 0.6292]	5.0+2.9s
[4000/8000]	[L1: 0.0858][DIV: 0.1272][GRAD: 0.1761][VORT: 0.2358][Total: 0.6249]	4.8+3.0s
[4800/8000]	[L1: 0.0858][DIV: 0.1274][GRAD: 0.1760][VORT: 0.2362][Total: 0.6254]	4.8+3.0s
[5600/8000]	[L1: 0.0865][DIV: 0.1285][GRAD: 0.1775][VORT: 0.2371][Total: 0.6296]	4.8+3.0s
[6400/8000]	[L1: 0.0871][DIV: 0.1291][GRAD: 0.1787][VORT: 0.2382][Total: 0.6331]	5.0+2.9s
[7200/8000]	[L1: 0.0868][DIV: 0.1288][GRAD: 0.1781][VORT: 0.2380][Total: 0.6318]	4.8+3.0s
[8000/8000]	[L1: 0.0865][DIV: 0.1283][GRAD: 0.1773][VORT: 0.2367][Total: 0.6288]	4.8+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.080430	vorticity_error: 0.656572	mean_abs_divergence: 0.085721
[DIV2K x2]	rel_l2_error: 0.058485	vorticity_error: 0.641212	mean_abs_divergence: 0.047083
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.047204	vorticity_error: 0.615506	mean_abs_divergence: 0.023781
Forward: 15.86s

Saving...
Total: 16.18s

[Epoch 528]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0864][DIV: 0.1280][GRAD: 0.1764][VORT: 0.2354][Total: 0.6262]	5.0+17.1s
[1600/8000]	[L1: 0.0862][DIV: 0.1284][GRAD: 0.1760][VORT: 0.2378][Total: 0.6283]	4.8+3.0s
[2400/8000]	[L1: 0.0879][DIV: 0.1314][GRAD: 0.1797][VORT: 0.2389][Total: 0.6380]	4.9+3.0s
[3200/8000]	[L1: 0.0880][DIV: 0.1310][GRAD: 0.1800][VORT: 0.2380][Total: 0.6370]	4.8+3.0s
[4000/8000]	[L1: 0.0872][DIV: 0.1301][GRAD: 0.1784][VORT: 0.2372][Total: 0.6329]	4.8+3.0s
[4800/8000]	[L1: 0.0886][DIV: 0.1315][GRAD: 0.1815][VORT: 0.2430][Total: 0.6445]	4.9+3.0s
[5600/8000]	[L1: 0.0884][DIV: 0.1313][GRAD: 0.1813][VORT: 0.2427][Total: 0.6438]	4.8+3.0s
[6400/8000]	[L1: 0.0874][DIV: 0.1299][GRAD: 0.1792][VORT: 0.2414][Total: 0.6380]	4.8+3.0s
[7200/8000]	[L1: 0.0874][DIV: 0.1295][GRAD: 0.1794][VORT: 0.2415][Total: 0.6378]	4.8+3.0s
[8000/8000]	[L1: 0.0886][DIV: 0.1312][GRAD: 0.1815][VORT: 0.2431][Total: 0.6445]	4.8+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.069372	vorticity_error: 0.575459	mean_abs_divergence: 0.103540
[DIV2K x2]	rel_l2_error: 0.053070	vorticity_error: 0.527604	mean_abs_divergence: 0.056505
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.046070	vorticity_error: 0.491783	mean_abs_divergence: 0.028522
Forward: 15.87s

Saving...
Total: 16.20s

[Epoch 529]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0797][DIV: 0.1174][GRAD: 0.1633][VORT: 0.2106][Total: 0.5710]	5.0+17.1s
[1600/8000]	[L1: 0.0809][DIV: 0.1193][GRAD: 0.1656][VORT: 0.2186][Total: 0.5845]	4.8+3.0s
[2400/8000]	[L1: 0.0854][DIV: 0.1257][GRAD: 0.1749][VORT: 0.2310][Total: 0.6169]	4.9+3.0s
[3200/8000]	[L1: 0.0851][DIV: 0.1261][GRAD: 0.1744][VORT: 0.2320][Total: 0.6177]	4.8+3.0s
[4000/8000]	[L1: 0.0859][DIV: 0.1272][GRAD: 0.1758][VORT: 0.2325][Total: 0.6215]	4.8+3.0s
[4800/8000]	[L1: 0.0866][DIV: 0.1278][GRAD: 0.1770][VORT: 0.2330][Total: 0.6244]	4.8+3.0s
[5600/8000]	[L1: 0.0875][DIV: 0.1289][GRAD: 0.1787][VORT: 0.2362][Total: 0.6312]	4.8+3.0s
[6400/8000]	[L1: 0.0877][DIV: 0.1291][GRAD: 0.1794][VORT: 0.2381][Total: 0.6343]	4.8+3.0s
[7200/8000]	[L1: 0.0869][DIV: 0.1282][GRAD: 0.1779][VORT: 0.2365][Total: 0.6296]	4.8+3.0s
[8000/8000]	[L1: 0.0868][DIV: 0.1283][GRAD: 0.1776][VORT: 0.2358][Total: 0.6285]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.092460	vorticity_error: 0.850242	mean_abs_divergence: 0.124848
[DIV2K x2]	rel_l2_error: 0.072276	vorticity_error: 0.910806	mean_abs_divergence: 0.067788
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.051285	vorticity_error: 0.667096	mean_abs_divergence: 0.033954
Forward: 15.51s

Saving...
Total: 15.84s

[Epoch 530]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0919][DIV: 0.1370][GRAD: 0.1885][VORT: 0.2470][Total: 0.6643]	5.1+16.8s
[1600/8000]	[L1: 0.0889][DIV: 0.1319][GRAD: 0.1823][VORT: 0.2420][Total: 0.6453]	4.8+3.0s
[2400/8000]	[L1: 0.0870][DIV: 0.1299][GRAD: 0.1784][VORT: 0.2376][Total: 0.6329]	4.8+3.0s
[3200/8000]	[L1: 0.0875][DIV: 0.1304][GRAD: 0.1794][VORT: 0.2371][Total: 0.6345]	4.8+3.1s
[4000/8000]	[L1: 0.0892][DIV: 0.1325][GRAD: 0.1829][VORT: 0.2421][Total: 0.6467]	4.8+3.0s
[4800/8000]	[L1: 0.0884][DIV: 0.1314][GRAD: 0.1813][VORT: 0.2407][Total: 0.6418]	4.8+3.0s
[5600/8000]	[L1: 0.0880][DIV: 0.1306][GRAD: 0.1806][VORT: 0.2407][Total: 0.6399]	4.8+3.0s
[6400/8000]	[L1: 0.0880][DIV: 0.1309][GRAD: 0.1805][VORT: 0.2402][Total: 0.6396]	4.8+3.0s
[7200/8000]	[L1: 0.0873][DIV: 0.1299][GRAD: 0.1789][VORT: 0.2380][Total: 0.6342]	4.8+3.0s
[8000/8000]	[L1: 0.0874][DIV: 0.1301][GRAD: 0.1791][VORT: 0.2379][Total: 0.6345]	4.8+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.077430	vorticity_error: 0.684201	mean_abs_divergence: 0.120890
[DIV2K x2]	rel_l2_error: 0.058461	vorticity_error: 0.759036	mean_abs_divergence: 0.065768
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042501	vorticity_error: 0.617020	mean_abs_divergence: 0.031914
Forward: 15.51s

Saving...
Total: 15.82s

[Epoch 531]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0773][DIV: 0.1144][GRAD: 0.1591][VORT: 0.2167][Total: 0.5675]	5.0+16.9s
[1600/8000]	[L1: 0.0809][DIV: 0.1192][GRAD: 0.1659][VORT: 0.2277][Total: 0.5937]	4.8+3.0s
[2400/8000]	[L1: 0.0823][DIV: 0.1214][GRAD: 0.1688][VORT: 0.2296][Total: 0.6021]	4.8+3.0s
[3200/8000]	[L1: 0.0823][DIV: 0.1219][GRAD: 0.1690][VORT: 0.2311][Total: 0.6044]	4.8+3.0s
[4000/8000]	[L1: 0.0833][DIV: 0.1237][GRAD: 0.1710][VORT: 0.2332][Total: 0.6113]	4.8+3.0s
[4800/8000]	[L1: 0.0836][DIV: 0.1246][GRAD: 0.1715][VORT: 0.2338][Total: 0.6136]	4.8+3.1s
[5600/8000]	[L1: 0.0845][DIV: 0.1256][GRAD: 0.1733][VORT: 0.2351][Total: 0.6185]	4.8+3.1s
[6400/8000]	[L1: 0.0854][DIV: 0.1266][GRAD: 0.1750][VORT: 0.2363][Total: 0.6233]	4.8+3.0s
[7200/8000]	[L1: 0.0860][DIV: 0.1276][GRAD: 0.1760][VORT: 0.2376][Total: 0.6272]	4.8+3.0s
[8000/8000]	[L1: 0.0862][DIV: 0.1279][GRAD: 0.1767][VORT: 0.2391][Total: 0.6300]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.072686	vorticity_error: 0.874356	mean_abs_divergence: 0.120930
[DIV2K x2]	rel_l2_error: 0.063849	vorticity_error: 0.896179	mean_abs_divergence: 0.063976
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.051433	vorticity_error: 1.189682	mean_abs_divergence: 0.031082
Forward: 15.56s

Saving...
Total: 15.88s

[Epoch 532]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0862][DIV: 0.1269][GRAD: 0.1761][VORT: 0.2328][Total: 0.6220]	5.0+17.0s
[1600/8000]	[L1: 0.0895][DIV: 0.1324][GRAD: 0.1829][VORT: 0.2410][Total: 0.6458]	4.8+3.1s
[2400/8000]	[L1: 0.0881][DIV: 0.1305][GRAD: 0.1800][VORT: 0.2373][Total: 0.6359]	4.8+3.1s
[3200/8000]	[L1: 0.0893][DIV: 0.1317][GRAD: 0.1823][VORT: 0.2402][Total: 0.6434]	4.8+3.0s
[4000/8000]	[L1: 0.0876][DIV: 0.1297][GRAD: 0.1789][VORT: 0.2365][Total: 0.6326]	4.8+3.0s
[4800/8000]	[L1: 0.0873][DIV: 0.1293][GRAD: 0.1784][VORT: 0.2355][Total: 0.6305]	4.8+3.0s
[5600/8000]	[L1: 0.0878][DIV: 0.1300][GRAD: 0.1793][VORT: 0.2359][Total: 0.6331]	4.7+3.1s
[6400/8000]	[L1: 0.0887][DIV: 0.1316][GRAD: 0.1814][VORT: 0.2384][Total: 0.6402]	4.8+3.0s
[7200/8000]	[L1: 0.0886][DIV: 0.1316][GRAD: 0.1812][VORT: 0.2384][Total: 0.6398]	4.8+3.0s
[8000/8000]	[L1: 0.0883][DIV: 0.1311][GRAD: 0.1805][VORT: 0.2381][Total: 0.6380]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.086806	vorticity_error: 0.797323	mean_abs_divergence: 0.128491
[DIV2K x2]	rel_l2_error: 0.059881	vorticity_error: 0.674019	mean_abs_divergence: 0.069243
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042081	vorticity_error: 0.569273	mean_abs_divergence: 0.034124
Forward: 15.57s

Saving...
Total: 15.89s

[Epoch 533]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0855][DIV: 0.1282][GRAD: 0.1736][VORT: 0.2235][Total: 0.6106]	4.9+16.9s
[1600/8000]	[L1: 0.0874][DIV: 0.1306][GRAD: 0.1782][VORT: 0.2313][Total: 0.6275]	4.8+3.0s
[2400/8000]	[L1: 0.0899][DIV: 0.1337][GRAD: 0.1839][VORT: 0.2433][Total: 0.6508]	4.8+3.1s
[3200/8000]	[L1: 0.0886][DIV: 0.1324][GRAD: 0.1813][VORT: 0.2428][Total: 0.6451]	4.8+3.0s
[4000/8000]	[L1: 0.0902][DIV: 0.1342][GRAD: 0.1847][VORT: 0.2481][Total: 0.6572]	4.7+3.1s
[4800/8000]	[L1: 0.0893][DIV: 0.1328][GRAD: 0.1829][VORT: 0.2459][Total: 0.6509]	4.8+3.0s
[5600/8000]	[L1: 0.0886][DIV: 0.1317][GRAD: 0.1815][VORT: 0.2446][Total: 0.6464]	4.8+3.1s
[6400/8000]	[L1: 0.0880][DIV: 0.1311][GRAD: 0.1804][VORT: 0.2430][Total: 0.6426]	4.8+3.1s
[7200/8000]	[L1: 0.0873][DIV: 0.1301][GRAD: 0.1792][VORT: 0.2419][Total: 0.6385]	4.8+3.0s
[8000/8000]	[L1: 0.0874][DIV: 0.1302][GRAD: 0.1793][VORT: 0.2419][Total: 0.6387]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.086124	vorticity_error: 0.764717	mean_abs_divergence: 0.119378
[DIV2K x2]	rel_l2_error: 0.070064	vorticity_error: 0.807940	mean_abs_divergence: 0.063872
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.047448	vorticity_error: 0.621198	mean_abs_divergence: 0.031770
Forward: 15.52s

Saving...
Total: 15.85s

[Epoch 534]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0845][DIV: 0.1269][GRAD: 0.1722][VORT: 0.2291][Total: 0.6128]	5.1+16.8s
[1600/8000]	[L1: 0.0869][DIV: 0.1287][GRAD: 0.1773][VORT: 0.2346][Total: 0.6276]	4.9+3.0s
[2400/8000]	[L1: 0.0907][DIV: 0.1336][GRAD: 0.1853][VORT: 0.2439][Total: 0.6536]	4.8+3.0s
[3200/8000]	[L1: 0.0887][DIV: 0.1309][GRAD: 0.1813][VORT: 0.2415][Total: 0.6424]	4.8+3.0s
[4000/8000]	[L1: 0.0885][DIV: 0.1311][GRAD: 0.1809][VORT: 0.2415][Total: 0.6420]	4.8+3.0s
[4800/8000]	[L1: 0.0879][DIV: 0.1304][GRAD: 0.1797][VORT: 0.2405][Total: 0.6384]	4.8+3.0s
[5600/8000]	[L1: 0.0881][DIV: 0.1304][GRAD: 0.1802][VORT: 0.2417][Total: 0.6404]	4.8+3.1s
[6400/8000]	[L1: 0.0888][DIV: 0.1312][GRAD: 0.1817][VORT: 0.2434][Total: 0.6451]	4.8+3.0s
[7200/8000]	[L1: 0.0884][DIV: 0.1307][GRAD: 0.1811][VORT: 0.2428][Total: 0.6431]	4.8+3.0s
[8000/8000]	[L1: 0.0882][DIV: 0.1303][GRAD: 0.1804][VORT: 0.2419][Total: 0.6408]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.098445	vorticity_error: 0.713454	mean_abs_divergence: 0.143559
[DIV2K x2]	rel_l2_error: 0.071332	vorticity_error: 2.725226	mean_abs_divergence: 0.077493
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.053963	vorticity_error: 0.888628	mean_abs_divergence: 0.038178
Forward: 15.51s

Saving...
Total: 15.89s

[Epoch 535]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0980][DIV: 0.1442][GRAD: 0.2010][VORT: 0.2566][Total: 0.6998]	5.0+16.9s
[1600/8000]	[L1: 0.0944][DIV: 0.1398][GRAD: 0.1935][VORT: 0.2497][Total: 0.6773]	4.8+3.1s
[2400/8000]	[L1: 0.0910][DIV: 0.1351][GRAD: 0.1864][VORT: 0.2433][Total: 0.6558]	4.8+3.0s
[3200/8000]	[L1: 0.0910][DIV: 0.1354][GRAD: 0.1865][VORT: 0.2456][Total: 0.6583]	4.7+3.1s
[4000/8000]	[L1: 0.0893][DIV: 0.1329][GRAD: 0.1827][VORT: 0.2413][Total: 0.6461]	4.8+3.0s
[4800/8000]	[L1: 0.0892][DIV: 0.1329][GRAD: 0.1826][VORT: 0.2407][Total: 0.6455]	4.8+3.1s
[5600/8000]	[L1: 0.0884][DIV: 0.1319][GRAD: 0.1809][VORT: 0.2385][Total: 0.6397]	4.8+3.0s
[6400/8000]	[L1: 0.0886][DIV: 0.1320][GRAD: 0.1815][VORT: 0.2395][Total: 0.6416]	4.8+3.0s
[7200/8000]	[L1: 0.0887][DIV: 0.1322][GRAD: 0.1815][VORT: 0.2393][Total: 0.6416]	4.8+3.0s
[8000/8000]	[L1: 0.0887][DIV: 0.1321][GRAD: 0.1816][VORT: 0.2403][Total: 0.6428]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.092361	vorticity_error: 1.025886	mean_abs_divergence: 0.145777
[DIV2K x2]	rel_l2_error: 0.070084	vorticity_error: 3.744185	mean_abs_divergence: 0.077667
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.055678	vorticity_error: 1.191002	mean_abs_divergence: 0.038330
Forward: 15.56s

Saving...
Total: 15.88s

[Epoch 536]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0951][DIV: 0.1407][GRAD: 0.1940][VORT: 0.2604][Total: 0.6902]	5.0+16.9s
[1600/8000]	[L1: 0.0924][DIV: 0.1364][GRAD: 0.1895][VORT: 0.2566][Total: 0.6749]	4.8+3.0s
[2400/8000]	[L1: 0.0937][DIV: 0.1382][GRAD: 0.1919][VORT: 0.2588][Total: 0.6827]	4.8+3.0s
[3200/8000]	[L1: 0.0934][DIV: 0.1376][GRAD: 0.1914][VORT: 0.2574][Total: 0.6798]	4.8+3.0s
[4000/8000]	[L1: 0.0914][DIV: 0.1349][GRAD: 0.1871][VORT: 0.2522][Total: 0.6656]	4.8+3.0s
[4800/8000]	[L1: 0.0902][DIV: 0.1334][GRAD: 0.1847][VORT: 0.2488][Total: 0.6571]	4.8+3.0s
[5600/8000]	[L1: 0.0896][DIV: 0.1326][GRAD: 0.1836][VORT: 0.2483][Total: 0.6540]	4.8+3.0s
[6400/8000]	[L1: 0.0896][DIV: 0.1327][GRAD: 0.1837][VORT: 0.2482][Total: 0.6542]	4.8+3.0s
[7200/8000]	[L1: 0.0895][DIV: 0.1325][GRAD: 0.1834][VORT: 0.2478][Total: 0.6532]	4.8+3.0s
[8000/8000]	[L1: 0.0889][DIV: 0.1318][GRAD: 0.1821][VORT: 0.2456][Total: 0.6484]	4.8+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.069944	vorticity_error: 0.747553	mean_abs_divergence: 0.120851
[DIV2K x2]	rel_l2_error: 0.051455	vorticity_error: 0.755508	mean_abs_divergence: 0.063690
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.038678	vorticity_error: 0.566582	mean_abs_divergence: 0.031173
Forward: 15.65s

Saving...
Total: 15.96s

[Epoch 537]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0853][DIV: 0.1266][GRAD: 0.1754][VORT: 0.2351][Total: 0.6224]	5.1+16.9s
[1600/8000]	[L1: 0.0865][DIV: 0.1277][GRAD: 0.1782][VORT: 0.2417][Total: 0.6341]	4.8+3.0s
[2400/8000]	[L1: 0.0866][DIV: 0.1286][GRAD: 0.1781][VORT: 0.2406][Total: 0.6339]	4.8+3.0s
[3200/8000]	[L1: 0.0872][DIV: 0.1290][GRAD: 0.1789][VORT: 0.2397][Total: 0.6348]	4.8+3.0s
[4000/8000]	[L1: 0.0862][DIV: 0.1283][GRAD: 0.1769][VORT: 0.2367][Total: 0.6282]	4.8+3.0s
[4800/8000]	[L1: 0.0866][DIV: 0.1288][GRAD: 0.1777][VORT: 0.2377][Total: 0.6308]	4.8+3.0s
[5600/8000]	[L1: 0.0867][DIV: 0.1290][GRAD: 0.1778][VORT: 0.2380][Total: 0.6315]	4.8+3.0s
[6400/8000]	[L1: 0.0860][DIV: 0.1281][GRAD: 0.1764][VORT: 0.2372][Total: 0.6277]	4.8+3.1s
[7200/8000]	[L1: 0.0857][DIV: 0.1277][GRAD: 0.1756][VORT: 0.2363][Total: 0.6254]	4.8+3.0s
[8000/8000]	[L1: 0.0861][DIV: 0.1282][GRAD: 0.1765][VORT: 0.2378][Total: 0.6285]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.080124	vorticity_error: 0.751520	mean_abs_divergence: 0.132484
[DIV2K x2]	rel_l2_error: 0.060715	vorticity_error: 0.722586	mean_abs_divergence: 0.070190
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043940	vorticity_error: 0.745087	mean_abs_divergence: 0.034578
Forward: 15.55s

Saving...
Total: 15.88s

[Epoch 538]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0814][DIV: 0.1228][GRAD: 0.1664][VORT: 0.2210][Total: 0.5915]	5.1+16.8s
[1600/8000]	[L1: 0.0894][DIV: 0.1317][GRAD: 0.1832][VORT: 0.2485][Total: 0.6529]	4.8+3.0s
[2400/8000]	[L1: 0.0889][DIV: 0.1316][GRAD: 0.1822][VORT: 0.2476][Total: 0.6501]	4.8+3.0s
[3200/8000]	[L1: 0.0885][DIV: 0.1312][GRAD: 0.1814][VORT: 0.2452][Total: 0.6462]	4.8+3.0s
[4000/8000]	[L1: 0.0888][DIV: 0.1313][GRAD: 0.1820][VORT: 0.2453][Total: 0.6474]	4.8+3.0s
[4800/8000]	[L1: 0.0893][DIV: 0.1322][GRAD: 0.1831][VORT: 0.2455][Total: 0.6500]	4.8+3.0s
[5600/8000]	[L1: 0.0900][DIV: 0.1332][GRAD: 0.1845][VORT: 0.2463][Total: 0.6540]	4.8+3.0s
[6400/8000]	[L1: 0.0908][DIV: 0.1340][GRAD: 0.1860][VORT: 0.2488][Total: 0.6596]	4.8+3.0s
[7200/8000]	[L1: 0.0906][DIV: 0.1336][GRAD: 0.1857][VORT: 0.2488][Total: 0.6587]	4.8+3.1s
[8000/8000]	[L1: 0.0910][DIV: 0.1339][GRAD: 0.1864][VORT: 0.2497][Total: 0.6610]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.089809	vorticity_error: 0.734261	mean_abs_divergence: 0.118903
[DIV2K x2]	rel_l2_error: 0.063676	vorticity_error: 0.785126	mean_abs_divergence: 0.064095
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044728	vorticity_error: 0.688832	mean_abs_divergence: 0.032080
Forward: 15.50s

Saving...
Total: 15.82s

[Epoch 539]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0871][DIV: 0.1294][GRAD: 0.1786][VORT: 0.2409][Total: 0.6360]	5.1+16.8s
[1600/8000]	[L1: 0.0904][DIV: 0.1330][GRAD: 0.1855][VORT: 0.2514][Total: 0.6603]	4.8+3.0s
[2400/8000]	[L1: 0.0880][DIV: 0.1300][GRAD: 0.1804][VORT: 0.2442][Total: 0.6426]	4.8+3.1s
[3200/8000]	[L1: 0.0861][DIV: 0.1278][GRAD: 0.1763][VORT: 0.2382][Total: 0.6284]	4.8+3.0s
[4000/8000]	[L1: 0.0857][DIV: 0.1271][GRAD: 0.1757][VORT: 0.2379][Total: 0.6263]	4.8+3.0s
[4800/8000]	[L1: 0.0852][DIV: 0.1266][GRAD: 0.1746][VORT: 0.2363][Total: 0.6227]	4.8+3.1s
[5600/8000]	[L1: 0.0847][DIV: 0.1261][GRAD: 0.1736][VORT: 0.2354][Total: 0.6198]	4.8+3.1s
[6400/8000]	[L1: 0.0854][DIV: 0.1269][GRAD: 0.1749][VORT: 0.2359][Total: 0.6231]	4.8+3.0s
[7200/8000]	[L1: 0.0856][DIV: 0.1270][GRAD: 0.1753][VORT: 0.2360][Total: 0.6239]	4.8+3.0s
[8000/8000]	[L1: 0.0858][DIV: 0.1274][GRAD: 0.1757][VORT: 0.2358][Total: 0.6247]	4.8+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.082799	vorticity_error: 0.735908	mean_abs_divergence: 0.115572
[DIV2K x2]	rel_l2_error: 0.073288	vorticity_error: 0.700119	mean_abs_divergence: 0.059512
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.050572	vorticity_error: 0.600956	mean_abs_divergence: 0.029538
Forward: 15.72s

Saving...
Total: 16.06s

[Epoch 540]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0912][DIV: 0.1368][GRAD: 0.1857][VORT: 0.2393][Total: 0.6529]	5.0+16.9s
[1600/8000]	[L1: 0.0895][DIV: 0.1342][GRAD: 0.1823][VORT: 0.2397][Total: 0.6458]	4.8+3.1s
[2400/8000]	[L1: 0.0885][DIV: 0.1324][GRAD: 0.1803][VORT: 0.2381][Total: 0.6393]	4.8+3.0s
[3200/8000]	[L1: 0.0913][DIV: 0.1356][GRAD: 0.1865][VORT: 0.2467][Total: 0.6601]	4.8+3.0s
[4000/8000]	[L1: 0.0910][DIV: 0.1347][GRAD: 0.1861][VORT: 0.2484][Total: 0.6602]	4.8+3.1s
[4800/8000]	[L1: 0.0909][DIV: 0.1343][GRAD: 0.1860][VORT: 0.2496][Total: 0.6607]	4.8+3.0s
[5600/8000]	[L1: 0.0910][DIV: 0.1347][GRAD: 0.1863][VORT: 0.2488][Total: 0.6608]	4.8+3.1s
[6400/8000]	[L1: 0.0905][DIV: 0.1341][GRAD: 0.1852][VORT: 0.2463][Total: 0.6562]	4.8+3.0s
[7200/8000]	[L1: 0.0910][DIV: 0.1348][GRAD: 0.1860][VORT: 0.2465][Total: 0.6583]	4.8+3.0s
[8000/8000]	[L1: 0.0907][DIV: 0.1345][GRAD: 0.1855][VORT: 0.2466][Total: 0.6573]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.061409	vorticity_error: 0.686026	mean_abs_divergence: 0.111017
[DIV2K x2]	rel_l2_error: 0.054083	vorticity_error: 0.548750	mean_abs_divergence: 0.055235
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.041068	vorticity_error: 0.542321	mean_abs_divergence: 0.026045
Forward: 15.57s

Saving...
Total: 15.88s

[Epoch 541]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0770][DIV: 0.1169][GRAD: 0.1579][VORT: 0.2135][Total: 0.5652]	5.1+16.9s
[1600/8000]	[L1: 0.0815][DIV: 0.1216][GRAD: 0.1674][VORT: 0.2285][Total: 0.5990]	4.7+3.1s
[2400/8000]	[L1: 0.0809][DIV: 0.1208][GRAD: 0.1663][VORT: 0.2259][Total: 0.5938]	4.8+3.1s
[3200/8000]	[L1: 0.0833][DIV: 0.1239][GRAD: 0.1711][VORT: 0.2322][Total: 0.6106]	4.8+3.0s
[4000/8000]	[L1: 0.0836][DIV: 0.1249][GRAD: 0.1714][VORT: 0.2303][Total: 0.6101]	4.9+3.0s
[4800/8000]	[L1: 0.0846][DIV: 0.1262][GRAD: 0.1734][VORT: 0.2320][Total: 0.6163]	4.8+3.1s
[5600/8000]	[L1: 0.0850][DIV: 0.1267][GRAD: 0.1741][VORT: 0.2332][Total: 0.6189]	4.8+3.0s
[6400/8000]	[L1: 0.0851][DIV: 0.1267][GRAD: 0.1741][VORT: 0.2329][Total: 0.6188]	4.8+3.0s
[7200/8000]	[L1: 0.0851][DIV: 0.1267][GRAD: 0.1742][VORT: 0.2333][Total: 0.6191]	4.8+3.0s
[8000/8000]	[L1: 0.0854][DIV: 0.1269][GRAD: 0.1748][VORT: 0.2341][Total: 0.6212]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.081065	vorticity_error: 0.727845	mean_abs_divergence: 0.131804
[DIV2K x2]	rel_l2_error: 0.062595	vorticity_error: 0.618344	mean_abs_divergence: 0.068275
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043512	vorticity_error: 0.529316	mean_abs_divergence: 0.033482
Forward: 15.60s

Saving...
Total: 15.93s

[Epoch 542]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0932][DIV: 0.1378][GRAD: 0.1898][VORT: 0.2488][Total: 0.6696]	5.1+16.8s
[1600/8000]	[L1: 0.0915][DIV: 0.1342][GRAD: 0.1870][VORT: 0.2465][Total: 0.6591]	4.8+3.0s
[2400/8000]	[L1: 0.0891][DIV: 0.1318][GRAD: 0.1825][VORT: 0.2432][Total: 0.6465]	4.8+3.0s
[3200/8000]	[L1: 0.0887][DIV: 0.1312][GRAD: 0.1817][VORT: 0.2430][Total: 0.6447]	4.8+3.0s
[4000/8000]	[L1: 0.0890][DIV: 0.1313][GRAD: 0.1823][VORT: 0.2444][Total: 0.6470]	4.8+3.0s
[4800/8000]	[L1: 0.0893][DIV: 0.1318][GRAD: 0.1831][VORT: 0.2454][Total: 0.6496]	4.8+3.0s
[5600/8000]	[L1: 0.0898][DIV: 0.1320][GRAD: 0.1843][VORT: 0.2469][Total: 0.6531]	4.8+3.0s
[6400/8000]	[L1: 0.0892][DIV: 0.1312][GRAD: 0.1830][VORT: 0.2453][Total: 0.6486]	4.8+3.0s
[7200/8000]	[L1: 0.0883][DIV: 0.1301][GRAD: 0.1811][VORT: 0.2431][Total: 0.6425]	4.8+3.1s
[8000/8000]	[L1: 0.0887][DIV: 0.1307][GRAD: 0.1820][VORT: 0.2441][Total: 0.6455]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.075809	vorticity_error: 0.782209	mean_abs_divergence: 0.115867
[DIV2K x2]	rel_l2_error: 0.065647	vorticity_error: 0.869842	mean_abs_divergence: 0.058233
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045429	vorticity_error: 0.905025	mean_abs_divergence: 0.027040
Forward: 15.59s

Saving...
Total: 15.92s

[Epoch 543]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0909][DIV: 0.1366][GRAD: 0.1849][VORT: 0.2453][Total: 0.6577]	5.0+16.9s
[1600/8000]	[L1: 0.0884][DIV: 0.1317][GRAD: 0.1804][VORT: 0.2416][Total: 0.6420]	4.8+3.1s
[2400/8000]	[L1: 0.0872][DIV: 0.1296][GRAD: 0.1780][VORT: 0.2369][Total: 0.6317]	4.8+3.1s
[3200/8000]	[L1: 0.0861][DIV: 0.1281][GRAD: 0.1761][VORT: 0.2355][Total: 0.6257]	4.8+3.0s
[4000/8000]	[L1: 0.0852][DIV: 0.1268][GRAD: 0.1744][VORT: 0.2345][Total: 0.6209]	4.8+3.1s
[4800/8000]	[L1: 0.0854][DIV: 0.1271][GRAD: 0.1749][VORT: 0.2350][Total: 0.6223]	5.0+3.2s
[5600/8000]	[L1: 0.0864][DIV: 0.1282][GRAD: 0.1770][VORT: 0.2378][Total: 0.6293]	4.9+3.3s
[6400/8000]	[L1: 0.0861][DIV: 0.1278][GRAD: 0.1763][VORT: 0.2360][Total: 0.6262]	4.9+3.2s
[7200/8000]	[L1: 0.0871][DIV: 0.1289][GRAD: 0.1785][VORT: 0.2386][Total: 0.6331]	4.8+3.2s
[8000/8000]	[L1: 0.0868][DIV: 0.1287][GRAD: 0.1779][VORT: 0.2379][Total: 0.6312]	4.9+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.083654	vorticity_error: 0.853182	mean_abs_divergence: 0.116630
[DIV2K x2]	rel_l2_error: 0.060989	vorticity_error: 0.820250	mean_abs_divergence: 0.062604
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.049781	vorticity_error: 0.752605	mean_abs_divergence: 0.031373
Forward: 15.65s

Saving...
Total: 15.98s

[Epoch 544]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0908][DIV: 0.1326][GRAD: 0.1858][VORT: 0.2410][Total: 0.6502]	5.1+17.1s
[1600/8000]	[L1: 0.0892][DIV: 0.1306][GRAD: 0.1826][VORT: 0.2396][Total: 0.6420]	4.9+3.2s
[2400/8000]	[L1: 0.0896][DIV: 0.1312][GRAD: 0.1836][VORT: 0.2430][Total: 0.6474]	4.8+3.2s
[3200/8000]	[L1: 0.0882][DIV: 0.1293][GRAD: 0.1805][VORT: 0.2399][Total: 0.6378]	4.8+3.2s
[4000/8000]	[L1: 0.0894][DIV: 0.1308][GRAD: 0.1828][VORT: 0.2423][Total: 0.6452]	4.8+3.2s
[4800/8000]	[L1: 0.0896][DIV: 0.1314][GRAD: 0.1834][VORT: 0.2434][Total: 0.6478]	4.9+3.1s
[5600/8000]	[L1: 0.0898][DIV: 0.1317][GRAD: 0.1837][VORT: 0.2443][Total: 0.6496]	4.9+3.1s
[6400/8000]	[L1: 0.0898][DIV: 0.1321][GRAD: 0.1837][VORT: 0.2439][Total: 0.6495]	4.9+3.1s
[7200/8000]	[L1: 0.0893][DIV: 0.1315][GRAD: 0.1830][VORT: 0.2432][Total: 0.6470]	4.9+3.1s
[8000/8000]	[L1: 0.0883][DIV: 0.1300][GRAD: 0.1809][VORT: 0.2410][Total: 0.6403]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.068753	vorticity_error: 0.658688	mean_abs_divergence: 0.111371
[DIV2K x2]	rel_l2_error: 0.055990	vorticity_error: 0.619445	mean_abs_divergence: 0.057989
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.041026	vorticity_error: 0.620920	mean_abs_divergence: 0.028169
Forward: 15.68s

Saving...
Total: 16.02s

[Epoch 545]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0962][DIV: 0.1382][GRAD: 0.1980][VORT: 0.2658][Total: 0.6983]	5.2+17.0s
[1600/8000]	[L1: 0.0968][DIV: 0.1396][GRAD: 0.1994][VORT: 0.2696][Total: 0.7055]	4.9+3.2s
[2400/8000]	[L1: 0.0930][DIV: 0.1347][GRAD: 0.1916][VORT: 0.2602][Total: 0.6795]	4.9+3.1s
[3200/8000]	[L1: 0.0906][DIV: 0.1320][GRAD: 0.1864][VORT: 0.2537][Total: 0.6626]	4.9+3.1s
[4000/8000]	[L1: 0.0895][DIV: 0.1311][GRAD: 0.1842][VORT: 0.2506][Total: 0.6554]	4.9+3.1s
[4800/8000]	[L1: 0.0903][DIV: 0.1321][GRAD: 0.1857][VORT: 0.2512][Total: 0.6593]	4.8+3.2s
[5600/8000]	[L1: 0.0896][DIV: 0.1318][GRAD: 0.1843][VORT: 0.2495][Total: 0.6553]	4.8+3.2s
[6400/8000]	[L1: 0.0901][DIV: 0.1325][GRAD: 0.1854][VORT: 0.2501][Total: 0.6581]	4.8+3.2s
[7200/8000]	[L1: 0.0903][DIV: 0.1329][GRAD: 0.1857][VORT: 0.2504][Total: 0.6593]	4.8+3.2s
[8000/8000]	[L1: 0.0898][DIV: 0.1324][GRAD: 0.1846][VORT: 0.2486][Total: 0.6554]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.083600	vorticity_error: 0.688114	mean_abs_divergence: 0.130775
[DIV2K x2]	rel_l2_error: 0.060120	vorticity_error: 0.759162	mean_abs_divergence: 0.067758
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045590	vorticity_error: 0.587785	mean_abs_divergence: 0.032243
Forward: 15.57s

Saving...
Total: 15.90s

[Epoch 546]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0886][DIV: 0.1306][GRAD: 0.1818][VORT: 0.2471][Total: 0.6482]	5.0+17.0s
[1600/8000]	[L1: 0.0876][DIV: 0.1297][GRAD: 0.1800][VORT: 0.2421][Total: 0.6395]	4.8+3.2s
[2400/8000]	[L1: 0.0876][DIV: 0.1301][GRAD: 0.1796][VORT: 0.2401][Total: 0.6374]	4.9+3.1s
[3200/8000]	[L1: 0.0893][DIV: 0.1323][GRAD: 0.1833][VORT: 0.2431][Total: 0.6480]	4.9+3.2s
[4000/8000]	[L1: 0.0879][DIV: 0.1306][GRAD: 0.1803][VORT: 0.2401][Total: 0.6389]	4.8+3.2s
[4800/8000]	[L1: 0.0884][DIV: 0.1309][GRAD: 0.1816][VORT: 0.2429][Total: 0.6438]	4.8+3.2s
[5600/8000]	[L1: 0.0886][DIV: 0.1315][GRAD: 0.1820][VORT: 0.2443][Total: 0.6465]	4.8+3.2s
[6400/8000]	[L1: 0.0881][DIV: 0.1307][GRAD: 0.1808][VORT: 0.2428][Total: 0.6424]	4.8+3.2s
[7200/8000]	[L1: 0.0879][DIV: 0.1303][GRAD: 0.1805][VORT: 0.2429][Total: 0.6416]	4.9+3.2s
[8000/8000]	[L1: 0.0882][DIV: 0.1307][GRAD: 0.1811][VORT: 0.2444][Total: 0.6444]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.096240	vorticity_error: 1.253756	mean_abs_divergence: 0.124506
[DIV2K x2]	rel_l2_error: 0.073126	vorticity_error: 1.506237	mean_abs_divergence: 0.067998
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.052356	vorticity_error: 1.514606	mean_abs_divergence: 0.033596
Forward: 15.61s

Saving...
Total: 15.95s

[Epoch 547]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0884][DIV: 0.1310][GRAD: 0.1814][VORT: 0.2527][Total: 0.6535]	5.2+17.0s
[1600/8000]	[L1: 0.0865][DIV: 0.1287][GRAD: 0.1773][VORT: 0.2416][Total: 0.6341]	4.9+3.2s
[2400/8000]	[L1: 0.0866][DIV: 0.1291][GRAD: 0.1776][VORT: 0.2416][Total: 0.6350]	4.9+3.2s
[3200/8000]	[L1: 0.0878][DIV: 0.1304][GRAD: 0.1801][VORT: 0.2435][Total: 0.6418]	4.9+3.1s
[4000/8000]	[L1: 0.0885][DIV: 0.1315][GRAD: 0.1814][VORT: 0.2444][Total: 0.6459]	4.9+3.1s
[4800/8000]	[L1: 0.0893][DIV: 0.1328][GRAD: 0.1831][VORT: 0.2467][Total: 0.6519]	4.8+3.2s
[5600/8000]	[L1: 0.0897][DIV: 0.1329][GRAD: 0.1839][VORT: 0.2481][Total: 0.6545]	4.9+3.2s
[6400/8000]	[L1: 0.0907][DIV: 0.1341][GRAD: 0.1858][VORT: 0.2494][Total: 0.6601]	4.8+3.2s
[7200/8000]	[L1: 0.0902][DIV: 0.1335][GRAD: 0.1849][VORT: 0.2486][Total: 0.6572]	4.9+3.1s
[8000/8000]	[L1: 0.0901][DIV: 0.1333][GRAD: 0.1845][VORT: 0.2480][Total: 0.6559]	4.9+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.059735	vorticity_error: 0.749373	mean_abs_divergence: 0.081206
[DIV2K x2]	rel_l2_error: 0.051381	vorticity_error: 0.573350	mean_abs_divergence: 0.041765
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.038871	vorticity_error: 0.507716	mean_abs_divergence: 0.020709
Forward: 15.63s

Saving...
Total: 15.97s

[Epoch 548]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0953][DIV: 0.1407][GRAD: 0.1955][VORT: 0.2622][Total: 0.6937]	5.2+17.0s
[1600/8000]	[L1: 0.0934][DIV: 0.1377][GRAD: 0.1920][VORT: 0.2553][Total: 0.6784]	4.8+3.2s
[2400/8000]	[L1: 0.0916][DIV: 0.1354][GRAD: 0.1878][VORT: 0.2486][Total: 0.6634]	4.9+3.1s
[3200/8000]	[L1: 0.0909][DIV: 0.1348][GRAD: 0.1862][VORT: 0.2460][Total: 0.6579]	4.8+3.2s
[4000/8000]	[L1: 0.0915][DIV: 0.1354][GRAD: 0.1874][VORT: 0.2460][Total: 0.6604]	4.9+3.2s
[4800/8000]	[L1: 0.0924][DIV: 0.1364][GRAD: 0.1893][VORT: 0.2492][Total: 0.6673]	4.8+3.2s
[5600/8000]	[L1: 0.0922][DIV: 0.1361][GRAD: 0.1888][VORT: 0.2479][Total: 0.6650]	4.9+3.1s
[6400/8000]	[L1: 0.0921][DIV: 0.1361][GRAD: 0.1885][VORT: 0.2472][Total: 0.6638]	4.9+3.1s
[7200/8000]	[L1: 0.0910][DIV: 0.1347][GRAD: 0.1863][VORT: 0.2451][Total: 0.6570]	4.9+3.2s
[8000/8000]	[L1: 0.0904][DIV: 0.1339][GRAD: 0.1850][VORT: 0.2437][Total: 0.6531]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.078934	vorticity_error: 0.692689	mean_abs_divergence: 0.111100
[DIV2K x2]	rel_l2_error: 0.058736	vorticity_error: 0.599755	mean_abs_divergence: 0.060440
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044172	vorticity_error: 0.496795	mean_abs_divergence: 0.030011
Forward: 15.70s

Saving...
Total: 16.03s

[Epoch 549]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0920][DIV: 0.1351][GRAD: 0.1872][VORT: 0.2434][Total: 0.6576]	5.1+17.0s
[1600/8000]	[L1: 0.0904][DIV: 0.1326][GRAD: 0.1852][VORT: 0.2454][Total: 0.6537]	4.9+3.2s
[2400/8000]	[L1: 0.0895][DIV: 0.1323][GRAD: 0.1832][VORT: 0.2431][Total: 0.6480]	4.9+3.2s
[3200/8000]	[L1: 0.0872][DIV: 0.1293][GRAD: 0.1785][VORT: 0.2389][Total: 0.6338]	4.9+3.2s
[4000/8000]	[L1: 0.0869][DIV: 0.1288][GRAD: 0.1780][VORT: 0.2382][Total: 0.6319]	4.8+3.2s
[4800/8000]	[L1: 0.0870][DIV: 0.1287][GRAD: 0.1780][VORT: 0.2366][Total: 0.6304]	4.9+3.2s
[5600/8000]	[L1: 0.0877][DIV: 0.1295][GRAD: 0.1793][VORT: 0.2380][Total: 0.6345]	4.9+3.1s
[6400/8000]	[L1: 0.0872][DIV: 0.1289][GRAD: 0.1784][VORT: 0.2367][Total: 0.6313]	4.8+3.2s
[7200/8000]	[L1: 0.0864][DIV: 0.1280][GRAD: 0.1768][VORT: 0.2346][Total: 0.6259]	4.8+3.2s
[8000/8000]	[L1: 0.0868][DIV: 0.1286][GRAD: 0.1776][VORT: 0.2361][Total: 0.6292]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.083710	vorticity_error: 0.919471	mean_abs_divergence: 0.130880
[DIV2K x2]	rel_l2_error: 0.070692	vorticity_error: 0.861018	mean_abs_divergence: 0.070052
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.050031	vorticity_error: 0.682468	mean_abs_divergence: 0.034590
Forward: 15.67s

Saving...
Total: 15.99s

[Epoch 550]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0902][DIV: 0.1319][GRAD: 0.1845][VORT: 0.2424][Total: 0.6489]	5.2+17.0s
[1600/8000]	[L1: 0.0894][DIV: 0.1316][GRAD: 0.1836][VORT: 0.2460][Total: 0.6506]	4.8+3.2s
[2400/8000]	[L1: 0.0883][DIV: 0.1309][GRAD: 0.1810][VORT: 0.2437][Total: 0.6439]	4.9+3.2s
[3200/8000]	[L1: 0.0894][DIV: 0.1319][GRAD: 0.1830][VORT: 0.2462][Total: 0.6505]	4.9+3.1s
[4000/8000]	[L1: 0.0895][DIV: 0.1320][GRAD: 0.1834][VORT: 0.2486][Total: 0.6534]	4.9+3.2s
[4800/8000]	[L1: 0.0896][DIV: 0.1322][GRAD: 0.1836][VORT: 0.2478][Total: 0.6532]	4.8+3.2s
[5600/8000]	[L1: 0.0892][DIV: 0.1320][GRAD: 0.1830][VORT: 0.2468][Total: 0.6512]	4.9+3.2s
[6400/8000]	[L1: 0.0888][DIV: 0.1313][GRAD: 0.1822][VORT: 0.2462][Total: 0.6485]	4.8+3.2s
[7200/8000]	[L1: 0.0895][DIV: 0.1322][GRAD: 0.1836][VORT: 0.2477][Total: 0.6530]	4.9+3.2s
[8000/8000]	[L1: 0.0900][DIV: 0.1329][GRAD: 0.1846][VORT: 0.2493][Total: 0.6569]	4.9+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.079796	vorticity_error: 0.729375	mean_abs_divergence: 0.140722
[DIV2K x2]	rel_l2_error: 0.062924	vorticity_error: 0.639954	mean_abs_divergence: 0.074262
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.046034	vorticity_error: 0.557854	mean_abs_divergence: 0.036223
Forward: 15.72s

Saving...
Total: 16.04s

[Epoch 551]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0856][DIV: 0.1296][GRAD: 0.1753][VORT: 0.2329][Total: 0.6233]	5.0+17.0s
[1600/8000]	[L1: 0.0870][DIV: 0.1292][GRAD: 0.1781][VORT: 0.2370][Total: 0.6313]	4.9+3.1s
[2400/8000]	[L1: 0.0875][DIV: 0.1292][GRAD: 0.1788][VORT: 0.2381][Total: 0.6336]	4.9+3.1s
[3200/8000]	[L1: 0.0876][DIV: 0.1297][GRAD: 0.1787][VORT: 0.2375][Total: 0.6333]	4.9+3.2s
[4000/8000]	[L1: 0.0872][DIV: 0.1292][GRAD: 0.1783][VORT: 0.2384][Total: 0.6331]	4.9+3.2s
[4800/8000]	[L1: 0.0879][DIV: 0.1299][GRAD: 0.1798][VORT: 0.2402][Total: 0.6378]	4.9+3.2s
[5600/8000]	[L1: 0.0880][DIV: 0.1298][GRAD: 0.1801][VORT: 0.2404][Total: 0.6383]	4.9+3.2s
[6400/8000]	[L1: 0.0885][DIV: 0.1306][GRAD: 0.1810][VORT: 0.2410][Total: 0.6410]	4.9+3.2s
[7200/8000]	[L1: 0.0882][DIV: 0.1306][GRAD: 0.1804][VORT: 0.2397][Total: 0.6389]	4.9+3.2s
[8000/8000]	[L1: 0.0879][DIV: 0.1305][GRAD: 0.1797][VORT: 0.2381][Total: 0.6362]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.081727	vorticity_error: 0.663753	mean_abs_divergence: 0.120117
[DIV2K x2]	rel_l2_error: 0.062059	vorticity_error: 0.788049	mean_abs_divergence: 0.063493
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.046524	vorticity_error: 0.866693	mean_abs_divergence: 0.030424
Forward: 15.64s

Saving...
Total: 16.02s

[Epoch 552]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0890][DIV: 0.1331][GRAD: 0.1827][VORT: 0.2438][Total: 0.6486]	5.2+17.0s
[1600/8000]	[L1: 0.0863][DIV: 0.1300][GRAD: 0.1767][VORT: 0.2343][Total: 0.6273]	4.9+3.1s
[2400/8000]	[L1: 0.0859][DIV: 0.1291][GRAD: 0.1761][VORT: 0.2363][Total: 0.6274]	4.9+3.1s
[3200/8000]	[L1: 0.0877][DIV: 0.1307][GRAD: 0.1799][VORT: 0.2399][Total: 0.6382]	4.9+3.1s
[4000/8000]	[L1: 0.0885][DIV: 0.1315][GRAD: 0.1817][VORT: 0.2424][Total: 0.6441]	4.9+3.1s
[4800/8000]	[L1: 0.0886][DIV: 0.1313][GRAD: 0.1817][VORT: 0.2427][Total: 0.6442]	4.9+3.2s
[5600/8000]	[L1: 0.0879][DIV: 0.1304][GRAD: 0.1803][VORT: 0.2403][Total: 0.6389]	4.9+3.1s
[6400/8000]	[L1: 0.0878][DIV: 0.1300][GRAD: 0.1799][VORT: 0.2401][Total: 0.6379]	4.9+3.2s
[7200/8000]	[L1: 0.0884][DIV: 0.1309][GRAD: 0.1810][VORT: 0.2414][Total: 0.6417]	4.9+3.2s
[8000/8000]	[L1: 0.0887][DIV: 0.1309][GRAD: 0.1816][VORT: 0.2425][Total: 0.6437]	4.9+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.079044	vorticity_error: 0.736150	mean_abs_divergence: 0.099654
[DIV2K x2]	rel_l2_error: 0.058589	vorticity_error: 1.050378	mean_abs_divergence: 0.053110
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.047217	vorticity_error: 0.850770	mean_abs_divergence: 0.025923
Forward: 15.80s

Saving...
Total: 16.12s

[Epoch 553]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0869][DIV: 0.1286][GRAD: 0.1777][VORT: 0.2412][Total: 0.6344]	5.2+17.1s
[1600/8000]	[L1: 0.0916][DIV: 0.1352][GRAD: 0.1880][VORT: 0.2529][Total: 0.6677]	4.9+3.2s
[2400/8000]	[L1: 0.0916][DIV: 0.1351][GRAD: 0.1877][VORT: 0.2532][Total: 0.6675]	4.9+3.2s
[3200/8000]	[L1: 0.0920][DIV: 0.1354][GRAD: 0.1890][VORT: 0.2544][Total: 0.6708]	4.9+3.2s
[4000/8000]	[L1: 0.0921][DIV: 0.1358][GRAD: 0.1891][VORT: 0.2545][Total: 0.6714]	4.9+3.1s
[4800/8000]	[L1: 0.0904][DIV: 0.1336][GRAD: 0.1855][VORT: 0.2490][Total: 0.6586]	4.8+3.2s
[5600/8000]	[L1: 0.0899][DIV: 0.1330][GRAD: 0.1845][VORT: 0.2474][Total: 0.6548]	4.9+3.1s
[6400/8000]	[L1: 0.0897][DIV: 0.1328][GRAD: 0.1840][VORT: 0.2469][Total: 0.6534]	4.9+3.2s
[7200/8000]	[L1: 0.0900][DIV: 0.1333][GRAD: 0.1849][VORT: 0.2481][Total: 0.6563]	4.8+3.2s
[8000/8000]	[L1: 0.0894][DIV: 0.1325][GRAD: 0.1836][VORT: 0.2471][Total: 0.6526]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.075095	vorticity_error: 2.990107	mean_abs_divergence: 0.130012
[DIV2K x2]	rel_l2_error: 0.062502	vorticity_error: 0.874568	mean_abs_divergence: 0.068707
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.046357	vorticity_error: 0.797147	mean_abs_divergence: 0.033813
Forward: 15.63s

Saving...
Total: 15.95s

[Epoch 554]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0890][DIV: 0.1332][GRAD: 0.1825][VORT: 0.2444][Total: 0.6490]	5.0+17.0s
[1600/8000]	[L1: 0.0892][DIV: 0.1320][GRAD: 0.1829][VORT: 0.2426][Total: 0.6467]	4.9+3.1s
[2400/8000]	[L1: 0.0857][DIV: 0.1281][GRAD: 0.1757][VORT: 0.2325][Total: 0.6220]	4.8+3.2s
[3200/8000]	[L1: 0.0863][DIV: 0.1292][GRAD: 0.1769][VORT: 0.2350][Total: 0.6273]	4.8+3.2s
[4000/8000]	[L1: 0.0850][DIV: 0.1279][GRAD: 0.1741][VORT: 0.2309][Total: 0.6179]	4.9+3.2s
[4800/8000]	[L1: 0.0869][DIV: 0.1299][GRAD: 0.1778][VORT: 0.2350][Total: 0.6296]	4.8+3.2s
[5600/8000]	[L1: 0.0876][DIV: 0.1308][GRAD: 0.1793][VORT: 0.2363][Total: 0.6341]	4.9+3.2s
[6400/8000]	[L1: 0.0874][DIV: 0.1302][GRAD: 0.1789][VORT: 0.2365][Total: 0.6330]	4.9+3.2s
[7200/8000]	[L1: 0.0866][DIV: 0.1289][GRAD: 0.1773][VORT: 0.2354][Total: 0.6283]	4.9+3.2s
[8000/8000]	[L1: 0.0868][DIV: 0.1293][GRAD: 0.1779][VORT: 0.2369][Total: 0.6309]	4.9+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.065278	vorticity_error: 0.745497	mean_abs_divergence: 0.089175
[DIV2K x2]	rel_l2_error: 0.048401	vorticity_error: 0.838305	mean_abs_divergence: 0.045337
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.037990	vorticity_error: 0.650381	mean_abs_divergence: 0.021497
Forward: 15.78s

Saving...
Total: 16.09s

[Epoch 555]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0872][DIV: 0.1274][GRAD: 0.1793][VORT: 0.2452][Total: 0.6390]	5.2+17.1s
[1600/8000]	[L1: 0.0892][DIV: 0.1316][GRAD: 0.1827][VORT: 0.2439][Total: 0.6473]	4.9+3.2s
[2400/8000]	[L1: 0.0874][DIV: 0.1291][GRAD: 0.1784][VORT: 0.2344][Total: 0.6293]	4.9+3.1s
[3200/8000]	[L1: 0.0857][DIV: 0.1272][GRAD: 0.1752][VORT: 0.2330][Total: 0.6210]	4.9+3.2s
[4000/8000]	[L1: 0.0879][DIV: 0.1304][GRAD: 0.1794][VORT: 0.2376][Total: 0.6352]	4.8+3.2s
[4800/8000]	[L1: 0.0871][DIV: 0.1296][GRAD: 0.1781][VORT: 0.2363][Total: 0.6311]	4.9+3.1s
[5600/8000]	[L1: 0.0873][DIV: 0.1296][GRAD: 0.1787][VORT: 0.2386][Total: 0.6342]	4.8+3.2s
[6400/8000]	[L1: 0.0867][DIV: 0.1288][GRAD: 0.1776][VORT: 0.2375][Total: 0.6306]	4.9+3.2s
[7200/8000]	[L1: 0.0870][DIV: 0.1291][GRAD: 0.1781][VORT: 0.2378][Total: 0.6320]	4.8+3.2s
[8000/8000]	[L1: 0.0869][DIV: 0.1291][GRAD: 0.1781][VORT: 0.2378][Total: 0.6319]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.071642	vorticity_error: 0.637965	mean_abs_divergence: 0.136266
[DIV2K x2]	rel_l2_error: 0.056611	vorticity_error: 0.533297	mean_abs_divergence: 0.072593
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.039640	vorticity_error: 0.521733	mean_abs_divergence: 0.035608
Forward: 15.77s

Saving...
Total: 16.09s

[Epoch 556]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0873][DIV: 0.1306][GRAD: 0.1790][VORT: 0.2367][Total: 0.6336]	5.1+17.0s
[1600/8000]	[L1: 0.0887][DIV: 0.1313][GRAD: 0.1815][VORT: 0.2384][Total: 0.6400]	4.8+3.1s
[2400/8000]	[L1: 0.0892][DIV: 0.1317][GRAD: 0.1827][VORT: 0.2417][Total: 0.6452]	4.8+3.1s
[3200/8000]	[L1: 0.0893][DIV: 0.1318][GRAD: 0.1828][VORT: 0.2414][Total: 0.6452]	4.9+3.1s
[4000/8000]	[L1: 0.0887][DIV: 0.1313][GRAD: 0.1814][VORT: 0.2396][Total: 0.6410]	4.9+3.1s
[4800/8000]	[L1: 0.0883][DIV: 0.1310][GRAD: 0.1806][VORT: 0.2385][Total: 0.6385]	4.9+3.1s
[5600/8000]	[L1: 0.0888][DIV: 0.1316][GRAD: 0.1816][VORT: 0.2408][Total: 0.6428]	4.9+3.1s
[6400/8000]	[L1: 0.0888][DIV: 0.1316][GRAD: 0.1818][VORT: 0.2419][Total: 0.6441]	4.9+3.1s
[7200/8000]	[L1: 0.0889][DIV: 0.1315][GRAD: 0.1819][VORT: 0.2426][Total: 0.6449]	4.9+3.2s
[8000/8000]	[L1: 0.0885][DIV: 0.1309][GRAD: 0.1810][VORT: 0.2411][Total: 0.6416]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.105096	vorticity_error: 1.191237	mean_abs_divergence: 0.140098
[DIV2K x2]	rel_l2_error: 0.073831	vorticity_error: 3.723798	mean_abs_divergence: 0.075344
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.055350	vorticity_error: 1.041341	mean_abs_divergence: 0.036886
Forward: 15.86s

Saving...
Total: 16.24s

[Epoch 557]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0886][DIV: 0.1290][GRAD: 0.1815][VORT: 0.2460][Total: 0.6451]	5.1+17.1s
[1600/8000]	[L1: 0.0859][DIV: 0.1265][GRAD: 0.1753][VORT: 0.2355][Total: 0.6232]	4.9+3.1s
[2400/8000]	[L1: 0.0874][DIV: 0.1290][GRAD: 0.1784][VORT: 0.2387][Total: 0.6335]	4.9+3.2s
[3200/8000]	[L1: 0.0882][DIV: 0.1310][GRAD: 0.1799][VORT: 0.2392][Total: 0.6383]	4.9+3.1s
[4000/8000]	[L1: 0.0895][DIV: 0.1323][GRAD: 0.1826][VORT: 0.2416][Total: 0.6461]	4.9+3.1s
[4800/8000]	[L1: 0.0907][DIV: 0.1337][GRAD: 0.1849][VORT: 0.2446][Total: 0.6539]	4.9+3.1s
[5600/8000]	[L1: 0.0899][DIV: 0.1327][GRAD: 0.1836][VORT: 0.2441][Total: 0.6502]	4.9+3.2s
[6400/8000]	[L1: 0.0898][DIV: 0.1326][GRAD: 0.1835][VORT: 0.2436][Total: 0.6494]	5.0+3.1s
[7200/8000]	[L1: 0.0903][DIV: 0.1332][GRAD: 0.1844][VORT: 0.2438][Total: 0.6516]	4.8+3.2s
[8000/8000]	[L1: 0.0900][DIV: 0.1329][GRAD: 0.1840][VORT: 0.2434][Total: 0.6504]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.090457	vorticity_error: 0.922606	mean_abs_divergence: 0.137007
[DIV2K x2]	rel_l2_error: 0.073052	vorticity_error: 0.916227	mean_abs_divergence: 0.073199
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048899	vorticity_error: 0.703672	mean_abs_divergence: 0.035694
Forward: 15.72s

Saving...
Total: 16.04s

[Epoch 558]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0874][DIV: 0.1280][GRAD: 0.1804][VORT: 0.2436][Total: 0.6395]	5.1+17.1s
[1600/8000]	[L1: 0.0897][DIV: 0.1318][GRAD: 0.1847][VORT: 0.2502][Total: 0.6564]	4.9+3.2s
[2400/8000]	[L1: 0.0878][DIV: 0.1296][GRAD: 0.1807][VORT: 0.2456][Total: 0.6436]	4.9+3.1s
[3200/8000]	[L1: 0.0884][DIV: 0.1298][GRAD: 0.1820][VORT: 0.2473][Total: 0.6475]	4.8+3.2s
[4000/8000]	[L1: 0.0872][DIV: 0.1288][GRAD: 0.1792][VORT: 0.2437][Total: 0.6389]	4.8+3.2s
[4800/8000]	[L1: 0.0884][DIV: 0.1307][GRAD: 0.1812][VORT: 0.2450][Total: 0.6453]	4.8+3.2s
[5600/8000]	[L1: 0.0881][DIV: 0.1304][GRAD: 0.1806][VORT: 0.2444][Total: 0.6435]	4.9+3.1s
[6400/8000]	[L1: 0.0873][DIV: 0.1292][GRAD: 0.1791][VORT: 0.2422][Total: 0.6378]	4.8+3.2s
[7200/8000]	[L1: 0.0871][DIV: 0.1291][GRAD: 0.1786][VORT: 0.2415][Total: 0.6364]	4.8+3.2s
[8000/8000]	[L1: 0.0872][DIV: 0.1293][GRAD: 0.1787][VORT: 0.2416][Total: 0.6368]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.081177	vorticity_error: 2.420941	mean_abs_divergence: 0.122180
[DIV2K x2]	rel_l2_error: 0.061531	vorticity_error: 1.244607	mean_abs_divergence: 0.065057
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044130	vorticity_error: 0.944895	mean_abs_divergence: 0.032493
Forward: 15.76s

Saving...
Total: 16.08s

[Epoch 559]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0804][DIV: 0.1198][GRAD: 0.1655][VORT: 0.2270][Total: 0.5928]	5.1+17.1s
[1600/8000]	[L1: 0.0808][DIV: 0.1211][GRAD: 0.1661][VORT: 0.2248][Total: 0.5929]	4.9+3.1s
[2400/8000]	[L1: 0.0830][DIV: 0.1234][GRAD: 0.1703][VORT: 0.2299][Total: 0.6066]	4.8+3.2s
[3200/8000]	[L1: 0.0839][DIV: 0.1252][GRAD: 0.1720][VORT: 0.2299][Total: 0.6110]	4.9+3.1s
[4000/8000]	[L1: 0.0842][DIV: 0.1259][GRAD: 0.1725][VORT: 0.2310][Total: 0.6136]	4.9+3.1s
[4800/8000]	[L1: 0.0847][DIV: 0.1265][GRAD: 0.1734][VORT: 0.2319][Total: 0.6164]	4.9+3.2s
[5600/8000]	[L1: 0.0855][DIV: 0.1274][GRAD: 0.1751][VORT: 0.2341][Total: 0.6221]	4.9+3.1s
[6400/8000]	[L1: 0.0852][DIV: 0.1270][GRAD: 0.1744][VORT: 0.2330][Total: 0.6196]	4.9+3.2s
[7200/8000]	[L1: 0.0849][DIV: 0.1265][GRAD: 0.1737][VORT: 0.2323][Total: 0.6174]	4.9+3.1s
[8000/8000]	[L1: 0.0846][DIV: 0.1262][GRAD: 0.1733][VORT: 0.2325][Total: 0.6166]	4.9+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.080148	vorticity_error: 1.247634	mean_abs_divergence: 0.111905
[DIV2K x2]	rel_l2_error: 0.069152	vorticity_error: 1.068482	mean_abs_divergence: 0.058784
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.053346	vorticity_error: 0.864270	mean_abs_divergence: 0.028410
Forward: 15.69s

Saving...
Total: 16.03s

[Epoch 560]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0948][DIV: 0.1405][GRAD: 0.1945][VORT: 0.2606][Total: 0.6904]	5.1+17.1s
[1600/8000]	[L1: 0.0918][DIV: 0.1360][GRAD: 0.1885][VORT: 0.2512][Total: 0.6676]	4.9+3.1s
[2400/8000]	[L1: 0.0885][DIV: 0.1312][GRAD: 0.1816][VORT: 0.2442][Total: 0.6454]	4.9+3.2s
[3200/8000]	[L1: 0.0887][DIV: 0.1311][GRAD: 0.1820][VORT: 0.2463][Total: 0.6481]	4.8+3.2s
[4000/8000]	[L1: 0.0881][DIV: 0.1304][GRAD: 0.1810][VORT: 0.2455][Total: 0.6451]	4.9+3.2s
[4800/8000]	[L1: 0.0878][DIV: 0.1301][GRAD: 0.1801][VORT: 0.2442][Total: 0.6422]	4.9+3.2s
[5600/8000]	[L1: 0.0884][DIV: 0.1311][GRAD: 0.1814][VORT: 0.2448][Total: 0.6456]	4.8+3.2s
[6400/8000]	[L1: 0.0872][DIV: 0.1297][GRAD: 0.1790][VORT: 0.2422][Total: 0.6381]	4.9+3.1s
[7200/8000]	[L1: 0.0873][DIV: 0.1296][GRAD: 0.1791][VORT: 0.2425][Total: 0.6384]	4.9+3.2s
[8000/8000]	[L1: 0.0869][DIV: 0.1292][GRAD: 0.1783][VORT: 0.2411][Total: 0.6355]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.094596	vorticity_error: 1.274527	mean_abs_divergence: 0.149498
[DIV2K x2]	rel_l2_error: 0.069599	vorticity_error: 1.262431	mean_abs_divergence: 0.080328
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.051826	vorticity_error: 1.021678	mean_abs_divergence: 0.039902
Forward: 15.70s

Saving...
Total: 16.09s

[Epoch 561]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0900][DIV: 0.1351][GRAD: 0.1833][VORT: 0.2497][Total: 0.6581]	5.2+17.0s
[1600/8000]	[L1: 0.0880][DIV: 0.1314][GRAD: 0.1795][VORT: 0.2430][Total: 0.6420]	4.9+3.2s
[2400/8000]	[L1: 0.0874][DIV: 0.1308][GRAD: 0.1785][VORT: 0.2401][Total: 0.6367]	4.9+3.2s
[3200/8000]	[L1: 0.0888][DIV: 0.1322][GRAD: 0.1815][VORT: 0.2441][Total: 0.6467]	4.8+3.2s
[4000/8000]	[L1: 0.0884][DIV: 0.1314][GRAD: 0.1808][VORT: 0.2428][Total: 0.6435]	4.8+3.2s
[4800/8000]	[L1: 0.0875][DIV: 0.1305][GRAD: 0.1791][VORT: 0.2411][Total: 0.6383]	4.9+3.2s
[5600/8000]	[L1: 0.0868][DIV: 0.1297][GRAD: 0.1777][VORT: 0.2389][Total: 0.6331]	4.8+3.2s
[6400/8000]	[L1: 0.0868][DIV: 0.1294][GRAD: 0.1776][VORT: 0.2378][Total: 0.6316]	4.9+3.2s
[7200/8000]	[L1: 0.0872][DIV: 0.1300][GRAD: 0.1783][VORT: 0.2387][Total: 0.6342]	4.9+3.2s
[8000/8000]	[L1: 0.0868][DIV: 0.1294][GRAD: 0.1774][VORT: 0.2379][Total: 0.6316]	4.9+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.088508	vorticity_error: 0.782421	mean_abs_divergence: 0.126940
[DIV2K x2]	rel_l2_error: 0.063577	vorticity_error: 0.686628	mean_abs_divergence: 0.065062
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.047337	vorticity_error: 0.602290	mean_abs_divergence: 0.031246
Forward: 15.67s

Saving...
Total: 16.00s

[Epoch 562]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0945][DIV: 0.1394][GRAD: 0.1926][VORT: 0.2497][Total: 0.6761]	5.0+16.9s
[1600/8000]	[L1: 0.0898][DIV: 0.1335][GRAD: 0.1838][VORT: 0.2447][Total: 0.6519]	4.8+3.2s
[2400/8000]	[L1: 0.0886][DIV: 0.1312][GRAD: 0.1818][VORT: 0.2458][Total: 0.6474]	5.0+3.1s
[3200/8000]	[L1: 0.0883][DIV: 0.1309][GRAD: 0.1810][VORT: 0.2445][Total: 0.6447]	5.9+2.5s
[4000/8000]	[L1: 0.0880][DIV: 0.1309][GRAD: 0.1804][VORT: 0.2444][Total: 0.6437]	6.9+3.0s
[4800/8000]	[L1: 0.0885][DIV: 0.1316][GRAD: 0.1815][VORT: 0.2457][Total: 0.6473]	5.1+3.1s
[5600/8000]	[L1: 0.0889][DIV: 0.1319][GRAD: 0.1822][VORT: 0.2457][Total: 0.6487]	5.1+3.1s
[6400/8000]	[L1: 0.0899][DIV: 0.1332][GRAD: 0.1845][VORT: 0.2485][Total: 0.6562]	5.1+3.0s
[7200/8000]	[L1: 0.0894][DIV: 0.1324][GRAD: 0.1834][VORT: 0.2471][Total: 0.6523]	5.0+3.1s
[8000/8000]	[L1: 0.0896][DIV: 0.1325][GRAD: 0.1838][VORT: 0.2482][Total: 0.6541]	4.9+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.107048	vorticity_error: 1.023074	mean_abs_divergence: 0.120107
[DIV2K x2]	rel_l2_error: 0.076182	vorticity_error: 3.157915	mean_abs_divergence: 0.063581
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.061475	vorticity_error: 1.420715	mean_abs_divergence: 0.030850
Forward: 15.65s

Saving...
Total: 16.00s

[Epoch 563]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0869][DIV: 0.1291][GRAD: 0.1775][VORT: 0.2379][Total: 0.6315]	5.1+17.1s
[1600/8000]	[L1: 0.0899][DIV: 0.1321][GRAD: 0.1840][VORT: 0.2450][Total: 0.6510]	4.9+3.2s
[2400/8000]	[L1: 0.0875][DIV: 0.1295][GRAD: 0.1792][VORT: 0.2396][Total: 0.6359]	4.9+3.1s
[3200/8000]	[L1: 0.0873][DIV: 0.1286][GRAD: 0.1790][VORT: 0.2409][Total: 0.6358]	4.9+3.2s
[4000/8000]	[L1: 0.0883][DIV: 0.1302][GRAD: 0.1809][VORT: 0.2412][Total: 0.6406]	4.9+3.2s
[4800/8000]	[L1: 0.0872][DIV: 0.1286][GRAD: 0.1787][VORT: 0.2384][Total: 0.6330]	4.9+3.1s
[5600/8000]	[L1: 0.0884][DIV: 0.1299][GRAD: 0.1811][VORT: 0.2417][Total: 0.6411]	4.9+3.1s
[6400/8000]	[L1: 0.0885][DIV: 0.1301][GRAD: 0.1813][VORT: 0.2426][Total: 0.6425]	4.9+3.2s
[7200/8000]	[L1: 0.0895][DIV: 0.1315][GRAD: 0.1832][VORT: 0.2453][Total: 0.6495]	4.9+3.2s
[8000/8000]	[L1: 0.0887][DIV: 0.1306][GRAD: 0.1816][VORT: 0.2431][Total: 0.6440]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.073381	vorticity_error: 0.737389	mean_abs_divergence: 0.101665
[DIV2K x2]	rel_l2_error: 0.060871	vorticity_error: 0.654802	mean_abs_divergence: 0.051864
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042451	vorticity_error: 0.576727	mean_abs_divergence: 0.024921
Forward: 15.69s

Saving...
Total: 16.02s

[Epoch 564]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0897][DIV: 0.1313][GRAD: 0.1836][VORT: 0.2445][Total: 0.6491]	5.1+17.2s
[1600/8000]	[L1: 0.0903][DIV: 0.1331][GRAD: 0.1848][VORT: 0.2454][Total: 0.6536]	4.9+3.2s
[2400/8000]	[L1: 0.0875][DIV: 0.1295][GRAD: 0.1793][VORT: 0.2397][Total: 0.6361]	4.9+3.2s
[3200/8000]	[L1: 0.0876][DIV: 0.1299][GRAD: 0.1794][VORT: 0.2402][Total: 0.6371]	4.9+3.1s
[4000/8000]	[L1: 0.0882][DIV: 0.1307][GRAD: 0.1807][VORT: 0.2415][Total: 0.6411]	4.9+3.2s
[4800/8000]	[L1: 0.0888][DIV: 0.1319][GRAD: 0.1820][VORT: 0.2434][Total: 0.6462]	4.8+3.2s
[5600/8000]	[L1: 0.0890][DIV: 0.1324][GRAD: 0.1822][VORT: 0.2431][Total: 0.6466]	4.9+3.2s
[6400/8000]	[L1: 0.0895][DIV: 0.1329][GRAD: 0.1833][VORT: 0.2442][Total: 0.6500]	4.9+3.2s
[7200/8000]	[L1: 0.0898][DIV: 0.1333][GRAD: 0.1838][VORT: 0.2440][Total: 0.6508]	4.9+3.2s
[8000/8000]	[L1: 0.0906][DIV: 0.1345][GRAD: 0.1856][VORT: 0.2469][Total: 0.6576]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.093709	vorticity_error: 1.144330	mean_abs_divergence: 0.138170
[DIV2K x2]	rel_l2_error: 0.067981	vorticity_error: 0.975735	mean_abs_divergence: 0.073178
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.055078	vorticity_error: 0.821669	mean_abs_divergence: 0.036138
Forward: 15.85s

Saving...
Total: 16.19s

[Epoch 565]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0902][DIV: 0.1321][GRAD: 0.1847][VORT: 0.2518][Total: 0.6589]	5.2+17.1s
[1600/8000]	[L1: 0.0902][DIV: 0.1339][GRAD: 0.1843][VORT: 0.2470][Total: 0.6554]	4.9+3.2s
[2400/8000]	[L1: 0.0879][DIV: 0.1309][GRAD: 0.1797][VORT: 0.2411][Total: 0.6396]	4.9+3.2s
[3200/8000]	[L1: 0.0874][DIV: 0.1303][GRAD: 0.1786][VORT: 0.2394][Total: 0.6357]	4.9+3.1s
[4000/8000]	[L1: 0.0886][DIV: 0.1313][GRAD: 0.1814][VORT: 0.2437][Total: 0.6450]	4.9+3.2s
[4800/8000]	[L1: 0.0889][DIV: 0.1319][GRAD: 0.1819][VORT: 0.2440][Total: 0.6467]	4.9+3.1s
[5600/8000]	[L1: 0.0891][DIV: 0.1322][GRAD: 0.1825][VORT: 0.2456][Total: 0.6494]	4.9+3.2s
[6400/8000]	[L1: 0.0884][DIV: 0.1311][GRAD: 0.1810][VORT: 0.2445][Total: 0.6451]	4.9+3.2s
[7200/8000]	[L1: 0.0888][DIV: 0.1315][GRAD: 0.1819][VORT: 0.2452][Total: 0.6475]	4.9+3.2s
[8000/8000]	[L1: 0.0882][DIV: 0.1305][GRAD: 0.1807][VORT: 0.2444][Total: 0.6438]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.082543	vorticity_error: 0.679330	mean_abs_divergence: 0.121334
[DIV2K x2]	rel_l2_error: 0.061104	vorticity_error: 0.712008	mean_abs_divergence: 0.062723
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042511	vorticity_error: 0.567967	mean_abs_divergence: 0.030185
Forward: 15.81s

Saving...
Total: 16.20s

[Epoch 566]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0871][DIV: 0.1308][GRAD: 0.1786][VORT: 0.2406][Total: 0.6372]	5.1+17.1s
[1600/8000]	[L1: 0.0878][DIV: 0.1312][GRAD: 0.1803][VORT: 0.2398][Total: 0.6392]	4.8+3.2s
[2400/8000]	[L1: 0.0870][DIV: 0.1300][GRAD: 0.1785][VORT: 0.2391][Total: 0.6345]	4.9+3.2s
[3200/8000]	[L1: 0.0889][DIV: 0.1326][GRAD: 0.1823][VORT: 0.2423][Total: 0.6461]	4.9+3.2s
[4000/8000]	[L1: 0.0892][DIV: 0.1330][GRAD: 0.1827][VORT: 0.2430][Total: 0.6479]	4.9+3.2s
[4800/8000]	[L1: 0.0882][DIV: 0.1313][GRAD: 0.1808][VORT: 0.2408][Total: 0.6411]	4.8+3.2s
[5600/8000]	[L1: 0.0891][DIV: 0.1323][GRAD: 0.1826][VORT: 0.2433][Total: 0.6474]	4.9+3.2s
[6400/8000]	[L1: 0.0896][DIV: 0.1329][GRAD: 0.1836][VORT: 0.2450][Total: 0.6511]	4.9+3.1s
[7200/8000]	[L1: 0.0894][DIV: 0.1326][GRAD: 0.1832][VORT: 0.2447][Total: 0.6500]	4.9+3.2s
[8000/8000]	[L1: 0.0891][DIV: 0.1320][GRAD: 0.1825][VORT: 0.2440][Total: 0.6476]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.080994	vorticity_error: 0.789952	mean_abs_divergence: 0.115182
[DIV2K x2]	rel_l2_error: 0.064671	vorticity_error: 0.845000	mean_abs_divergence: 0.060918
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.055330	vorticity_error: 1.022264	mean_abs_divergence: 0.029318
Forward: 15.80s

Saving...
Total: 16.12s

[Epoch 567]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0866][DIV: 0.1280][GRAD: 0.1765][VORT: 0.2370][Total: 0.6281]	5.1+17.1s
[1600/8000]	[L1: 0.0866][DIV: 0.1276][GRAD: 0.1766][VORT: 0.2369][Total: 0.6276]	4.8+3.1s
[2400/8000]	[L1: 0.0860][DIV: 0.1269][GRAD: 0.1758][VORT: 0.2359][Total: 0.6247]	4.8+3.1s
[3200/8000]	[L1: 0.0859][DIV: 0.1269][GRAD: 0.1754][VORT: 0.2341][Total: 0.6223]	4.9+3.1s
[4000/8000]	[L1: 0.0854][DIV: 0.1265][GRAD: 0.1746][VORT: 0.2349][Total: 0.6214]	4.9+3.1s
[4800/8000]	[L1: 0.0864][DIV: 0.1277][GRAD: 0.1767][VORT: 0.2371][Total: 0.6278]	4.9+3.1s
[5600/8000]	[L1: 0.0876][DIV: 0.1295][GRAD: 0.1789][VORT: 0.2389][Total: 0.6348]	4.9+3.2s
[6400/8000]	[L1: 0.0880][DIV: 0.1301][GRAD: 0.1798][VORT: 0.2403][Total: 0.6382]	4.8+3.2s
[7200/8000]	[L1: 0.0882][DIV: 0.1302][GRAD: 0.1803][VORT: 0.2413][Total: 0.6400]	4.9+3.1s
[8000/8000]	[L1: 0.0878][DIV: 0.1300][GRAD: 0.1796][VORT: 0.2401][Total: 0.6375]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.083806	vorticity_error: 0.675876	mean_abs_divergence: 0.122937
[DIV2K x2]	rel_l2_error: 0.071559	vorticity_error: 0.857314	mean_abs_divergence: 0.065933
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.049123	vorticity_error: 0.589712	mean_abs_divergence: 0.032959
Forward: 16.09s

Saving...
Total: 16.42s

[Epoch 568]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0871][DIV: 0.1303][GRAD: 0.1780][VORT: 0.2343][Total: 0.6296]	5.2+17.3s
[1600/8000]	[L1: 0.0869][DIV: 0.1304][GRAD: 0.1774][VORT: 0.2332][Total: 0.6278]	4.9+3.1s
[2400/8000]	[L1: 0.0878][DIV: 0.1313][GRAD: 0.1793][VORT: 0.2366][Total: 0.6350]	4.9+3.1s
[3200/8000]	[L1: 0.0890][DIV: 0.1322][GRAD: 0.1818][VORT: 0.2424][Total: 0.6455]	4.9+3.1s
[4000/8000]	[L1: 0.0892][DIV: 0.1328][GRAD: 0.1825][VORT: 0.2435][Total: 0.6480]	4.9+3.1s
[4800/8000]	[L1: 0.0894][DIV: 0.1331][GRAD: 0.1831][VORT: 0.2448][Total: 0.6504]	4.9+3.2s
[5600/8000]	[L1: 0.0908][DIV: 0.1354][GRAD: 0.1860][VORT: 0.2475][Total: 0.6597]	4.8+3.2s
[6400/8000]	[L1: 0.0907][DIV: 0.1349][GRAD: 0.1858][VORT: 0.2474][Total: 0.6589]	4.9+3.2s
[7200/8000]	[L1: 0.0898][DIV: 0.1335][GRAD: 0.1839][VORT: 0.2456][Total: 0.6528]	4.9+3.2s
[8000/8000]	[L1: 0.0896][DIV: 0.1331][GRAD: 0.1834][VORT: 0.2448][Total: 0.6509]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.089865	vorticity_error: 1.176201	mean_abs_divergence: 0.131208
[DIV2K x2]	rel_l2_error: 0.069172	vorticity_error: 1.169796	mean_abs_divergence: 0.067584
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.050012	vorticity_error: 1.014636	mean_abs_divergence: 0.033260
Forward: 15.91s

Saving...
Total: 16.24s

[Epoch 569]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0880][DIV: 0.1299][GRAD: 0.1805][VORT: 0.2461][Total: 0.6445]	4.9+17.3s
[1600/8000]	[L1: 0.0837][DIV: 0.1249][GRAD: 0.1714][VORT: 0.2307][Total: 0.6107]	4.9+3.1s
[2400/8000]	[L1: 0.0817][DIV: 0.1227][GRAD: 0.1674][VORT: 0.2259][Total: 0.5977]	4.8+3.2s
[3200/8000]	[L1: 0.0843][DIV: 0.1256][GRAD: 0.1727][VORT: 0.2315][Total: 0.6141]	4.9+3.1s
[4000/8000]	[L1: 0.0853][DIV: 0.1269][GRAD: 0.1747][VORT: 0.2353][Total: 0.6222]	4.9+3.2s
[4800/8000]	[L1: 0.0865][DIV: 0.1282][GRAD: 0.1770][VORT: 0.2377][Total: 0.6294]	4.9+3.1s
[5600/8000]	[L1: 0.0857][DIV: 0.1275][GRAD: 0.1756][VORT: 0.2361][Total: 0.6249]	4.9+3.1s
[6400/8000]	[L1: 0.0859][DIV: 0.1277][GRAD: 0.1760][VORT: 0.2369][Total: 0.6264]	4.9+3.1s
[7200/8000]	[L1: 0.0855][DIV: 0.1270][GRAD: 0.1751][VORT: 0.2354][Total: 0.6231]	4.9+3.2s
[8000/8000]	[L1: 0.0852][DIV: 0.1267][GRAD: 0.1746][VORT: 0.2352][Total: 0.6217]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.093406	vorticity_error: 0.972232	mean_abs_divergence: 0.109540
[DIV2K x2]	rel_l2_error: 0.072131	vorticity_error: 1.080899	mean_abs_divergence: 0.057667
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.054263	vorticity_error: 0.863070	mean_abs_divergence: 0.028551
Forward: 15.90s

Saving...
Total: 16.29s

[Epoch 570]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0860][DIV: 0.1287][GRAD: 0.1775][VORT: 0.2451][Total: 0.6373]	5.2+17.2s
[1600/8000]	[L1: 0.0887][DIV: 0.1318][GRAD: 0.1828][VORT: 0.2490][Total: 0.6523]	4.9+3.1s
[2400/8000]	[L1: 0.0909][DIV: 0.1346][GRAD: 0.1868][VORT: 0.2514][Total: 0.6638]	4.9+3.2s
[3200/8000]	[L1: 0.0895][DIV: 0.1323][GRAD: 0.1837][VORT: 0.2483][Total: 0.6538]	4.9+3.2s
[4000/8000]	[L1: 0.0883][DIV: 0.1309][GRAD: 0.1813][VORT: 0.2457][Total: 0.6461]	4.9+3.2s
[4800/8000]	[L1: 0.0891][DIV: 0.1320][GRAD: 0.1828][VORT: 0.2474][Total: 0.6514]	4.9+3.1s
[5600/8000]	[L1: 0.0895][DIV: 0.1325][GRAD: 0.1836][VORT: 0.2489][Total: 0.6546]	4.9+3.1s
[6400/8000]	[L1: 0.0883][DIV: 0.1312][GRAD: 0.1811][VORT: 0.2462][Total: 0.6468]	4.9+3.2s
[7200/8000]	[L1: 0.0875][DIV: 0.1301][GRAD: 0.1793][VORT: 0.2426][Total: 0.6395]	4.9+3.1s
[8000/8000]	[L1: 0.0872][DIV: 0.1296][GRAD: 0.1789][VORT: 0.2420][Total: 0.6377]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.087507	vorticity_error: 0.597703	mean_abs_divergence: 0.121587
[DIV2K x2]	rel_l2_error: 0.066913	vorticity_error: 4.170797	mean_abs_divergence: 0.064401
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.047093	vorticity_error: 0.861392	mean_abs_divergence: 0.031264
Forward: 15.87s

Saving...
Total: 16.20s

[Epoch 571]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0826][DIV: 0.1264][GRAD: 0.1684][VORT: 0.2220][Total: 0.5994]	5.1+17.2s
[1600/8000]	[L1: 0.0865][DIV: 0.1300][GRAD: 0.1764][VORT: 0.2304][Total: 0.6233]	4.8+3.2s
[2400/8000]	[L1: 0.0884][DIV: 0.1322][GRAD: 0.1809][VORT: 0.2387][Total: 0.6401]	4.9+3.1s
[3200/8000]	[L1: 0.0880][DIV: 0.1314][GRAD: 0.1801][VORT: 0.2411][Total: 0.6405]	4.8+3.2s
[4000/8000]	[L1: 0.0875][DIV: 0.1308][GRAD: 0.1790][VORT: 0.2400][Total: 0.6373]	4.9+3.2s
[4800/8000]	[L1: 0.0866][DIV: 0.1297][GRAD: 0.1772][VORT: 0.2380][Total: 0.6316]	4.9+3.1s
[5600/8000]	[L1: 0.0865][DIV: 0.1294][GRAD: 0.1772][VORT: 0.2379][Total: 0.6311]	4.9+3.1s
[6400/8000]	[L1: 0.0868][DIV: 0.1293][GRAD: 0.1777][VORT: 0.2397][Total: 0.6336]	4.9+3.2s
[7200/8000]	[L1: 0.0868][DIV: 0.1294][GRAD: 0.1778][VORT: 0.2397][Total: 0.6338]	4.9+3.1s
[8000/8000]	[L1: 0.0868][DIV: 0.1291][GRAD: 0.1776][VORT: 0.2386][Total: 0.6321]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.068894	vorticity_error: 0.562966	mean_abs_divergence: 0.089063
[DIV2K x2]	rel_l2_error: 0.050191	vorticity_error: 0.526315	mean_abs_divergence: 0.043680
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043735	vorticity_error: 0.468904	mean_abs_divergence: 0.020337
Forward: 15.72s

Saving...
Total: 16.06s

[Epoch 572]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0877][DIV: 0.1298][GRAD: 0.1786][VORT: 0.2339][Total: 0.6300]	5.1+17.1s
[1600/8000]	[L1: 0.0873][DIV: 0.1296][GRAD: 0.1780][VORT: 0.2349][Total: 0.6298]	4.9+3.2s
[2400/8000]	[L1: 0.0881][DIV: 0.1303][GRAD: 0.1798][VORT: 0.2391][Total: 0.6372]	4.9+3.1s
[3200/8000]	[L1: 0.0878][DIV: 0.1295][GRAD: 0.1791][VORT: 0.2396][Total: 0.6359]	5.0+3.1s
[4000/8000]	[L1: 0.0887][DIV: 0.1306][GRAD: 0.1814][VORT: 0.2432][Total: 0.6439]	4.9+3.1s
[4800/8000]	[L1: 0.0873][DIV: 0.1291][GRAD: 0.1785][VORT: 0.2390][Total: 0.6338]	4.9+3.2s
[5600/8000]	[L1: 0.0881][DIV: 0.1302][GRAD: 0.1801][VORT: 0.2404][Total: 0.6387]	4.9+3.2s
[6400/8000]	[L1: 0.0888][DIV: 0.1313][GRAD: 0.1818][VORT: 0.2431][Total: 0.6450]	4.9+3.1s
[7200/8000]	[L1: 0.0883][DIV: 0.1306][GRAD: 0.1807][VORT: 0.2414][Total: 0.6410]	4.9+3.1s
[8000/8000]	[L1: 0.0878][DIV: 0.1300][GRAD: 0.1797][VORT: 0.2398][Total: 0.6372]	4.9+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.064436	vorticity_error: 0.443007	mean_abs_divergence: 0.105631
[DIV2K x2]	rel_l2_error: 0.048630	vorticity_error: 0.469480	mean_abs_divergence: 0.056977
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.038418	vorticity_error: 0.405782	mean_abs_divergence: 0.027801
Forward: 15.80s

Saving...
Total: 16.13s

[Epoch 573]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0852][DIV: 0.1283][GRAD: 0.1729][VORT: 0.2218][Total: 0.6082]	5.1+17.1s
[1600/8000]	[L1: 0.0893][DIV: 0.1322][GRAD: 0.1825][VORT: 0.2421][Total: 0.6461]	4.9+3.1s
[2400/8000]	[L1: 0.0882][DIV: 0.1306][GRAD: 0.1806][VORT: 0.2437][Total: 0.6431]	4.9+3.2s
[3200/8000]	[L1: 0.0878][DIV: 0.1307][GRAD: 0.1797][VORT: 0.2415][Total: 0.6397]	4.9+3.2s
[4000/8000]	[L1: 0.0889][DIV: 0.1322][GRAD: 0.1820][VORT: 0.2422][Total: 0.6453]	4.9+3.1s
[4800/8000]	[L1: 0.0886][DIV: 0.1314][GRAD: 0.1813][VORT: 0.2413][Total: 0.6426]	4.9+3.2s
[5600/8000]	[L1: 0.0888][DIV: 0.1317][GRAD: 0.1818][VORT: 0.2421][Total: 0.6444]	4.9+3.2s
[6400/8000]	[L1: 0.0886][DIV: 0.1317][GRAD: 0.1812][VORT: 0.2411][Total: 0.6425]	4.9+3.1s
[7200/8000]	[L1: 0.0880][DIV: 0.1309][GRAD: 0.1801][VORT: 0.2405][Total: 0.6396]	4.9+3.2s
[8000/8000]	[L1: 0.0888][DIV: 0.1319][GRAD: 0.1817][VORT: 0.2435][Total: 0.6459]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.078599	vorticity_error: 0.747141	mean_abs_divergence: 0.123456
[DIV2K x2]	rel_l2_error: 0.060906	vorticity_error: 0.825889	mean_abs_divergence: 0.066490
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043688	vorticity_error: 0.654741	mean_abs_divergence: 0.033078
Forward: 15.80s

Saving...
Total: 16.19s

[Epoch 574]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0834][DIV: 0.1236][GRAD: 0.1714][VORT: 0.2318][Total: 0.6102]	5.1+17.1s
[1600/8000]	[L1: 0.0875][DIV: 0.1301][GRAD: 0.1793][VORT: 0.2371][Total: 0.6340]	4.9+3.2s
[2400/8000]	[L1: 0.0876][DIV: 0.1301][GRAD: 0.1794][VORT: 0.2373][Total: 0.6344]	4.9+3.2s
[3200/8000]	[L1: 0.0882][DIV: 0.1303][GRAD: 0.1804][VORT: 0.2383][Total: 0.6372]	4.9+3.1s
[4000/8000]	[L1: 0.0877][DIV: 0.1300][GRAD: 0.1792][VORT: 0.2371][Total: 0.6340]	4.9+3.2s
[4800/8000]	[L1: 0.0864][DIV: 0.1283][GRAD: 0.1768][VORT: 0.2347][Total: 0.6262]	4.9+3.2s
[5600/8000]	[L1: 0.0867][DIV: 0.1286][GRAD: 0.1775][VORT: 0.2362][Total: 0.6291]	4.9+3.1s
[6400/8000]	[L1: 0.0869][DIV: 0.1292][GRAD: 0.1778][VORT: 0.2363][Total: 0.6302]	4.9+3.1s
[7200/8000]	[L1: 0.0880][DIV: 0.1308][GRAD: 0.1802][VORT: 0.2392][Total: 0.6382]	4.9+3.1s
[8000/8000]	[L1: 0.0883][DIV: 0.1312][GRAD: 0.1809][VORT: 0.2401][Total: 0.6404]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.121100	vorticity_error: 2.872434	mean_abs_divergence: 0.152164
[DIV2K x2]	rel_l2_error: 0.083052	vorticity_error: 1.045480	mean_abs_divergence: 0.081201
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.058470	vorticity_error: 0.874061	mean_abs_divergence: 0.040132
Forward: 15.79s

Saving...
Total: 16.12s

[Epoch 575]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0881][DIV: 0.1312][GRAD: 0.1805][VORT: 0.2442][Total: 0.6440]	5.1+17.1s
[1600/8000]	[L1: 0.0865][DIV: 0.1292][GRAD: 0.1771][VORT: 0.2368][Total: 0.6296]	4.9+3.2s
[2400/8000]	[L1: 0.0857][DIV: 0.1278][GRAD: 0.1752][VORT: 0.2342][Total: 0.6230]	4.9+3.1s
[3200/8000]	[L1: 0.0865][DIV: 0.1287][GRAD: 0.1767][VORT: 0.2362][Total: 0.6281]	4.9+3.1s
[4000/8000]	[L1: 0.0879][DIV: 0.1302][GRAD: 0.1795][VORT: 0.2387][Total: 0.6363]	4.9+3.1s
[4800/8000]	[L1: 0.0868][DIV: 0.1289][GRAD: 0.1775][VORT: 0.2373][Total: 0.6305]	4.9+3.2s
[5600/8000]	[L1: 0.0858][DIV: 0.1273][GRAD: 0.1754][VORT: 0.2349][Total: 0.6234]	4.9+3.1s
[6400/8000]	[L1: 0.0859][DIV: 0.1277][GRAD: 0.1757][VORT: 0.2348][Total: 0.6241]	4.9+3.2s
[7200/8000]	[L1: 0.0846][DIV: 0.1260][GRAD: 0.1731][VORT: 0.2323][Total: 0.6161]	4.9+3.1s
[8000/8000]	[L1: 0.0860][DIV: 0.1279][GRAD: 0.1762][VORT: 0.2361][Total: 0.6261]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.087294	vorticity_error: 0.786831	mean_abs_divergence: 0.135864
[DIV2K x2]	rel_l2_error: 0.076907	vorticity_error: 0.904523	mean_abs_divergence: 0.072737
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.051447	vorticity_error: 0.970561	mean_abs_divergence: 0.035638
Forward: 15.79s

Saving...
Total: 16.13s

[Epoch 576]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0942][DIV: 0.1395][GRAD: 0.1926][VORT: 0.2549][Total: 0.6812]	5.2+17.1s
[1600/8000]	[L1: 0.0913][DIV: 0.1356][GRAD: 0.1866][VORT: 0.2469][Total: 0.6603]	4.8+3.2s
[2400/8000]	[L1: 0.0888][DIV: 0.1323][GRAD: 0.1820][VORT: 0.2451][Total: 0.6482]	4.9+3.1s
[3200/8000]	[L1: 0.0885][DIV: 0.1313][GRAD: 0.1811][VORT: 0.2439][Total: 0.6447]	4.9+3.1s
[4000/8000]	[L1: 0.0885][DIV: 0.1314][GRAD: 0.1812][VORT: 0.2429][Total: 0.6440]	4.9+3.2s
[4800/8000]	[L1: 0.0884][DIV: 0.1310][GRAD: 0.1810][VORT: 0.2430][Total: 0.6434]	4.9+3.1s
[5600/8000]	[L1: 0.0876][DIV: 0.1304][GRAD: 0.1792][VORT: 0.2401][Total: 0.6372]	4.9+3.1s
[6400/8000]	[L1: 0.0885][DIV: 0.1317][GRAD: 0.1811][VORT: 0.2431][Total: 0.6444]	4.9+3.2s
[7200/8000]	[L1: 0.0891][DIV: 0.1328][GRAD: 0.1824][VORT: 0.2441][Total: 0.6485]	4.9+3.2s
[8000/8000]	[L1: 0.0885][DIV: 0.1323][GRAD: 0.1812][VORT: 0.2420][Total: 0.6439]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.092708	vorticity_error: 0.828983	mean_abs_divergence: 0.147852
[DIV2K x2]	rel_l2_error: 0.072344	vorticity_error: 0.947227	mean_abs_divergence: 0.079839
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.051184	vorticity_error: 0.814332	mean_abs_divergence: 0.039627
Forward: 15.87s

Saving...
Total: 16.21s

[Epoch 577]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0836][DIV: 0.1236][GRAD: 0.1720][VORT: 0.2366][Total: 0.6159]	5.1+17.2s
[1600/8000]	[L1: 0.0861][DIV: 0.1274][GRAD: 0.1768][VORT: 0.2386][Total: 0.6289]	4.9+3.1s
[2400/8000]	[L1: 0.0862][DIV: 0.1278][GRAD: 0.1768][VORT: 0.2378][Total: 0.6286]	4.8+3.2s
[3200/8000]	[L1: 0.0881][DIV: 0.1302][GRAD: 0.1806][VORT: 0.2420][Total: 0.6409]	4.9+3.2s
[4000/8000]	[L1: 0.0889][DIV: 0.1310][GRAD: 0.1822][VORT: 0.2446][Total: 0.6468]	4.9+3.2s
[4800/8000]	[L1: 0.0884][DIV: 0.1300][GRAD: 0.1813][VORT: 0.2437][Total: 0.6434]	4.8+3.2s
[5600/8000]	[L1: 0.0888][DIV: 0.1304][GRAD: 0.1820][VORT: 0.2452][Total: 0.6464]	4.9+3.2s
[6400/8000]	[L1: 0.0886][DIV: 0.1302][GRAD: 0.1815][VORT: 0.2447][Total: 0.6450]	4.8+3.2s
[7200/8000]	[L1: 0.0877][DIV: 0.1290][GRAD: 0.1798][VORT: 0.2423][Total: 0.6389]	4.9+3.2s
[8000/8000]	[L1: 0.0877][DIV: 0.1292][GRAD: 0.1795][VORT: 0.2418][Total: 0.6382]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.082287	vorticity_error: 0.699587	mean_abs_divergence: 0.133369
[DIV2K x2]	rel_l2_error: 0.064345	vorticity_error: 0.632511	mean_abs_divergence: 0.069478
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045833	vorticity_error: 0.549766	mean_abs_divergence: 0.033500
Forward: 15.72s

Saving...
Total: 16.11s

[Epoch 578]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0865][DIV: 0.1294][GRAD: 0.1763][VORT: 0.2316][Total: 0.6239]	5.0+17.1s
[1600/8000]	[L1: 0.0856][DIV: 0.1278][GRAD: 0.1748][VORT: 0.2296][Total: 0.6178]	4.8+3.2s
[2400/8000]	[L1: 0.0870][DIV: 0.1295][GRAD: 0.1780][VORT: 0.2339][Total: 0.6285]	4.8+3.1s
[3200/8000]	[L1: 0.0868][DIV: 0.1288][GRAD: 0.1776][VORT: 0.2357][Total: 0.6288]	4.8+3.1s
[4000/8000]	[L1: 0.0880][DIV: 0.1305][GRAD: 0.1801][VORT: 0.2395][Total: 0.6381]	4.9+3.1s
[4800/8000]	[L1: 0.0878][DIV: 0.1303][GRAD: 0.1797][VORT: 0.2392][Total: 0.6370]	4.9+3.1s
[5600/8000]	[L1: 0.0877][DIV: 0.1301][GRAD: 0.1796][VORT: 0.2399][Total: 0.6372]	4.8+3.1s
[6400/8000]	[L1: 0.0875][DIV: 0.1299][GRAD: 0.1792][VORT: 0.2398][Total: 0.6363]	4.9+3.1s
[7200/8000]	[L1: 0.0879][DIV: 0.1308][GRAD: 0.1800][VORT: 0.2402][Total: 0.6390]	4.9+3.1s
[8000/8000]	[L1: 0.0890][DIV: 0.1322][GRAD: 0.1822][VORT: 0.2428][Total: 0.6461]	4.9+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.076304	vorticity_error: 0.925201	mean_abs_divergence: 0.101512
[DIV2K x2]	rel_l2_error: 0.052967	vorticity_error: 1.019371	mean_abs_divergence: 0.051333
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042255	vorticity_error: 0.838823	mean_abs_divergence: 0.024403
Forward: 15.77s

Saving...
Total: 16.10s

[Epoch 579]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0887][DIV: 0.1310][GRAD: 0.1823][VORT: 0.2406][Total: 0.6426]	5.0+17.0s
[1600/8000]	[L1: 0.0880][DIV: 0.1307][GRAD: 0.1805][VORT: 0.2383][Total: 0.6376]	4.9+3.1s
[2400/8000]	[L1: 0.0881][DIV: 0.1304][GRAD: 0.1805][VORT: 0.2385][Total: 0.6375]	4.9+3.1s
[3200/8000]	[L1: 0.0889][DIV: 0.1309][GRAD: 0.1819][VORT: 0.2409][Total: 0.6426]	4.8+3.2s
[4000/8000]	[L1: 0.0877][DIV: 0.1294][GRAD: 0.1797][VORT: 0.2395][Total: 0.6362]	4.9+3.1s
[4800/8000]	[L1: 0.0874][DIV: 0.1293][GRAD: 0.1791][VORT: 0.2383][Total: 0.6341]	4.9+3.1s
[5600/8000]	[L1: 0.0882][DIV: 0.1304][GRAD: 0.1805][VORT: 0.2403][Total: 0.6395]	4.9+3.1s
[6400/8000]	[L1: 0.0887][DIV: 0.1311][GRAD: 0.1815][VORT: 0.2407][Total: 0.6419]	4.9+3.1s
[7200/8000]	[L1: 0.0885][DIV: 0.1307][GRAD: 0.1813][VORT: 0.2407][Total: 0.6412]	4.9+3.2s
[8000/8000]	[L1: 0.0884][DIV: 0.1306][GRAD: 0.1810][VORT: 0.2409][Total: 0.6408]	4.9+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.092390	vorticity_error: 0.875404	mean_abs_divergence: 0.113954
[DIV2K x2]	rel_l2_error: 0.075620	vorticity_error: 0.876523	mean_abs_divergence: 0.061042
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.058176	vorticity_error: 0.831963	mean_abs_divergence: 0.030159
Forward: 15.78s

Saving...
Total: 16.12s

[Epoch 580]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0836][DIV: 0.1273][GRAD: 0.1702][VORT: 0.2212][Total: 0.6022]	5.2+17.0s
[1600/8000]	[L1: 0.0891][DIV: 0.1337][GRAD: 0.1827][VORT: 0.2465][Total: 0.6519]	4.9+3.1s
[2400/8000]	[L1: 0.0878][DIV: 0.1325][GRAD: 0.1797][VORT: 0.2393][Total: 0.6393]	4.9+3.1s
[3200/8000]	[L1: 0.0877][DIV: 0.1314][GRAD: 0.1791][VORT: 0.2379][Total: 0.6361]	4.9+3.2s
[4000/8000]	[L1: 0.0875][DIV: 0.1308][GRAD: 0.1789][VORT: 0.2381][Total: 0.6353]	4.9+3.2s
[4800/8000]	[L1: 0.0880][DIV: 0.1313][GRAD: 0.1800][VORT: 0.2403][Total: 0.6396]	4.9+3.1s
[5600/8000]	[L1: 0.0888][DIV: 0.1320][GRAD: 0.1816][VORT: 0.2422][Total: 0.6447]	4.9+3.2s
[6400/8000]	[L1: 0.0898][DIV: 0.1331][GRAD: 0.1836][VORT: 0.2447][Total: 0.6512]	4.9+3.1s
[7200/8000]	[L1: 0.0904][DIV: 0.1341][GRAD: 0.1847][VORT: 0.2451][Total: 0.6543]	4.9+3.2s
[8000/8000]	[L1: 0.0902][DIV: 0.1340][GRAD: 0.1844][VORT: 0.2453][Total: 0.6539]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.090302	vorticity_error: 0.997764	mean_abs_divergence: 0.141381
[DIV2K x2]	rel_l2_error: 0.070745	vorticity_error: 1.123103	mean_abs_divergence: 0.072978
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045576	vorticity_error: 1.005223	mean_abs_divergence: 0.034801
Forward: 15.66s

Saving...
Total: 16.00s

[Epoch 581]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0895][DIV: 0.1323][GRAD: 0.1833][VORT: 0.2414][Total: 0.6466]	5.2+17.0s
[1600/8000]	[L1: 0.0913][DIV: 0.1342][GRAD: 0.1872][VORT: 0.2509][Total: 0.6636]	4.9+3.1s
[2400/8000]	[L1: 0.0910][DIV: 0.1335][GRAD: 0.1866][VORT: 0.2507][Total: 0.6619]	4.9+3.1s
[3200/8000]	[L1: 0.0909][DIV: 0.1336][GRAD: 0.1864][VORT: 0.2499][Total: 0.6609]	4.9+3.2s
[4000/8000]	[L1: 0.0908][DIV: 0.1335][GRAD: 0.1863][VORT: 0.2502][Total: 0.6608]	4.9+3.2s
[4800/8000]	[L1: 0.0902][DIV: 0.1327][GRAD: 0.1851][VORT: 0.2496][Total: 0.6576]	4.9+3.1s
[5600/8000]	[L1: 0.0897][DIV: 0.1317][GRAD: 0.1841][VORT: 0.2485][Total: 0.6540]	4.9+3.2s
[6400/8000]	[L1: 0.0889][DIV: 0.1310][GRAD: 0.1822][VORT: 0.2459][Total: 0.6480]	4.9+3.2s
[7200/8000]	[L1: 0.0891][DIV: 0.1313][GRAD: 0.1827][VORT: 0.2456][Total: 0.6487]	4.9+3.2s
[8000/8000]	[L1: 0.0887][DIV: 0.1311][GRAD: 0.1820][VORT: 0.2446][Total: 0.6463]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.082542	vorticity_error: 0.577762	mean_abs_divergence: 0.133759
[DIV2K x2]	rel_l2_error: 0.061399	vorticity_error: 0.567077	mean_abs_divergence: 0.071611
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.039144	vorticity_error: 0.460451	mean_abs_divergence: 0.035633
Forward: 15.54s

Saving...
Total: 15.86s

[Epoch 582]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0910][DIV: 0.1348][GRAD: 0.1860][VORT: 0.2505][Total: 0.6623]	5.3+17.0s
[1600/8000]	[L1: 0.0902][DIV: 0.1341][GRAD: 0.1842][VORT: 0.2434][Total: 0.6519]	4.9+3.1s
[2400/8000]	[L1: 0.0922][DIV: 0.1373][GRAD: 0.1885][VORT: 0.2460][Total: 0.6640]	4.9+3.1s
[3200/8000]	[L1: 0.0919][DIV: 0.1368][GRAD: 0.1883][VORT: 0.2466][Total: 0.6636]	4.9+3.1s
[4000/8000]	[L1: 0.0912][DIV: 0.1359][GRAD: 0.1868][VORT: 0.2458][Total: 0.6597]	4.9+3.1s
[4800/8000]	[L1: 0.0922][DIV: 0.1370][GRAD: 0.1890][VORT: 0.2500][Total: 0.6682]	4.8+3.2s
[5600/8000]	[L1: 0.0920][DIV: 0.1366][GRAD: 0.1884][VORT: 0.2491][Total: 0.6661]	4.9+3.1s
[6400/8000]	[L1: 0.0910][DIV: 0.1356][GRAD: 0.1865][VORT: 0.2472][Total: 0.6603]	4.8+3.2s
[7200/8000]	[L1: 0.0914][DIV: 0.1360][GRAD: 0.1874][VORT: 0.2480][Total: 0.6629]	4.8+3.2s
[8000/8000]	[L1: 0.0916][DIV: 0.1360][GRAD: 0.1878][VORT: 0.2493][Total: 0.6648]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.079848	vorticity_error: 0.879097	mean_abs_divergence: 0.141624
[DIV2K x2]	rel_l2_error: 0.060038	vorticity_error: 0.880509	mean_abs_divergence: 0.073919
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045943	vorticity_error: 0.813333	mean_abs_divergence: 0.035509
Forward: 15.71s

Saving...
Total: 16.10s

[Epoch 583]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0861][DIV: 0.1276][GRAD: 0.1783][VORT: 0.2427][Total: 0.6347]	5.0+17.2s
[1600/8000]	[L1: 0.0880][DIV: 0.1305][GRAD: 0.1815][VORT: 0.2461][Total: 0.6462]	4.9+3.1s
[2400/8000]	[L1: 0.0889][DIV: 0.1312][GRAD: 0.1830][VORT: 0.2461][Total: 0.6492]	4.9+3.1s
[3200/8000]	[L1: 0.0879][DIV: 0.1301][GRAD: 0.1806][VORT: 0.2430][Total: 0.6416]	4.9+3.1s
[4000/8000]	[L1: 0.0869][DIV: 0.1287][GRAD: 0.1786][VORT: 0.2411][Total: 0.6354]	4.9+3.2s
[4800/8000]	[L1: 0.0867][DIV: 0.1285][GRAD: 0.1782][VORT: 0.2414][Total: 0.6349]	4.9+3.1s
[5600/8000]	[L1: 0.0859][DIV: 0.1276][GRAD: 0.1765][VORT: 0.2388][Total: 0.6288]	4.9+3.1s
[6400/8000]	[L1: 0.0854][DIV: 0.1267][GRAD: 0.1752][VORT: 0.2373][Total: 0.6246]	4.9+3.2s
[7200/8000]	[L1: 0.0856][DIV: 0.1271][GRAD: 0.1757][VORT: 0.2378][Total: 0.6262]	4.9+3.2s
[8000/8000]	[L1: 0.0864][DIV: 0.1280][GRAD: 0.1773][VORT: 0.2401][Total: 0.6317]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.090612	vorticity_error: 1.046941	mean_abs_divergence: 0.128252
[DIV2K x2]	rel_l2_error: 0.073263	vorticity_error: 1.156878	mean_abs_divergence: 0.066424
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.059681	vorticity_error: 1.036424	mean_abs_divergence: 0.032924
Forward: 15.85s

Saving...
Total: 16.18s

[Epoch 584]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0924][DIV: 0.1360][GRAD: 0.1888][VORT: 0.2506][Total: 0.6678]	5.1+17.1s
[1600/8000]	[L1: 0.0913][DIV: 0.1339][GRAD: 0.1865][VORT: 0.2447][Total: 0.6564]	4.9+3.2s
[2400/8000]	[L1: 0.0896][DIV: 0.1323][GRAD: 0.1830][VORT: 0.2419][Total: 0.6468]	4.9+3.2s
[3200/8000]	[L1: 0.0909][DIV: 0.1337][GRAD: 0.1860][VORT: 0.2471][Total: 0.6576]	4.8+3.2s
[4000/8000]	[L1: 0.0889][DIV: 0.1311][GRAD: 0.1820][VORT: 0.2427][Total: 0.6447]	4.9+3.2s
[4800/8000]	[L1: 0.0890][DIV: 0.1311][GRAD: 0.1822][VORT: 0.2438][Total: 0.6462]	4.9+3.1s
[5600/8000]	[L1: 0.0887][DIV: 0.1306][GRAD: 0.1815][VORT: 0.2431][Total: 0.6439]	4.9+3.2s
[6400/8000]	[L1: 0.0887][DIV: 0.1304][GRAD: 0.1814][VORT: 0.2438][Total: 0.6443]	4.9+3.1s
[7200/8000]	[L1: 0.0884][DIV: 0.1303][GRAD: 0.1808][VORT: 0.2425][Total: 0.6420]	4.9+3.2s
[8000/8000]	[L1: 0.0879][DIV: 0.1295][GRAD: 0.1799][VORT: 0.2419][Total: 0.6393]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.098016	vorticity_error: 1.095118	mean_abs_divergence: 0.117610
[DIV2K x2]	rel_l2_error: 0.075899	vorticity_error: 0.849901	mean_abs_divergence: 0.063325
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.057409	vorticity_error: 0.801158	mean_abs_divergence: 0.031481
Forward: 15.83s

Saving...
Total: 16.16s

[Epoch 585]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0897][DIV: 0.1323][GRAD: 0.1836][VORT: 0.2483][Total: 0.6538]	5.1+17.2s
[1600/8000]	[L1: 0.0887][DIV: 0.1318][GRAD: 0.1813][VORT: 0.2416][Total: 0.6434]	4.8+3.2s
[2400/8000]	[L1: 0.0860][DIV: 0.1280][GRAD: 0.1756][VORT: 0.2342][Total: 0.6239]	4.8+3.2s
[3200/8000]	[L1: 0.0862][DIV: 0.1282][GRAD: 0.1763][VORT: 0.2372][Total: 0.6279]	4.9+3.1s
[4000/8000]	[L1: 0.0852][DIV: 0.1268][GRAD: 0.1744][VORT: 0.2363][Total: 0.6227]	4.8+3.2s
[4800/8000]	[L1: 0.0854][DIV: 0.1271][GRAD: 0.1749][VORT: 0.2360][Total: 0.6235]	4.8+3.2s
[5600/8000]	[L1: 0.0871][DIV: 0.1295][GRAD: 0.1783][VORT: 0.2397][Total: 0.6345]	4.9+3.2s
[6400/8000]	[L1: 0.0872][DIV: 0.1296][GRAD: 0.1786][VORT: 0.2404][Total: 0.6359]	4.8+3.2s
[7200/8000]	[L1: 0.0861][DIV: 0.1278][GRAD: 0.1762][VORT: 0.2374][Total: 0.6275]	4.9+3.2s
[8000/8000]	[L1: 0.0873][DIV: 0.1294][GRAD: 0.1788][VORT: 0.2397][Total: 0.6352]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.084676	vorticity_error: 0.841583	mean_abs_divergence: 0.105111
[DIV2K x2]	rel_l2_error: 0.066822	vorticity_error: 0.785425	mean_abs_divergence: 0.054169
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.049591	vorticity_error: 0.607647	mean_abs_divergence: 0.026369
Forward: 15.72s

Saving...
Total: 16.05s

[Epoch 586]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0898][DIV: 0.1314][GRAD: 0.1846][VORT: 0.2479][Total: 0.6537]	5.2+17.1s
[1600/8000]	[L1: 0.0911][DIV: 0.1339][GRAD: 0.1874][VORT: 0.2545][Total: 0.6668]	4.8+3.2s
[2400/8000]	[L1: 0.0877][DIV: 0.1302][GRAD: 0.1804][VORT: 0.2454][Total: 0.6437]	4.9+3.1s
[3200/8000]	[L1: 0.0887][DIV: 0.1316][GRAD: 0.1823][VORT: 0.2463][Total: 0.6490]	4.9+3.1s
[4000/8000]	[L1: 0.0886][DIV: 0.1317][GRAD: 0.1821][VORT: 0.2450][Total: 0.6474]	4.9+3.2s
[4800/8000]	[L1: 0.0886][DIV: 0.1316][GRAD: 0.1819][VORT: 0.2435][Total: 0.6458]	4.8+3.2s
[5600/8000]	[L1: 0.0888][DIV: 0.1317][GRAD: 0.1822][VORT: 0.2440][Total: 0.6466]	4.9+3.1s
[6400/8000]	[L1: 0.0885][DIV: 0.1311][GRAD: 0.1817][VORT: 0.2439][Total: 0.6452]	4.8+3.2s
[7200/8000]	[L1: 0.0889][DIV: 0.1315][GRAD: 0.1825][VORT: 0.2451][Total: 0.6480]	4.9+3.2s
[8000/8000]	[L1: 0.0892][DIV: 0.1317][GRAD: 0.1830][VORT: 0.2461][Total: 0.6500]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.084909	vorticity_error: 0.842549	mean_abs_divergence: 0.095500
[DIV2K x2]	rel_l2_error: 0.061364	vorticity_error: 1.132257	mean_abs_divergence: 0.050736
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.049190	vorticity_error: 1.167708	mean_abs_divergence: 0.024839
Forward: 15.73s

Saving...
Total: 16.11s

[Epoch 587]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0901][DIV: 0.1319][GRAD: 0.1833][VORT: 0.2396][Total: 0.6448]	5.2+17.2s
[1600/8000]	[L1: 0.0914][DIV: 0.1333][GRAD: 0.1870][VORT: 0.2507][Total: 0.6624]	4.8+3.2s
[2400/8000]	[L1: 0.0913][DIV: 0.1339][GRAD: 0.1868][VORT: 0.2511][Total: 0.6631]	4.9+3.1s
[3200/8000]	[L1: 0.0915][DIV: 0.1347][GRAD: 0.1868][VORT: 0.2480][Total: 0.6610]	4.9+3.1s
[4000/8000]	[L1: 0.0901][DIV: 0.1332][GRAD: 0.1843][VORT: 0.2448][Total: 0.6523]	4.9+3.2s
[4800/8000]	[L1: 0.0900][DIV: 0.1328][GRAD: 0.1842][VORT: 0.2466][Total: 0.6536]	4.9+3.2s
[5600/8000]	[L1: 0.0901][DIV: 0.1330][GRAD: 0.1846][VORT: 0.2472][Total: 0.6548]	4.9+3.1s
[6400/8000]	[L1: 0.0897][DIV: 0.1323][GRAD: 0.1838][VORT: 0.2459][Total: 0.6517]	4.9+3.2s
[7200/8000]	[L1: 0.0903][DIV: 0.1329][GRAD: 0.1851][VORT: 0.2477][Total: 0.6560]	4.9+3.1s
[8000/8000]	[L1: 0.0899][DIV: 0.1323][GRAD: 0.1843][VORT: 0.2466][Total: 0.6532]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.081419	vorticity_error: 0.912300	mean_abs_divergence: 0.118578
[DIV2K x2]	rel_l2_error: 0.064791	vorticity_error: 3.741184	mean_abs_divergence: 0.062257
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.052061	vorticity_error: 1.009984	mean_abs_divergence: 0.030616
Forward: 15.75s

Saving...
Total: 16.08s

[Epoch 588]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0831][DIV: 0.1230][GRAD: 0.1706][VORT: 0.2394][Total: 0.6162]	5.1+17.1s
[1600/8000]	[L1: 0.0851][DIV: 0.1254][GRAD: 0.1746][VORT: 0.2431][Total: 0.6282]	4.9+3.2s
[2400/8000]	[L1: 0.0857][DIV: 0.1270][GRAD: 0.1761][VORT: 0.2420][Total: 0.6307]	4.8+3.2s
[3200/8000]	[L1: 0.0864][DIV: 0.1285][GRAD: 0.1773][VORT: 0.2410][Total: 0.6332]	4.9+3.2s
[4000/8000]	[L1: 0.0859][DIV: 0.1283][GRAD: 0.1761][VORT: 0.2376][Total: 0.6280]	4.9+3.2s
[4800/8000]	[L1: 0.0865][DIV: 0.1291][GRAD: 0.1771][VORT: 0.2370][Total: 0.6297]	4.9+3.2s
[5600/8000]	[L1: 0.0863][DIV: 0.1290][GRAD: 0.1767][VORT: 0.2360][Total: 0.6281]	4.9+3.2s
[6400/8000]	[L1: 0.0871][DIV: 0.1299][GRAD: 0.1783][VORT: 0.2384][Total: 0.6337]	4.8+3.2s
[7200/8000]	[L1: 0.0870][DIV: 0.1297][GRAD: 0.1781][VORT: 0.2382][Total: 0.6330]	4.9+3.2s
[8000/8000]	[L1: 0.0871][DIV: 0.1297][GRAD: 0.1783][VORT: 0.2389][Total: 0.6340]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.083958	vorticity_error: 2.406637	mean_abs_divergence: 0.118267
[DIV2K x2]	rel_l2_error: 0.067130	vorticity_error: 0.863894	mean_abs_divergence: 0.062472
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045008	vorticity_error: 0.771052	mean_abs_divergence: 0.030648
Forward: 15.89s

Saving...
Total: 16.24s

[Epoch 589]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0831][DIV: 0.1245][GRAD: 0.1712][VORT: 0.2305][Total: 0.6093]	5.1+17.1s
[1600/8000]	[L1: 0.0851][DIV: 0.1263][GRAD: 0.1745][VORT: 0.2361][Total: 0.6220]	4.9+3.1s
[2400/8000]	[L1: 0.0858][DIV: 0.1278][GRAD: 0.1757][VORT: 0.2367][Total: 0.6261]	4.9+3.1s
[3200/8000]	[L1: 0.0869][DIV: 0.1289][GRAD: 0.1779][VORT: 0.2393][Total: 0.6330]	4.9+3.1s
[4000/8000]	[L1: 0.0875][DIV: 0.1294][GRAD: 0.1790][VORT: 0.2404][Total: 0.6364]	4.9+3.1s
[4800/8000]	[L1: 0.0878][DIV: 0.1295][GRAD: 0.1798][VORT: 0.2421][Total: 0.6393]	4.9+3.1s
[5600/8000]	[L1: 0.0873][DIV: 0.1290][GRAD: 0.1788][VORT: 0.2405][Total: 0.6356]	4.8+3.2s
[6400/8000]	[L1: 0.0866][DIV: 0.1279][GRAD: 0.1773][VORT: 0.2380][Total: 0.6297]	4.9+3.1s
[7200/8000]	[L1: 0.0869][DIV: 0.1282][GRAD: 0.1779][VORT: 0.2390][Total: 0.6320]	4.8+3.1s
[8000/8000]	[L1: 0.0877][DIV: 0.1292][GRAD: 0.1797][VORT: 0.2409][Total: 0.6375]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.069802	vorticity_error: 0.742207	mean_abs_divergence: 0.108738
[DIV2K x2]	rel_l2_error: 0.059435	vorticity_error: 0.698633	mean_abs_divergence: 0.057195
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.041670	vorticity_error: 0.676047	mean_abs_divergence: 0.027954
Forward: 15.77s

Saving...
Total: 16.10s

[Epoch 590]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0863][DIV: 0.1265][GRAD: 0.1765][VORT: 0.2404][Total: 0.6297]	5.3+17.2s
[1600/8000]	[L1: 0.0895][DIV: 0.1308][GRAD: 0.1835][VORT: 0.2470][Total: 0.6508]	4.9+3.1s
[2400/8000]	[L1: 0.0883][DIV: 0.1293][GRAD: 0.1810][VORT: 0.2442][Total: 0.6428]	4.9+3.1s
[3200/8000]	[L1: 0.0887][DIV: 0.1301][GRAD: 0.1817][VORT: 0.2434][Total: 0.6440]	4.9+3.1s
[4000/8000]	[L1: 0.0891][DIV: 0.1311][GRAD: 0.1823][VORT: 0.2429][Total: 0.6454]	4.8+3.2s
[4800/8000]	[L1: 0.0890][DIV: 0.1313][GRAD: 0.1822][VORT: 0.2434][Total: 0.6460]	4.8+3.2s
[5600/8000]	[L1: 0.0899][DIV: 0.1326][GRAD: 0.1841][VORT: 0.2461][Total: 0.6528]	4.8+3.1s
[6400/8000]	[L1: 0.0908][DIV: 0.1337][GRAD: 0.1858][VORT: 0.2476][Total: 0.6579]	4.9+3.2s
[7200/8000]	[L1: 0.0906][DIV: 0.1334][GRAD: 0.1856][VORT: 0.2477][Total: 0.6573]	4.9+3.1s
[8000/8000]	[L1: 0.0904][DIV: 0.1330][GRAD: 0.1852][VORT: 0.2466][Total: 0.6552]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.091149	vorticity_error: 0.824169	mean_abs_divergence: 0.130342
[DIV2K x2]	rel_l2_error: 0.067922	vorticity_error: 0.814238	mean_abs_divergence: 0.068187
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045132	vorticity_error: 0.600074	mean_abs_divergence: 0.033254
Forward: 15.81s

Saving...
Total: 16.21s

[Epoch 591]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0814][DIV: 0.1235][GRAD: 0.1658][VORT: 0.2194][Total: 0.5901]	5.2+17.2s
[1600/8000]	[L1: 0.0847][DIV: 0.1276][GRAD: 0.1730][VORT: 0.2287][Total: 0.6140]	4.9+3.1s
[2400/8000]	[L1: 0.0860][DIV: 0.1287][GRAD: 0.1762][VORT: 0.2353][Total: 0.6262]	4.9+3.1s
[3200/8000]	[L1: 0.0877][DIV: 0.1307][GRAD: 0.1797][VORT: 0.2414][Total: 0.6396]	4.9+3.2s
[4000/8000]	[L1: 0.0885][DIV: 0.1316][GRAD: 0.1812][VORT: 0.2421][Total: 0.6433]	4.9+3.2s
[4800/8000]	[L1: 0.0885][DIV: 0.1317][GRAD: 0.1812][VORT: 0.2415][Total: 0.6430]	4.9+3.1s
[5600/8000]	[L1: 0.0897][DIV: 0.1330][GRAD: 0.1837][VORT: 0.2438][Total: 0.6502]	4.9+3.1s
[6400/8000]	[L1: 0.0898][DIV: 0.1330][GRAD: 0.1839][VORT: 0.2443][Total: 0.6511]	4.9+3.1s
[7200/8000]	[L1: 0.0901][DIV: 0.1333][GRAD: 0.1845][VORT: 0.2452][Total: 0.6531]	4.9+3.1s
[8000/8000]	[L1: 0.0895][DIV: 0.1325][GRAD: 0.1833][VORT: 0.2439][Total: 0.6492]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.088350	vorticity_error: 0.847994	mean_abs_divergence: 0.106815
[DIV2K x2]	rel_l2_error: 0.068493	vorticity_error: 0.889574	mean_abs_divergence: 0.057053
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.046827	vorticity_error: 0.753583	mean_abs_divergence: 0.028370
Forward: 15.73s

Saving...
Total: 16.07s

[Epoch 592]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0818][DIV: 0.1226][GRAD: 0.1685][VORT: 0.2323][Total: 0.6052]	5.1+17.1s
[1600/8000]	[L1: 0.0838][DIV: 0.1259][GRAD: 0.1726][VORT: 0.2359][Total: 0.6182]	4.9+3.2s
[2400/8000]	[L1: 0.0819][DIV: 0.1234][GRAD: 0.1681][VORT: 0.2275][Total: 0.6009]	4.9+3.2s
[3200/8000]	[L1: 0.0841][DIV: 0.1258][GRAD: 0.1727][VORT: 0.2331][Total: 0.6157]	4.9+3.1s
[4000/8000]	[L1: 0.0834][DIV: 0.1245][GRAD: 0.1712][VORT: 0.2309][Total: 0.6100]	4.9+3.1s
[4800/8000]	[L1: 0.0853][DIV: 0.1270][GRAD: 0.1750][VORT: 0.2356][Total: 0.6229]	4.9+3.1s
[5600/8000]	[L1: 0.0858][DIV: 0.1274][GRAD: 0.1759][VORT: 0.2364][Total: 0.6256]	4.8+3.2s
[6400/8000]	[L1: 0.0863][DIV: 0.1280][GRAD: 0.1770][VORT: 0.2383][Total: 0.6296]	4.9+3.2s
[7200/8000]	[L1: 0.0869][DIV: 0.1286][GRAD: 0.1782][VORT: 0.2396][Total: 0.6333]	4.9+3.2s
[8000/8000]	[L1: 0.0870][DIV: 0.1289][GRAD: 0.1784][VORT: 0.2400][Total: 0.6344]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.080331	vorticity_error: 2.149189	mean_abs_divergence: 0.120199
[DIV2K x2]	rel_l2_error: 0.062366	vorticity_error: 0.679575	mean_abs_divergence: 0.063173
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.040095	vorticity_error: 0.566607	mean_abs_divergence: 0.030998
Forward: 15.83s

Saving...
Total: 16.15s

[Epoch 593]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0908][DIV: 0.1335][GRAD: 0.1860][VORT: 0.2427][Total: 0.6530]	5.1+17.1s
[1600/8000]	[L1: 0.0900][DIV: 0.1319][GRAD: 0.1843][VORT: 0.2478][Total: 0.6540]	4.9+3.1s
[2400/8000]	[L1: 0.0873][DIV: 0.1288][GRAD: 0.1785][VORT: 0.2381][Total: 0.6327]	4.9+3.1s
[3200/8000]	[L1: 0.0870][DIV: 0.1288][GRAD: 0.1778][VORT: 0.2367][Total: 0.6303]	4.9+3.1s
[4000/8000]	[L1: 0.0877][DIV: 0.1304][GRAD: 0.1793][VORT: 0.2389][Total: 0.6364]	4.9+3.2s
[4800/8000]	[L1: 0.0879][DIV: 0.1306][GRAD: 0.1800][VORT: 0.2401][Total: 0.6386]	4.9+3.1s
[5600/8000]	[L1: 0.0871][DIV: 0.1295][GRAD: 0.1782][VORT: 0.2371][Total: 0.6319]	4.9+3.2s
[6400/8000]	[L1: 0.0870][DIV: 0.1293][GRAD: 0.1781][VORT: 0.2371][Total: 0.6315]	4.9+3.2s
[7200/8000]	[L1: 0.0871][DIV: 0.1294][GRAD: 0.1783][VORT: 0.2374][Total: 0.6322]	4.9+3.2s
[8000/8000]	[L1: 0.0870][DIV: 0.1290][GRAD: 0.1782][VORT: 0.2380][Total: 0.6322]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.079866	vorticity_error: 0.641078	mean_abs_divergence: 0.106194
[DIV2K x2]	rel_l2_error: 0.060097	vorticity_error: 0.758923	mean_abs_divergence: 0.054748
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045488	vorticity_error: 0.583212	mean_abs_divergence: 0.026335
Forward: 15.83s

Saving...
Total: 16.16s

[Epoch 594]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0774][DIV: 0.1158][GRAD: 0.1587][VORT: 0.2145][Total: 0.5665]	5.1+17.1s
[1600/8000]	[L1: 0.0861][DIV: 0.1281][GRAD: 0.1771][VORT: 0.2349][Total: 0.6262]	4.9+3.1s
[2400/8000]	[L1: 0.0871][DIV: 0.1282][GRAD: 0.1791][VORT: 0.2399][Total: 0.6343]	4.8+3.2s
[3200/8000]	[L1: 0.0869][DIV: 0.1278][GRAD: 0.1783][VORT: 0.2387][Total: 0.6316]	4.9+3.2s
[4000/8000]	[L1: 0.0879][DIV: 0.1288][GRAD: 0.1804][VORT: 0.2411][Total: 0.6382]	4.8+3.2s
[4800/8000]	[L1: 0.0877][DIV: 0.1286][GRAD: 0.1798][VORT: 0.2407][Total: 0.6369]	4.9+3.2s
[5600/8000]	[L1: 0.0865][DIV: 0.1275][GRAD: 0.1774][VORT: 0.2368][Total: 0.6283]	4.9+3.1s
[6400/8000]	[L1: 0.0871][DIV: 0.1286][GRAD: 0.1786][VORT: 0.2388][Total: 0.6332]	4.9+3.1s
[7200/8000]	[L1: 0.0884][DIV: 0.1303][GRAD: 0.1812][VORT: 0.2416][Total: 0.6415]	4.9+3.2s
[8000/8000]	[L1: 0.0879][DIV: 0.1298][GRAD: 0.1803][VORT: 0.2402][Total: 0.6382]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.065888	vorticity_error: 0.846476	mean_abs_divergence: 0.117574
[DIV2K x2]	rel_l2_error: 0.047908	vorticity_error: 1.226850	mean_abs_divergence: 0.062381
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.036999	vorticity_error: 0.938916	mean_abs_divergence: 0.030843
Forward: 15.66s

Saving...
Total: 16.04s

[Epoch 595]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0818][DIV: 0.1197][GRAD: 0.1674][VORT: 0.2292][Total: 0.5980]	5.1+17.1s
[1600/8000]	[L1: 0.0864][DIV: 0.1258][GRAD: 0.1769][VORT: 0.2392][Total: 0.6283]	4.9+3.2s
[2400/8000]	[L1: 0.0887][DIV: 0.1293][GRAD: 0.1820][VORT: 0.2465][Total: 0.6466]	4.9+3.2s
[3200/8000]	[L1: 0.0893][DIV: 0.1307][GRAD: 0.1833][VORT: 0.2476][Total: 0.6508]	4.9+3.1s
[4000/8000]	[L1: 0.0883][DIV: 0.1296][GRAD: 0.1811][VORT: 0.2446][Total: 0.6436]	4.9+3.2s
[4800/8000]	[L1: 0.0891][DIV: 0.1307][GRAD: 0.1827][VORT: 0.2466][Total: 0.6491]	4.9+3.2s
[5600/8000]	[L1: 0.0898][DIV: 0.1316][GRAD: 0.1843][VORT: 0.2481][Total: 0.6538]	4.9+3.1s
[6400/8000]	[L1: 0.0897][DIV: 0.1317][GRAD: 0.1839][VORT: 0.2471][Total: 0.6523]	4.9+3.2s
[7200/8000]	[L1: 0.0896][DIV: 0.1316][GRAD: 0.1837][VORT: 0.2471][Total: 0.6521]	4.9+3.1s
[8000/8000]	[L1: 0.0897][DIV: 0.1318][GRAD: 0.1840][VORT: 0.2478][Total: 0.6532]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.073729	vorticity_error: 0.660262	mean_abs_divergence: 0.108821
[DIV2K x2]	rel_l2_error: 0.056658	vorticity_error: 0.655145	mean_abs_divergence: 0.056031
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042948	vorticity_error: 0.538163	mean_abs_divergence: 0.027455
Forward: 15.67s

Saving...
Total: 16.00s

[Epoch 596]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0939][DIV: 0.1363][GRAD: 0.1925][VORT: 0.2571][Total: 0.6798]	5.1+17.1s
[1600/8000]	[L1: 0.0927][DIV: 0.1344][GRAD: 0.1901][VORT: 0.2563][Total: 0.6735]	4.9+3.1s
[2400/8000]	[L1: 0.0900][DIV: 0.1309][GRAD: 0.1847][VORT: 0.2500][Total: 0.6555]	4.9+3.1s
[3200/8000]	[L1: 0.0873][DIV: 0.1286][GRAD: 0.1790][VORT: 0.2409][Total: 0.6358]	4.9+3.2s
[4000/8000]	[L1: 0.0891][DIV: 0.1314][GRAD: 0.1826][VORT: 0.2452][Total: 0.6484]	4.9+3.2s
[4800/8000]	[L1: 0.0897][DIV: 0.1319][GRAD: 0.1839][VORT: 0.2472][Total: 0.6528]	4.9+3.1s
[5600/8000]	[L1: 0.0897][DIV: 0.1320][GRAD: 0.1837][VORT: 0.2469][Total: 0.6523]	4.9+3.1s
[6400/8000]	[L1: 0.0898][DIV: 0.1323][GRAD: 0.1840][VORT: 0.2471][Total: 0.6532]	4.9+3.1s
[7200/8000]	[L1: 0.0905][DIV: 0.1330][GRAD: 0.1853][VORT: 0.2480][Total: 0.6568]	4.8+3.2s
[8000/8000]	[L1: 0.0904][DIV: 0.1328][GRAD: 0.1851][VORT: 0.2478][Total: 0.6561]	4.9+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.097007	vorticity_error: 0.766764	mean_abs_divergence: 0.129745
[DIV2K x2]	rel_l2_error: 0.068008	vorticity_error: 0.688554	mean_abs_divergence: 0.068201
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.051820	vorticity_error: 0.598432	mean_abs_divergence: 0.032971
Forward: 15.71s

Saving...
Total: 16.06s

[Epoch 597]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0904][DIV: 0.1354][GRAD: 0.1839][VORT: 0.2399][Total: 0.6496]	5.2+17.0s
[1600/8000]	[L1: 0.0891][DIV: 0.1333][GRAD: 0.1818][VORT: 0.2420][Total: 0.6462]	4.9+3.1s
[2400/8000]	[L1: 0.0918][DIV: 0.1364][GRAD: 0.1877][VORT: 0.2512][Total: 0.6670]	4.9+3.2s
[3200/8000]	[L1: 0.0889][DIV: 0.1326][GRAD: 0.1818][VORT: 0.2443][Total: 0.6476]	4.9+3.1s
[4000/8000]	[L1: 0.0889][DIV: 0.1321][GRAD: 0.1817][VORT: 0.2443][Total: 0.6469]	4.9+3.1s
[4800/8000]	[L1: 0.0893][DIV: 0.1324][GRAD: 0.1829][VORT: 0.2464][Total: 0.6510]	4.8+3.2s
[5600/8000]	[L1: 0.0880][DIV: 0.1308][GRAD: 0.1801][VORT: 0.2427][Total: 0.6416]	4.9+3.2s
[6400/8000]	[L1: 0.0876][DIV: 0.1303][GRAD: 0.1793][VORT: 0.2414][Total: 0.6384]	4.9+3.1s
[7200/8000]	[L1: 0.0876][DIV: 0.1303][GRAD: 0.1795][VORT: 0.2414][Total: 0.6389]	4.9+3.2s
[8000/8000]	[L1: 0.0871][DIV: 0.1295][GRAD: 0.1786][VORT: 0.2411][Total: 0.6364]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.078717	vorticity_error: 0.771042	mean_abs_divergence: 0.112903
[DIV2K x2]	rel_l2_error: 0.057839	vorticity_error: 3.813264	mean_abs_divergence: 0.061253
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.038692	vorticity_error: 0.972558	mean_abs_divergence: 0.030559
Forward: 15.74s

Saving...
Total: 16.09s

[Epoch 598]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0874][DIV: 0.1291][GRAD: 0.1793][VORT: 0.2480][Total: 0.6438]	5.1+17.1s
[1600/8000]	[L1: 0.0883][DIV: 0.1308][GRAD: 0.1807][VORT: 0.2430][Total: 0.6428]	4.8+3.2s
[2400/8000]	[L1: 0.0891][DIV: 0.1302][GRAD: 0.1832][VORT: 0.2490][Total: 0.6515]	4.9+3.1s
[3200/8000]	[L1: 0.0872][DIV: 0.1291][GRAD: 0.1785][VORT: 0.2403][Total: 0.6352]	4.8+3.2s
[4000/8000]	[L1: 0.0883][DIV: 0.1307][GRAD: 0.1806][VORT: 0.2416][Total: 0.6413]	4.9+3.2s
[4800/8000]	[L1: 0.0885][DIV: 0.1306][GRAD: 0.1811][VORT: 0.2430][Total: 0.6432]	4.8+3.2s
[5600/8000]	[L1: 0.0878][DIV: 0.1297][GRAD: 0.1798][VORT: 0.2428][Total: 0.6401]	4.9+3.2s
[6400/8000]	[L1: 0.0868][DIV: 0.1286][GRAD: 0.1777][VORT: 0.2397][Total: 0.6327]	4.8+3.2s
[7200/8000]	[L1: 0.0873][DIV: 0.1292][GRAD: 0.1787][VORT: 0.2403][Total: 0.6355]	4.9+3.2s
[8000/8000]	[L1: 0.0873][DIV: 0.1291][GRAD: 0.1787][VORT: 0.2397][Total: 0.6349]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.071045	vorticity_error: 0.766075	mean_abs_divergence: 0.121565
[DIV2K x2]	rel_l2_error: 0.059011	vorticity_error: 0.768228	mean_abs_divergence: 0.064534
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043370	vorticity_error: 0.604962	mean_abs_divergence: 0.032006
Forward: 15.71s

Saving...
Total: 16.04s

[Epoch 599]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0888][DIV: 0.1311][GRAD: 0.1814][VORT: 0.2337][Total: 0.6350]	5.1+17.1s
[1600/8000]	[L1: 0.0936][DIV: 0.1372][GRAD: 0.1915][VORT: 0.2494][Total: 0.6717]	4.8+3.2s
[2400/8000]	[L1: 0.0919][DIV: 0.1352][GRAD: 0.1880][VORT: 0.2477][Total: 0.6628]	4.9+3.1s
[3200/8000]	[L1: 0.0914][DIV: 0.1347][GRAD: 0.1869][VORT: 0.2465][Total: 0.6595]	4.9+3.2s
[4000/8000]	[L1: 0.0902][DIV: 0.1332][GRAD: 0.1845][VORT: 0.2444][Total: 0.6523]	4.9+3.1s
[4800/8000]	[L1: 0.0899][DIV: 0.1331][GRAD: 0.1840][VORT: 0.2434][Total: 0.6504]	4.8+3.2s
[5600/8000]	[L1: 0.0911][DIV: 0.1346][GRAD: 0.1866][VORT: 0.2464][Total: 0.6588]	4.9+3.2s
[6400/8000]	[L1: 0.0912][DIV: 0.1349][GRAD: 0.1868][VORT: 0.2467][Total: 0.6596]	4.8+3.2s
[7200/8000]	[L1: 0.0907][DIV: 0.1341][GRAD: 0.1857][VORT: 0.2458][Total: 0.6563]	4.9+3.2s
[8000/8000]	[L1: 0.0905][DIV: 0.1338][GRAD: 0.1853][VORT: 0.2451][Total: 0.6548]	4.9+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.063615	vorticity_error: 0.638345	mean_abs_divergence: 0.095082
[DIV2K x2]	rel_l2_error: 0.046337	vorticity_error: 0.646101	mean_abs_divergence: 0.049595
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.034882	vorticity_error: 0.546950	mean_abs_divergence: 0.024381
Forward: 16.02s

Saving...
Total: 16.36s

[Epoch 600]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0933][DIV: 0.1361][GRAD: 0.1919][VORT: 0.2578][Total: 0.6791]	5.1+17.2s
[1600/8000]	[L1: 0.0887][DIV: 0.1303][GRAD: 0.1825][VORT: 0.2485][Total: 0.6501]	4.9+3.2s
[2400/8000]	[L1: 0.0875][DIV: 0.1300][GRAD: 0.1797][VORT: 0.2419][Total: 0.6390]	4.9+3.2s
[3200/8000]	[L1: 0.0891][DIV: 0.1318][GRAD: 0.1829][VORT: 0.2446][Total: 0.6484]	4.9+3.2s
[4000/8000]	[L1: 0.0887][DIV: 0.1316][GRAD: 0.1818][VORT: 0.2425][Total: 0.6445]	4.9+3.2s
[4800/8000]	[L1: 0.0881][DIV: 0.1309][GRAD: 0.1806][VORT: 0.2399][Total: 0.6395]	4.9+3.1s
[5600/8000]	[L1: 0.0876][DIV: 0.1304][GRAD: 0.1795][VORT: 0.2382][Total: 0.6357]	4.9+3.1s
[6400/8000]	[L1: 0.0872][DIV: 0.1296][GRAD: 0.1786][VORT: 0.2372][Total: 0.6326]	4.9+3.1s
[7200/8000]	[L1: 0.0882][DIV: 0.1311][GRAD: 0.1807][VORT: 0.2401][Total: 0.6402]	4.9+3.1s
[8000/8000]	[L1: 0.0877][DIV: 0.1304][GRAD: 0.1797][VORT: 0.2398][Total: 0.6375]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.098341	vorticity_error: 3.052684	mean_abs_divergence: 0.144762
[DIV2K x2]	rel_l2_error: 0.075996	vorticity_error: 1.296069	mean_abs_divergence: 0.077260
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.056946	vorticity_error: 1.478192	mean_abs_divergence: 0.038004
Forward: 15.78s

Saving...
Total: 16.11s

[Epoch 601]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0955][DIV: 0.1401][GRAD: 0.1954][VORT: 0.2561][Total: 0.6871]	5.0+17.2s
[1600/8000]	[L1: 0.0894][DIV: 0.1319][GRAD: 0.1829][VORT: 0.2411][Total: 0.6453]	4.8+3.2s
[2400/8000]	[L1: 0.0895][DIV: 0.1325][GRAD: 0.1832][VORT: 0.2428][Total: 0.6480]	4.9+3.1s
[3200/8000]	[L1: 0.0908][DIV: 0.1353][GRAD: 0.1858][VORT: 0.2464][Total: 0.6583]	4.9+3.1s
[4000/8000]	[L1: 0.0904][DIV: 0.1345][GRAD: 0.1847][VORT: 0.2440][Total: 0.6536]	4.9+3.1s
[4800/8000]	[L1: 0.0891][DIV: 0.1331][GRAD: 0.1821][VORT: 0.2404][Total: 0.6447]	4.9+3.1s
[5600/8000]	[L1: 0.0882][DIV: 0.1319][GRAD: 0.1802][VORT: 0.2382][Total: 0.6386]	4.8+3.2s
[6400/8000]	[L1: 0.0895][DIV: 0.1337][GRAD: 0.1830][VORT: 0.2426][Total: 0.6488]	4.8+3.2s
[7200/8000]	[L1: 0.0887][DIV: 0.1322][GRAD: 0.1813][VORT: 0.2410][Total: 0.6432]	4.8+3.2s
[8000/8000]	[L1: 0.0884][DIV: 0.1320][GRAD: 0.1808][VORT: 0.2406][Total: 0.6417]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.096500	vorticity_error: 1.068718	mean_abs_divergence: 0.126971
[DIV2K x2]	rel_l2_error: 0.071433	vorticity_error: 3.369415	mean_abs_divergence: 0.065889
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.059408	vorticity_error: 1.317714	mean_abs_divergence: 0.031542
Forward: 15.71s

Saving...
Total: 16.03s

[Epoch 602]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0837][DIV: 0.1248][GRAD: 0.1712][VORT: 0.2316][Total: 0.6114]	5.1+17.1s
[1600/8000]	[L1: 0.0885][DIV: 0.1309][GRAD: 0.1805][VORT: 0.2395][Total: 0.6392]	4.9+3.2s
[2400/8000]	[L1: 0.0869][DIV: 0.1296][GRAD: 0.1776][VORT: 0.2359][Total: 0.6300]	4.8+3.2s
[3200/8000]	[L1: 0.0854][DIV: 0.1273][GRAD: 0.1746][VORT: 0.2319][Total: 0.6193]	4.9+3.1s
[4000/8000]	[L1: 0.0881][DIV: 0.1306][GRAD: 0.1801][VORT: 0.2401][Total: 0.6388]	4.9+3.1s
[4800/8000]	[L1: 0.0877][DIV: 0.1301][GRAD: 0.1794][VORT: 0.2396][Total: 0.6367]	4.8+3.2s
[5600/8000]	[L1: 0.0883][DIV: 0.1310][GRAD: 0.1807][VORT: 0.2405][Total: 0.6404]	4.8+3.2s
[6400/8000]	[L1: 0.0890][DIV: 0.1319][GRAD: 0.1820][VORT: 0.2420][Total: 0.6448]	4.9+3.2s
[7200/8000]	[L1: 0.0892][DIV: 0.1322][GRAD: 0.1824][VORT: 0.2420][Total: 0.6457]	4.9+3.2s
[8000/8000]	[L1: 0.0899][DIV: 0.1332][GRAD: 0.1838][VORT: 0.2445][Total: 0.6513]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.084886	vorticity_error: 0.783197	mean_abs_divergence: 0.114756
[DIV2K x2]	rel_l2_error: 0.062216	vorticity_error: 0.840306	mean_abs_divergence: 0.060700
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048451	vorticity_error: 0.636283	mean_abs_divergence: 0.029377
Forward: 15.91s

Saving...
Total: 16.25s

[Epoch 603]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0897][DIV: 0.1324][GRAD: 0.1843][VORT: 0.2512][Total: 0.6576]	5.2+17.1s
[1600/8000]	[L1: 0.0896][DIV: 0.1318][GRAD: 0.1840][VORT: 0.2486][Total: 0.6541]	4.9+3.1s
[2400/8000]	[L1: 0.0896][DIV: 0.1319][GRAD: 0.1838][VORT: 0.2469][Total: 0.6521]	4.9+3.2s
[3200/8000]	[L1: 0.0911][DIV: 0.1341][GRAD: 0.1868][VORT: 0.2503][Total: 0.6622]	4.9+3.2s
[4000/8000]	[L1: 0.0892][DIV: 0.1320][GRAD: 0.1830][VORT: 0.2445][Total: 0.6487]	4.8+3.2s
[4800/8000]	[L1: 0.0898][DIV: 0.1326][GRAD: 0.1842][VORT: 0.2466][Total: 0.6531]	4.9+3.2s
[5600/8000]	[L1: 0.0881][DIV: 0.1305][GRAD: 0.1805][VORT: 0.2419][Total: 0.6410]	4.9+3.1s
[6400/8000]	[L1: 0.0879][DIV: 0.1305][GRAD: 0.1801][VORT: 0.2416][Total: 0.6401]	4.9+3.2s
[7200/8000]	[L1: 0.0875][DIV: 0.1300][GRAD: 0.1791][VORT: 0.2402][Total: 0.6368]	4.9+3.2s
[8000/8000]	[L1: 0.0882][DIV: 0.1308][GRAD: 0.1806][VORT: 0.2420][Total: 0.6416]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.086323	vorticity_error: 0.860500	mean_abs_divergence: 0.139177
[DIV2K x2]	rel_l2_error: 0.068061	vorticity_error: 0.844661	mean_abs_divergence: 0.074171
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048870	vorticity_error: 0.676040	mean_abs_divergence: 0.036980
Forward: 15.85s

Saving...
Total: 16.23s

[Epoch 604]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0858][DIV: 0.1272][GRAD: 0.1756][VORT: 0.2284][Total: 0.6171]	5.1+17.1s
[1600/8000]	[L1: 0.0847][DIV: 0.1256][GRAD: 0.1739][VORT: 0.2355][Total: 0.6198]	4.9+3.2s
[2400/8000]	[L1: 0.0890][DIV: 0.1317][GRAD: 0.1824][VORT: 0.2472][Total: 0.6502]	4.9+3.1s
[3200/8000]	[L1: 0.0873][DIV: 0.1295][GRAD: 0.1788][VORT: 0.2412][Total: 0.6368]	4.9+3.2s
[4000/8000]	[L1: 0.0864][DIV: 0.1283][GRAD: 0.1770][VORT: 0.2388][Total: 0.6305]	4.9+3.2s
[4800/8000]	[L1: 0.0861][DIV: 0.1281][GRAD: 0.1766][VORT: 0.2385][Total: 0.6294]	4.9+3.2s
[5600/8000]	[L1: 0.0859][DIV: 0.1276][GRAD: 0.1761][VORT: 0.2370][Total: 0.6266]	4.9+3.1s
[6400/8000]	[L1: 0.0859][DIV: 0.1278][GRAD: 0.1762][VORT: 0.2371][Total: 0.6270]	4.9+3.2s
[7200/8000]	[L1: 0.0860][DIV: 0.1282][GRAD: 0.1764][VORT: 0.2369][Total: 0.6277]	5.0+3.1s
[8000/8000]	[L1: 0.0853][DIV: 0.1274][GRAD: 0.1750][VORT: 0.2353][Total: 0.6230]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.083306	vorticity_error: 0.888292	mean_abs_divergence: 0.130527
[DIV2K x2]	rel_l2_error: 0.062753	vorticity_error: 1.237971	mean_abs_divergence: 0.069358
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048678	vorticity_error: 1.056763	mean_abs_divergence: 0.034511
Forward: 15.85s

Saving...
Total: 16.18s

[Epoch 605]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0843][DIV: 0.1241][GRAD: 0.1718][VORT: 0.2341][Total: 0.6142]	5.2+17.0s
[1600/8000]	[L1: 0.0885][DIV: 0.1301][GRAD: 0.1811][VORT: 0.2479][Total: 0.6475]	4.9+3.1s
[2400/8000]	[L1: 0.0883][DIV: 0.1305][GRAD: 0.1807][VORT: 0.2462][Total: 0.6457]	4.9+3.1s
[3200/8000]	[L1: 0.0873][DIV: 0.1295][GRAD: 0.1788][VORT: 0.2423][Total: 0.6380]	4.9+3.1s
[4000/8000]	[L1: 0.0871][DIV: 0.1292][GRAD: 0.1784][VORT: 0.2402][Total: 0.6348]	4.9+3.1s
[4800/8000]	[L1: 0.0870][DIV: 0.1290][GRAD: 0.1783][VORT: 0.2405][Total: 0.6349]	4.9+3.1s
[5600/8000]	[L1: 0.0875][DIV: 0.1297][GRAD: 0.1795][VORT: 0.2420][Total: 0.6387]	4.9+3.2s
[6400/8000]	[L1: 0.0873][DIV: 0.1293][GRAD: 0.1791][VORT: 0.2418][Total: 0.6375]	4.8+3.2s
[7200/8000]	[L1: 0.0880][DIV: 0.1300][GRAD: 0.1805][VORT: 0.2424][Total: 0.6409]	4.9+3.1s
[8000/8000]	[L1: 0.0883][DIV: 0.1304][GRAD: 0.1812][VORT: 0.2436][Total: 0.6435]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.081131	vorticity_error: 0.905475	mean_abs_divergence: 0.140589
[DIV2K x2]	rel_l2_error: 0.068168	vorticity_error: 0.887757	mean_abs_divergence: 0.073302
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.047669	vorticity_error: 0.666694	mean_abs_divergence: 0.035282
Forward: 15.71s

Saving...
Total: 16.04s

[Epoch 606]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0887][DIV: 0.1310][GRAD: 0.1816][VORT: 0.2408][Total: 0.6420]	5.2+17.1s
[1600/8000]	[L1: 0.0875][DIV: 0.1296][GRAD: 0.1791][VORT: 0.2377][Total: 0.6340]	4.9+3.1s
[2400/8000]	[L1: 0.0868][DIV: 0.1290][GRAD: 0.1778][VORT: 0.2349][Total: 0.6286]	4.9+3.1s
[3200/8000]	[L1: 0.0881][DIV: 0.1309][GRAD: 0.1805][VORT: 0.2385][Total: 0.6380]	5.0+3.1s
[4000/8000]	[L1: 0.0876][DIV: 0.1300][GRAD: 0.1796][VORT: 0.2384][Total: 0.6357]	4.8+3.2s
[4800/8000]	[L1: 0.0877][DIV: 0.1295][GRAD: 0.1799][VORT: 0.2403][Total: 0.6374]	4.9+3.1s
[5600/8000]	[L1: 0.0876][DIV: 0.1297][GRAD: 0.1797][VORT: 0.2400][Total: 0.6370]	4.9+3.2s
[6400/8000]	[L1: 0.0879][DIV: 0.1301][GRAD: 0.1802][VORT: 0.2398][Total: 0.6380]	4.9+3.2s
[7200/8000]	[L1: 0.0878][DIV: 0.1298][GRAD: 0.1799][VORT: 0.2400][Total: 0.6374]	4.9+3.1s
[8000/8000]	[L1: 0.0879][DIV: 0.1301][GRAD: 0.1803][VORT: 0.2404][Total: 0.6387]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.076449	vorticity_error: 0.811200	mean_abs_divergence: 0.122286
[DIV2K x2]	rel_l2_error: 0.062286	vorticity_error: 0.912085	mean_abs_divergence: 0.064222
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044260	vorticity_error: 0.744809	mean_abs_divergence: 0.031447
Forward: 15.67s

Saving...
Total: 16.00s

[Epoch 607]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0851][DIV: 0.1290][GRAD: 0.1751][VORT: 0.2375][Total: 0.6266]	5.2+17.3s
[1600/8000]	[L1: 0.0861][DIV: 0.1289][GRAD: 0.1768][VORT: 0.2366][Total: 0.6285]	4.9+3.1s
[2400/8000]	[L1: 0.0864][DIV: 0.1294][GRAD: 0.1772][VORT: 0.2362][Total: 0.6291]	4.9+3.1s
[3200/8000]	[L1: 0.0871][DIV: 0.1303][GRAD: 0.1787][VORT: 0.2382][Total: 0.6343]	4.9+3.1s
[4000/8000]	[L1: 0.0879][DIV: 0.1312][GRAD: 0.1803][VORT: 0.2408][Total: 0.6402]	4.9+3.1s
[4800/8000]	[L1: 0.0873][DIV: 0.1303][GRAD: 0.1791][VORT: 0.2398][Total: 0.6365]	4.9+3.2s
[5600/8000]	[L1: 0.0860][DIV: 0.1282][GRAD: 0.1763][VORT: 0.2362][Total: 0.6267]	4.9+3.2s
[6400/8000]	[L1: 0.0858][DIV: 0.1280][GRAD: 0.1759][VORT: 0.2356][Total: 0.6253]	4.8+3.2s
[7200/8000]	[L1: 0.0859][DIV: 0.1283][GRAD: 0.1761][VORT: 0.2364][Total: 0.6268]	4.9+3.2s
[8000/8000]	[L1: 0.0860][DIV: 0.1284][GRAD: 0.1763][VORT: 0.2366][Total: 0.6273]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.080405	vorticity_error: 0.777223	mean_abs_divergence: 0.125666
[DIV2K x2]	rel_l2_error: 0.055912	vorticity_error: 0.910985	mean_abs_divergence: 0.065483
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.041550	vorticity_error: 0.819511	mean_abs_divergence: 0.031562
Forward: 15.84s

Saving...
Total: 16.24s

[Epoch 608]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0869][DIV: 0.1295][GRAD: 0.1784][VORT: 0.2410][Total: 0.6358]	5.1+17.1s
[1600/8000]	[L1: 0.0828][DIV: 0.1245][GRAD: 0.1699][VORT: 0.2295][Total: 0.6068]	4.9+3.1s
[2400/8000]	[L1: 0.0864][DIV: 0.1288][GRAD: 0.1771][VORT: 0.2378][Total: 0.6301]	4.9+3.1s
[3200/8000]	[L1: 0.0858][DIV: 0.1281][GRAD: 0.1758][VORT: 0.2361][Total: 0.6259]	4.9+3.2s
[4000/8000]	[L1: 0.0865][DIV: 0.1289][GRAD: 0.1772][VORT: 0.2376][Total: 0.6301]	4.9+3.1s
[4800/8000]	[L1: 0.0856][DIV: 0.1278][GRAD: 0.1756][VORT: 0.2363][Total: 0.6253]	4.9+3.1s
[5600/8000]	[L1: 0.0860][DIV: 0.1284][GRAD: 0.1764][VORT: 0.2372][Total: 0.6280]	4.9+3.2s
[6400/8000]	[L1: 0.0861][DIV: 0.1283][GRAD: 0.1765][VORT: 0.2383][Total: 0.6292]	4.9+3.1s
[7200/8000]	[L1: 0.0867][DIV: 0.1291][GRAD: 0.1778][VORT: 0.2401][Total: 0.6337]	4.9+3.1s
[8000/8000]	[L1: 0.0868][DIV: 0.1291][GRAD: 0.1783][VORT: 0.2415][Total: 0.6357]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.096020	vorticity_error: 0.902161	mean_abs_divergence: 0.145995
[DIV2K x2]	rel_l2_error: 0.078275	vorticity_error: 0.983177	mean_abs_divergence: 0.078516
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.051393	vorticity_error: 0.717386	mean_abs_divergence: 0.039112
Forward: 15.87s

Saving...
Total: 16.19s

[Epoch 609]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0837][DIV: 0.1248][GRAD: 0.1716][VORT: 0.2359][Total: 0.6159]	5.1+17.1s
[1600/8000]	[L1: 0.0832][DIV: 0.1243][GRAD: 0.1705][VORT: 0.2334][Total: 0.6113]	4.9+3.2s
[2400/8000]	[L1: 0.0830][DIV: 0.1240][GRAD: 0.1703][VORT: 0.2312][Total: 0.6085]	4.9+3.2s
[3200/8000]	[L1: 0.0851][DIV: 0.1267][GRAD: 0.1744][VORT: 0.2362][Total: 0.6224]	4.9+3.2s
[4000/8000]	[L1: 0.0850][DIV: 0.1263][GRAD: 0.1742][VORT: 0.2357][Total: 0.6212]	4.8+3.2s
[4800/8000]	[L1: 0.0866][DIV: 0.1281][GRAD: 0.1777][VORT: 0.2401][Total: 0.6325]	4.9+3.1s
[5600/8000]	[L1: 0.0871][DIV: 0.1287][GRAD: 0.1788][VORT: 0.2407][Total: 0.6352]	4.8+3.2s
[6400/8000]	[L1: 0.0868][DIV: 0.1284][GRAD: 0.1781][VORT: 0.2394][Total: 0.6327]	4.8+3.2s
[7200/8000]	[L1: 0.0871][DIV: 0.1290][GRAD: 0.1788][VORT: 0.2407][Total: 0.6356]	4.9+3.2s
[8000/8000]	[L1: 0.0872][DIV: 0.1291][GRAD: 0.1790][VORT: 0.2418][Total: 0.6370]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.079670	vorticity_error: 0.861049	mean_abs_divergence: 0.110697
[DIV2K x2]	rel_l2_error: 0.062122	vorticity_error: 0.951972	mean_abs_divergence: 0.058477
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.050556	vorticity_error: 1.041051	mean_abs_divergence: 0.028511
Forward: 15.89s

Saving...
Total: 16.21s

[Epoch 610]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0820][DIV: 0.1232][GRAD: 0.1679][VORT: 0.2240][Total: 0.5970]	5.1+17.1s
[1600/8000]	[L1: 0.0826][DIV: 0.1240][GRAD: 0.1694][VORT: 0.2265][Total: 0.6025]	4.9+3.1s
[2400/8000]	[L1: 0.0821][DIV: 0.1233][GRAD: 0.1684][VORT: 0.2255][Total: 0.5993]	4.8+3.2s
[3200/8000]	[L1: 0.0831][DIV: 0.1244][GRAD: 0.1701][VORT: 0.2283][Total: 0.6059]	4.9+3.1s
[4000/8000]	[L1: 0.0838][DIV: 0.1256][GRAD: 0.1717][VORT: 0.2303][Total: 0.6115]	4.8+3.2s
[4800/8000]	[L1: 0.0852][DIV: 0.1273][GRAD: 0.1743][VORT: 0.2334][Total: 0.6202]	4.9+3.2s
[5600/8000]	[L1: 0.0853][DIV: 0.1277][GRAD: 0.1745][VORT: 0.2339][Total: 0.6213]	4.9+3.2s
[6400/8000]	[L1: 0.0854][DIV: 0.1276][GRAD: 0.1748][VORT: 0.2341][Total: 0.6220]	4.9+3.2s
[7200/8000]	[L1: 0.0856][DIV: 0.1278][GRAD: 0.1751][VORT: 0.2335][Total: 0.6219]	4.9+3.2s
[8000/8000]	[L1: 0.0871][DIV: 0.1297][GRAD: 0.1782][VORT: 0.2377][Total: 0.6327]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.084540	vorticity_error: 2.958601	mean_abs_divergence: 0.130064
[DIV2K x2]	rel_l2_error: 0.064201	vorticity_error: 0.739514	mean_abs_divergence: 0.068238
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.052517	vorticity_error: 0.702121	mean_abs_divergence: 0.033268
Forward: 15.90s

Saving...
Total: 16.23s

[Epoch 611]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0827][DIV: 0.1253][GRAD: 0.1693][VORT: 0.2280][Total: 0.6052]	5.1+17.1s
[1600/8000]	[L1: 0.0884][DIV: 0.1311][GRAD: 0.1811][VORT: 0.2398][Total: 0.6405]	4.9+3.2s
[2400/8000]	[L1: 0.0898][DIV: 0.1330][GRAD: 0.1839][VORT: 0.2439][Total: 0.6506]	4.9+3.2s
[3200/8000]	[L1: 0.0901][DIV: 0.1335][GRAD: 0.1844][VORT: 0.2442][Total: 0.6522]	4.9+3.2s
[4000/8000]	[L1: 0.0894][DIV: 0.1322][GRAD: 0.1830][VORT: 0.2425][Total: 0.6470]	4.8+3.2s
[4800/8000]	[L1: 0.0895][DIV: 0.1324][GRAD: 0.1835][VORT: 0.2437][Total: 0.6491]	4.8+3.2s
[5600/8000]	[L1: 0.0887][DIV: 0.1315][GRAD: 0.1816][VORT: 0.2424][Total: 0.6442]	4.9+3.2s
[6400/8000]	[L1: 0.0885][DIV: 0.1311][GRAD: 0.1811][VORT: 0.2419][Total: 0.6426]	4.8+3.2s
[7200/8000]	[L1: 0.0901][DIV: 0.1328][GRAD: 0.1846][VORT: 0.2463][Total: 0.6538]	4.9+3.2s
[8000/8000]	[L1: 0.0896][DIV: 0.1323][GRAD: 0.1834][VORT: 0.2445][Total: 0.6499]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.079549	vorticity_error: 0.826995	mean_abs_divergence: 0.133528
[DIV2K x2]	rel_l2_error: 0.060479	vorticity_error: 0.806255	mean_abs_divergence: 0.070776
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.041221	vorticity_error: 0.678261	mean_abs_divergence: 0.035126
Forward: 15.86s

Saving...
Total: 16.26s

[Epoch 612]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0851][DIV: 0.1281][GRAD: 0.1742][VORT: 0.2319][Total: 0.6193]	5.1+17.1s
[1600/8000]	[L1: 0.0828][DIV: 0.1246][GRAD: 0.1702][VORT: 0.2283][Total: 0.6060]	4.8+3.2s
[2400/8000]	[L1: 0.0873][DIV: 0.1296][GRAD: 0.1792][VORT: 0.2407][Total: 0.6369]	4.9+3.1s
[3200/8000]	[L1: 0.0856][DIV: 0.1274][GRAD: 0.1757][VORT: 0.2362][Total: 0.6249]	4.9+3.1s
[4000/8000]	[L1: 0.0860][DIV: 0.1276][GRAD: 0.1762][VORT: 0.2365][Total: 0.6263]	4.8+3.2s
[4800/8000]	[L1: 0.0864][DIV: 0.1282][GRAD: 0.1772][VORT: 0.2377][Total: 0.6295]	4.9+3.1s
[5600/8000]	[L1: 0.0862][DIV: 0.1280][GRAD: 0.1766][VORT: 0.2367][Total: 0.6276]	4.9+3.1s
[6400/8000]	[L1: 0.0862][DIV: 0.1281][GRAD: 0.1766][VORT: 0.2363][Total: 0.6271]	4.9+3.1s
[7200/8000]	[L1: 0.0860][DIV: 0.1279][GRAD: 0.1762][VORT: 0.2360][Total: 0.6261]	4.9+3.1s
[8000/8000]	[L1: 0.0867][DIV: 0.1286][GRAD: 0.1777][VORT: 0.2385][Total: 0.6314]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.081637	vorticity_error: 2.777954	mean_abs_divergence: 0.120335
[DIV2K x2]	rel_l2_error: 0.063251	vorticity_error: 0.646904	mean_abs_divergence: 0.061451
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.041901	vorticity_error: 0.620115	mean_abs_divergence: 0.029740
Forward: 15.90s

Saving...
Total: 16.23s

[Epoch 613]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0896][DIV: 0.1325][GRAD: 0.1833][VORT: 0.2520][Total: 0.6575]	5.1+17.1s
[1600/8000]	[L1: 0.0917][DIV: 0.1352][GRAD: 0.1877][VORT: 0.2511][Total: 0.6657]	4.8+3.2s
[2400/8000]	[L1: 0.0902][DIV: 0.1331][GRAD: 0.1847][VORT: 0.2475][Total: 0.6555]	4.8+3.2s
[3200/8000]	[L1: 0.0909][DIV: 0.1344][GRAD: 0.1864][VORT: 0.2496][Total: 0.6613]	4.9+3.1s
[4000/8000]	[L1: 0.0893][DIV: 0.1324][GRAD: 0.1834][VORT: 0.2462][Total: 0.6513]	4.9+3.1s
[4800/8000]	[L1: 0.0890][DIV: 0.1320][GRAD: 0.1827][VORT: 0.2447][Total: 0.6485]	4.9+3.1s
[5600/8000]	[L1: 0.0893][DIV: 0.1325][GRAD: 0.1831][VORT: 0.2454][Total: 0.6503]	4.9+3.2s
[6400/8000]	[L1: 0.0893][DIV: 0.1325][GRAD: 0.1831][VORT: 0.2448][Total: 0.6497]	4.9+3.1s
[7200/8000]	[L1: 0.0884][DIV: 0.1312][GRAD: 0.1813][VORT: 0.2429][Total: 0.6437]	4.9+3.2s
[8000/8000]	[L1: 0.0887][DIV: 0.1315][GRAD: 0.1818][VORT: 0.2433][Total: 0.6452]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.093636	vorticity_error: 1.065745	mean_abs_divergence: 0.142494
[DIV2K x2]	rel_l2_error: 0.070014	vorticity_error: 1.034425	mean_abs_divergence: 0.076274
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048139	vorticity_error: 0.793253	mean_abs_divergence: 0.038130
Forward: 15.78s

Saving...
Total: 16.11s

[Epoch 614]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0843][DIV: 0.1263][GRAD: 0.1734][VORT: 0.2379][Total: 0.6219]	5.2+17.0s
[1600/8000]	[L1: 0.0889][DIV: 0.1314][GRAD: 0.1827][VORT: 0.2487][Total: 0.6517]	4.8+3.2s
[2400/8000]	[L1: 0.0910][DIV: 0.1334][GRAD: 0.1870][VORT: 0.2537][Total: 0.6651]	4.8+3.2s
[3200/8000]	[L1: 0.0891][DIV: 0.1311][GRAD: 0.1829][VORT: 0.2464][Total: 0.6496]	4.9+3.1s
[4000/8000]	[L1: 0.0895][DIV: 0.1318][GRAD: 0.1837][VORT: 0.2478][Total: 0.6528]	4.8+3.2s
[4800/8000]	[L1: 0.0891][DIV: 0.1315][GRAD: 0.1828][VORT: 0.2459][Total: 0.6493]	4.8+3.2s
[5600/8000]	[L1: 0.0890][DIV: 0.1314][GRAD: 0.1824][VORT: 0.2451][Total: 0.6479]	4.9+3.2s
[6400/8000]	[L1: 0.0893][DIV: 0.1315][GRAD: 0.1831][VORT: 0.2461][Total: 0.6500]	4.9+3.2s
[7200/8000]	[L1: 0.0890][DIV: 0.1312][GRAD: 0.1825][VORT: 0.2447][Total: 0.6473]	4.9+3.2s
[8000/8000]	[L1: 0.0892][DIV: 0.1315][GRAD: 0.1828][VORT: 0.2445][Total: 0.6480]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.067083	vorticity_error: 0.672288	mean_abs_divergence: 0.117746
[DIV2K x2]	rel_l2_error: 0.051227	vorticity_error: 0.808479	mean_abs_divergence: 0.060637
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042259	vorticity_error: 0.880350	mean_abs_divergence: 0.029237
Forward: 15.75s

Saving...
Total: 16.08s

[Epoch 615]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0859][DIV: 0.1267][GRAD: 0.1752][VORT: 0.2371][Total: 0.6249]	5.0+17.0s
[1600/8000]	[L1: 0.0830][DIV: 0.1231][GRAD: 0.1700][VORT: 0.2331][Total: 0.6092]	4.9+3.1s
[2400/8000]	[L1: 0.0840][DIV: 0.1248][GRAD: 0.1718][VORT: 0.2328][Total: 0.6133]	4.9+3.1s
[3200/8000]	[L1: 0.0865][DIV: 0.1278][GRAD: 0.1770][VORT: 0.2356][Total: 0.6270]	4.8+3.2s
[4000/8000]	[L1: 0.0858][DIV: 0.1267][GRAD: 0.1758][VORT: 0.2348][Total: 0.6231]	4.9+3.2s
[4800/8000]	[L1: 0.0857][DIV: 0.1274][GRAD: 0.1753][VORT: 0.2330][Total: 0.6213]	4.9+3.2s
[5600/8000]	[L1: 0.0865][DIV: 0.1287][GRAD: 0.1770][VORT: 0.2354][Total: 0.6276]	4.9+3.1s
[6400/8000]	[L1: 0.0866][DIV: 0.1289][GRAD: 0.1774][VORT: 0.2366][Total: 0.6295]	4.9+3.2s
[7200/8000]	[L1: 0.0864][DIV: 0.1285][GRAD: 0.1769][VORT: 0.2364][Total: 0.6282]	4.9+3.2s
[8000/8000]	[L1: 0.0865][DIV: 0.1285][GRAD: 0.1772][VORT: 0.2377][Total: 0.6298]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.056542	vorticity_error: 0.510369	mean_abs_divergence: 0.092724
[DIV2K x2]	rel_l2_error: 0.044768	vorticity_error: 0.484849	mean_abs_divergence: 0.049791
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.034445	vorticity_error: 0.422557	mean_abs_divergence: 0.024588
Forward: 15.67s

Saving...
Total: 16.06s

[Epoch 616]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0921][DIV: 0.1349][GRAD: 0.1885][VORT: 0.2551][Total: 0.6705]	5.2+17.0s
[1600/8000]	[L1: 0.0935][DIV: 0.1355][GRAD: 0.1913][VORT: 0.2587][Total: 0.6791]	4.9+3.2s
[2400/8000]	[L1: 0.0899][DIV: 0.1320][GRAD: 0.1837][VORT: 0.2467][Total: 0.6523]	4.9+3.2s
[3200/8000]	[L1: 0.0896][DIV: 0.1320][GRAD: 0.1828][VORT: 0.2426][Total: 0.6471]	4.9+3.1s
[4000/8000]	[L1: 0.0884][DIV: 0.1302][GRAD: 0.1803][VORT: 0.2397][Total: 0.6386]	4.9+3.2s
[4800/8000]	[L1: 0.0880][DIV: 0.1296][GRAD: 0.1797][VORT: 0.2397][Total: 0.6370]	4.9+3.1s
[5600/8000]	[L1: 0.0869][DIV: 0.1284][GRAD: 0.1774][VORT: 0.2371][Total: 0.6298]	4.9+3.2s
[6400/8000]	[L1: 0.0876][DIV: 0.1293][GRAD: 0.1791][VORT: 0.2388][Total: 0.6348]	4.9+3.1s
[7200/8000]	[L1: 0.0884][DIV: 0.1303][GRAD: 0.1808][VORT: 0.2409][Total: 0.6404]	4.9+3.1s
[8000/8000]	[L1: 0.0881][DIV: 0.1297][GRAD: 0.1800][VORT: 0.2404][Total: 0.6382]	4.9+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.071735	vorticity_error: 0.794393	mean_abs_divergence: 0.106847
[DIV2K x2]	rel_l2_error: 0.055765	vorticity_error: 0.672482	mean_abs_divergence: 0.055812
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043868	vorticity_error: 0.623286	mean_abs_divergence: 0.027643
Forward: 15.68s

Saving...
Total: 16.02s

[Epoch 617]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0827][DIV: 0.1250][GRAD: 0.1701][VORT: 0.2315][Total: 0.6093]	5.1+17.1s
[1600/8000]	[L1: 0.0897][DIV: 0.1331][GRAD: 0.1837][VORT: 0.2433][Total: 0.6498]	4.9+3.2s
[2400/8000]	[L1: 0.0900][DIV: 0.1332][GRAD: 0.1848][VORT: 0.2478][Total: 0.6557]	4.9+3.2s
[3200/8000]	[L1: 0.0891][DIV: 0.1327][GRAD: 0.1828][VORT: 0.2451][Total: 0.6497]	4.9+3.2s
[4000/8000]	[L1: 0.0876][DIV: 0.1312][GRAD: 0.1798][VORT: 0.2400][Total: 0.6386]	4.9+3.1s
[4800/8000]	[L1: 0.0874][DIV: 0.1306][GRAD: 0.1792][VORT: 0.2391][Total: 0.6363]	4.9+3.1s
[5600/8000]	[L1: 0.0872][DIV: 0.1303][GRAD: 0.1791][VORT: 0.2397][Total: 0.6363]	4.9+3.1s
[6400/8000]	[L1: 0.0873][DIV: 0.1305][GRAD: 0.1792][VORT: 0.2397][Total: 0.6367]	4.8+3.2s
[7200/8000]	[L1: 0.0885][DIV: 0.1320][GRAD: 0.1816][VORT: 0.2430][Total: 0.6451]	4.8+3.2s
[8000/8000]	[L1: 0.0889][DIV: 0.1323][GRAD: 0.1825][VORT: 0.2444][Total: 0.6482]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.091379	vorticity_error: 0.943266	mean_abs_divergence: 0.159671
[DIV2K x2]	rel_l2_error: 0.068309	vorticity_error: 0.982291	mean_abs_divergence: 0.084854
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.050035	vorticity_error: 0.870177	mean_abs_divergence: 0.041867
Forward: 15.92s

Saving...
Total: 16.24s

[Epoch 618]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0820][DIV: 0.1243][GRAD: 0.1679][VORT: 0.2226][Total: 0.5968]	5.2+17.1s
[1600/8000]	[L1: 0.0841][DIV: 0.1261][GRAD: 0.1723][VORT: 0.2291][Total: 0.6116]	4.9+3.2s
[2400/8000]	[L1: 0.0853][DIV: 0.1276][GRAD: 0.1747][VORT: 0.2323][Total: 0.6199]	4.8+3.2s
[3200/8000]	[L1: 0.0856][DIV: 0.1285][GRAD: 0.1753][VORT: 0.2318][Total: 0.6211]	4.9+3.2s
[4000/8000]	[L1: 0.0868][DIV: 0.1300][GRAD: 0.1776][VORT: 0.2344][Total: 0.6288]	4.9+3.1s
[4800/8000]	[L1: 0.0875][DIV: 0.1308][GRAD: 0.1792][VORT: 0.2372][Total: 0.6346]	4.9+3.2s
[5600/8000]	[L1: 0.0881][DIV: 0.1313][GRAD: 0.1803][VORT: 0.2388][Total: 0.6385]	4.9+3.2s
[6400/8000]	[L1: 0.0893][DIV: 0.1326][GRAD: 0.1829][VORT: 0.2425][Total: 0.6474]	4.8+3.2s
[7200/8000]	[L1: 0.0895][DIV: 0.1325][GRAD: 0.1832][VORT: 0.2430][Total: 0.6482]	4.9+3.2s
[8000/8000]	[L1: 0.0894][DIV: 0.1326][GRAD: 0.1830][VORT: 0.2427][Total: 0.6478]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.072857	vorticity_error: 0.700922	mean_abs_divergence: 0.110719
[DIV2K x2]	rel_l2_error: 0.059748	vorticity_error: 0.734861	mean_abs_divergence: 0.058118
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044319	vorticity_error: 0.570814	mean_abs_divergence: 0.028784
Forward: 15.80s

Saving...
Total: 16.13s

[Epoch 619]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0850][DIV: 0.1281][GRAD: 0.1737][VORT: 0.2370][Total: 0.6238]	5.1+17.2s
[1600/8000]	[L1: 0.0870][DIV: 0.1309][GRAD: 0.1781][VORT: 0.2392][Total: 0.6352]	4.9+3.2s
[2400/8000]	[L1: 0.0891][DIV: 0.1329][GRAD: 0.1824][VORT: 0.2439][Total: 0.6483]	4.9+3.1s
[3200/8000]	[L1: 0.0900][DIV: 0.1335][GRAD: 0.1840][VORT: 0.2468][Total: 0.6543]	4.8+3.2s
[4000/8000]	[L1: 0.0901][DIV: 0.1338][GRAD: 0.1843][VORT: 0.2470][Total: 0.6552]	4.9+3.2s
[4800/8000]	[L1: 0.0908][DIV: 0.1345][GRAD: 0.1859][VORT: 0.2491][Total: 0.6604]	4.9+3.1s
[5600/8000]	[L1: 0.0895][DIV: 0.1327][GRAD: 0.1833][VORT: 0.2451][Total: 0.6506]	4.9+3.2s
[6400/8000]	[L1: 0.0894][DIV: 0.1327][GRAD: 0.1832][VORT: 0.2447][Total: 0.6500]	4.9+3.2s
[7200/8000]	[L1: 0.0896][DIV: 0.1328][GRAD: 0.1836][VORT: 0.2462][Total: 0.6522]	4.9+3.2s
[8000/8000]	[L1: 0.0891][DIV: 0.1323][GRAD: 0.1826][VORT: 0.2452][Total: 0.6493]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.074163	vorticity_error: 0.988560	mean_abs_divergence: 0.116104
[DIV2K x2]	rel_l2_error: 0.054737	vorticity_error: 0.766210	mean_abs_divergence: 0.058009
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.037782	vorticity_error: 0.617334	mean_abs_divergence: 0.027503
Forward: 15.85s

Saving...
Total: 16.18s

[Epoch 620]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0905][DIV: 0.1331][GRAD: 0.1856][VORT: 0.2517][Total: 0.6610]	5.2+17.1s
[1600/8000]	[L1: 0.0886][DIV: 0.1305][GRAD: 0.1819][VORT: 0.2499][Total: 0.6509]	4.8+3.2s
[2400/8000]	[L1: 0.0874][DIV: 0.1283][GRAD: 0.1794][VORT: 0.2438][Total: 0.6388]	4.9+3.2s
[3200/8000]	[L1: 0.0887][DIV: 0.1298][GRAD: 0.1819][VORT: 0.2463][Total: 0.6467]	4.8+3.2s
[4000/8000]	[L1: 0.0878][DIV: 0.1290][GRAD: 0.1801][VORT: 0.2431][Total: 0.6399]	4.9+3.1s
[4800/8000]	[L1: 0.0901][DIV: 0.1319][GRAD: 0.1848][VORT: 0.2486][Total: 0.6554]	4.8+3.2s
[5600/8000]	[L1: 0.0897][DIV: 0.1316][GRAD: 0.1837][VORT: 0.2464][Total: 0.6514]	4.9+3.2s
[6400/8000]	[L1: 0.0894][DIV: 0.1314][GRAD: 0.1831][VORT: 0.2451][Total: 0.6490]	4.8+3.2s
[7200/8000]	[L1: 0.0887][DIV: 0.1308][GRAD: 0.1817][VORT: 0.2435][Total: 0.6446]	4.9+3.2s
[8000/8000]	[L1: 0.0895][DIV: 0.1321][GRAD: 0.1834][VORT: 0.2452][Total: 0.6502]	4.9+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.070452	vorticity_error: 0.714531	mean_abs_divergence: 0.104138
[DIV2K x2]	rel_l2_error: 0.055940	vorticity_error: 0.703112	mean_abs_divergence: 0.052681
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.039963	vorticity_error: 0.584341	mean_abs_divergence: 0.025185
Forward: 15.69s

Saving...
Total: 16.02s

[Epoch 621]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0939][DIV: 0.1377][GRAD: 0.1935][VORT: 0.2640][Total: 0.6891]	5.1+17.1s
[1600/8000]	[L1: 0.0936][DIV: 0.1385][GRAD: 0.1921][VORT: 0.2569][Total: 0.6810]	4.9+3.1s
[2400/8000]	[L1: 0.0908][DIV: 0.1348][GRAD: 0.1864][VORT: 0.2502][Total: 0.6622]	4.9+3.1s
[3200/8000]	[L1: 0.0919][DIV: 0.1360][GRAD: 0.1888][VORT: 0.2536][Total: 0.6703]	4.8+3.2s
[4000/8000]	[L1: 0.0933][DIV: 0.1378][GRAD: 0.1915][VORT: 0.2571][Total: 0.6798]	4.9+3.2s
[4800/8000]	[L1: 0.0934][DIV: 0.1379][GRAD: 0.1917][VORT: 0.2559][Total: 0.6788]	4.9+3.2s
[5600/8000]	[L1: 0.0918][DIV: 0.1359][GRAD: 0.1884][VORT: 0.2519][Total: 0.6681]	4.9+3.2s
[6400/8000]	[L1: 0.0905][DIV: 0.1340][GRAD: 0.1856][VORT: 0.2485][Total: 0.6585]	4.9+3.1s
[7200/8000]	[L1: 0.0905][DIV: 0.1339][GRAD: 0.1856][VORT: 0.2494][Total: 0.6594]	4.8+3.2s
[8000/8000]	[L1: 0.0895][DIV: 0.1328][GRAD: 0.1837][VORT: 0.2466][Total: 0.6526]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.089582	vorticity_error: 2.359274	mean_abs_divergence: 0.131866
[DIV2K x2]	rel_l2_error: 0.071763	vorticity_error: 1.111973	mean_abs_divergence: 0.067507
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.050637	vorticity_error: 0.913520	mean_abs_divergence: 0.032346
Forward: 15.78s

Saving...
Total: 16.12s

[Epoch 622]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0878][DIV: 0.1297][GRAD: 0.1797][VORT: 0.2427][Total: 0.6398]	5.1+17.2s
[1600/8000]	[L1: 0.0924][DIV: 0.1346][GRAD: 0.1896][VORT: 0.2556][Total: 0.6722]	4.8+3.2s
[2400/8000]	[L1: 0.0895][DIV: 0.1318][GRAD: 0.1838][VORT: 0.2476][Total: 0.6526]	4.9+3.2s
[3200/8000]	[L1: 0.0914][DIV: 0.1339][GRAD: 0.1875][VORT: 0.2522][Total: 0.6649]	4.9+3.2s
[4000/8000]	[L1: 0.0892][DIV: 0.1312][GRAD: 0.1827][VORT: 0.2458][Total: 0.6490]	4.9+3.1s
[4800/8000]	[L1: 0.0886][DIV: 0.1304][GRAD: 0.1816][VORT: 0.2448][Total: 0.6455]	4.8+3.2s
[5600/8000]	[L1: 0.0880][DIV: 0.1299][GRAD: 0.1803][VORT: 0.2433][Total: 0.6416]	4.9+3.2s
[6400/8000]	[L1: 0.0897][DIV: 0.1323][GRAD: 0.1837][VORT: 0.2470][Total: 0.6527]	4.9+3.2s
[7200/8000]	[L1: 0.0896][DIV: 0.1321][GRAD: 0.1835][VORT: 0.2469][Total: 0.6521]	4.8+3.2s
[8000/8000]	[L1: 0.0893][DIV: 0.1318][GRAD: 0.1829][VORT: 0.2463][Total: 0.6502]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.096055	vorticity_error: 0.776400	mean_abs_divergence: 0.137313
[DIV2K x2]	rel_l2_error: 0.072240	vorticity_error: 0.790485	mean_abs_divergence: 0.072045
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.046394	vorticity_error: 0.617489	mean_abs_divergence: 0.034589
Forward: 15.94s

Saving...
Total: 16.27s

[Epoch 623]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0914][DIV: 0.1333][GRAD: 0.1878][VORT: 0.2496][Total: 0.6621]	5.1+17.2s
[1600/8000]	[L1: 0.0930][DIV: 0.1369][GRAD: 0.1912][VORT: 0.2527][Total: 0.6738]	4.8+3.2s
[2400/8000]	[L1: 0.0899][DIV: 0.1335][GRAD: 0.1846][VORT: 0.2432][Total: 0.6512]	4.9+3.1s
[3200/8000]	[L1: 0.0906][DIV: 0.1337][GRAD: 0.1859][VORT: 0.2461][Total: 0.6564]	4.8+3.2s
[4000/8000]	[L1: 0.0910][DIV: 0.1342][GRAD: 0.1865][VORT: 0.2458][Total: 0.6575]	4.8+3.2s
[4800/8000]	[L1: 0.0907][DIV: 0.1336][GRAD: 0.1860][VORT: 0.2466][Total: 0.6570]	4.8+3.2s
[5600/8000]	[L1: 0.0912][DIV: 0.1341][GRAD: 0.1867][VORT: 0.2461][Total: 0.6581]	4.9+3.1s
[6400/8000]	[L1: 0.0901][DIV: 0.1327][GRAD: 0.1844][VORT: 0.2435][Total: 0.6507]	4.8+3.2s
[7200/8000]	[L1: 0.0902][DIV: 0.1330][GRAD: 0.1847][VORT: 0.2442][Total: 0.6521]	4.8+3.2s
[8000/8000]	[L1: 0.0905][DIV: 0.1332][GRAD: 0.1854][VORT: 0.2457][Total: 0.6547]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.098222	vorticity_error: 0.950561	mean_abs_divergence: 0.135534
[DIV2K x2]	rel_l2_error: 0.072135	vorticity_error: 0.976990	mean_abs_divergence: 0.071123
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045514	vorticity_error: 0.801896	mean_abs_divergence: 0.035421
Forward: 15.77s

Saving...
Total: 16.16s

[Epoch 624]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0826][DIV: 0.1250][GRAD: 0.1685][VORT: 0.2266][Total: 0.6028]	5.1+17.1s
[1600/8000]	[L1: 0.0830][DIV: 0.1258][GRAD: 0.1695][VORT: 0.2286][Total: 0.6068]	4.8+3.2s
[2400/8000]	[L1: 0.0826][DIV: 0.1248][GRAD: 0.1686][VORT: 0.2256][Total: 0.6016]	4.9+3.1s
[3200/8000]	[L1: 0.0839][DIV: 0.1267][GRAD: 0.1715][VORT: 0.2283][Total: 0.6105]	4.9+3.1s
[4000/8000]	[L1: 0.0844][DIV: 0.1269][GRAD: 0.1726][VORT: 0.2305][Total: 0.6144]	4.9+3.2s
[4800/8000]	[L1: 0.0865][DIV: 0.1293][GRAD: 0.1767][VORT: 0.2343][Total: 0.6268]	4.9+3.2s
[5600/8000]	[L1: 0.0870][DIV: 0.1298][GRAD: 0.1779][VORT: 0.2363][Total: 0.6310]	4.8+3.2s
[6400/8000]	[L1: 0.0868][DIV: 0.1296][GRAD: 0.1775][VORT: 0.2359][Total: 0.6298]	4.9+3.1s
[7200/8000]	[L1: 0.0871][DIV: 0.1300][GRAD: 0.1783][VORT: 0.2371][Total: 0.6325]	4.8+3.2s
[8000/8000]	[L1: 0.0868][DIV: 0.1295][GRAD: 0.1777][VORT: 0.2370][Total: 0.6311]	4.9+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.072262	vorticity_error: 0.735221	mean_abs_divergence: 0.086113
[DIV2K x2]	rel_l2_error: 0.058669	vorticity_error: 0.679853	mean_abs_divergence: 0.046101
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044464	vorticity_error: 0.602400	mean_abs_divergence: 0.022893
Forward: 15.81s

Saving...
Total: 16.14s

[Epoch 625]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0840][DIV: 0.1224][GRAD: 0.1718][VORT: 0.2328][Total: 0.6110]	5.1+17.2s
[1600/8000]	[L1: 0.0871][DIV: 0.1280][GRAD: 0.1779][VORT: 0.2358][Total: 0.6288]	4.9+3.1s
[2400/8000]	[L1: 0.0884][DIV: 0.1305][GRAD: 0.1808][VORT: 0.2399][Total: 0.6396]	4.9+3.2s
[3200/8000]	[L1: 0.0876][DIV: 0.1296][GRAD: 0.1792][VORT: 0.2386][Total: 0.6349]	4.9+3.1s
[4000/8000]	[L1: 0.0885][DIV: 0.1310][GRAD: 0.1812][VORT: 0.2432][Total: 0.6439]	4.9+3.2s
[4800/8000]	[L1: 0.0882][DIV: 0.1309][GRAD: 0.1807][VORT: 0.2428][Total: 0.6426]	4.9+3.1s
[5600/8000]	[L1: 0.0882][DIV: 0.1305][GRAD: 0.1807][VORT: 0.2435][Total: 0.6429]	4.8+3.2s
[6400/8000]	[L1: 0.0869][DIV: 0.1288][GRAD: 0.1779][VORT: 0.2401][Total: 0.6337]	4.9+3.1s
[7200/8000]	[L1: 0.0864][DIV: 0.1282][GRAD: 0.1770][VORT: 0.2386][Total: 0.6303]	4.8+3.2s
[8000/8000]	[L1: 0.0870][DIV: 0.1289][GRAD: 0.1781][VORT: 0.2399][Total: 0.6339]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.081797	vorticity_error: 1.148098	mean_abs_divergence: 0.106571
[DIV2K x2]	rel_l2_error: 0.058576	vorticity_error: 0.978896	mean_abs_divergence: 0.057509
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.052120	vorticity_error: 0.685265	mean_abs_divergence: 0.028586
Forward: 15.75s

Saving...
Total: 16.09s

[Epoch 626]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0929][DIV: 0.1370][GRAD: 0.1902][VORT: 0.2512][Total: 0.6714]	5.1+17.1s
[1600/8000]	[L1: 0.0862][DIV: 0.1279][GRAD: 0.1772][VORT: 0.2416][Total: 0.6329]	4.9+3.2s
[2400/8000]	[L1: 0.0845][DIV: 0.1262][GRAD: 0.1735][VORT: 0.2352][Total: 0.6193]	4.8+3.2s
[3200/8000]	[L1: 0.0872][DIV: 0.1297][GRAD: 0.1791][VORT: 0.2429][Total: 0.6390]	4.9+3.1s
[4000/8000]	[L1: 0.0874][DIV: 0.1299][GRAD: 0.1793][VORT: 0.2422][Total: 0.6388]	4.9+3.1s
[4800/8000]	[L1: 0.0893][DIV: 0.1325][GRAD: 0.1831][VORT: 0.2454][Total: 0.6503]	4.9+3.1s
[5600/8000]	[L1: 0.0904][DIV: 0.1336][GRAD: 0.1855][VORT: 0.2486][Total: 0.6580]	4.9+3.2s
[6400/8000]	[L1: 0.0908][DIV: 0.1340][GRAD: 0.1862][VORT: 0.2489][Total: 0.6599]	4.8+3.2s
[7200/8000]	[L1: 0.0901][DIV: 0.1330][GRAD: 0.1849][VORT: 0.2480][Total: 0.6561]	4.8+3.2s
[8000/8000]	[L1: 0.0895][DIV: 0.1323][GRAD: 0.1838][VORT: 0.2470][Total: 0.6525]	4.9+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.083839	vorticity_error: 0.820067	mean_abs_divergence: 0.127955
[DIV2K x2]	rel_l2_error: 0.065869	vorticity_error: 0.771405	mean_abs_divergence: 0.067562
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.047841	vorticity_error: 0.827373	mean_abs_divergence: 0.033974
Forward: 15.78s

Saving...
Total: 16.11s

[Epoch 627]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0903][DIV: 0.1344][GRAD: 0.1855][VORT: 0.2478][Total: 0.6580]	5.0+17.2s
[1600/8000]	[L1: 0.0881][DIV: 0.1314][GRAD: 0.1811][VORT: 0.2412][Total: 0.6418]	4.9+3.2s
[2400/8000]	[L1: 0.0875][DIV: 0.1310][GRAD: 0.1796][VORT: 0.2386][Total: 0.6368]	4.9+3.1s
[3200/8000]	[L1: 0.0878][DIV: 0.1308][GRAD: 0.1797][VORT: 0.2382][Total: 0.6365]	4.9+3.1s
[4000/8000]	[L1: 0.0867][DIV: 0.1293][GRAD: 0.1777][VORT: 0.2372][Total: 0.6310]	4.9+3.2s
[4800/8000]	[L1: 0.0859][DIV: 0.1282][GRAD: 0.1760][VORT: 0.2352][Total: 0.6253]	4.9+3.2s
[5600/8000]	[L1: 0.0856][DIV: 0.1277][GRAD: 0.1755][VORT: 0.2359][Total: 0.6246]	4.8+3.2s
[6400/8000]	[L1: 0.0866][DIV: 0.1289][GRAD: 0.1774][VORT: 0.2376][Total: 0.6305]	4.9+3.2s
[7200/8000]	[L1: 0.0866][DIV: 0.1287][GRAD: 0.1772][VORT: 0.2371][Total: 0.6297]	4.8+3.2s
[8000/8000]	[L1: 0.0877][DIV: 0.1301][GRAD: 0.1796][VORT: 0.2401][Total: 0.6375]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.072636	vorticity_error: 0.594425	mean_abs_divergence: 0.113014
[DIV2K x2]	rel_l2_error: 0.057849	vorticity_error: 0.665846	mean_abs_divergence: 0.058212
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.041802	vorticity_error: 0.540510	mean_abs_divergence: 0.028461
Forward: 15.68s

Saving...
Total: 16.01s

[Epoch 628]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0933][DIV: 0.1381][GRAD: 0.1911][VORT: 0.2523][Total: 0.6748]	5.1+17.2s
[1600/8000]	[L1: 0.0902][DIV: 0.1337][GRAD: 0.1843][VORT: 0.2441][Total: 0.6523]	4.9+3.1s
[2400/8000]	[L1: 0.0914][DIV: 0.1349][GRAD: 0.1877][VORT: 0.2501][Total: 0.6641]	4.9+3.1s
[3200/8000]	[L1: 0.0893][DIV: 0.1323][GRAD: 0.1832][VORT: 0.2449][Total: 0.6498]	4.9+3.2s
[4000/8000]	[L1: 0.0879][DIV: 0.1305][GRAD: 0.1800][VORT: 0.2401][Total: 0.6385]	4.9+3.1s
[4800/8000]	[L1: 0.0890][DIV: 0.1321][GRAD: 0.1822][VORT: 0.2422][Total: 0.6456]	4.9+3.2s
[5600/8000]	[L1: 0.0874][DIV: 0.1302][GRAD: 0.1790][VORT: 0.2384][Total: 0.6349]	4.9+3.2s
[6400/8000]	[L1: 0.0872][DIV: 0.1298][GRAD: 0.1786][VORT: 0.2383][Total: 0.6339]	4.9+3.2s
[7200/8000]	[L1: 0.0873][DIV: 0.1299][GRAD: 0.1787][VORT: 0.2372][Total: 0.6330]	4.9+3.2s
[8000/8000]	[L1: 0.0874][DIV: 0.1302][GRAD: 0.1790][VORT: 0.2376][Total: 0.6342]	4.9+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.071378	vorticity_error: 0.715525	mean_abs_divergence: 0.111556
[DIV2K x2]	rel_l2_error: 0.056974	vorticity_error: 0.700505	mean_abs_divergence: 0.057523
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.041808	vorticity_error: 0.595463	mean_abs_divergence: 0.027757
Forward: 15.86s

Saving...
Total: 16.20s

[Epoch 629]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0887][DIV: 0.1322][GRAD: 0.1811][VORT: 0.2429][Total: 0.6449]	5.0+17.0s
[1600/8000]	[L1: 0.0900][DIV: 0.1325][GRAD: 0.1839][VORT: 0.2461][Total: 0.6525]	4.8+3.0s
[2400/8000]	[L1: 0.0881][DIV: 0.1301][GRAD: 0.1801][VORT: 0.2401][Total: 0.6384]	4.8+3.0s
[3200/8000]	[L1: 0.0870][DIV: 0.1288][GRAD: 0.1781][VORT: 0.2383][Total: 0.6322]	4.8+3.0s
[4000/8000]	[L1: 0.0866][DIV: 0.1280][GRAD: 0.1772][VORT: 0.2358][Total: 0.6276]	4.7+3.1s
[4800/8000]	[L1: 0.0878][DIV: 0.1294][GRAD: 0.1798][VORT: 0.2399][Total: 0.6369]	4.8+3.1s
[5600/8000]	[L1: 0.0881][DIV: 0.1300][GRAD: 0.1805][VORT: 0.2410][Total: 0.6396]	4.8+3.1s
[6400/8000]	[L1: 0.0880][DIV: 0.1298][GRAD: 0.1804][VORT: 0.2416][Total: 0.6399]	4.9+3.0s
[7200/8000]	[L1: 0.0885][DIV: 0.1303][GRAD: 0.1814][VORT: 0.2433][Total: 0.6435]	4.7+3.1s
[8000/8000]	[L1: 0.0888][DIV: 0.1308][GRAD: 0.1821][VORT: 0.2443][Total: 0.6460]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.090220	vorticity_error: 0.932196	mean_abs_divergence: 0.146347
[DIV2K x2]	rel_l2_error: 0.067024	vorticity_error: 0.972892	mean_abs_divergence: 0.077461
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042866	vorticity_error: 0.778625	mean_abs_divergence: 0.038524
Forward: 15.60s

Saving...
Total: 15.93s

[Epoch 630]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0916][DIV: 0.1350][GRAD: 0.1872][VORT: 0.2390][Total: 0.6528]	5.0+16.8s
[1600/8000]	[L1: 0.0963][DIV: 0.1414][GRAD: 0.1969][VORT: 0.2562][Total: 0.6907]	4.8+3.1s
[2400/8000]	[L1: 0.0951][DIV: 0.1395][GRAD: 0.1947][VORT: 0.2546][Total: 0.6839]	4.8+3.0s
[3200/8000]	[L1: 0.0929][DIV: 0.1365][GRAD: 0.1903][VORT: 0.2523][Total: 0.6720]	4.8+3.0s
[4000/8000]	[L1: 0.0938][DIV: 0.1378][GRAD: 0.1919][VORT: 0.2545][Total: 0.6781]	4.8+3.0s
[4800/8000]	[L1: 0.0930][DIV: 0.1368][GRAD: 0.1904][VORT: 0.2534][Total: 0.6737]	4.8+3.0s
[5600/8000]	[L1: 0.0925][DIV: 0.1361][GRAD: 0.1894][VORT: 0.2527][Total: 0.6706]	4.8+3.0s
[6400/8000]	[L1: 0.0933][DIV: 0.1372][GRAD: 0.1911][VORT: 0.2539][Total: 0.6754]	4.8+3.1s
[7200/8000]	[L1: 0.0925][DIV: 0.1364][GRAD: 0.1896][VORT: 0.2518][Total: 0.6704]	4.8+3.0s
[8000/8000]	[L1: 0.0916][DIV: 0.1355][GRAD: 0.1877][VORT: 0.2494][Total: 0.6643]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.074329	vorticity_error: 0.875610	mean_abs_divergence: 0.103725
[DIV2K x2]	rel_l2_error: 0.056101	vorticity_error: 1.284048	mean_abs_divergence: 0.053226
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.049813	vorticity_error: 1.228509	mean_abs_divergence: 0.025530
Forward: 15.70s

Saving...
Total: 16.02s

[Epoch 631]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0939][DIV: 0.1395][GRAD: 0.1919][VORT: 0.2469][Total: 0.6721]	5.0+16.9s
[1600/8000]	[L1: 0.0904][DIV: 0.1337][GRAD: 0.1853][VORT: 0.2435][Total: 0.6529]	4.8+3.1s
[2400/8000]	[L1: 0.0895][DIV: 0.1328][GRAD: 0.1832][VORT: 0.2421][Total: 0.6475]	4.9+3.0s
[3200/8000]	[L1: 0.0895][DIV: 0.1329][GRAD: 0.1831][VORT: 0.2412][Total: 0.6468]	4.8+3.0s
[4000/8000]	[L1: 0.0900][DIV: 0.1334][GRAD: 0.1840][VORT: 0.2431][Total: 0.6504]	4.8+3.0s
[4800/8000]	[L1: 0.0907][DIV: 0.1339][GRAD: 0.1856][VORT: 0.2456][Total: 0.6558]	4.8+3.1s
[5600/8000]	[L1: 0.0918][DIV: 0.1354][GRAD: 0.1879][VORT: 0.2491][Total: 0.6642]	4.8+3.1s
[6400/8000]	[L1: 0.0905][DIV: 0.1337][GRAD: 0.1853][VORT: 0.2462][Total: 0.6556]	4.8+3.1s
[7200/8000]	[L1: 0.0897][DIV: 0.1326][GRAD: 0.1835][VORT: 0.2444][Total: 0.6502]	4.8+3.0s
[8000/8000]	[L1: 0.0895][DIV: 0.1323][GRAD: 0.1831][VORT: 0.2440][Total: 0.6490]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.090276	vorticity_error: 0.861391	mean_abs_divergence: 0.127212
[DIV2K x2]	rel_l2_error: 0.067760	vorticity_error: 1.069386	mean_abs_divergence: 0.067307
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.050730	vorticity_error: 0.948224	mean_abs_divergence: 0.032777
Forward: 15.70s

Saving...
Total: 16.02s

[Epoch 632]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0802][DIV: 0.1193][GRAD: 0.1645][VORT: 0.2262][Total: 0.5902]	5.2+16.9s
[1600/8000]	[L1: 0.0834][DIV: 0.1242][GRAD: 0.1716][VORT: 0.2307][Total: 0.6099]	4.8+3.0s
[2400/8000]	[L1: 0.0863][DIV: 0.1287][GRAD: 0.1770][VORT: 0.2340][Total: 0.6262]	4.8+3.0s
[3200/8000]	[L1: 0.0873][DIV: 0.1301][GRAD: 0.1789][VORT: 0.2373][Total: 0.6335]	4.8+3.0s
[4000/8000]	[L1: 0.0890][DIV: 0.1323][GRAD: 0.1825][VORT: 0.2423][Total: 0.6460]	4.8+3.1s
[4800/8000]	[L1: 0.0880][DIV: 0.1312][GRAD: 0.1804][VORT: 0.2392][Total: 0.6388]	4.8+3.0s
[5600/8000]	[L1: 0.0887][DIV: 0.1318][GRAD: 0.1817][VORT: 0.2403][Total: 0.6425]	4.8+3.1s
[6400/8000]	[L1: 0.0889][DIV: 0.1322][GRAD: 0.1820][VORT: 0.2410][Total: 0.6441]	4.8+3.0s
[7200/8000]	[L1: 0.0881][DIV: 0.1312][GRAD: 0.1803][VORT: 0.2385][Total: 0.6381]	4.8+3.1s
[8000/8000]	[L1: 0.0882][DIV: 0.1314][GRAD: 0.1806][VORT: 0.2387][Total: 0.6388]	4.8+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.085272	vorticity_error: 0.806317	mean_abs_divergence: 0.118962
[DIV2K x2]	rel_l2_error: 0.062277	vorticity_error: 1.076100	mean_abs_divergence: 0.063650
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045532	vorticity_error: 0.769564	mean_abs_divergence: 0.031347
Forward: 15.71s

Saving...
Total: 16.10s

[Epoch 633]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0883][DIV: 0.1308][GRAD: 0.1809][VORT: 0.2388][Total: 0.6388]	5.1+16.9s
[1600/8000]	[L1: 0.0896][DIV: 0.1329][GRAD: 0.1839][VORT: 0.2431][Total: 0.6495]	4.8+3.1s
[2400/8000]	[L1: 0.0895][DIV: 0.1323][GRAD: 0.1833][VORT: 0.2430][Total: 0.6481]	4.8+3.1s
[3200/8000]	[L1: 0.0888][DIV: 0.1307][GRAD: 0.1817][VORT: 0.2399][Total: 0.6410]	4.8+3.0s
[4000/8000]	[L1: 0.0894][DIV: 0.1318][GRAD: 0.1829][VORT: 0.2415][Total: 0.6456]	4.8+3.1s
[4800/8000]	[L1: 0.0894][DIV: 0.1317][GRAD: 0.1830][VORT: 0.2417][Total: 0.6458]	4.8+3.1s
[5600/8000]	[L1: 0.0897][DIV: 0.1322][GRAD: 0.1838][VORT: 0.2433][Total: 0.6490]	4.8+3.1s
[6400/8000]	[L1: 0.0899][DIV: 0.1323][GRAD: 0.1842][VORT: 0.2444][Total: 0.6507]	4.8+3.1s
[7200/8000]	[L1: 0.0904][DIV: 0.1331][GRAD: 0.1853][VORT: 0.2461][Total: 0.6549]	4.9+3.0s
[8000/8000]	[L1: 0.0903][DIV: 0.1327][GRAD: 0.1851][VORT: 0.2466][Total: 0.6547]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.080920	vorticity_error: 0.629468	mean_abs_divergence: 0.108454
[DIV2K x2]	rel_l2_error: 0.055764	vorticity_error: 4.898649	mean_abs_divergence: 0.058242
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.040333	vorticity_error: 0.927513	mean_abs_divergence: 0.028675
Forward: 15.65s

Saving...
Total: 15.98s

[Epoch 634]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0931][DIV: 0.1367][GRAD: 0.1914][VORT: 0.2582][Total: 0.6794]	5.0+17.0s
[1600/8000]	[L1: 0.0878][DIV: 0.1310][GRAD: 0.1803][VORT: 0.2429][Total: 0.6419]	4.8+3.1s
[2400/8000]	[L1: 0.0875][DIV: 0.1308][GRAD: 0.1795][VORT: 0.2406][Total: 0.6384]	4.8+3.1s
[3200/8000]	[L1: 0.0870][DIV: 0.1301][GRAD: 0.1784][VORT: 0.2402][Total: 0.6356]	4.8+3.1s
[4000/8000]	[L1: 0.0865][DIV: 0.1294][GRAD: 0.1775][VORT: 0.2391][Total: 0.6326]	4.8+3.1s
[4800/8000]	[L1: 0.0865][DIV: 0.1290][GRAD: 0.1775][VORT: 0.2390][Total: 0.6321]	4.8+3.1s
[5600/8000]	[L1: 0.0876][DIV: 0.1301][GRAD: 0.1797][VORT: 0.2419][Total: 0.6393]	4.9+3.0s
[6400/8000]	[L1: 0.0880][DIV: 0.1303][GRAD: 0.1805][VORT: 0.2431][Total: 0.6419]	4.8+3.1s
[7200/8000]	[L1: 0.0873][DIV: 0.1294][GRAD: 0.1791][VORT: 0.2410][Total: 0.6368]	4.7+3.1s
[8000/8000]	[L1: 0.0876][DIV: 0.1296][GRAD: 0.1797][VORT: 0.2424][Total: 0.6393]	4.8+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.064004	vorticity_error: 0.468547	mean_abs_divergence: 0.098094
[DIV2K x2]	rel_l2_error: 0.051886	vorticity_error: 0.447569	mean_abs_divergence: 0.050391
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042919	vorticity_error: 0.409100	mean_abs_divergence: 0.024280
Forward: 15.60s

Saving...
Total: 15.92s

[Epoch 635]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0930][DIV: 0.1377][GRAD: 0.1911][VORT: 0.2499][Total: 0.6718]	5.1+17.0s
[1600/8000]	[L1: 0.0882][DIV: 0.1316][GRAD: 0.1807][VORT: 0.2369][Total: 0.6374]	4.8+3.0s
[2400/8000]	[L1: 0.0893][DIV: 0.1327][GRAD: 0.1832][VORT: 0.2451][Total: 0.6503]	4.7+3.1s
[3200/8000]	[L1: 0.0878][DIV: 0.1309][GRAD: 0.1800][VORT: 0.2406][Total: 0.6394]	4.8+3.0s
[4000/8000]	[L1: 0.0878][DIV: 0.1308][GRAD: 0.1798][VORT: 0.2393][Total: 0.6378]	4.8+3.0s
[4800/8000]	[L1: 0.0876][DIV: 0.1305][GRAD: 0.1795][VORT: 0.2397][Total: 0.6372]	4.8+3.0s
[5600/8000]	[L1: 0.0883][DIV: 0.1312][GRAD: 0.1810][VORT: 0.2427][Total: 0.6432]	4.8+3.0s
[6400/8000]	[L1: 0.0877][DIV: 0.1306][GRAD: 0.1797][VORT: 0.2406][Total: 0.6386]	4.8+3.0s
[7200/8000]	[L1: 0.0876][DIV: 0.1305][GRAD: 0.1796][VORT: 0.2408][Total: 0.6385]	4.8+3.0s
[8000/8000]	[L1: 0.0878][DIV: 0.1307][GRAD: 0.1798][VORT: 0.2411][Total: 0.6393]	4.8+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.059791	vorticity_error: 0.732791	mean_abs_divergence: 0.104309
[DIV2K x2]	rel_l2_error: 0.046965	vorticity_error: 0.761748	mean_abs_divergence: 0.054669
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.039816	vorticity_error: 0.620442	mean_abs_divergence: 0.027227
Forward: 15.63s

Saving...
Total: 15.95s

[Epoch 636]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0923][DIV: 0.1353][GRAD: 0.1899][VORT: 0.2604][Total: 0.6779]	5.0+16.9s
[1600/8000]	[L1: 0.0907][DIV: 0.1329][GRAD: 0.1866][VORT: 0.2558][Total: 0.6660]	4.8+3.0s
[2400/8000]	[L1: 0.0930][DIV: 0.1362][GRAD: 0.1913][VORT: 0.2617][Total: 0.6822]	4.8+3.0s
[3200/8000]	[L1: 0.0930][DIV: 0.1358][GRAD: 0.1914][VORT: 0.2608][Total: 0.6809]	4.8+3.0s
[4000/8000]	[L1: 0.0912][DIV: 0.1338][GRAD: 0.1876][VORT: 0.2559][Total: 0.6685]	4.8+3.1s
[4800/8000]	[L1: 0.0903][DIV: 0.1328][GRAD: 0.1857][VORT: 0.2533][Total: 0.6621]	4.8+3.0s
[5600/8000]	[L1: 0.0896][DIV: 0.1321][GRAD: 0.1843][VORT: 0.2508][Total: 0.6568]	4.8+3.0s
[6400/8000]	[L1: 0.0884][DIV: 0.1306][GRAD: 0.1817][VORT: 0.2478][Total: 0.6485]	4.8+3.0s
[7200/8000]	[L1: 0.0879][DIV: 0.1299][GRAD: 0.1808][VORT: 0.2471][Total: 0.6458]	4.8+3.0s
[8000/8000]	[L1: 0.0874][DIV: 0.1292][GRAD: 0.1796][VORT: 0.2449][Total: 0.6411]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.076480	vorticity_error: 0.832197	mean_abs_divergence: 0.133129
[DIV2K x2]	rel_l2_error: 0.054097	vorticity_error: 1.343857	mean_abs_divergence: 0.069248
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042939	vorticity_error: 1.067672	mean_abs_divergence: 0.033821
Forward: 15.73s

Saving...
Total: 16.12s

[Epoch 637]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0881][DIV: 0.1306][GRAD: 0.1807][VORT: 0.2428][Total: 0.6422]	5.2+16.9s
[1600/8000]	[L1: 0.0915][DIV: 0.1342][GRAD: 0.1871][VORT: 0.2481][Total: 0.6608]	4.8+3.0s
[2400/8000]	[L1: 0.0906][DIV: 0.1340][GRAD: 0.1851][VORT: 0.2471][Total: 0.6568]	4.8+3.1s
[3200/8000]	[L1: 0.0897][DIV: 0.1325][GRAD: 0.1833][VORT: 0.2458][Total: 0.6513]	4.7+3.1s
[4000/8000]	[L1: 0.0904][DIV: 0.1337][GRAD: 0.1847][VORT: 0.2474][Total: 0.6562]	4.8+3.0s
[4800/8000]	[L1: 0.0912][DIV: 0.1352][GRAD: 0.1865][VORT: 0.2501][Total: 0.6629]	4.8+3.0s
[5600/8000]	[L1: 0.0906][DIV: 0.1346][GRAD: 0.1855][VORT: 0.2489][Total: 0.6597]	4.8+3.0s
[6400/8000]	[L1: 0.0891][DIV: 0.1327][GRAD: 0.1824][VORT: 0.2452][Total: 0.6494]	4.8+3.1s
[7200/8000]	[L1: 0.0897][DIV: 0.1333][GRAD: 0.1835][VORT: 0.2463][Total: 0.6527]	4.8+3.0s
[8000/8000]	[L1: 0.0895][DIV: 0.1329][GRAD: 0.1833][VORT: 0.2459][Total: 0.6516]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.081918	vorticity_error: 0.792400	mean_abs_divergence: 0.122938
[DIV2K x2]	rel_l2_error: 0.066334	vorticity_error: 0.772312	mean_abs_divergence: 0.065513
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043298	vorticity_error: 0.607202	mean_abs_divergence: 0.032350
Forward: 15.71s

Saving...
Total: 16.04s

[Epoch 638]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0797][DIV: 0.1220][GRAD: 0.1625][VORT: 0.2158][Total: 0.5799]	5.0+16.9s
[1600/8000]	[L1: 0.0807][DIV: 0.1227][GRAD: 0.1652][VORT: 0.2198][Total: 0.5883]	4.8+3.0s
[2400/8000]	[L1: 0.0858][DIV: 0.1284][GRAD: 0.1758][VORT: 0.2341][Total: 0.6242]	4.8+3.0s
[3200/8000]	[L1: 0.0872][DIV: 0.1294][GRAD: 0.1788][VORT: 0.2385][Total: 0.6339]	4.8+3.1s
[4000/8000]	[L1: 0.0865][DIV: 0.1284][GRAD: 0.1774][VORT: 0.2385][Total: 0.6308]	4.8+3.1s
[4800/8000]	[L1: 0.0861][DIV: 0.1282][GRAD: 0.1766][VORT: 0.2372][Total: 0.6281]	4.8+3.0s
[5600/8000]	[L1: 0.0861][DIV: 0.1282][GRAD: 0.1764][VORT: 0.2363][Total: 0.6270]	4.8+3.0s
[6400/8000]	[L1: 0.0865][DIV: 0.1286][GRAD: 0.1772][VORT: 0.2371][Total: 0.6293]	4.8+3.0s
[7200/8000]	[L1: 0.0863][DIV: 0.1284][GRAD: 0.1767][VORT: 0.2372][Total: 0.6286]	4.8+3.1s
[8000/8000]	[L1: 0.0863][DIV: 0.1285][GRAD: 0.1770][VORT: 0.2381][Total: 0.6299]	4.8+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.073565	vorticity_error: 0.688058	mean_abs_divergence: 0.108507
[DIV2K x2]	rel_l2_error: 0.056953	vorticity_error: 1.218238	mean_abs_divergence: 0.056699
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044879	vorticity_error: 0.898337	mean_abs_divergence: 0.027967
Forward: 15.73s

Saving...
Total: 16.06s

[Epoch 639]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0890][DIV: 0.1304][GRAD: 0.1822][VORT: 0.2420][Total: 0.6436]	5.0+16.9s
[1600/8000]	[L1: 0.0904][DIV: 0.1330][GRAD: 0.1850][VORT: 0.2438][Total: 0.6522]	4.8+3.1s
[2400/8000]	[L1: 0.0895][DIV: 0.1325][GRAD: 0.1829][VORT: 0.2412][Total: 0.6461]	4.8+3.0s
[3200/8000]	[L1: 0.0889][DIV: 0.1317][GRAD: 0.1817][VORT: 0.2402][Total: 0.6424]	4.9+3.0s
[4000/8000]	[L1: 0.0894][DIV: 0.1326][GRAD: 0.1829][VORT: 0.2408][Total: 0.6457]	4.8+3.0s
[4800/8000]	[L1: 0.0901][DIV: 0.1333][GRAD: 0.1844][VORT: 0.2443][Total: 0.6520]	4.8+3.1s
[5600/8000]	[L1: 0.0892][DIV: 0.1321][GRAD: 0.1828][VORT: 0.2439][Total: 0.6481]	4.8+3.0s
[6400/8000]	[L1: 0.0887][DIV: 0.1313][GRAD: 0.1816][VORT: 0.2430][Total: 0.6445]	4.8+3.0s
[7200/8000]	[L1: 0.0884][DIV: 0.1310][GRAD: 0.1808][VORT: 0.2413][Total: 0.6416]	4.8+3.0s
[8000/8000]	[L1: 0.0886][DIV: 0.1312][GRAD: 0.1812][VORT: 0.2417][Total: 0.6426]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.097141	vorticity_error: 1.108547	mean_abs_divergence: 0.136287
[DIV2K x2]	rel_l2_error: 0.076346	vorticity_error: 0.849450	mean_abs_divergence: 0.072531
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048015	vorticity_error: 0.668184	mean_abs_divergence: 0.035541
Forward: 15.70s

Saving...
Total: 16.04s

[Epoch 640]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0851][DIV: 0.1285][GRAD: 0.1738][VORT: 0.2270][Total: 0.6144]	5.1+16.9s
[1600/8000]	[L1: 0.0866][DIV: 0.1295][GRAD: 0.1771][VORT: 0.2354][Total: 0.6287]	4.8+3.0s
[2400/8000]	[L1: 0.0882][DIV: 0.1310][GRAD: 0.1803][VORT: 0.2386][Total: 0.6382]	4.8+3.0s
[3200/8000]	[L1: 0.0885][DIV: 0.1313][GRAD: 0.1810][VORT: 0.2409][Total: 0.6417]	4.8+3.0s
[4000/8000]	[L1: 0.0886][DIV: 0.1313][GRAD: 0.1814][VORT: 0.2412][Total: 0.6425]	4.8+3.0s
[4800/8000]	[L1: 0.0878][DIV: 0.1303][GRAD: 0.1796][VORT: 0.2380][Total: 0.6357]	4.8+3.0s
[5600/8000]	[L1: 0.0875][DIV: 0.1302][GRAD: 0.1789][VORT: 0.2365][Total: 0.6330]	4.8+3.0s
[6400/8000]	[L1: 0.0886][DIV: 0.1315][GRAD: 0.1809][VORT: 0.2387][Total: 0.6397]	4.8+3.0s
[7200/8000]	[L1: 0.0882][DIV: 0.1310][GRAD: 0.1800][VORT: 0.2381][Total: 0.6373]	4.8+3.0s
[8000/8000]	[L1: 0.0881][DIV: 0.1310][GRAD: 0.1800][VORT: 0.2378][Total: 0.6370]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.082164	vorticity_error: 0.936821	mean_abs_divergence: 0.097154
[DIV2K x2]	rel_l2_error: 0.067007	vorticity_error: 1.561976	mean_abs_divergence: 0.051544
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.047645	vorticity_error: 0.997223	mean_abs_divergence: 0.025905
Forward: 15.66s

Saving...
Total: 16.06s

[Epoch 641]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0927][DIV: 0.1369][GRAD: 0.1887][VORT: 0.2482][Total: 0.6665]	5.2+16.9s
[1600/8000]	[L1: 0.0912][DIV: 0.1349][GRAD: 0.1865][VORT: 0.2483][Total: 0.6609]	4.8+3.0s
[2400/8000]	[L1: 0.0946][DIV: 0.1396][GRAD: 0.1940][VORT: 0.2613][Total: 0.6894]	4.8+3.0s
[3200/8000]	[L1: 0.0912][DIV: 0.1344][GRAD: 0.1874][VORT: 0.2546][Total: 0.6676]	4.8+3.0s
[4000/8000]	[L1: 0.0913][DIV: 0.1344][GRAD: 0.1873][VORT: 0.2514][Total: 0.6644]	4.8+3.0s
[4800/8000]	[L1: 0.0898][DIV: 0.1327][GRAD: 0.1841][VORT: 0.2467][Total: 0.6533]	4.8+3.0s
[5600/8000]	[L1: 0.0903][DIV: 0.1330][GRAD: 0.1851][VORT: 0.2482][Total: 0.6566]	4.8+3.0s
[6400/8000]	[L1: 0.0901][DIV: 0.1326][GRAD: 0.1846][VORT: 0.2475][Total: 0.6548]	4.8+3.1s
[7200/8000]	[L1: 0.0902][DIV: 0.1329][GRAD: 0.1849][VORT: 0.2479][Total: 0.6559]	4.9+3.0s
[8000/8000]	[L1: 0.0898][DIV: 0.1323][GRAD: 0.1841][VORT: 0.2472][Total: 0.6534]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.067271	vorticity_error: 0.820114	mean_abs_divergence: 0.114388
[DIV2K x2]	rel_l2_error: 0.052029	vorticity_error: 0.777134	mean_abs_divergence: 0.059370
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.035943	vorticity_error: 0.637018	mean_abs_divergence: 0.029239
Forward: 15.73s

Saving...
Total: 16.05s

[Epoch 642]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0840][DIV: 0.1243][GRAD: 0.1726][VORT: 0.2339][Total: 0.6148]	5.0+16.9s
[1600/8000]	[L1: 0.0825][DIV: 0.1223][GRAD: 0.1694][VORT: 0.2344][Total: 0.6085]	4.8+3.0s
[2400/8000]	[L1: 0.0861][DIV: 0.1276][GRAD: 0.1767][VORT: 0.2390][Total: 0.6295]	4.8+3.0s
[3200/8000]	[L1: 0.0884][DIV: 0.1308][GRAD: 0.1813][VORT: 0.2443][Total: 0.6449]	4.7+3.1s
[4000/8000]	[L1: 0.0897][DIV: 0.1324][GRAD: 0.1841][VORT: 0.2478][Total: 0.6540]	4.8+3.0s
[4800/8000]	[L1: 0.0891][DIV: 0.1316][GRAD: 0.1828][VORT: 0.2455][Total: 0.6489]	4.8+3.0s
[5600/8000]	[L1: 0.0880][DIV: 0.1305][GRAD: 0.1805][VORT: 0.2421][Total: 0.6411]	4.8+3.0s
[6400/8000]	[L1: 0.0874][DIV: 0.1294][GRAD: 0.1791][VORT: 0.2402][Total: 0.6360]	4.8+3.0s
[7200/8000]	[L1: 0.0878][DIV: 0.1302][GRAD: 0.1798][VORT: 0.2404][Total: 0.6382]	4.8+3.0s
[8000/8000]	[L1: 0.0881][DIV: 0.1306][GRAD: 0.1804][VORT: 0.2408][Total: 0.6399]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.116036	vorticity_error: 1.300540	mean_abs_divergence: 0.144256
[DIV2K x2]	rel_l2_error: 0.092970	vorticity_error: 1.839420	mean_abs_divergence: 0.078549
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.069130	vorticity_error: 2.250599	mean_abs_divergence: 0.038081
Forward: 15.71s

Saving...
Total: 16.03s

[Epoch 643]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0920][DIV: 0.1344][GRAD: 0.1887][VORT: 0.2542][Total: 0.6693]	5.0+16.9s
[1600/8000]	[L1: 0.0920][DIV: 0.1335][GRAD: 0.1885][VORT: 0.2490][Total: 0.6631]	4.8+3.0s
[2400/8000]	[L1: 0.0918][DIV: 0.1339][GRAD: 0.1876][VORT: 0.2486][Total: 0.6618]	4.8+3.0s
[3200/8000]	[L1: 0.0919][DIV: 0.1342][GRAD: 0.1882][VORT: 0.2509][Total: 0.6652]	4.9+3.0s
[4000/8000]	[L1: 0.0899][DIV: 0.1317][GRAD: 0.1843][VORT: 0.2469][Total: 0.6528]	4.8+3.1s
[4800/8000]	[L1: 0.0893][DIV: 0.1310][GRAD: 0.1831][VORT: 0.2458][Total: 0.6492]	4.8+3.1s
[5600/8000]	[L1: 0.0889][DIV: 0.1308][GRAD: 0.1824][VORT: 0.2442][Total: 0.6463]	4.7+3.1s
[6400/8000]	[L1: 0.0900][DIV: 0.1322][GRAD: 0.1846][VORT: 0.2461][Total: 0.6529]	4.8+3.1s
[7200/8000]	[L1: 0.0898][DIV: 0.1321][GRAD: 0.1843][VORT: 0.2464][Total: 0.6526]	4.8+3.1s
[8000/8000]	[L1: 0.0898][DIV: 0.1321][GRAD: 0.1843][VORT: 0.2472][Total: 0.6534]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.076324	vorticity_error: 0.806883	mean_abs_divergence: 0.133074
[DIV2K x2]	rel_l2_error: 0.061881	vorticity_error: 0.972702	mean_abs_divergence: 0.069389
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042594	vorticity_error: 0.974394	mean_abs_divergence: 0.034023
Forward: 15.73s

Saving...
Total: 16.05s

[Epoch 644]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0976][DIV: 0.1419][GRAD: 0.2000][VORT: 0.2667][Total: 0.7062]	5.0+16.9s
[1600/8000]	[L1: 0.0952][DIV: 0.1394][GRAD: 0.1959][VORT: 0.2637][Total: 0.6942]	4.8+3.0s
[2400/8000]	[L1: 0.0927][DIV: 0.1365][GRAD: 0.1903][VORT: 0.2542][Total: 0.6736]	4.8+3.1s
[3200/8000]	[L1: 0.0913][DIV: 0.1344][GRAD: 0.1872][VORT: 0.2507][Total: 0.6636]	4.8+3.0s
[4000/8000]	[L1: 0.0912][DIV: 0.1339][GRAD: 0.1871][VORT: 0.2489][Total: 0.6611]	4.8+3.0s
[4800/8000]	[L1: 0.0909][DIV: 0.1336][GRAD: 0.1863][VORT: 0.2483][Total: 0.6589]	4.8+3.0s
[5600/8000]	[L1: 0.0901][DIV: 0.1331][GRAD: 0.1845][VORT: 0.2454][Total: 0.6530]	4.8+3.0s
[6400/8000]	[L1: 0.0895][DIV: 0.1323][GRAD: 0.1835][VORT: 0.2449][Total: 0.6502]	4.8+3.0s
[7200/8000]	[L1: 0.0905][DIV: 0.1337][GRAD: 0.1856][VORT: 0.2478][Total: 0.6576]	4.8+3.0s
[8000/8000]	[L1: 0.0902][DIV: 0.1333][GRAD: 0.1848][VORT: 0.2468][Total: 0.6550]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.096205	vorticity_error: 0.911891	mean_abs_divergence: 0.137456
[DIV2K x2]	rel_l2_error: 0.073780	vorticity_error: 0.875180	mean_abs_divergence: 0.074051
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043415	vorticity_error: 0.633661	mean_abs_divergence: 0.036923
Forward: 15.72s

Saving...
Total: 16.12s

[Epoch 645]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0907][DIV: 0.1342][GRAD: 0.1863][VORT: 0.2613][Total: 0.6725]	5.1+16.9s
[1600/8000]	[L1: 0.0908][DIV: 0.1344][GRAD: 0.1864][VORT: 0.2570][Total: 0.6686]	4.8+3.1s
[2400/8000]	[L1: 0.0911][DIV: 0.1343][GRAD: 0.1872][VORT: 0.2537][Total: 0.6664]	4.9+3.0s
[3200/8000]	[L1: 0.0897][DIV: 0.1321][GRAD: 0.1841][VORT: 0.2497][Total: 0.6556]	4.8+3.0s
[4000/8000]	[L1: 0.0882][DIV: 0.1300][GRAD: 0.1811][VORT: 0.2461][Total: 0.6454]	4.8+3.0s
[4800/8000]	[L1: 0.0890][DIV: 0.1312][GRAD: 0.1826][VORT: 0.2455][Total: 0.6484]	4.8+3.1s
[5600/8000]	[L1: 0.0885][DIV: 0.1304][GRAD: 0.1814][VORT: 0.2449][Total: 0.6452]	4.8+3.1s
[6400/8000]	[L1: 0.0891][DIV: 0.1312][GRAD: 0.1827][VORT: 0.2458][Total: 0.6488]	4.8+3.1s
[7200/8000]	[L1: 0.0885][DIV: 0.1304][GRAD: 0.1813][VORT: 0.2435][Total: 0.6437]	4.8+3.0s
[8000/8000]	[L1: 0.0882][DIV: 0.1300][GRAD: 0.1806][VORT: 0.2422][Total: 0.6409]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.093659	vorticity_error: 1.159371	mean_abs_divergence: 0.138169
[DIV2K x2]	rel_l2_error: 0.067189	vorticity_error: 1.122644	mean_abs_divergence: 0.071076
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.047926	vorticity_error: 0.785173	mean_abs_divergence: 0.034602
Forward: 15.66s

Saving...
Total: 15.99s

[Epoch 646]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0869][DIV: 0.1272][GRAD: 0.1784][VORT: 0.2443][Total: 0.6367]	5.1+16.9s
[1600/8000]	[L1: 0.0839][DIV: 0.1238][GRAD: 0.1722][VORT: 0.2351][Total: 0.6151]	4.8+3.1s
[2400/8000]	[L1: 0.0853][DIV: 0.1266][GRAD: 0.1752][VORT: 0.2387][Total: 0.6258]	4.8+3.0s
[3200/8000]	[L1: 0.0863][DIV: 0.1280][GRAD: 0.1771][VORT: 0.2388][Total: 0.6302]	4.8+3.0s
[4000/8000]	[L1: 0.0880][DIV: 0.1300][GRAD: 0.1804][VORT: 0.2430][Total: 0.6414]	4.8+3.0s
[4800/8000]	[L1: 0.0888][DIV: 0.1314][GRAD: 0.1822][VORT: 0.2451][Total: 0.6476]	4.8+3.0s
[5600/8000]	[L1: 0.0886][DIV: 0.1311][GRAD: 0.1818][VORT: 0.2443][Total: 0.6458]	4.8+3.0s
[6400/8000]	[L1: 0.0890][DIV: 0.1316][GRAD: 0.1826][VORT: 0.2450][Total: 0.6482]	4.8+3.0s
[7200/8000]	[L1: 0.0885][DIV: 0.1312][GRAD: 0.1815][VORT: 0.2432][Total: 0.6444]	4.8+3.0s
[8000/8000]	[L1: 0.0887][DIV: 0.1315][GRAD: 0.1818][VORT: 0.2436][Total: 0.6456]	4.7+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.082473	vorticity_error: 1.178553	mean_abs_divergence: 0.118089
[DIV2K x2]	rel_l2_error: 0.066125	vorticity_error: 1.090381	mean_abs_divergence: 0.063865
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.050542	vorticity_error: 0.997122	mean_abs_divergence: 0.031591
Forward: 15.63s

Saving...
Total: 15.96s

[Epoch 647]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0873][DIV: 0.1295][GRAD: 0.1787][VORT: 0.2347][Total: 0.6301]	5.2+16.9s
[1600/8000]	[L1: 0.0862][DIV: 0.1273][GRAD: 0.1767][VORT: 0.2379][Total: 0.6280]	4.8+3.0s
[2400/8000]	[L1: 0.0902][DIV: 0.1332][GRAD: 0.1849][VORT: 0.2497][Total: 0.6579]	4.8+3.0s
[3200/8000]	[L1: 0.0882][DIV: 0.1302][GRAD: 0.1806][VORT: 0.2430][Total: 0.6419]	4.8+3.0s
[4000/8000]	[L1: 0.0889][DIV: 0.1307][GRAD: 0.1822][VORT: 0.2454][Total: 0.6472]	4.8+3.0s
[4800/8000]	[L1: 0.0891][DIV: 0.1309][GRAD: 0.1824][VORT: 0.2448][Total: 0.6473]	4.8+3.0s
[5600/8000]	[L1: 0.0891][DIV: 0.1314][GRAD: 0.1824][VORT: 0.2429][Total: 0.6458]	4.8+3.0s
[6400/8000]	[L1: 0.0888][DIV: 0.1310][GRAD: 0.1818][VORT: 0.2426][Total: 0.6442]	4.8+3.0s
[7200/8000]	[L1: 0.0886][DIV: 0.1307][GRAD: 0.1815][VORT: 0.2423][Total: 0.6430]	4.8+3.0s
[8000/8000]	[L1: 0.0886][DIV: 0.1309][GRAD: 0.1816][VORT: 0.2420][Total: 0.6432]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.075942	vorticity_error: 0.663700	mean_abs_divergence: 0.124681
[DIV2K x2]	rel_l2_error: 0.060958	vorticity_error: 1.111892	mean_abs_divergence: 0.067645
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043199	vorticity_error: 0.776615	mean_abs_divergence: 0.033113
Forward: 15.65s

Saving...
Total: 15.98s

[Epoch 648]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0923][DIV: 0.1348][GRAD: 0.1895][VORT: 0.2530][Total: 0.6696]	5.0+16.9s
[1600/8000]	[L1: 0.0903][DIV: 0.1330][GRAD: 0.1853][VORT: 0.2492][Total: 0.6578]	4.8+3.0s
[2400/8000]	[L1: 0.0896][DIV: 0.1325][GRAD: 0.1836][VORT: 0.2459][Total: 0.6516]	4.8+3.0s
[3200/8000]	[L1: 0.0894][DIV: 0.1325][GRAD: 0.1834][VORT: 0.2461][Total: 0.6515]	4.8+3.0s
[4000/8000]	[L1: 0.0896][DIV: 0.1327][GRAD: 0.1838][VORT: 0.2476][Total: 0.6537]	4.8+3.0s
[4800/8000]	[L1: 0.0891][DIV: 0.1317][GRAD: 0.1829][VORT: 0.2463][Total: 0.6499]	4.8+3.0s
[5600/8000]	[L1: 0.0895][DIV: 0.1325][GRAD: 0.1834][VORT: 0.2462][Total: 0.6516]	4.8+3.0s
[6400/8000]	[L1: 0.0901][DIV: 0.1332][GRAD: 0.1848][VORT: 0.2486][Total: 0.6568]	4.8+3.1s
[7200/8000]	[L1: 0.0898][DIV: 0.1329][GRAD: 0.1841][VORT: 0.2472][Total: 0.6542]	4.8+3.0s
[8000/8000]	[L1: 0.0901][DIV: 0.1331][GRAD: 0.1845][VORT: 0.2467][Total: 0.6544]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.073339	vorticity_error: 0.597422	mean_abs_divergence: 0.100969
[DIV2K x2]	rel_l2_error: 0.064080	vorticity_error: 0.776039	mean_abs_divergence: 0.054563
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048328	vorticity_error: 0.668603	mean_abs_divergence: 0.026903
Forward: 15.72s

Saving...
Total: 16.11s

[Epoch 649]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0879][DIV: 0.1296][GRAD: 0.1807][VORT: 0.2424][Total: 0.6406]	4.9+16.9s
[1600/8000]	[L1: 0.0893][DIV: 0.1312][GRAD: 0.1834][VORT: 0.2446][Total: 0.6484]	4.8+3.1s
[2400/8000]	[L1: 0.0903][DIV: 0.1329][GRAD: 0.1851][VORT: 0.2467][Total: 0.6550]	4.8+3.0s
[3200/8000]	[L1: 0.0898][DIV: 0.1323][GRAD: 0.1839][VORT: 0.2456][Total: 0.6515]	4.8+3.0s
[4000/8000]	[L1: 0.0911][DIV: 0.1343][GRAD: 0.1867][VORT: 0.2492][Total: 0.6612]	4.8+3.1s
[4800/8000]	[L1: 0.0897][DIV: 0.1324][GRAD: 0.1836][VORT: 0.2446][Total: 0.6503]	4.8+3.0s
[5600/8000]	[L1: 0.0899][DIV: 0.1325][GRAD: 0.1842][VORT: 0.2454][Total: 0.6520]	4.8+3.0s
[6400/8000]	[L1: 0.0906][DIV: 0.1334][GRAD: 0.1856][VORT: 0.2466][Total: 0.6562]	4.8+3.0s
[7200/8000]	[L1: 0.0902][DIV: 0.1331][GRAD: 0.1848][VORT: 0.2452][Total: 0.6533]	4.8+3.0s
[8000/8000]	[L1: 0.0902][DIV: 0.1331][GRAD: 0.1848][VORT: 0.2456][Total: 0.6537]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.074750	vorticity_error: 0.823967	mean_abs_divergence: 0.107694
[DIV2K x2]	rel_l2_error: 0.059457	vorticity_error: 0.731982	mean_abs_divergence: 0.057305
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.038326	vorticity_error: 0.617656	mean_abs_divergence: 0.028516
Forward: 15.70s

Saving...
Total: 16.03s

[Epoch 650]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0944][DIV: 0.1392][GRAD: 0.1932][VORT: 0.2543][Total: 0.6810]	5.0+16.9s
[1600/8000]	[L1: 0.0909][DIV: 0.1343][GRAD: 0.1858][VORT: 0.2445][Total: 0.6555]	4.8+3.1s
[2400/8000]	[L1: 0.0901][DIV: 0.1332][GRAD: 0.1847][VORT: 0.2455][Total: 0.6535]	4.8+3.0s
[3200/8000]	[L1: 0.0904][DIV: 0.1338][GRAD: 0.1852][VORT: 0.2467][Total: 0.6560]	4.8+3.0s
[4000/8000]	[L1: 0.0904][DIV: 0.1339][GRAD: 0.1854][VORT: 0.2471][Total: 0.6568]	4.8+3.0s
[4800/8000]	[L1: 0.0909][DIV: 0.1344][GRAD: 0.1864][VORT: 0.2485][Total: 0.6603]	4.8+3.1s
[5600/8000]	[L1: 0.0909][DIV: 0.1344][GRAD: 0.1863][VORT: 0.2482][Total: 0.6598]	4.8+3.0s
[6400/8000]	[L1: 0.0919][DIV: 0.1356][GRAD: 0.1882][VORT: 0.2500][Total: 0.6657]	4.8+3.0s
[7200/8000]	[L1: 0.0920][DIV: 0.1357][GRAD: 0.1884][VORT: 0.2505][Total: 0.6667]	4.8+3.1s
[8000/8000]	[L1: 0.0915][DIV: 0.1349][GRAD: 0.1873][VORT: 0.2496][Total: 0.6633]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.082549	vorticity_error: 0.656284	mean_abs_divergence: 0.121125
[DIV2K x2]	rel_l2_error: 0.059806	vorticity_error: 0.641228	mean_abs_divergence: 0.065175
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.041365	vorticity_error: 0.483157	mean_abs_divergence: 0.032589
Forward: 15.69s

Saving...
Total: 16.02s

[Epoch 651]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0889][DIV: 0.1317][GRAD: 0.1813][VORT: 0.2405][Total: 0.6424]	5.1+16.8s
[1600/8000]	[L1: 0.0882][DIV: 0.1313][GRAD: 0.1804][VORT: 0.2406][Total: 0.6404]	4.8+3.1s
[2400/8000]	[L1: 0.0851][DIV: 0.1274][GRAD: 0.1740][VORT: 0.2319][Total: 0.6184]	4.8+3.0s
[3200/8000]	[L1: 0.0855][DIV: 0.1274][GRAD: 0.1749][VORT: 0.2337][Total: 0.6215]	4.8+3.0s
[4000/8000]	[L1: 0.0847][DIV: 0.1265][GRAD: 0.1733][VORT: 0.2316][Total: 0.6162]	4.8+3.0s
[4800/8000]	[L1: 0.0851][DIV: 0.1270][GRAD: 0.1742][VORT: 0.2330][Total: 0.6192]	4.8+3.1s
[5600/8000]	[L1: 0.0864][DIV: 0.1287][GRAD: 0.1768][VORT: 0.2360][Total: 0.6279]	4.8+3.0s
[6400/8000]	[L1: 0.0865][DIV: 0.1289][GRAD: 0.1769][VORT: 0.2360][Total: 0.6283]	4.8+3.1s
[7200/8000]	[L1: 0.0874][DIV: 0.1300][GRAD: 0.1786][VORT: 0.2384][Total: 0.6343]	4.8+3.0s
[8000/8000]	[L1: 0.0875][DIV: 0.1299][GRAD: 0.1789][VORT: 0.2382][Total: 0.6345]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.098399	vorticity_error: 0.981560	mean_abs_divergence: 0.147646
[DIV2K x2]	rel_l2_error: 0.072672	vorticity_error: 0.702531	mean_abs_divergence: 0.077415
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.047124	vorticity_error: 0.633143	mean_abs_divergence: 0.038239
Forward: 15.70s

Saving...
Total: 16.04s

[Epoch 652]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0852][DIV: 0.1261][GRAD: 0.1741][VORT: 0.2290][Total: 0.6144]	5.0+16.9s
[1600/8000]	[L1: 0.0907][DIV: 0.1329][GRAD: 0.1858][VORT: 0.2460][Total: 0.6555]	4.8+3.0s
[2400/8000]	[L1: 0.0907][DIV: 0.1336][GRAD: 0.1854][VORT: 0.2487][Total: 0.6584]	4.8+3.0s
[3200/8000]	[L1: 0.0896][DIV: 0.1330][GRAD: 0.1830][VORT: 0.2437][Total: 0.6493]	4.8+3.0s
[4000/8000]	[L1: 0.0887][DIV: 0.1319][GRAD: 0.1812][VORT: 0.2414][Total: 0.6431]	4.8+3.0s
[4800/8000]	[L1: 0.0892][DIV: 0.1324][GRAD: 0.1824][VORT: 0.2438][Total: 0.6479]	4.7+3.1s
[5600/8000]	[L1: 0.0884][DIV: 0.1315][GRAD: 0.1809][VORT: 0.2419][Total: 0.6427]	4.8+3.0s
[6400/8000]	[L1: 0.0888][DIV: 0.1316][GRAD: 0.1817][VORT: 0.2433][Total: 0.6454]	4.8+3.0s
[7200/8000]	[L1: 0.0886][DIV: 0.1314][GRAD: 0.1813][VORT: 0.2425][Total: 0.6437]	4.8+3.0s
[8000/8000]	[L1: 0.0892][DIV: 0.1322][GRAD: 0.1827][VORT: 0.2454][Total: 0.6495]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.081807	vorticity_error: 0.779915	mean_abs_divergence: 0.133435
[DIV2K x2]	rel_l2_error: 0.064349	vorticity_error: 0.667410	mean_abs_divergence: 0.068713
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043317	vorticity_error: 0.596172	mean_abs_divergence: 0.032603
Forward: 15.73s

Saving...
Total: 16.12s

[Epoch 653]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0946][DIV: 0.1370][GRAD: 0.1932][VORT: 0.2512][Total: 0.6760]	5.0+16.9s
[1600/8000]	[L1: 0.0926][DIV: 0.1355][GRAD: 0.1892][VORT: 0.2478][Total: 0.6651]	4.8+3.0s
[2400/8000]	[L1: 0.0903][DIV: 0.1330][GRAD: 0.1847][VORT: 0.2432][Total: 0.6513]	4.8+3.0s
[3200/8000]	[L1: 0.0904][DIV: 0.1331][GRAD: 0.1850][VORT: 0.2449][Total: 0.6535]	4.8+3.0s
[4000/8000]	[L1: 0.0904][DIV: 0.1333][GRAD: 0.1853][VORT: 0.2473][Total: 0.6562]	4.8+3.0s
[4800/8000]	[L1: 0.0898][DIV: 0.1329][GRAD: 0.1841][VORT: 0.2466][Total: 0.6533]	4.8+3.1s
[5600/8000]	[L1: 0.0899][DIV: 0.1331][GRAD: 0.1843][VORT: 0.2460][Total: 0.6534]	4.8+3.0s
[6400/8000]	[L1: 0.0888][DIV: 0.1315][GRAD: 0.1819][VORT: 0.2425][Total: 0.6447]	4.8+3.0s
[7200/8000]	[L1: 0.0884][DIV: 0.1312][GRAD: 0.1811][VORT: 0.2419][Total: 0.6426]	4.8+3.0s
[8000/8000]	[L1: 0.0888][DIV: 0.1315][GRAD: 0.1820][VORT: 0.2433][Total: 0.6457]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.085235	vorticity_error: 0.626444	mean_abs_divergence: 0.093134
[DIV2K x2]	rel_l2_error: 0.057435	vorticity_error: 0.756583	mean_abs_divergence: 0.048116
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.050411	vorticity_error: 0.787708	mean_abs_divergence: 0.023246
Forward: 15.67s

Saving...
Total: 16.01s

[Epoch 654]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0871][DIV: 0.1312][GRAD: 0.1790][VORT: 0.2398][Total: 0.6371]	5.0+16.9s
[1600/8000]	[L1: 0.0865][DIV: 0.1306][GRAD: 0.1772][VORT: 0.2356][Total: 0.6298]	4.8+3.0s
[2400/8000]	[L1: 0.0857][DIV: 0.1290][GRAD: 0.1755][VORT: 0.2309][Total: 0.6212]	4.8+3.1s
[3200/8000]	[L1: 0.0861][DIV: 0.1288][GRAD: 0.1761][VORT: 0.2334][Total: 0.6244]	4.8+3.0s
[4000/8000]	[L1: 0.0869][DIV: 0.1294][GRAD: 0.1779][VORT: 0.2359][Total: 0.6302]	4.8+3.0s
[4800/8000]	[L1: 0.0875][DIV: 0.1303][GRAD: 0.1791][VORT: 0.2384][Total: 0.6354]	4.8+3.0s
[5600/8000]	[L1: 0.0882][DIV: 0.1310][GRAD: 0.1805][VORT: 0.2414][Total: 0.6411]	4.8+3.0s
[6400/8000]	[L1: 0.0894][DIV: 0.1327][GRAD: 0.1831][VORT: 0.2453][Total: 0.6503]	4.8+3.0s
[7200/8000]	[L1: 0.0895][DIV: 0.1325][GRAD: 0.1831][VORT: 0.2461][Total: 0.6512]	4.8+3.1s
[8000/8000]	[L1: 0.0897][DIV: 0.1329][GRAD: 0.1837][VORT: 0.2468][Total: 0.6531]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.073675	vorticity_error: 0.910112	mean_abs_divergence: 0.109975
[DIV2K x2]	rel_l2_error: 0.059475	vorticity_error: 0.953326	mean_abs_divergence: 0.060012
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042823	vorticity_error: 0.741550	mean_abs_divergence: 0.029709
Forward: 15.74s

Saving...
Total: 16.09s

[Epoch 655]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0813][DIV: 0.1208][GRAD: 0.1666][VORT: 0.2174][Total: 0.5861]	5.1+16.9s
[1600/8000]	[L1: 0.0868][DIV: 0.1278][GRAD: 0.1777][VORT: 0.2381][Total: 0.6303]	4.8+3.0s
[2400/8000]	[L1: 0.0877][DIV: 0.1287][GRAD: 0.1796][VORT: 0.2429][Total: 0.6388]	4.8+3.1s
[3200/8000]	[L1: 0.0885][DIV: 0.1298][GRAD: 0.1811][VORT: 0.2420][Total: 0.6414]	4.9+3.0s
[4000/8000]	[L1: 0.0889][DIV: 0.1308][GRAD: 0.1818][VORT: 0.2440][Total: 0.6455]	4.8+3.0s
[4800/8000]	[L1: 0.0890][DIV: 0.1311][GRAD: 0.1819][VORT: 0.2426][Total: 0.6446]	4.8+3.0s
[5600/8000]	[L1: 0.0896][DIV: 0.1318][GRAD: 0.1829][VORT: 0.2430][Total: 0.6473]	4.8+3.0s
[6400/8000]	[L1: 0.0895][DIV: 0.1317][GRAD: 0.1830][VORT: 0.2432][Total: 0.6475]	4.8+3.0s
[7200/8000]	[L1: 0.0895][DIV: 0.1317][GRAD: 0.1829][VORT: 0.2440][Total: 0.6481]	4.8+3.0s
[8000/8000]	[L1: 0.0900][DIV: 0.1325][GRAD: 0.1842][VORT: 0.2454][Total: 0.6521]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.073844	vorticity_error: 0.682622	mean_abs_divergence: 0.120322
[DIV2K x2]	rel_l2_error: 0.066373	vorticity_error: 0.713844	mean_abs_divergence: 0.059692
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.046044	vorticity_error: 0.588891	mean_abs_divergence: 0.028169
Forward: 15.70s

Saving...
Total: 16.03s

[Epoch 656]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0885][DIV: 0.1315][GRAD: 0.1816][VORT: 0.2495][Total: 0.6512]	4.9+17.0s
[1600/8000]	[L1: 0.0886][DIV: 0.1317][GRAD: 0.1816][VORT: 0.2473][Total: 0.6492]	4.8+3.0s
[2400/8000]	[L1: 0.0887][DIV: 0.1313][GRAD: 0.1817][VORT: 0.2471][Total: 0.6487]	4.8+3.0s
[3200/8000]	[L1: 0.0880][DIV: 0.1304][GRAD: 0.1800][VORT: 0.2430][Total: 0.6414]	4.8+3.0s
[4000/8000]	[L1: 0.0891][DIV: 0.1318][GRAD: 0.1821][VORT: 0.2457][Total: 0.6487]	4.8+3.1s
[4800/8000]	[L1: 0.0903][DIV: 0.1334][GRAD: 0.1847][VORT: 0.2489][Total: 0.6573]	4.8+3.1s
[5600/8000]	[L1: 0.0898][DIV: 0.1329][GRAD: 0.1837][VORT: 0.2474][Total: 0.6537]	4.8+3.0s
[6400/8000]	[L1: 0.0892][DIV: 0.1318][GRAD: 0.1825][VORT: 0.2460][Total: 0.6495]	4.8+3.0s
[7200/8000]	[L1: 0.0896][DIV: 0.1323][GRAD: 0.1834][VORT: 0.2468][Total: 0.6522]	4.8+3.0s
[8000/8000]	[L1: 0.0888][DIV: 0.1313][GRAD: 0.1818][VORT: 0.2453][Total: 0.6473]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.092225	vorticity_error: 0.804990	mean_abs_divergence: 0.130794
[DIV2K x2]	rel_l2_error: 0.065017	vorticity_error: 0.848814	mean_abs_divergence: 0.071570
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043945	vorticity_error: 0.652545	mean_abs_divergence: 0.035606
Forward: 15.68s

Saving...
Total: 16.09s

[Epoch 657]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0842][DIV: 0.1250][GRAD: 0.1734][VORT: 0.2354][Total: 0.6179]	5.1+16.9s
[1600/8000]	[L1: 0.0864][DIV: 0.1285][GRAD: 0.1775][VORT: 0.2394][Total: 0.6317]	4.8+3.1s
[2400/8000]	[L1: 0.0891][DIV: 0.1322][GRAD: 0.1832][VORT: 0.2475][Total: 0.6520]	4.8+3.1s
[3200/8000]	[L1: 0.0903][DIV: 0.1338][GRAD: 0.1855][VORT: 0.2509][Total: 0.6605]	4.8+3.1s
[4000/8000]	[L1: 0.0892][DIV: 0.1320][GRAD: 0.1831][VORT: 0.2487][Total: 0.6530]	4.8+3.1s
[4800/8000]	[L1: 0.0906][DIV: 0.1334][GRAD: 0.1858][VORT: 0.2520][Total: 0.6618]	4.8+3.1s
[5600/8000]	[L1: 0.0893][DIV: 0.1318][GRAD: 0.1831][VORT: 0.2480][Total: 0.6522]	4.8+3.1s
[6400/8000]	[L1: 0.0893][DIV: 0.1317][GRAD: 0.1833][VORT: 0.2483][Total: 0.6526]	4.8+3.1s
[7200/8000]	[L1: 0.0898][DIV: 0.1322][GRAD: 0.1842][VORT: 0.2493][Total: 0.6554]	4.8+3.1s
[8000/8000]	[L1: 0.0893][DIV: 0.1317][GRAD: 0.1831][VORT: 0.2476][Total: 0.6517]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.070719	vorticity_error: 0.744884	mean_abs_divergence: 0.099883
[DIV2K x2]	rel_l2_error: 0.056371	vorticity_error: 0.852598	mean_abs_divergence: 0.053108
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.034741	vorticity_error: 0.860576	mean_abs_divergence: 0.026101
Forward: 15.80s

Saving...
Total: 16.14s

[Epoch 658]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0868][DIV: 0.1287][GRAD: 0.1764][VORT: 0.2292][Total: 0.6211]	5.0+16.9s
[1600/8000]	[L1: 0.0856][DIV: 0.1273][GRAD: 0.1751][VORT: 0.2310][Total: 0.6190]	4.8+3.0s
[2400/8000]	[L1: 0.0884][DIV: 0.1307][GRAD: 0.1807][VORT: 0.2365][Total: 0.6364]	4.8+3.0s
[3200/8000]	[L1: 0.0885][DIV: 0.1310][GRAD: 0.1811][VORT: 0.2398][Total: 0.6403]	4.8+3.0s
[4000/8000]	[L1: 0.0892][DIV: 0.1319][GRAD: 0.1826][VORT: 0.2426][Total: 0.6463]	4.8+3.1s
[4800/8000]	[L1: 0.0898][DIV: 0.1327][GRAD: 0.1838][VORT: 0.2440][Total: 0.6504]	4.8+3.0s
[5600/8000]	[L1: 0.0891][DIV: 0.1318][GRAD: 0.1826][VORT: 0.2431][Total: 0.6465]	4.8+3.0s
[6400/8000]	[L1: 0.0892][DIV: 0.1318][GRAD: 0.1828][VORT: 0.2438][Total: 0.6477]	4.8+3.0s
[7200/8000]	[L1: 0.0889][DIV: 0.1314][GRAD: 0.1823][VORT: 0.2432][Total: 0.6459]	4.8+3.0s
[8000/8000]	[L1: 0.0888][DIV: 0.1313][GRAD: 0.1820][VORT: 0.2425][Total: 0.6445]	4.7+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.062474	vorticity_error: 0.537735	mean_abs_divergence: 0.078421
[DIV2K x2]	rel_l2_error: 0.051609	vorticity_error: 0.678030	mean_abs_divergence: 0.040970
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.036112	vorticity_error: 0.569093	mean_abs_divergence: 0.020061
Forward: 15.66s

Saving...
Total: 15.99s

[Epoch 659]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0910][DIV: 0.1328][GRAD: 0.1867][VORT: 0.2502][Total: 0.6606]	5.1+17.0s
[1600/8000]	[L1: 0.0914][DIV: 0.1335][GRAD: 0.1876][VORT: 0.2504][Total: 0.6628]	4.8+3.0s
[2400/8000]	[L1: 0.0921][DIV: 0.1352][GRAD: 0.1885][VORT: 0.2498][Total: 0.6656]	4.8+3.0s
[3200/8000]	[L1: 0.0917][DIV: 0.1351][GRAD: 0.1874][VORT: 0.2472][Total: 0.6613]	4.8+3.0s
[4000/8000]	[L1: 0.0905][DIV: 0.1338][GRAD: 0.1849][VORT: 0.2443][Total: 0.6534]	4.9+3.0s
[4800/8000]	[L1: 0.0906][DIV: 0.1339][GRAD: 0.1852][VORT: 0.2445][Total: 0.6542]	4.8+3.0s
[5600/8000]	[L1: 0.0900][DIV: 0.1334][GRAD: 0.1840][VORT: 0.2431][Total: 0.6505]	4.8+3.0s
[6400/8000]	[L1: 0.0897][DIV: 0.1328][GRAD: 0.1835][VORT: 0.2435][Total: 0.6496]	4.8+3.1s
[7200/8000]	[L1: 0.0893][DIV: 0.1323][GRAD: 0.1826][VORT: 0.2424][Total: 0.6465]	4.8+3.1s
[8000/8000]	[L1: 0.0886][DIV: 0.1315][GRAD: 0.1813][VORT: 0.2413][Total: 0.6427]	4.8+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.086796	vorticity_error: 0.845312	mean_abs_divergence: 0.133103
[DIV2K x2]	rel_l2_error: 0.062606	vorticity_error: 0.839910	mean_abs_divergence: 0.071310
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.039783	vorticity_error: 0.610453	mean_abs_divergence: 0.035542
Forward: 15.52s

Saving...
Total: 15.85s

[Epoch 660]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0964][DIV: 0.1393][GRAD: 0.1964][VORT: 0.2567][Total: 0.6887]	4.9+16.9s
[1600/8000]	[L1: 0.0924][DIV: 0.1361][GRAD: 0.1884][VORT: 0.2492][Total: 0.6660]	4.8+3.0s
[2400/8000]	[L1: 0.0927][DIV: 0.1366][GRAD: 0.1891][VORT: 0.2486][Total: 0.6670]	4.8+3.0s
[3200/8000]	[L1: 0.0898][DIV: 0.1333][GRAD: 0.1831][VORT: 0.2413][Total: 0.6475]	4.9+3.0s
[4000/8000]	[L1: 0.0905][DIV: 0.1340][GRAD: 0.1847][VORT: 0.2454][Total: 0.6547]	4.8+3.0s
[4800/8000]	[L1: 0.0894][DIV: 0.1328][GRAD: 0.1825][VORT: 0.2431][Total: 0.6478]	4.8+3.1s
[5600/8000]	[L1: 0.0892][DIV: 0.1323][GRAD: 0.1821][VORT: 0.2429][Total: 0.6464]	4.8+3.0s
[6400/8000]	[L1: 0.0899][DIV: 0.1330][GRAD: 0.1835][VORT: 0.2438][Total: 0.6502]	4.8+3.0s
[7200/8000]	[L1: 0.0904][DIV: 0.1337][GRAD: 0.1847][VORT: 0.2454][Total: 0.6542]	4.8+3.0s
[8000/8000]	[L1: 0.0908][DIV: 0.1342][GRAD: 0.1855][VORT: 0.2465][Total: 0.6569]	4.8+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.080594	vorticity_error: 1.018474	mean_abs_divergence: 0.116392
[DIV2K x2]	rel_l2_error: 0.065334	vorticity_error: 0.889020	mean_abs_divergence: 0.060735
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.046246	vorticity_error: 0.731162	mean_abs_divergence: 0.030137
Forward: 15.55s

Saving...
Total: 15.88s

[Epoch 661]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0986][DIV: 0.1430][GRAD: 0.2025][VORT: 0.2720][Total: 0.7161]	5.2+16.9s
[1600/8000]	[L1: 0.0959][DIV: 0.1405][GRAD: 0.1968][VORT: 0.2635][Total: 0.6967]	4.8+3.0s
[2400/8000]	[L1: 0.0926][DIV: 0.1363][GRAD: 0.1898][VORT: 0.2532][Total: 0.6719]	4.8+3.0s
[3200/8000]	[L1: 0.0937][DIV: 0.1377][GRAD: 0.1918][VORT: 0.2554][Total: 0.6785]	4.8+3.0s
[4000/8000]	[L1: 0.0919][DIV: 0.1352][GRAD: 0.1882][VORT: 0.2510][Total: 0.6662]	4.8+3.1s
[4800/8000]	[L1: 0.0919][DIV: 0.1350][GRAD: 0.1881][VORT: 0.2498][Total: 0.6648]	4.8+3.0s
[5600/8000]	[L1: 0.0919][DIV: 0.1350][GRAD: 0.1881][VORT: 0.2490][Total: 0.6640]	4.8+3.0s
[6400/8000]	[L1: 0.0912][DIV: 0.1342][GRAD: 0.1869][VORT: 0.2489][Total: 0.6612]	4.8+3.0s
[7200/8000]	[L1: 0.0909][DIV: 0.1336][GRAD: 0.1860][VORT: 0.2466][Total: 0.6570]	4.8+3.1s
[8000/8000]	[L1: 0.0906][DIV: 0.1334][GRAD: 0.1853][VORT: 0.2457][Total: 0.6550]	4.8+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.078343	vorticity_error: 0.744512	mean_abs_divergence: 0.112609
[DIV2K x2]	rel_l2_error: 0.063187	vorticity_error: 0.815910	mean_abs_divergence: 0.059540
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044004	vorticity_error: 0.757739	mean_abs_divergence: 0.029089
Forward: 15.70s

Saving...
Total: 16.09s

[Epoch 662]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0878][DIV: 0.1292][GRAD: 0.1786][VORT: 0.2359][Total: 0.6315]	5.1+16.9s
[1600/8000]	[L1: 0.0886][DIV: 0.1302][GRAD: 0.1808][VORT: 0.2416][Total: 0.6412]	4.8+3.1s
[2400/8000]	[L1: 0.0905][DIV: 0.1326][GRAD: 0.1848][VORT: 0.2461][Total: 0.6540]	4.8+3.0s
[3200/8000]	[L1: 0.0917][DIV: 0.1346][GRAD: 0.1872][VORT: 0.2487][Total: 0.6622]	4.8+3.0s
[4000/8000]	[L1: 0.0900][DIV: 0.1322][GRAD: 0.1838][VORT: 0.2455][Total: 0.6515]	4.8+3.0s
[4800/8000]	[L1: 0.0888][DIV: 0.1311][GRAD: 0.1814][VORT: 0.2426][Total: 0.6440]	4.8+3.0s
[5600/8000]	[L1: 0.0891][DIV: 0.1314][GRAD: 0.1821][VORT: 0.2437][Total: 0.6463]	4.8+3.0s
[6400/8000]	[L1: 0.0887][DIV: 0.1308][GRAD: 0.1813][VORT: 0.2426][Total: 0.6435]	4.8+3.0s
[7200/8000]	[L1: 0.0898][DIV: 0.1324][GRAD: 0.1837][VORT: 0.2455][Total: 0.6514]	4.8+3.0s
[8000/8000]	[L1: 0.0899][DIV: 0.1325][GRAD: 0.1838][VORT: 0.2458][Total: 0.6520]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.104468	vorticity_error: 1.109080	mean_abs_divergence: 0.146840
[DIV2K x2]	rel_l2_error: 0.079436	vorticity_error: 0.899420	mean_abs_divergence: 0.078658
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.054292	vorticity_error: 0.690420	mean_abs_divergence: 0.039764
Forward: 15.67s

Saving...
Total: 15.99s

[Epoch 663]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0902][DIV: 0.1308][GRAD: 0.1854][VORT: 0.2532][Total: 0.6596]	5.0+16.9s
[1600/8000]	[L1: 0.0911][DIV: 0.1321][GRAD: 0.1869][VORT: 0.2575][Total: 0.6677]	4.8+3.1s
[2400/8000]	[L1: 0.0905][DIV: 0.1317][GRAD: 0.1859][VORT: 0.2569][Total: 0.6650]	4.8+3.0s
[3200/8000]	[L1: 0.0907][DIV: 0.1320][GRAD: 0.1860][VORT: 0.2529][Total: 0.6617]	4.8+3.1s
[4000/8000]	[L1: 0.0915][DIV: 0.1337][GRAD: 0.1876][VORT: 0.2529][Total: 0.6657]	4.8+3.1s
[4800/8000]	[L1: 0.0898][DIV: 0.1318][GRAD: 0.1841][VORT: 0.2485][Total: 0.6542]	4.8+3.0s
[5600/8000]	[L1: 0.0890][DIV: 0.1308][GRAD: 0.1826][VORT: 0.2469][Total: 0.6494]	4.8+3.0s
[6400/8000]	[L1: 0.0899][DIV: 0.1318][GRAD: 0.1844][VORT: 0.2492][Total: 0.6553]	4.7+3.1s
[7200/8000]	[L1: 0.0899][DIV: 0.1319][GRAD: 0.1843][VORT: 0.2492][Total: 0.6553]	4.8+3.1s
[8000/8000]	[L1: 0.0896][DIV: 0.1316][GRAD: 0.1839][VORT: 0.2482][Total: 0.6532]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.096549	vorticity_error: 1.357636	mean_abs_divergence: 0.115048
[DIV2K x2]	rel_l2_error: 0.074468	vorticity_error: 1.408687	mean_abs_divergence: 0.062722
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.064447	vorticity_error: 1.705170	mean_abs_divergence: 0.031135
Forward: 15.69s

Saving...
Total: 16.03s

[Epoch 664]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0904][DIV: 0.1334][GRAD: 0.1854][VORT: 0.2481][Total: 0.6573]	5.0+16.9s
[1600/8000]	[L1: 0.0893][DIV: 0.1331][GRAD: 0.1829][VORT: 0.2475][Total: 0.6529]	4.8+3.0s
[2400/8000]	[L1: 0.0912][DIV: 0.1354][GRAD: 0.1866][VORT: 0.2499][Total: 0.6631]	4.8+3.1s
[3200/8000]	[L1: 0.0891][DIV: 0.1329][GRAD: 0.1822][VORT: 0.2437][Total: 0.6479]	4.8+3.0s
[4000/8000]	[L1: 0.0900][DIV: 0.1338][GRAD: 0.1840][VORT: 0.2467][Total: 0.6545]	4.8+3.1s
[4800/8000]	[L1: 0.0903][DIV: 0.1340][GRAD: 0.1844][VORT: 0.2464][Total: 0.6551]	4.7+3.1s
[5600/8000]	[L1: 0.0901][DIV: 0.1335][GRAD: 0.1840][VORT: 0.2453][Total: 0.6528]	4.8+3.0s
[6400/8000]	[L1: 0.0906][DIV: 0.1344][GRAD: 0.1850][VORT: 0.2449][Total: 0.6549]	4.8+3.1s
[7200/8000]	[L1: 0.0913][DIV: 0.1353][GRAD: 0.1863][VORT: 0.2462][Total: 0.6591]	4.8+3.1s
[8000/8000]	[L1: 0.0905][DIV: 0.1341][GRAD: 0.1847][VORT: 0.2445][Total: 0.6538]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.066795	vorticity_error: 1.938610	mean_abs_divergence: 0.097453
[DIV2K x2]	rel_l2_error: 0.054099	vorticity_error: 0.642339	mean_abs_divergence: 0.050398
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.036444	vorticity_error: 0.606985	mean_abs_divergence: 0.024577
Forward: 15.72s

Saving...
Total: 16.05s

[Epoch 665]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0875][DIV: 0.1325][GRAD: 0.1781][VORT: 0.2359][Total: 0.6340]	5.0+16.9s
[1600/8000]	[L1: 0.0867][DIV: 0.1286][GRAD: 0.1770][VORT: 0.2371][Total: 0.6294]	4.8+3.0s
[2400/8000]	[L1: 0.0864][DIV: 0.1284][GRAD: 0.1766][VORT: 0.2371][Total: 0.6285]	4.8+3.1s
[3200/8000]	[L1: 0.0867][DIV: 0.1289][GRAD: 0.1772][VORT: 0.2390][Total: 0.6318]	4.7+3.1s
[4000/8000]	[L1: 0.0867][DIV: 0.1286][GRAD: 0.1773][VORT: 0.2393][Total: 0.6319]	4.8+3.1s
[4800/8000]	[L1: 0.0880][DIV: 0.1299][GRAD: 0.1800][VORT: 0.2417][Total: 0.6395]	4.8+3.0s
[5600/8000]	[L1: 0.0889][DIV: 0.1310][GRAD: 0.1818][VORT: 0.2451][Total: 0.6467]	4.7+3.1s
[6400/8000]	[L1: 0.0883][DIV: 0.1301][GRAD: 0.1806][VORT: 0.2434][Total: 0.6424]	4.8+3.0s
[7200/8000]	[L1: 0.0886][DIV: 0.1306][GRAD: 0.1812][VORT: 0.2429][Total: 0.6434]	4.8+3.1s
[8000/8000]	[L1: 0.0888][DIV: 0.1309][GRAD: 0.1816][VORT: 0.2433][Total: 0.6445]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.087332	vorticity_error: 0.624792	mean_abs_divergence: 0.114430
[DIV2K x2]	rel_l2_error: 0.065048	vorticity_error: 0.644650	mean_abs_divergence: 0.060109
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.047450	vorticity_error: 0.553249	mean_abs_divergence: 0.028891
Forward: 15.74s

Saving...
Total: 16.12s

[Epoch 666]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0903][DIV: 0.1327][GRAD: 0.1851][VORT: 0.2459][Total: 0.6541]	5.0+16.9s
[1600/8000]	[L1: 0.0876][DIV: 0.1296][GRAD: 0.1795][VORT: 0.2367][Total: 0.6334]	4.8+3.0s
[2400/8000]	[L1: 0.0860][DIV: 0.1275][GRAD: 0.1760][VORT: 0.2325][Total: 0.6220]	4.8+3.0s
[3200/8000]	[L1: 0.0842][DIV: 0.1258][GRAD: 0.1723][VORT: 0.2264][Total: 0.6086]	4.8+3.0s
[4000/8000]	[L1: 0.0842][DIV: 0.1256][GRAD: 0.1722][VORT: 0.2270][Total: 0.6090]	4.8+3.0s
[4800/8000]	[L1: 0.0853][DIV: 0.1269][GRAD: 0.1746][VORT: 0.2310][Total: 0.6178]	4.8+3.0s
[5600/8000]	[L1: 0.0867][DIV: 0.1285][GRAD: 0.1774][VORT: 0.2353][Total: 0.6279]	4.8+3.0s
[6400/8000]	[L1: 0.0872][DIV: 0.1294][GRAD: 0.1782][VORT: 0.2360][Total: 0.6307]	4.8+3.1s
[7200/8000]	[L1: 0.0878][DIV: 0.1301][GRAD: 0.1795][VORT: 0.2384][Total: 0.6358]	4.8+3.0s
[8000/8000]	[L1: 0.0876][DIV: 0.1299][GRAD: 0.1792][VORT: 0.2379][Total: 0.6346]	4.8+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.085766	vorticity_error: 0.897136	mean_abs_divergence: 0.121479
[DIV2K x2]	rel_l2_error: 0.071086	vorticity_error: 0.873323	mean_abs_divergence: 0.063347
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045088	vorticity_error: 0.682593	mean_abs_divergence: 0.031338
Forward: 15.58s

Saving...
Total: 15.90s

[Epoch 667]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0824][DIV: 0.1235][GRAD: 0.1681][VORT: 0.2209][Total: 0.5948]	5.0+16.8s
[1600/8000]	[L1: 0.0905][DIV: 0.1343][GRAD: 0.1853][VORT: 0.2464][Total: 0.6566]	4.8+3.0s
[2400/8000]	[L1: 0.0900][DIV: 0.1338][GRAD: 0.1840][VORT: 0.2437][Total: 0.6515]	4.8+3.0s
[3200/8000]	[L1: 0.0895][DIV: 0.1326][GRAD: 0.1834][VORT: 0.2455][Total: 0.6510]	4.8+3.0s
[4000/8000]	[L1: 0.0880][DIV: 0.1304][GRAD: 0.1804][VORT: 0.2413][Total: 0.6401]	4.8+3.0s
[4800/8000]	[L1: 0.0875][DIV: 0.1298][GRAD: 0.1793][VORT: 0.2402][Total: 0.6368]	4.8+3.0s
[5600/8000]	[L1: 0.0869][DIV: 0.1289][GRAD: 0.1781][VORT: 0.2382][Total: 0.6320]	4.9+3.0s
[6400/8000]	[L1: 0.0867][DIV: 0.1286][GRAD: 0.1775][VORT: 0.2376][Total: 0.6303]	4.8+3.1s
[7200/8000]	[L1: 0.0867][DIV: 0.1285][GRAD: 0.1774][VORT: 0.2369][Total: 0.6295]	4.8+3.0s
[8000/8000]	[L1: 0.0871][DIV: 0.1291][GRAD: 0.1784][VORT: 0.2389][Total: 0.6335]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.075120	vorticity_error: 0.860407	mean_abs_divergence: 0.114259
[DIV2K x2]	rel_l2_error: 0.063743	vorticity_error: 0.879120	mean_abs_divergence: 0.059877
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.050340	vorticity_error: 0.724625	mean_abs_divergence: 0.028982
Forward: 15.73s

Saving...
Total: 16.06s

[Epoch 668]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0880][DIV: 0.1295][GRAD: 0.1789][VORT: 0.2315][Total: 0.6278]	5.1+16.9s
[1600/8000]	[L1: 0.0822][DIV: 0.1241][GRAD: 0.1679][VORT: 0.2244][Total: 0.5986]	4.8+3.0s
[2400/8000]	[L1: 0.0849][DIV: 0.1275][GRAD: 0.1736][VORT: 0.2311][Total: 0.6171]	4.8+3.0s
[3200/8000]	[L1: 0.0861][DIV: 0.1289][GRAD: 0.1761][VORT: 0.2331][Total: 0.6242]	4.8+3.0s
[4000/8000]	[L1: 0.0867][DIV: 0.1292][GRAD: 0.1774][VORT: 0.2356][Total: 0.6288]	4.8+3.0s
[4800/8000]	[L1: 0.0867][DIV: 0.1290][GRAD: 0.1777][VORT: 0.2373][Total: 0.6308]	4.8+3.0s
[5600/8000]	[L1: 0.0876][DIV: 0.1302][GRAD: 0.1795][VORT: 0.2401][Total: 0.6373]	4.8+3.0s
[6400/8000]	[L1: 0.0879][DIV: 0.1304][GRAD: 0.1800][VORT: 0.2402][Total: 0.6385]	4.8+3.0s
[7200/8000]	[L1: 0.0888][DIV: 0.1313][GRAD: 0.1818][VORT: 0.2426][Total: 0.6444]	4.8+3.0s
[8000/8000]	[L1: 0.0881][DIV: 0.1303][GRAD: 0.1804][VORT: 0.2411][Total: 0.6400]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.080308	vorticity_error: 0.871078	mean_abs_divergence: 0.114348
[DIV2K x2]	rel_l2_error: 0.060787	vorticity_error: 3.785862	mean_abs_divergence: 0.061069
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042656	vorticity_error: 1.357169	mean_abs_divergence: 0.029934
Forward: 15.73s

Saving...
Total: 16.05s

[Epoch 669]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0971][DIV: 0.1424][GRAD: 0.1997][VORT: 0.2703][Total: 0.7097]	5.1+16.9s
[1600/8000]	[L1: 0.0909][DIV: 0.1338][GRAD: 0.1868][VORT: 0.2551][Total: 0.6666]	4.8+3.0s
[2400/8000]	[L1: 0.0910][DIV: 0.1344][GRAD: 0.1868][VORT: 0.2519][Total: 0.6642]	4.8+3.0s
[3200/8000]	[L1: 0.0907][DIV: 0.1337][GRAD: 0.1859][VORT: 0.2492][Total: 0.6595]	4.8+3.0s
[4000/8000]	[L1: 0.0894][DIV: 0.1319][GRAD: 0.1832][VORT: 0.2471][Total: 0.6516]	4.8+3.0s
[4800/8000]	[L1: 0.0893][DIV: 0.1317][GRAD: 0.1832][VORT: 0.2476][Total: 0.6518]	4.7+3.1s
[5600/8000]	[L1: 0.0881][DIV: 0.1301][GRAD: 0.1807][VORT: 0.2442][Total: 0.6431]	4.8+3.1s
[6400/8000]	[L1: 0.0881][DIV: 0.1301][GRAD: 0.1808][VORT: 0.2443][Total: 0.6434]	4.8+3.1s
[7200/8000]	[L1: 0.0878][DIV: 0.1296][GRAD: 0.1802][VORT: 0.2434][Total: 0.6410]	4.8+3.0s
[8000/8000]	[L1: 0.0870][DIV: 0.1286][GRAD: 0.1784][VORT: 0.2409][Total: 0.6350]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.073343	vorticity_error: 0.540243	mean_abs_divergence: 0.112828
[DIV2K x2]	rel_l2_error: 0.060419	vorticity_error: 0.492461	mean_abs_divergence: 0.058867
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.046965	vorticity_error: 0.446514	mean_abs_divergence: 0.028948
Forward: 15.75s

Saving...
Total: 16.15s

[Epoch 670]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0942][DIV: 0.1389][GRAD: 0.1938][VORT: 0.2654][Total: 0.6923]	5.0+17.0s
[1600/8000]	[L1: 0.0882][DIV: 0.1316][GRAD: 0.1806][VORT: 0.2449][Total: 0.6454]	4.8+3.0s
[2400/8000]	[L1: 0.0879][DIV: 0.1304][GRAD: 0.1799][VORT: 0.2427][Total: 0.6409]	4.8+3.0s
[3200/8000]	[L1: 0.0887][DIV: 0.1304][GRAD: 0.1817][VORT: 0.2468][Total: 0.6477]	4.8+3.0s
[4000/8000]	[L1: 0.0885][DIV: 0.1307][GRAD: 0.1815][VORT: 0.2451][Total: 0.6458]	4.8+3.0s
[4800/8000]	[L1: 0.0892][DIV: 0.1316][GRAD: 0.1827][VORT: 0.2446][Total: 0.6481]	4.8+3.0s
[5600/8000]	[L1: 0.0884][DIV: 0.1309][GRAD: 0.1811][VORT: 0.2421][Total: 0.6425]	4.7+3.1s
[6400/8000]	[L1: 0.0884][DIV: 0.1308][GRAD: 0.1808][VORT: 0.2403][Total: 0.6403]	4.8+3.0s
[7200/8000]	[L1: 0.0884][DIV: 0.1309][GRAD: 0.1810][VORT: 0.2414][Total: 0.6417]	4.8+3.0s
[8000/8000]	[L1: 0.0880][DIV: 0.1305][GRAD: 0.1801][VORT: 0.2399][Total: 0.6386]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.080722	vorticity_error: 0.831520	mean_abs_divergence: 0.118411
[DIV2K x2]	rel_l2_error: 0.063015	vorticity_error: 0.738883	mean_abs_divergence: 0.062258
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.046280	vorticity_error: 0.629047	mean_abs_divergence: 0.031016
Forward: 15.62s

Saving...
Total: 15.97s

[Epoch 671]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0961][DIV: 0.1412][GRAD: 0.1973][VORT: 0.2649][Total: 0.6995]	5.1+17.0s
[1600/8000]	[L1: 0.0867][DIV: 0.1296][GRAD: 0.1772][VORT: 0.2399][Total: 0.6334]	4.8+3.0s
[2400/8000]	[L1: 0.0881][DIV: 0.1314][GRAD: 0.1805][VORT: 0.2434][Total: 0.6434]	4.8+3.0s
[3200/8000]	[L1: 0.0871][DIV: 0.1305][GRAD: 0.1783][VORT: 0.2379][Total: 0.6339]	4.8+3.0s
[4000/8000]	[L1: 0.0882][DIV: 0.1318][GRAD: 0.1805][VORT: 0.2399][Total: 0.6404]	4.7+3.1s
[4800/8000]	[L1: 0.0884][DIV: 0.1313][GRAD: 0.1811][VORT: 0.2415][Total: 0.6423]	4.8+3.0s
[5600/8000]	[L1: 0.0876][DIV: 0.1302][GRAD: 0.1795][VORT: 0.2400][Total: 0.6372]	4.8+3.0s
[6400/8000]	[L1: 0.0886][DIV: 0.1313][GRAD: 0.1815][VORT: 0.2420][Total: 0.6433]	4.8+3.0s
[7200/8000]	[L1: 0.0881][DIV: 0.1306][GRAD: 0.1804][VORT: 0.2403][Total: 0.6394]	4.8+3.0s
[8000/8000]	[L1: 0.0880][DIV: 0.1303][GRAD: 0.1804][VORT: 0.2412][Total: 0.6398]	4.8+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.085766	vorticity_error: 0.755282	mean_abs_divergence: 0.126409
[DIV2K x2]	rel_l2_error: 0.055970	vorticity_error: 5.283744	mean_abs_divergence: 0.065470
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.052588	vorticity_error: 1.029579	mean_abs_divergence: 0.031873
Forward: 15.72s

Saving...
Total: 16.05s

[Epoch 672]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0908][DIV: 0.1358][GRAD: 0.1859][VORT: 0.2543][Total: 0.6667]	5.0+16.9s
[1600/8000]	[L1: 0.0883][DIV: 0.1325][GRAD: 0.1804][VORT: 0.2428][Total: 0.6441]	4.8+3.0s
[2400/8000]	[L1: 0.0898][DIV: 0.1341][GRAD: 0.1838][VORT: 0.2462][Total: 0.6540]	4.8+3.1s
[3200/8000]	[L1: 0.0886][DIV: 0.1324][GRAD: 0.1813][VORT: 0.2416][Total: 0.6439]	4.8+3.0s
[4000/8000]	[L1: 0.0877][DIV: 0.1312][GRAD: 0.1792][VORT: 0.2382][Total: 0.6363]	4.8+3.0s
[4800/8000]	[L1: 0.0874][DIV: 0.1306][GRAD: 0.1787][VORT: 0.2377][Total: 0.6343]	4.8+3.0s
[5600/8000]	[L1: 0.0867][DIV: 0.1297][GRAD: 0.1774][VORT: 0.2368][Total: 0.6306]	4.8+3.0s
[6400/8000]	[L1: 0.0859][DIV: 0.1287][GRAD: 0.1760][VORT: 0.2361][Total: 0.6268]	4.8+3.1s
[7200/8000]	[L1: 0.0863][DIV: 0.1291][GRAD: 0.1767][VORT: 0.2371][Total: 0.6291]	4.8+3.1s
[8000/8000]	[L1: 0.0861][DIV: 0.1289][GRAD: 0.1763][VORT: 0.2356][Total: 0.6269]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.075197	vorticity_error: 0.698225	mean_abs_divergence: 0.096220
[DIV2K x2]	rel_l2_error: 0.060822	vorticity_error: 0.605950	mean_abs_divergence: 0.051645
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042494	vorticity_error: 0.540319	mean_abs_divergence: 0.025838
Forward: 15.55s

Saving...
Total: 15.90s

[Epoch 673]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0936][DIV: 0.1362][GRAD: 0.1931][VORT: 0.2592][Total: 0.6822]	5.0+16.8s
[1600/8000]	[L1: 0.0863][DIV: 0.1273][GRAD: 0.1778][VORT: 0.2406][Total: 0.6320]	4.8+3.1s
[2400/8000]	[L1: 0.0889][DIV: 0.1302][GRAD: 0.1825][VORT: 0.2456][Total: 0.6473]	4.8+3.0s
[3200/8000]	[L1: 0.0895][DIV: 0.1311][GRAD: 0.1839][VORT: 0.2491][Total: 0.6536]	4.8+3.0s
[4000/8000]	[L1: 0.0892][DIV: 0.1304][GRAD: 0.1832][VORT: 0.2497][Total: 0.6525]	4.8+3.0s
[4800/8000]	[L1: 0.0900][DIV: 0.1316][GRAD: 0.1847][VORT: 0.2516][Total: 0.6578]	4.8+3.0s
[5600/8000]	[L1: 0.0909][DIV: 0.1331][GRAD: 0.1864][VORT: 0.2523][Total: 0.6627]	4.8+3.0s
[6400/8000]	[L1: 0.0914][DIV: 0.1339][GRAD: 0.1873][VORT: 0.2532][Total: 0.6658]	4.7+3.1s
[7200/8000]	[L1: 0.0910][DIV: 0.1337][GRAD: 0.1867][VORT: 0.2516][Total: 0.6629]	4.8+3.0s
[8000/8000]	[L1: 0.0904][DIV: 0.1329][GRAD: 0.1852][VORT: 0.2491][Total: 0.6575]	4.8+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.107443	vorticity_error: 1.226841	mean_abs_divergence: 0.132094
[DIV2K x2]	rel_l2_error: 0.086119	vorticity_error: 1.324899	mean_abs_divergence: 0.069922
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.062177	vorticity_error: 1.351842	mean_abs_divergence: 0.034274
Forward: 15.75s

Saving...
Total: 16.16s

[Epoch 674]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0864][DIV: 0.1293][GRAD: 0.1776][VORT: 0.2384][Total: 0.6316]	5.1+16.9s
[1600/8000]	[L1: 0.0868][DIV: 0.1277][GRAD: 0.1782][VORT: 0.2411][Total: 0.6337]	4.8+3.1s
[2400/8000]	[L1: 0.0880][DIV: 0.1296][GRAD: 0.1808][VORT: 0.2437][Total: 0.6421]	4.8+3.0s
[3200/8000]	[L1: 0.0870][DIV: 0.1278][GRAD: 0.1787][VORT: 0.2418][Total: 0.6353]	4.8+3.1s
[4000/8000]	[L1: 0.0868][DIV: 0.1279][GRAD: 0.1780][VORT: 0.2397][Total: 0.6324]	4.8+3.0s
[4800/8000]	[L1: 0.0873][DIV: 0.1283][GRAD: 0.1793][VORT: 0.2412][Total: 0.6361]	4.8+3.0s
[5600/8000]	[L1: 0.0889][DIV: 0.1305][GRAD: 0.1825][VORT: 0.2445][Total: 0.6465]	4.8+3.1s
[6400/8000]	[L1: 0.0899][DIV: 0.1320][GRAD: 0.1845][VORT: 0.2467][Total: 0.6533]	4.9+3.0s
[7200/8000]	[L1: 0.0896][DIV: 0.1317][GRAD: 0.1838][VORT: 0.2449][Total: 0.6501]	4.8+3.0s
[8000/8000]	[L1: 0.0895][DIV: 0.1317][GRAD: 0.1834][VORT: 0.2442][Total: 0.6488]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.080015	vorticity_error: 0.686590	mean_abs_divergence: 0.107408
[DIV2K x2]	rel_l2_error: 0.064647	vorticity_error: 0.678137	mean_abs_divergence: 0.058538
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.046228	vorticity_error: 0.547057	mean_abs_divergence: 0.029006
Forward: 15.69s

Saving...
Total: 16.04s

[Epoch 675]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0875][DIV: 0.1296][GRAD: 0.1802][VORT: 0.2417][Total: 0.6389]	5.0+16.9s
[1600/8000]	[L1: 0.0860][DIV: 0.1270][GRAD: 0.1763][VORT: 0.2392][Total: 0.6285]	4.8+3.0s
[2400/8000]	[L1: 0.0875][DIV: 0.1289][GRAD: 0.1792][VORT: 0.2419][Total: 0.6375]	4.8+3.0s
[3200/8000]	[L1: 0.0857][DIV: 0.1270][GRAD: 0.1757][VORT: 0.2368][Total: 0.6253]	4.8+3.0s
[4000/8000]	[L1: 0.0867][DIV: 0.1281][GRAD: 0.1776][VORT: 0.2395][Total: 0.6319]	4.8+3.0s
[4800/8000]	[L1: 0.0862][DIV: 0.1277][GRAD: 0.1764][VORT: 0.2381][Total: 0.6284]	4.9+3.0s
[5600/8000]	[L1: 0.0873][DIV: 0.1293][GRAD: 0.1784][VORT: 0.2398][Total: 0.6347]	4.8+3.0s
[6400/8000]	[L1: 0.0874][DIV: 0.1294][GRAD: 0.1786][VORT: 0.2399][Total: 0.6353]	4.8+3.0s
[7200/8000]	[L1: 0.0872][DIV: 0.1293][GRAD: 0.1784][VORT: 0.2390][Total: 0.6339]	4.8+3.0s
[8000/8000]	[L1: 0.0866][DIV: 0.1285][GRAD: 0.1771][VORT: 0.2371][Total: 0.6292]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.084647	vorticity_error: 1.009873	mean_abs_divergence: 0.124138
[DIV2K x2]	rel_l2_error: 0.065356	vorticity_error: 1.001086	mean_abs_divergence: 0.065283
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.046707	vorticity_error: 0.765744	mean_abs_divergence: 0.032497
Forward: 15.73s

Saving...
Total: 16.08s

[Epoch 676]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0811][DIV: 0.1209][GRAD: 0.1662][VORT: 0.2274][Total: 0.5956]	5.2+16.9s
[1600/8000]	[L1: 0.0838][DIV: 0.1248][GRAD: 0.1718][VORT: 0.2317][Total: 0.6122]	4.8+3.1s
[2400/8000]	[L1: 0.0857][DIV: 0.1275][GRAD: 0.1753][VORT: 0.2358][Total: 0.6243]	4.8+3.0s
[3200/8000]	[L1: 0.0869][DIV: 0.1285][GRAD: 0.1780][VORT: 0.2382][Total: 0.6315]	4.8+3.0s
[4000/8000]	[L1: 0.0881][DIV: 0.1302][GRAD: 0.1805][VORT: 0.2430][Total: 0.6418]	4.8+3.0s
[4800/8000]	[L1: 0.0877][DIV: 0.1301][GRAD: 0.1797][VORT: 0.2423][Total: 0.6398]	4.8+3.0s
[5600/8000]	[L1: 0.0877][DIV: 0.1298][GRAD: 0.1796][VORT: 0.2412][Total: 0.6383]	4.8+3.1s
[6400/8000]	[L1: 0.0885][DIV: 0.1310][GRAD: 0.1814][VORT: 0.2429][Total: 0.6438]	4.8+3.0s
[7200/8000]	[L1: 0.0883][DIV: 0.1308][GRAD: 0.1807][VORT: 0.2421][Total: 0.6419]	4.8+3.0s
[8000/8000]	[L1: 0.0883][DIV: 0.1306][GRAD: 0.1809][VORT: 0.2424][Total: 0.6422]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.075487	vorticity_error: 0.616469	mean_abs_divergence: 0.104095
[DIV2K x2]	rel_l2_error: 0.060614	vorticity_error: 0.680767	mean_abs_divergence: 0.056800
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.040538	vorticity_error: 0.529421	mean_abs_divergence: 0.028210
Forward: 15.72s

Saving...
Total: 16.05s

[Epoch 677]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0868][DIV: 0.1279][GRAD: 0.1784][VORT: 0.2378][Total: 0.6309]	5.2+17.0s
[1600/8000]	[L1: 0.0872][DIV: 0.1292][GRAD: 0.1789][VORT: 0.2371][Total: 0.6324]	4.8+3.0s
[2400/8000]	[L1: 0.0879][DIV: 0.1302][GRAD: 0.1801][VORT: 0.2398][Total: 0.6380]	4.8+3.0s
[3200/8000]	[L1: 0.0875][DIV: 0.1294][GRAD: 0.1790][VORT: 0.2380][Total: 0.6340]	4.8+3.1s
[4000/8000]	[L1: 0.0881][DIV: 0.1299][GRAD: 0.1805][VORT: 0.2419][Total: 0.6404]	4.8+3.1s
[4800/8000]	[L1: 0.0878][DIV: 0.1295][GRAD: 0.1800][VORT: 0.2416][Total: 0.6390]	4.8+3.0s
[5600/8000]	[L1: 0.0881][DIV: 0.1300][GRAD: 0.1806][VORT: 0.2424][Total: 0.6411]	4.8+3.0s
[6400/8000]	[L1: 0.0877][DIV: 0.1299][GRAD: 0.1798][VORT: 0.2420][Total: 0.6393]	4.8+3.0s
[7200/8000]	[L1: 0.0875][DIV: 0.1295][GRAD: 0.1792][VORT: 0.2409][Total: 0.6371]	4.8+3.1s
[8000/8000]	[L1: 0.0877][DIV: 0.1297][GRAD: 0.1797][VORT: 0.2409][Total: 0.6380]	4.8+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.079412	vorticity_error: 0.791141	mean_abs_divergence: 0.107374
[DIV2K x2]	rel_l2_error: 0.063344	vorticity_error: 0.988117	mean_abs_divergence: 0.058435
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048359	vorticity_error: 1.005409	mean_abs_divergence: 0.029157
Forward: 15.70s

Saving...
Total: 16.04s

[Epoch 678]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0846][DIV: 0.1249][GRAD: 0.1725][VORT: 0.2340][Total: 0.6160]	5.1+16.8s
[1600/8000]	[L1: 0.0809][DIV: 0.1216][GRAD: 0.1658][VORT: 0.2268][Total: 0.5952]	4.8+3.0s
[2400/8000]	[L1: 0.0839][DIV: 0.1251][GRAD: 0.1718][VORT: 0.2345][Total: 0.6153]	4.9+3.0s
[3200/8000]	[L1: 0.0852][DIV: 0.1265][GRAD: 0.1742][VORT: 0.2344][Total: 0.6204]	4.8+3.0s
[4000/8000]	[L1: 0.0856][DIV: 0.1272][GRAD: 0.1751][VORT: 0.2359][Total: 0.6238]	4.8+3.0s
[4800/8000]	[L1: 0.0871][DIV: 0.1287][GRAD: 0.1785][VORT: 0.2409][Total: 0.6353]	4.7+3.1s
[5600/8000]	[L1: 0.0867][DIV: 0.1281][GRAD: 0.1777][VORT: 0.2399][Total: 0.6324]	4.8+3.0s
[6400/8000]	[L1: 0.0860][DIV: 0.1272][GRAD: 0.1761][VORT: 0.2378][Total: 0.6271]	4.8+3.0s
[7200/8000]	[L1: 0.0866][DIV: 0.1278][GRAD: 0.1773][VORT: 0.2393][Total: 0.6310]	4.8+3.0s
[8000/8000]	[L1: 0.0861][DIV: 0.1271][GRAD: 0.1764][VORT: 0.2388][Total: 0.6284]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.105416	vorticity_error: 2.725645	mean_abs_divergence: 0.136341
[DIV2K x2]	rel_l2_error: 0.075484	vorticity_error: 0.845175	mean_abs_divergence: 0.072029
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.051817	vorticity_error: 0.702014	mean_abs_divergence: 0.035144
Forward: 15.71s

Saving...
Total: 16.05s

[Epoch 679]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0965][DIV: 0.1406][GRAD: 0.1977][VORT: 0.2625][Total: 0.6973]	5.1+16.9s
[1600/8000]	[L1: 0.0918][DIV: 0.1346][GRAD: 0.1886][VORT: 0.2491][Total: 0.6640]	4.8+3.0s
[2400/8000]	[L1: 0.0919][DIV: 0.1350][GRAD: 0.1887][VORT: 0.2505][Total: 0.6661]	4.8+3.0s
[3200/8000]	[L1: 0.0925][DIV: 0.1356][GRAD: 0.1901][VORT: 0.2524][Total: 0.6706]	4.8+3.0s
[4000/8000]	[L1: 0.0925][DIV: 0.1359][GRAD: 0.1897][VORT: 0.2505][Total: 0.6687]	4.8+3.0s
[4800/8000]	[L1: 0.0921][DIV: 0.1356][GRAD: 0.1890][VORT: 0.2503][Total: 0.6670]	4.9+3.0s
[5600/8000]	[L1: 0.0904][DIV: 0.1332][GRAD: 0.1854][VORT: 0.2468][Total: 0.6558]	4.8+3.0s
[6400/8000]	[L1: 0.0897][DIV: 0.1324][GRAD: 0.1841][VORT: 0.2450][Total: 0.6511]	4.8+3.1s
[7200/8000]	[L1: 0.0891][DIV: 0.1315][GRAD: 0.1827][VORT: 0.2424][Total: 0.6458]	4.8+3.0s
[8000/8000]	[L1: 0.0885][DIV: 0.1307][GRAD: 0.1814][VORT: 0.2414][Total: 0.6420]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.078334	vorticity_error: 0.723913	mean_abs_divergence: 0.115798
[DIV2K x2]	rel_l2_error: 0.054516	vorticity_error: 0.758193	mean_abs_divergence: 0.059821
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.041684	vorticity_error: 0.596220	mean_abs_divergence: 0.028999
Forward: 15.70s

Saving...
Total: 16.04s

[Epoch 680]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0944][DIV: 0.1392][GRAD: 0.1941][VORT: 0.2624][Total: 0.6901]	5.2+17.0s
[1600/8000]	[L1: 0.0887][DIV: 0.1310][GRAD: 0.1821][VORT: 0.2489][Total: 0.6507]	4.7+3.1s
[2400/8000]	[L1: 0.0901][DIV: 0.1328][GRAD: 0.1849][VORT: 0.2514][Total: 0.6592]	4.9+3.0s
[3200/8000]	[L1: 0.0912][DIV: 0.1349][GRAD: 0.1868][VORT: 0.2502][Total: 0.6631]	4.8+3.1s
[4000/8000]	[L1: 0.0901][DIV: 0.1331][GRAD: 0.1845][VORT: 0.2477][Total: 0.6554]	4.8+3.0s
[4800/8000]	[L1: 0.0896][DIV: 0.1324][GRAD: 0.1837][VORT: 0.2477][Total: 0.6534]	4.8+3.0s
[5600/8000]	[L1: 0.0888][DIV: 0.1318][GRAD: 0.1821][VORT: 0.2448][Total: 0.6475]	4.8+3.0s
[6400/8000]	[L1: 0.0896][DIV: 0.1326][GRAD: 0.1836][VORT: 0.2473][Total: 0.6531]	4.8+3.0s
[7200/8000]	[L1: 0.0897][DIV: 0.1325][GRAD: 0.1838][VORT: 0.2469][Total: 0.6529]	5.0+3.1s
[8000/8000]	[L1: 0.0893][DIV: 0.1321][GRAD: 0.1829][VORT: 0.2467][Total: 0.6510]	4.8+3.2s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.089493	vorticity_error: 2.562180	mean_abs_divergence: 0.122573
[DIV2K x2]	rel_l2_error: 0.071832	vorticity_error: 0.816397	mean_abs_divergence: 0.066390
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.052592	vorticity_error: 0.747148	mean_abs_divergence: 0.032963
Forward: 15.84s

Saving...
Total: 16.17s

[Epoch 681]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0820][DIV: 0.1216][GRAD: 0.1696][VORT: 0.2325][Total: 0.6057]	5.0+17.1s
[1600/8000]	[L1: 0.0867][DIV: 0.1285][GRAD: 0.1786][VORT: 0.2448][Total: 0.6386]	4.8+3.0s
[2400/8000]	[L1: 0.0889][DIV: 0.1310][GRAD: 0.1832][VORT: 0.2504][Total: 0.6535]	4.8+3.1s
[3200/8000]	[L1: 0.0895][DIV: 0.1324][GRAD: 0.1840][VORT: 0.2497][Total: 0.6556]	4.8+3.0s
[4000/8000]	[L1: 0.0886][DIV: 0.1314][GRAD: 0.1820][VORT: 0.2456][Total: 0.6476]	4.8+3.0s
[4800/8000]	[L1: 0.0878][DIV: 0.1300][GRAD: 0.1803][VORT: 0.2437][Total: 0.6418]	4.8+3.0s
[5600/8000]	[L1: 0.0869][DIV: 0.1289][GRAD: 0.1782][VORT: 0.2402][Total: 0.6343]	4.8+3.1s
[6400/8000]	[L1: 0.0861][DIV: 0.1280][GRAD: 0.1767][VORT: 0.2389][Total: 0.6297]	4.8+3.0s
[7200/8000]	[L1: 0.0876][DIV: 0.1301][GRAD: 0.1797][VORT: 0.2423][Total: 0.6397]	4.8+3.0s
[8000/8000]	[L1: 0.0870][DIV: 0.1293][GRAD: 0.1785][VORT: 0.2408][Total: 0.6357]	4.8+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.076325	vorticity_error: 0.790260	mean_abs_divergence: 0.111371
[DIV2K x2]	rel_l2_error: 0.060474	vorticity_error: 0.755947	mean_abs_divergence: 0.060251
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.047238	vorticity_error: 0.639337	mean_abs_divergence: 0.030191
Forward: 15.63s

Saving...
Total: 16.02s

[Epoch 682]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0902][DIV: 0.1329][GRAD: 0.1845][VORT: 0.2514][Total: 0.6590]	5.0+16.9s
[1600/8000]	[L1: 0.0885][DIV: 0.1300][GRAD: 0.1809][VORT: 0.2400][Total: 0.6394]	4.8+3.0s
[2400/8000]	[L1: 0.0898][DIV: 0.1314][GRAD: 0.1836][VORT: 0.2427][Total: 0.6475]	4.8+3.0s
[3200/8000]	[L1: 0.0892][DIV: 0.1305][GRAD: 0.1823][VORT: 0.2424][Total: 0.6444]	4.8+3.0s
[4000/8000]	[L1: 0.0900][DIV: 0.1318][GRAD: 0.1838][VORT: 0.2443][Total: 0.6500]	4.7+3.1s
[4800/8000]	[L1: 0.0903][DIV: 0.1320][GRAD: 0.1845][VORT: 0.2451][Total: 0.6519]	4.8+3.0s
[5600/8000]	[L1: 0.0893][DIV: 0.1309][GRAD: 0.1826][VORT: 0.2426][Total: 0.6453]	4.8+3.1s
[6400/8000]	[L1: 0.0901][DIV: 0.1322][GRAD: 0.1842][VORT: 0.2449][Total: 0.6514]	4.8+3.0s
[7200/8000]	[L1: 0.0893][DIV: 0.1311][GRAD: 0.1826][VORT: 0.2443][Total: 0.6473]	4.8+3.1s
[8000/8000]	[L1: 0.0883][DIV: 0.1300][GRAD: 0.1805][VORT: 0.2410][Total: 0.6398]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.081129	vorticity_error: 0.872434	mean_abs_divergence: 0.121199
[DIV2K x2]	rel_l2_error: 0.057395	vorticity_error: 0.843092	mean_abs_divergence: 0.062626
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.047648	vorticity_error: 0.626506	mean_abs_divergence: 0.030370
Forward: 15.73s

Saving...
Total: 16.07s

[Epoch 683]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0832][DIV: 0.1228][GRAD: 0.1710][VORT: 0.2336][Total: 0.6106]	5.0+16.9s
[1600/8000]	[L1: 0.0843][DIV: 0.1261][GRAD: 0.1725][VORT: 0.2343][Total: 0.6172]	4.8+3.1s
[2400/8000]	[L1: 0.0856][DIV: 0.1277][GRAD: 0.1753][VORT: 0.2374][Total: 0.6259]	4.8+3.1s
[3200/8000]	[L1: 0.0857][DIV: 0.1278][GRAD: 0.1756][VORT: 0.2374][Total: 0.6266]	4.8+3.1s
[4000/8000]	[L1: 0.0866][DIV: 0.1288][GRAD: 0.1774][VORT: 0.2391][Total: 0.6320]	4.8+3.1s
[4800/8000]	[L1: 0.0870][DIV: 0.1292][GRAD: 0.1780][VORT: 0.2389][Total: 0.6330]	4.8+3.0s
[5600/8000]	[L1: 0.0882][DIV: 0.1306][GRAD: 0.1805][VORT: 0.2416][Total: 0.6409]	4.7+3.1s
[6400/8000]	[L1: 0.0877][DIV: 0.1296][GRAD: 0.1796][VORT: 0.2407][Total: 0.6377]	4.8+3.0s
[7200/8000]	[L1: 0.0879][DIV: 0.1300][GRAD: 0.1800][VORT: 0.2410][Total: 0.6389]	4.8+3.1s
[8000/8000]	[L1: 0.0881][DIV: 0.1303][GRAD: 0.1803][VORT: 0.2408][Total: 0.6395]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.093472	vorticity_error: 0.896552	mean_abs_divergence: 0.147928
[DIV2K x2]	rel_l2_error: 0.067797	vorticity_error: 0.920341	mean_abs_divergence: 0.078271
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044921	vorticity_error: 0.694286	mean_abs_divergence: 0.038648
Forward: 15.59s

Saving...
Total: 15.95s

[Epoch 684]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0916][DIV: 0.1352][GRAD: 0.1878][VORT: 0.2502][Total: 0.6648]	5.0+16.9s
[1600/8000]	[L1: 0.0909][DIV: 0.1354][GRAD: 0.1863][VORT: 0.2463][Total: 0.6589]	4.7+3.1s
[2400/8000]	[L1: 0.0909][DIV: 0.1351][GRAD: 0.1866][VORT: 0.2501][Total: 0.6627]	4.8+3.0s
[3200/8000]	[L1: 0.0893][DIV: 0.1328][GRAD: 0.1835][VORT: 0.2472][Total: 0.6529]	4.7+3.1s
[4000/8000]	[L1: 0.0881][DIV: 0.1313][GRAD: 0.1807][VORT: 0.2420][Total: 0.6421]	4.8+3.0s
[4800/8000]	[L1: 0.0884][DIV: 0.1315][GRAD: 0.1814][VORT: 0.2442][Total: 0.6455]	4.7+3.1s
[5600/8000]	[L1: 0.0887][DIV: 0.1320][GRAD: 0.1819][VORT: 0.2438][Total: 0.6464]	4.8+3.1s
[6400/8000]	[L1: 0.0880][DIV: 0.1310][GRAD: 0.1804][VORT: 0.2417][Total: 0.6410]	4.8+3.1s
[7200/8000]	[L1: 0.0888][DIV: 0.1319][GRAD: 0.1821][VORT: 0.2443][Total: 0.6472]	4.8+3.1s
[8000/8000]	[L1: 0.0889][DIV: 0.1320][GRAD: 0.1824][VORT: 0.2456][Total: 0.6489]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.073830	vorticity_error: 0.875711	mean_abs_divergence: 0.125641
[DIV2K x2]	rel_l2_error: 0.055654	vorticity_error: 0.903496	mean_abs_divergence: 0.066513
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.043259	vorticity_error: 0.813415	mean_abs_divergence: 0.032809
Forward: 15.74s

Saving...
Total: 16.09s

[Epoch 685]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0840][DIV: 0.1284][GRAD: 0.1717][VORT: 0.2272][Total: 0.6113]	5.0+16.9s
[1600/8000]	[L1: 0.0875][DIV: 0.1328][GRAD: 0.1790][VORT: 0.2387][Total: 0.6380]	4.8+3.1s
[2400/8000]	[L1: 0.0893][DIV: 0.1344][GRAD: 0.1832][VORT: 0.2482][Total: 0.6551]	4.8+3.1s
[3200/8000]	[L1: 0.0902][DIV: 0.1344][GRAD: 0.1849][VORT: 0.2495][Total: 0.6591]	4.8+3.0s
[4000/8000]	[L1: 0.0886][DIV: 0.1322][GRAD: 0.1818][VORT: 0.2479][Total: 0.6505]	4.8+3.1s
[4800/8000]	[L1: 0.0881][DIV: 0.1314][GRAD: 0.1806][VORT: 0.2449][Total: 0.6450]	4.8+3.1s
[5600/8000]	[L1: 0.0891][DIV: 0.1329][GRAD: 0.1826][VORT: 0.2472][Total: 0.6518]	4.8+3.1s
[6400/8000]	[L1: 0.0892][DIV: 0.1330][GRAD: 0.1827][VORT: 0.2464][Total: 0.6513]	4.7+3.1s
[7200/8000]	[L1: 0.0891][DIV: 0.1327][GRAD: 0.1824][VORT: 0.2459][Total: 0.6501]	4.8+3.0s
[8000/8000]	[L1: 0.0887][DIV: 0.1321][GRAD: 0.1816][VORT: 0.2449][Total: 0.6472]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.091867	vorticity_error: 0.774788	mean_abs_divergence: 0.113516
[DIV2K x2]	rel_l2_error: 0.059107	vorticity_error: 3.685796	mean_abs_divergence: 0.062259
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.051816	vorticity_error: 1.014113	mean_abs_divergence: 0.031212
Forward: 15.69s

Saving...
Total: 16.09s

[Epoch 686]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0869][DIV: 0.1282][GRAD: 0.1781][VORT: 0.2389][Total: 0.6320]	5.0+16.9s
[1600/8000]	[L1: 0.0874][DIV: 0.1292][GRAD: 0.1787][VORT: 0.2375][Total: 0.6328]	4.8+3.1s
[2400/8000]	[L1: 0.0881][DIV: 0.1304][GRAD: 0.1799][VORT: 0.2368][Total: 0.6352]	4.8+3.1s
[3200/8000]	[L1: 0.0893][DIV: 0.1324][GRAD: 0.1821][VORT: 0.2379][Total: 0.6416]	4.8+3.1s
[4000/8000]	[L1: 0.0877][DIV: 0.1307][GRAD: 0.1792][VORT: 0.2352][Total: 0.6328]	4.7+3.1s
[4800/8000]	[L1: 0.0881][DIV: 0.1310][GRAD: 0.1800][VORT: 0.2365][Total: 0.6356]	4.8+3.0s
[5600/8000]	[L1: 0.0872][DIV: 0.1299][GRAD: 0.1782][VORT: 0.2347][Total: 0.6299]	4.7+3.1s
[6400/8000]	[L1: 0.0878][DIV: 0.1311][GRAD: 0.1794][VORT: 0.2358][Total: 0.6341]	4.9+3.0s
[7200/8000]	[L1: 0.0871][DIV: 0.1301][GRAD: 0.1780][VORT: 0.2350][Total: 0.6302]	4.8+3.1s
[8000/8000]	[L1: 0.0870][DIV: 0.1304][GRAD: 0.1779][VORT: 0.2345][Total: 0.6297]	4.8+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.073957	vorticity_error: 0.557315	mean_abs_divergence: 0.112348
[DIV2K x2]	rel_l2_error: 0.061267	vorticity_error: 0.540656	mean_abs_divergence: 0.060183
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.041977	vorticity_error: 0.433905	mean_abs_divergence: 0.030047
Forward: 15.71s

Saving...
Total: 16.05s

[Epoch 687]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0869][DIV: 0.1274][GRAD: 0.1780][VORT: 0.2341][Total: 0.6265]	5.1+17.0s
[1600/8000]	[L1: 0.0863][DIV: 0.1273][GRAD: 0.1765][VORT: 0.2317][Total: 0.6218]	4.8+3.0s
[2400/8000]	[L1: 0.0886][DIV: 0.1300][GRAD: 0.1812][VORT: 0.2408][Total: 0.6406]	4.7+3.1s
[3200/8000]	[L1: 0.0879][DIV: 0.1299][GRAD: 0.1801][VORT: 0.2389][Total: 0.6368]	4.8+3.0s
[4000/8000]	[L1: 0.0863][DIV: 0.1280][GRAD: 0.1767][VORT: 0.2361][Total: 0.6271]	4.8+3.1s
[4800/8000]	[L1: 0.0871][DIV: 0.1290][GRAD: 0.1784][VORT: 0.2384][Total: 0.6328]	4.9+3.0s
[5600/8000]	[L1: 0.0880][DIV: 0.1301][GRAD: 0.1802][VORT: 0.2419][Total: 0.6401]	4.8+3.0s
[6400/8000]	[L1: 0.0879][DIV: 0.1300][GRAD: 0.1800][VORT: 0.2413][Total: 0.6392]	4.8+3.0s
[7200/8000]	[L1: 0.0880][DIV: 0.1302][GRAD: 0.1803][VORT: 0.2416][Total: 0.6400]	4.7+3.1s
[8000/8000]	[L1: 0.0887][DIV: 0.1310][GRAD: 0.1819][VORT: 0.2436][Total: 0.6452]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.072484	vorticity_error: 0.619615	mean_abs_divergence: 0.127460
[DIV2K x2]	rel_l2_error: 0.055112	vorticity_error: 0.570470	mean_abs_divergence: 0.066103
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.040735	vorticity_error: 0.528574	mean_abs_divergence: 0.031246
Forward: 15.70s

Saving...
Total: 16.06s

[Epoch 688]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0877][DIV: 0.1309][GRAD: 0.1787][VORT: 0.2317][Total: 0.6290]	5.1+17.0s
[1600/8000]	[L1: 0.0862][DIV: 0.1278][GRAD: 0.1760][VORT: 0.2304][Total: 0.6203]	4.8+3.1s
[2400/8000]	[L1: 0.0854][DIV: 0.1271][GRAD: 0.1746][VORT: 0.2292][Total: 0.6164]	4.8+3.0s
[3200/8000]	[L1: 0.0840][DIV: 0.1254][GRAD: 0.1718][VORT: 0.2262][Total: 0.6075]	4.8+3.0s
[4000/8000]	[L1: 0.0853][DIV: 0.1271][GRAD: 0.1747][VORT: 0.2309][Total: 0.6180]	4.8+3.1s
[4800/8000]	[L1: 0.0861][DIV: 0.1279][GRAD: 0.1766][VORT: 0.2354][Total: 0.6260]	4.8+3.1s
[5600/8000]	[L1: 0.0868][DIV: 0.1287][GRAD: 0.1779][VORT: 0.2369][Total: 0.6303]	4.7+3.1s
[6400/8000]	[L1: 0.0866][DIV: 0.1282][GRAD: 0.1774][VORT: 0.2372][Total: 0.6294]	4.8+3.0s
[7200/8000]	[L1: 0.0874][DIV: 0.1293][GRAD: 0.1790][VORT: 0.2394][Total: 0.6350]	4.7+3.1s
[8000/8000]	[L1: 0.0883][DIV: 0.1305][GRAD: 0.1808][VORT: 0.2418][Total: 0.6414]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.074045	vorticity_error: 2.863782	mean_abs_divergence: 0.103984
[DIV2K x2]	rel_l2_error: 0.056735	vorticity_error: 0.697479	mean_abs_divergence: 0.052887
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044323	vorticity_error: 0.688065	mean_abs_divergence: 0.025480
Forward: 15.61s

Saving...
Total: 15.96s

[Epoch 689]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0844][DIV: 0.1279][GRAD: 0.1736][VORT: 0.2354][Total: 0.6214]	5.0+16.8s
[1600/8000]	[L1: 0.0847][DIV: 0.1280][GRAD: 0.1738][VORT: 0.2312][Total: 0.6177]	4.7+3.1s
[2400/8000]	[L1: 0.0879][DIV: 0.1316][GRAD: 0.1798][VORT: 0.2385][Total: 0.6377]	4.8+3.1s
[3200/8000]	[L1: 0.0882][DIV: 0.1311][GRAD: 0.1804][VORT: 0.2420][Total: 0.6416]	4.8+3.0s
[4000/8000]	[L1: 0.0886][DIV: 0.1308][GRAD: 0.1813][VORT: 0.2425][Total: 0.6432]	4.8+3.0s
[4800/8000]	[L1: 0.0880][DIV: 0.1297][GRAD: 0.1801][VORT: 0.2413][Total: 0.6391]	4.8+3.1s
[5600/8000]	[L1: 0.0872][DIV: 0.1291][GRAD: 0.1785][VORT: 0.2396][Total: 0.6345]	4.8+3.0s
[6400/8000]	[L1: 0.0872][DIV: 0.1291][GRAD: 0.1783][VORT: 0.2384][Total: 0.6331]	4.8+3.1s
[7200/8000]	[L1: 0.0884][DIV: 0.1306][GRAD: 0.1809][VORT: 0.2419][Total: 0.6417]	4.8+3.0s
[8000/8000]	[L1: 0.0883][DIV: 0.1304][GRAD: 0.1807][VORT: 0.2419][Total: 0.6413]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.090822	vorticity_error: 0.767425	mean_abs_divergence: 0.142267
[DIV2K x2]	rel_l2_error: 0.066974	vorticity_error: 0.864712	mean_abs_divergence: 0.075297
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.040589	vorticity_error: 0.715240	mean_abs_divergence: 0.036516
Forward: 15.56s

Saving...
Total: 15.95s

[Epoch 690]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0825][DIV: 0.1223][GRAD: 0.1686][VORT: 0.2215][Total: 0.5949]	5.1+17.0s
[1600/8000]	[L1: 0.0847][DIV: 0.1264][GRAD: 0.1735][VORT: 0.2304][Total: 0.6150]	4.8+3.0s
[2400/8000]	[L1: 0.0872][DIV: 0.1286][GRAD: 0.1787][VORT: 0.2384][Total: 0.6330]	4.8+3.0s
[3200/8000]	[L1: 0.0878][DIV: 0.1295][GRAD: 0.1803][VORT: 0.2432][Total: 0.6408]	4.8+3.1s
[4000/8000]	[L1: 0.0874][DIV: 0.1291][GRAD: 0.1794][VORT: 0.2408][Total: 0.6367]	4.8+3.1s
[4800/8000]	[L1: 0.0866][DIV: 0.1279][GRAD: 0.1778][VORT: 0.2387][Total: 0.6309]	4.8+3.0s
[5600/8000]	[L1: 0.0859][DIV: 0.1272][GRAD: 0.1766][VORT: 0.2373][Total: 0.6270]	4.8+3.0s
[6400/8000]	[L1: 0.0862][DIV: 0.1276][GRAD: 0.1771][VORT: 0.2385][Total: 0.6294]	4.8+3.0s
[7200/8000]	[L1: 0.0853][DIV: 0.1266][GRAD: 0.1752][VORT: 0.2360][Total: 0.6231]	4.8+3.0s
[8000/8000]	[L1: 0.0856][DIV: 0.1269][GRAD: 0.1756][VORT: 0.2364][Total: 0.6244]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.078370	vorticity_error: 0.774457	mean_abs_divergence: 0.130076
[DIV2K x2]	rel_l2_error: 0.060739	vorticity_error: 1.034103	mean_abs_divergence: 0.066516
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042540	vorticity_error: 0.850961	mean_abs_divergence: 0.031784
Forward: 15.69s

Saving...
Total: 16.04s

[Epoch 691]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0890][DIV: 0.1306][GRAD: 0.1816][VORT: 0.2416][Total: 0.6428]	5.1+17.0s
[1600/8000]	[L1: 0.0878][DIV: 0.1311][GRAD: 0.1792][VORT: 0.2385][Total: 0.6366]	4.8+3.1s
[2400/8000]	[L1: 0.0889][DIV: 0.1325][GRAD: 0.1818][VORT: 0.2445][Total: 0.6477]	4.8+3.1s
[3200/8000]	[L1: 0.0889][DIV: 0.1329][GRAD: 0.1819][VORT: 0.2447][Total: 0.6484]	4.8+3.1s
[4000/8000]	[L1: 0.0896][DIV: 0.1337][GRAD: 0.1834][VORT: 0.2456][Total: 0.6523]	4.8+3.1s
[4800/8000]	[L1: 0.0900][DIV: 0.1339][GRAD: 0.1842][VORT: 0.2473][Total: 0.6554]	4.8+3.0s
[5600/8000]	[L1: 0.0895][DIV: 0.1333][GRAD: 0.1833][VORT: 0.2451][Total: 0.6511]	4.8+3.1s
[6400/8000]	[L1: 0.0905][DIV: 0.1346][GRAD: 0.1855][VORT: 0.2482][Total: 0.6588]	4.8+3.1s
[7200/8000]	[L1: 0.0901][DIV: 0.1339][GRAD: 0.1849][VORT: 0.2478][Total: 0.6566]	4.8+3.1s
[8000/8000]	[L1: 0.0891][DIV: 0.1328][GRAD: 0.1829][VORT: 0.2453][Total: 0.6501]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.091116	vorticity_error: 0.968922	mean_abs_divergence: 0.137371
[DIV2K x2]	rel_l2_error: 0.069754	vorticity_error: 1.004056	mean_abs_divergence: 0.074468
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.050620	vorticity_error: 0.853615	mean_abs_divergence: 0.037064
Forward: 15.68s

Saving...
Total: 16.04s

[Epoch 692]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0967][DIV: 0.1429][GRAD: 0.1967][VORT: 0.2524][Total: 0.6887]	5.1+16.9s
[1600/8000]	[L1: 0.0911][DIV: 0.1347][GRAD: 0.1861][VORT: 0.2431][Total: 0.6551]	4.8+3.1s
[2400/8000]	[L1: 0.0887][DIV: 0.1313][GRAD: 0.1815][VORT: 0.2410][Total: 0.6426]	4.8+3.1s
[3200/8000]	[L1: 0.0881][DIV: 0.1300][GRAD: 0.1802][VORT: 0.2397][Total: 0.6380]	4.8+3.0s
[4000/8000]	[L1: 0.0881][DIV: 0.1300][GRAD: 0.1802][VORT: 0.2401][Total: 0.6383]	4.8+3.0s
[4800/8000]	[L1: 0.0876][DIV: 0.1294][GRAD: 0.1795][VORT: 0.2412][Total: 0.6377]	4.8+3.1s
[5600/8000]	[L1: 0.0883][DIV: 0.1303][GRAD: 0.1809][VORT: 0.2434][Total: 0.6428]	4.8+3.1s
[6400/8000]	[L1: 0.0881][DIV: 0.1302][GRAD: 0.1804][VORT: 0.2424][Total: 0.6411]	4.8+3.1s
[7200/8000]	[L1: 0.0878][DIV: 0.1299][GRAD: 0.1797][VORT: 0.2409][Total: 0.6383]	4.7+3.1s
[8000/8000]	[L1: 0.0879][DIV: 0.1300][GRAD: 0.1798][VORT: 0.2407][Total: 0.6385]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.064440	vorticity_error: 0.783607	mean_abs_divergence: 0.102838
[DIV2K x2]	rel_l2_error: 0.054311	vorticity_error: 0.675776	mean_abs_divergence: 0.052484
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.039018	vorticity_error: 0.651484	mean_abs_divergence: 0.025350
Forward: 15.82s

Saving...
Total: 16.16s

[Epoch 693]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0838][DIV: 0.1246][GRAD: 0.1723][VORT: 0.2330][Total: 0.6137]	5.0+16.9s
[1600/8000]	[L1: 0.0892][DIV: 0.1321][GRAD: 0.1832][VORT: 0.2478][Total: 0.6523]	4.8+3.1s
[2400/8000]	[L1: 0.0889][DIV: 0.1317][GRAD: 0.1827][VORT: 0.2491][Total: 0.6524]	4.8+3.0s
[3200/8000]	[L1: 0.0895][DIV: 0.1328][GRAD: 0.1834][VORT: 0.2466][Total: 0.6523]	4.8+3.1s
[4000/8000]	[L1: 0.0892][DIV: 0.1325][GRAD: 0.1831][VORT: 0.2476][Total: 0.6524]	4.8+3.1s
[4800/8000]	[L1: 0.0886][DIV: 0.1316][GRAD: 0.1817][VORT: 0.2441][Total: 0.6460]	4.8+3.0s
[5600/8000]	[L1: 0.0882][DIV: 0.1309][GRAD: 0.1809][VORT: 0.2435][Total: 0.6435]	4.7+3.1s
[6400/8000]	[L1: 0.0877][DIV: 0.1305][GRAD: 0.1799][VORT: 0.2426][Total: 0.6407]	4.8+3.0s
[7200/8000]	[L1: 0.0872][DIV: 0.1299][GRAD: 0.1789][VORT: 0.2416][Total: 0.6376]	4.8+3.0s
[8000/8000]	[L1: 0.0874][DIV: 0.1303][GRAD: 0.1792][VORT: 0.2420][Total: 0.6390]	4.8+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.084105	vorticity_error: 0.834596	mean_abs_divergence: 0.119723
[DIV2K x2]	rel_l2_error: 0.061135	vorticity_error: 0.869089	mean_abs_divergence: 0.062925
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042960	vorticity_error: 0.747059	mean_abs_divergence: 0.030809
Forward: 15.64s

Saving...
Total: 16.03s

[Epoch 694]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0874][DIV: 0.1304][GRAD: 0.1802][VORT: 0.2395][Total: 0.6375]	5.1+16.9s
[1600/8000]	[L1: 0.0903][DIV: 0.1346][GRAD: 0.1855][VORT: 0.2491][Total: 0.6596]	4.8+3.0s
[2400/8000]	[L1: 0.0868][DIV: 0.1290][GRAD: 0.1783][VORT: 0.2419][Total: 0.6360]	4.8+3.1s
[3200/8000]	[L1: 0.0876][DIV: 0.1296][GRAD: 0.1797][VORT: 0.2434][Total: 0.6402]	4.8+3.0s
[4000/8000]	[L1: 0.0880][DIV: 0.1300][GRAD: 0.1806][VORT: 0.2425][Total: 0.6411]	4.8+3.1s
[4800/8000]	[L1: 0.0867][DIV: 0.1282][GRAD: 0.1779][VORT: 0.2402][Total: 0.6330]	4.8+3.1s
[5600/8000]	[L1: 0.0871][DIV: 0.1284][GRAD: 0.1787][VORT: 0.2420][Total: 0.6362]	4.8+3.1s
[6400/8000]	[L1: 0.0868][DIV: 0.1282][GRAD: 0.1781][VORT: 0.2406][Total: 0.6336]	4.8+3.0s
[7200/8000]	[L1: 0.0876][DIV: 0.1295][GRAD: 0.1797][VORT: 0.2421][Total: 0.6390]	4.8+3.0s
[8000/8000]	[L1: 0.0875][DIV: 0.1293][GRAD: 0.1795][VORT: 0.2425][Total: 0.6388]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.078658	vorticity_error: 0.725493	mean_abs_divergence: 0.111324
[DIV2K x2]	rel_l2_error: 0.059770	vorticity_error: 1.030355	mean_abs_divergence: 0.058192
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042362	vorticity_error: 0.857945	mean_abs_divergence: 0.028580
Forward: 15.66s

Saving...
Total: 15.99s

[Epoch 695]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0859][DIV: 0.1278][GRAD: 0.1761][VORT: 0.2429][Total: 0.6328]	5.1+16.9s
[1600/8000]	[L1: 0.0873][DIV: 0.1296][GRAD: 0.1788][VORT: 0.2408][Total: 0.6366]	4.8+3.1s
[2400/8000]	[L1: 0.0887][DIV: 0.1319][GRAD: 0.1817][VORT: 0.2441][Total: 0.6464]	4.8+3.0s
[3200/8000]	[L1: 0.0882][DIV: 0.1313][GRAD: 0.1807][VORT: 0.2426][Total: 0.6428]	4.8+3.1s
[4000/8000]	[L1: 0.0886][DIV: 0.1318][GRAD: 0.1815][VORT: 0.2438][Total: 0.6457]	4.8+3.0s
[4800/8000]	[L1: 0.0881][DIV: 0.1311][GRAD: 0.1803][VORT: 0.2424][Total: 0.6418]	4.8+3.0s
[5600/8000]	[L1: 0.0874][DIV: 0.1301][GRAD: 0.1787][VORT: 0.2397][Total: 0.6359]	4.8+3.0s
[6400/8000]	[L1: 0.0868][DIV: 0.1291][GRAD: 0.1776][VORT: 0.2374][Total: 0.6308]	4.8+3.0s
[7200/8000]	[L1: 0.0861][DIV: 0.1284][GRAD: 0.1762][VORT: 0.2355][Total: 0.6262]	4.8+3.0s
[8000/8000]	[L1: 0.0864][DIV: 0.1289][GRAD: 0.1770][VORT: 0.2366][Total: 0.6290]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.072678	vorticity_error: 0.689406	mean_abs_divergence: 0.101872
[DIV2K x2]	rel_l2_error: 0.052962	vorticity_error: 0.570594	mean_abs_divergence: 0.052967
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.035476	vorticity_error: 0.528877	mean_abs_divergence: 0.025893
Forward: 15.48s

Saving...
Total: 15.83s

[Epoch 696]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0941][DIV: 0.1378][GRAD: 0.1926][VORT: 0.2548][Total: 0.6792]	5.0+16.9s
[1600/8000]	[L1: 0.0910][DIV: 0.1342][GRAD: 0.1863][VORT: 0.2461][Total: 0.6577]	4.8+3.0s
[2400/8000]	[L1: 0.0897][DIV: 0.1319][GRAD: 0.1839][VORT: 0.2447][Total: 0.6501]	4.8+3.0s
[3200/8000]	[L1: 0.0902][DIV: 0.1332][GRAD: 0.1847][VORT: 0.2445][Total: 0.6528]	4.7+3.1s
[4000/8000]	[L1: 0.0905][DIV: 0.1335][GRAD: 0.1854][VORT: 0.2457][Total: 0.6551]	4.8+3.0s
[4800/8000]	[L1: 0.0900][DIV: 0.1325][GRAD: 0.1846][VORT: 0.2474][Total: 0.6546]	4.8+3.1s
[5600/8000]	[L1: 0.0915][DIV: 0.1342][GRAD: 0.1876][VORT: 0.2515][Total: 0.6649]	4.8+3.0s
[6400/8000]	[L1: 0.0911][DIV: 0.1341][GRAD: 0.1869][VORT: 0.2511][Total: 0.6633]	4.8+3.0s
[7200/8000]	[L1: 0.0904][DIV: 0.1334][GRAD: 0.1853][VORT: 0.2489][Total: 0.6580]	4.8+3.0s
[8000/8000]	[L1: 0.0905][DIV: 0.1332][GRAD: 0.1855][VORT: 0.2494][Total: 0.6587]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.082054	vorticity_error: 0.695115	mean_abs_divergence: 0.121013
[DIV2K x2]	rel_l2_error: 0.066369	vorticity_error: 0.664841	mean_abs_divergence: 0.065019
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.051257	vorticity_error: 0.603995	mean_abs_divergence: 0.032700
Forward: 15.66s

Saving...
Total: 16.00s

[Epoch 697]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0947][DIV: 0.1378][GRAD: 0.1943][VORT: 0.2567][Total: 0.6834]	5.2+16.9s
[1600/8000]	[L1: 0.0894][DIV: 0.1313][GRAD: 0.1835][VORT: 0.2441][Total: 0.6483]	4.8+3.0s
[2400/8000]	[L1: 0.0884][DIV: 0.1299][GRAD: 0.1812][VORT: 0.2446][Total: 0.6440]	4.8+3.0s
[3200/8000]	[L1: 0.0882][DIV: 0.1298][GRAD: 0.1809][VORT: 0.2451][Total: 0.6441]	4.8+3.0s
[4000/8000]	[L1: 0.0888][DIV: 0.1311][GRAD: 0.1822][VORT: 0.2472][Total: 0.6493]	4.8+3.1s
[4800/8000]	[L1: 0.0888][DIV: 0.1310][GRAD: 0.1821][VORT: 0.2466][Total: 0.6485]	4.8+3.1s
[5600/8000]	[L1: 0.0887][DIV: 0.1306][GRAD: 0.1818][VORT: 0.2454][Total: 0.6464]	4.8+3.0s
[6400/8000]	[L1: 0.0890][DIV: 0.1310][GRAD: 0.1826][VORT: 0.2471][Total: 0.6497]	4.8+3.0s
[7200/8000]	[L1: 0.0895][DIV: 0.1316][GRAD: 0.1835][VORT: 0.2480][Total: 0.6526]	4.8+3.0s
[8000/8000]	[L1: 0.0889][DIV: 0.1307][GRAD: 0.1824][VORT: 0.2462][Total: 0.6482]	4.8+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.074760	vorticity_error: 0.685506	mean_abs_divergence: 0.129159
[DIV2K x2]	rel_l2_error: 0.064847	vorticity_error: 0.581156	mean_abs_divergence: 0.066755
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045947	vorticity_error: 0.531793	mean_abs_divergence: 0.032299
Forward: 15.73s

Saving...
Total: 16.12s

[Epoch 698]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0787][DIV: 0.1201][GRAD: 0.1607][VORT: 0.2175][Total: 0.5770]	5.1+17.0s
[1600/8000]	[L1: 0.0812][DIV: 0.1220][GRAD: 0.1660][VORT: 0.2229][Total: 0.5922]	4.8+3.0s
[2400/8000]	[L1: 0.0825][DIV: 0.1232][GRAD: 0.1687][VORT: 0.2255][Total: 0.5998]	4.8+3.1s
[3200/8000]	[L1: 0.0852][DIV: 0.1267][GRAD: 0.1742][VORT: 0.2329][Total: 0.6190]	4.8+3.0s
[4000/8000]	[L1: 0.0867][DIV: 0.1286][GRAD: 0.1773][VORT: 0.2374][Total: 0.6300]	4.7+3.1s
[4800/8000]	[L1: 0.0875][DIV: 0.1296][GRAD: 0.1791][VORT: 0.2398][Total: 0.6361]	4.8+3.1s
[5600/8000]	[L1: 0.0876][DIV: 0.1297][GRAD: 0.1794][VORT: 0.2397][Total: 0.6364]	4.8+3.1s
[6400/8000]	[L1: 0.0867][DIV: 0.1285][GRAD: 0.1776][VORT: 0.2377][Total: 0.6305]	4.8+3.0s
[7200/8000]	[L1: 0.0874][DIV: 0.1294][GRAD: 0.1790][VORT: 0.2398][Total: 0.6357]	4.8+3.1s
[8000/8000]	[L1: 0.0867][DIV: 0.1284][GRAD: 0.1776][VORT: 0.2380][Total: 0.6307]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.070582	vorticity_error: 0.646738	mean_abs_divergence: 0.120533
[DIV2K x2]	rel_l2_error: 0.050782	vorticity_error: 0.525888	mean_abs_divergence: 0.064736
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.037147	vorticity_error: 0.458088	mean_abs_divergence: 0.032111
Forward: 15.71s

Saving...
Total: 16.06s

[Epoch 699]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0857][DIV: 0.1261][GRAD: 0.1758][VORT: 0.2397][Total: 0.6273]	5.1+16.9s
[1600/8000]	[L1: 0.0852][DIV: 0.1255][GRAD: 0.1745][VORT: 0.2341][Total: 0.6192]	4.8+3.0s
[2400/8000]	[L1: 0.0905][DIV: 0.1320][GRAD: 0.1852][VORT: 0.2468][Total: 0.6544]	4.8+3.1s
[3200/8000]	[L1: 0.0905][DIV: 0.1326][GRAD: 0.1850][VORT: 0.2448][Total: 0.6528]	4.8+3.0s
[4000/8000]	[L1: 0.0896][DIV: 0.1317][GRAD: 0.1831][VORT: 0.2419][Total: 0.6462]	4.8+3.1s
[4800/8000]	[L1: 0.0893][DIV: 0.1316][GRAD: 0.1825][VORT: 0.2416][Total: 0.6450]	4.9+3.0s
[5600/8000]	[L1: 0.0893][DIV: 0.1319][GRAD: 0.1824][VORT: 0.2409][Total: 0.6445]	4.8+3.0s
[6400/8000]	[L1: 0.0895][DIV: 0.1318][GRAD: 0.1829][VORT: 0.2422][Total: 0.6463]	4.8+3.0s
[7200/8000]	[L1: 0.0887][DIV: 0.1309][GRAD: 0.1814][VORT: 0.2409][Total: 0.6419]	4.8+3.1s
[8000/8000]	[L1: 0.0884][DIV: 0.1305][GRAD: 0.1809][VORT: 0.2405][Total: 0.6404]	4.8+3.0s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.094354	vorticity_error: 0.803087	mean_abs_divergence: 0.121787
[DIV2K x2]	rel_l2_error: 0.071422	vorticity_error: 0.639950	mean_abs_divergence: 0.063806
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.055531	vorticity_error: 0.571810	mean_abs_divergence: 0.030956
Forward: 15.68s

Saving...
Total: 16.03s

[Epoch 700]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0951][DIV: 0.1397][GRAD: 0.1940][VORT: 0.2523][Total: 0.6811]	5.0+16.9s
[1600/8000]	[L1: 0.0920][DIV: 0.1356][GRAD: 0.1875][VORT: 0.2478][Total: 0.6630]	4.8+3.1s
[2400/8000]	[L1: 0.0911][DIV: 0.1344][GRAD: 0.1861][VORT: 0.2483][Total: 0.6600]	4.8+3.0s
[3200/8000]	[L1: 0.0885][DIV: 0.1312][GRAD: 0.1809][VORT: 0.2410][Total: 0.6416]	4.8+3.0s
[4000/8000]	[L1: 0.0861][DIV: 0.1282][GRAD: 0.1761][VORT: 0.2360][Total: 0.6264]	4.8+3.0s
[4800/8000]	[L1: 0.0869][DIV: 0.1291][GRAD: 0.1776][VORT: 0.2371][Total: 0.6307]	4.8+3.0s
[5600/8000]	[L1: 0.0869][DIV: 0.1291][GRAD: 0.1776][VORT: 0.2366][Total: 0.6301]	4.8+3.0s
[6400/8000]	[L1: 0.0866][DIV: 0.1289][GRAD: 0.1771][VORT: 0.2359][Total: 0.6286]	4.8+3.1s
[7200/8000]	[L1: 0.0864][DIV: 0.1286][GRAD: 0.1766][VORT: 0.2358][Total: 0.6274]	4.8+3.0s
[8000/8000]	[L1: 0.0855][DIV: 0.1276][GRAD: 0.1749][VORT: 0.2339][Total: 0.6220]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.067241	vorticity_error: 0.547041	mean_abs_divergence: 0.108024
[DIV2K x2]	rel_l2_error: 0.058884	vorticity_error: 0.785333	mean_abs_divergence: 0.058448
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.045629	vorticity_error: 0.822431	mean_abs_divergence: 0.029200
Forward: 15.70s

Saving...
Total: 16.04s

[Epoch 701]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0899][DIV: 0.1311][GRAD: 0.1844][VORT: 0.2502][Total: 0.6557]	5.2+16.9s
[1600/8000]	[L1: 0.0930][DIV: 0.1349][GRAD: 0.1908][VORT: 0.2584][Total: 0.6771]	4.8+3.1s
[2400/8000]	[L1: 0.0927][DIV: 0.1349][GRAD: 0.1899][VORT: 0.2579][Total: 0.6755]	4.8+3.0s
[3200/8000]	[L1: 0.0931][DIV: 0.1355][GRAD: 0.1908][VORT: 0.2564][Total: 0.6758]	4.8+3.0s
[4000/8000]	[L1: 0.0912][DIV: 0.1335][GRAD: 0.1871][VORT: 0.2519][Total: 0.6637]	4.8+3.0s
[4800/8000]	[L1: 0.0918][DIV: 0.1345][GRAD: 0.1881][VORT: 0.2533][Total: 0.6678]	4.8+3.0s
[5600/8000]	[L1: 0.0919][DIV: 0.1350][GRAD: 0.1883][VORT: 0.2524][Total: 0.6677]	4.8+3.1s
[6400/8000]	[L1: 0.0924][DIV: 0.1358][GRAD: 0.1893][VORT: 0.2535][Total: 0.6710]	4.8+3.0s
[7200/8000]	[L1: 0.0920][DIV: 0.1354][GRAD: 0.1883][VORT: 0.2511][Total: 0.6668]	4.8+3.0s
[8000/8000]	[L1: 0.0918][DIV: 0.1350][GRAD: 0.1879][VORT: 0.2514][Total: 0.6661]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.087589	vorticity_error: 0.692342	mean_abs_divergence: 0.116422
[DIV2K x2]	rel_l2_error: 0.060331	vorticity_error: 0.658445	mean_abs_divergence: 0.061799
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.050751	vorticity_error: 0.582012	mean_abs_divergence: 0.030299
Forward: 15.68s

Saving...
Total: 16.09s

[Epoch 702]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0856][DIV: 0.1288][GRAD: 0.1750][VORT: 0.2286][Total: 0.6180]	5.1+16.9s
[1600/8000]	[L1: 0.0823][DIV: 0.1243][GRAD: 0.1683][VORT: 0.2254][Total: 0.6002]	4.8+3.1s
[2400/8000]	[L1: 0.0861][DIV: 0.1293][GRAD: 0.1759][VORT: 0.2345][Total: 0.6258]	4.8+3.0s
[3200/8000]	[L1: 0.0873][DIV: 0.1304][GRAD: 0.1785][VORT: 0.2380][Total: 0.6342]	4.8+3.0s
[4000/8000]	[L1: 0.0877][DIV: 0.1308][GRAD: 0.1793][VORT: 0.2398][Total: 0.6376]	4.8+3.0s
[4800/8000]	[L1: 0.0878][DIV: 0.1308][GRAD: 0.1797][VORT: 0.2405][Total: 0.6388]	4.8+3.1s
[5600/8000]	[L1: 0.0880][DIV: 0.1310][GRAD: 0.1802][VORT: 0.2415][Total: 0.6406]	4.8+3.0s
[6400/8000]	[L1: 0.0880][DIV: 0.1310][GRAD: 0.1804][VORT: 0.2414][Total: 0.6408]	4.8+3.0s
[7200/8000]	[L1: 0.0888][DIV: 0.1320][GRAD: 0.1821][VORT: 0.2434][Total: 0.6464]	4.8+3.0s
[8000/8000]	[L1: 0.0896][DIV: 0.1330][GRAD: 0.1835][VORT: 0.2448][Total: 0.6509]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.096993	vorticity_error: 1.056681	mean_abs_divergence: 0.138052
[DIV2K x2]	rel_l2_error: 0.074173	vorticity_error: 3.717474	mean_abs_divergence: 0.071998
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.052094	vorticity_error: 1.029650	mean_abs_divergence: 0.034892
Forward: 15.72s

Saving...
Total: 16.06s

[Epoch 703]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0869][DIV: 0.1278][GRAD: 0.1769][VORT: 0.2359][Total: 0.6276]	5.1+17.0s
[1600/8000]	[L1: 0.0854][DIV: 0.1266][GRAD: 0.1749][VORT: 0.2348][Total: 0.6217]	4.8+3.1s
[2400/8000]	[L1: 0.0840][DIV: 0.1247][GRAD: 0.1721][VORT: 0.2312][Total: 0.6120]	4.8+3.1s
[3200/8000]	[L1: 0.0834][DIV: 0.1245][GRAD: 0.1708][VORT: 0.2299][Total: 0.6087]	4.8+3.0s
[4000/8000]	[L1: 0.0843][DIV: 0.1258][GRAD: 0.1727][VORT: 0.2325][Total: 0.6153]	4.8+3.0s
[4800/8000]	[L1: 0.0851][DIV: 0.1267][GRAD: 0.1743][VORT: 0.2339][Total: 0.6199]	4.9+3.0s
[5600/8000]	[L1: 0.0853][DIV: 0.1269][GRAD: 0.1747][VORT: 0.2346][Total: 0.6215]	4.8+3.1s
[6400/8000]	[L1: 0.0860][DIV: 0.1278][GRAD: 0.1762][VORT: 0.2364][Total: 0.6264]	4.8+3.0s
[7200/8000]	[L1: 0.0865][DIV: 0.1285][GRAD: 0.1770][VORT: 0.2365][Total: 0.6285]	4.8+3.0s
[8000/8000]	[L1: 0.0867][DIV: 0.1288][GRAD: 0.1774][VORT: 0.2371][Total: 0.6301]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.056768	vorticity_error: 0.600091	mean_abs_divergence: 0.085399
[DIV2K x2]	rel_l2_error: 0.043121	vorticity_error: 0.678503	mean_abs_divergence: 0.043235
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.035514	vorticity_error: 0.568424	mean_abs_divergence: 0.020808
Forward: 15.66s

Saving...
Total: 15.99s

[Epoch 704]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0921][DIV: 0.1359][GRAD: 0.1885][VORT: 0.2538][Total: 0.6704]	5.1+17.0s
[1600/8000]	[L1: 0.0875][DIV: 0.1292][GRAD: 0.1791][VORT: 0.2418][Total: 0.6376]	4.8+3.1s
[2400/8000]	[L1: 0.0873][DIV: 0.1289][GRAD: 0.1787][VORT: 0.2392][Total: 0.6341]	4.8+3.0s
[3200/8000]	[L1: 0.0882][DIV: 0.1306][GRAD: 0.1804][VORT: 0.2408][Total: 0.6399]	4.8+3.1s
[4000/8000]	[L1: 0.0875][DIV: 0.1299][GRAD: 0.1786][VORT: 0.2383][Total: 0.6343]	4.7+3.1s
[4800/8000]	[L1: 0.0877][DIV: 0.1300][GRAD: 0.1793][VORT: 0.2399][Total: 0.6368]	4.8+3.1s
[5600/8000]	[L1: 0.0885][DIV: 0.1310][GRAD: 0.1808][VORT: 0.2413][Total: 0.6415]	4.8+3.1s
[6400/8000]	[L1: 0.0883][DIV: 0.1309][GRAD: 0.1805][VORT: 0.2407][Total: 0.6404]	4.8+3.0s
[7200/8000]	[L1: 0.0883][DIV: 0.1308][GRAD: 0.1805][VORT: 0.2410][Total: 0.6407]	4.8+3.1s
[8000/8000]	[L1: 0.0878][DIV: 0.1300][GRAD: 0.1796][VORT: 0.2396][Total: 0.6370]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.084856	vorticity_error: 0.772767	mean_abs_divergence: 0.130287
[DIV2K x2]	rel_l2_error: 0.066523	vorticity_error: 0.649253	mean_abs_divergence: 0.068700
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.050360	vorticity_error: 0.637082	mean_abs_divergence: 0.034079
Forward: 15.71s

Saving...
Total: 16.05s

[Epoch 705]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0927][DIV: 0.1353][GRAD: 0.1883][VORT: 0.2397][Total: 0.6560]	5.0+16.9s
[1600/8000]	[L1: 0.0891][DIV: 0.1318][GRAD: 0.1818][VORT: 0.2395][Total: 0.6422]	4.8+3.0s
[2400/8000]	[L1: 0.0875][DIV: 0.1298][GRAD: 0.1789][VORT: 0.2355][Total: 0.6317]	4.8+3.1s
[3200/8000]	[L1: 0.0883][DIV: 0.1310][GRAD: 0.1804][VORT: 0.2375][Total: 0.6373]	4.8+3.0s
[4000/8000]	[L1: 0.0872][DIV: 0.1293][GRAD: 0.1782][VORT: 0.2371][Total: 0.6317]	4.8+3.1s
[4800/8000]	[L1: 0.0875][DIV: 0.1293][GRAD: 0.1789][VORT: 0.2394][Total: 0.6351]	4.8+3.0s
[5600/8000]	[L1: 0.0868][DIV: 0.1287][GRAD: 0.1774][VORT: 0.2371][Total: 0.6300]	4.8+3.0s
[6400/8000]	[L1: 0.0864][DIV: 0.1282][GRAD: 0.1767][VORT: 0.2357][Total: 0.6270]	4.7+3.1s
[7200/8000]	[L1: 0.0853][DIV: 0.1270][GRAD: 0.1745][VORT: 0.2329][Total: 0.6197]	4.8+3.1s
[8000/8000]	[L1: 0.0853][DIV: 0.1270][GRAD: 0.1745][VORT: 0.2330][Total: 0.6198]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.089856	vorticity_error: 0.850939	mean_abs_divergence: 0.157309
[DIV2K x2]	rel_l2_error: 0.075615	vorticity_error: 0.802237	mean_abs_divergence: 0.085315
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.053645	vorticity_error: 0.698788	mean_abs_divergence: 0.042199
Forward: 15.72s

Saving...
Total: 16.10s

[Epoch 706]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0945][DIV: 0.1400][GRAD: 0.1940][VORT: 0.2561][Total: 0.6846]	5.1+16.9s
[1600/8000]	[L1: 0.0926][DIV: 0.1378][GRAD: 0.1895][VORT: 0.2486][Total: 0.6684]	4.8+3.1s
[2400/8000]	[L1: 0.0919][DIV: 0.1363][GRAD: 0.1880][VORT: 0.2468][Total: 0.6631]	4.8+3.0s
[3200/8000]	[L1: 0.0896][DIV: 0.1333][GRAD: 0.1833][VORT: 0.2415][Total: 0.6477]	4.8+3.1s
[4000/8000]	[L1: 0.0889][DIV: 0.1321][GRAD: 0.1819][VORT: 0.2408][Total: 0.6437]	4.8+3.0s
[4800/8000]	[L1: 0.0889][DIV: 0.1322][GRAD: 0.1819][VORT: 0.2403][Total: 0.6434]	4.8+3.1s
[5600/8000]	[L1: 0.0883][DIV: 0.1310][GRAD: 0.1809][VORT: 0.2398][Total: 0.6400]	4.8+3.1s
[6400/8000]	[L1: 0.0888][DIV: 0.1318][GRAD: 0.1818][VORT: 0.2408][Total: 0.6431]	4.8+3.0s
[7200/8000]	[L1: 0.0888][DIV: 0.1316][GRAD: 0.1817][VORT: 0.2406][Total: 0.6427]	4.8+3.0s
[8000/8000]	[L1: 0.0883][DIV: 0.1310][GRAD: 0.1808][VORT: 0.2411][Total: 0.6412]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.076722	vorticity_error: 0.755985	mean_abs_divergence: 0.133864
[DIV2K x2]	rel_l2_error: 0.063273	vorticity_error: 0.650654	mean_abs_divergence: 0.070536
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044824	vorticity_error: 0.615264	mean_abs_divergence: 0.034272
Forward: 15.74s

Saving...
Total: 16.08s

[Epoch 707]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0898][DIV: 0.1315][GRAD: 0.1851][VORT: 0.2527][Total: 0.6591]	5.0+16.9s
[1600/8000]	[L1: 0.0879][DIV: 0.1286][GRAD: 0.1804][VORT: 0.2426][Total: 0.6395]	4.8+3.1s
[2400/8000]	[L1: 0.0866][DIV: 0.1279][GRAD: 0.1778][VORT: 0.2425][Total: 0.6348]	4.8+3.1s
[3200/8000]	[L1: 0.0870][DIV: 0.1289][GRAD: 0.1783][VORT: 0.2410][Total: 0.6352]	4.8+3.1s
[4000/8000]	[L1: 0.0873][DIV: 0.1292][GRAD: 0.1788][VORT: 0.2414][Total: 0.6367]	4.8+3.1s
[4800/8000]	[L1: 0.0865][DIV: 0.1282][GRAD: 0.1776][VORT: 0.2402][Total: 0.6325]	4.9+3.0s
[5600/8000]	[L1: 0.0863][DIV: 0.1277][GRAD: 0.1773][VORT: 0.2408][Total: 0.6321]	4.8+3.0s
[6400/8000]	[L1: 0.0864][DIV: 0.1279][GRAD: 0.1774][VORT: 0.2404][Total: 0.6322]	4.8+3.1s
[7200/8000]	[L1: 0.0876][DIV: 0.1294][GRAD: 0.1797][VORT: 0.2435][Total: 0.6401]	4.8+3.1s
[8000/8000]	[L1: 0.0872][DIV: 0.1289][GRAD: 0.1789][VORT: 0.2421][Total: 0.6371]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.068848	vorticity_error: 0.854292	mean_abs_divergence: 0.109852
[DIV2K x2]	rel_l2_error: 0.052065	vorticity_error: 1.011282	mean_abs_divergence: 0.057051
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.039792	vorticity_error: 0.771590	mean_abs_divergence: 0.028307
Forward: 15.71s

Saving...
Total: 16.04s

[Epoch 708]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0887][DIV: 0.1327][GRAD: 0.1800][VORT: 0.2368][Total: 0.6382]	4.9+17.0s
[1600/8000]	[L1: 0.0884][DIV: 0.1318][GRAD: 0.1802][VORT: 0.2399][Total: 0.6402]	4.8+3.0s
[2400/8000]	[L1: 0.0911][DIV: 0.1347][GRAD: 0.1864][VORT: 0.2515][Total: 0.6637]	4.8+3.0s
[3200/8000]	[L1: 0.0916][DIV: 0.1353][GRAD: 0.1877][VORT: 0.2529][Total: 0.6675]	4.8+3.0s
[4000/8000]	[L1: 0.0905][DIV: 0.1335][GRAD: 0.1856][VORT: 0.2501][Total: 0.6597]	4.8+3.1s
[4800/8000]	[L1: 0.0898][DIV: 0.1324][GRAD: 0.1841][VORT: 0.2485][Total: 0.6549]	4.8+3.0s
[5600/8000]	[L1: 0.0889][DIV: 0.1312][GRAD: 0.1822][VORT: 0.2458][Total: 0.6480]	4.8+3.1s
[6400/8000]	[L1: 0.0889][DIV: 0.1313][GRAD: 0.1822][VORT: 0.2454][Total: 0.6478]	4.8+3.0s
[7200/8000]	[L1: 0.0886][DIV: 0.1310][GRAD: 0.1817][VORT: 0.2446][Total: 0.6459]	4.8+3.1s
[8000/8000]	[L1: 0.0886][DIV: 0.1310][GRAD: 0.1815][VORT: 0.2441][Total: 0.6452]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.078198	vorticity_error: 0.882545	mean_abs_divergence: 0.118269
[DIV2K x2]	rel_l2_error: 0.062265	vorticity_error: 0.910062	mean_abs_divergence: 0.062037
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.044864	vorticity_error: 0.753658	mean_abs_divergence: 0.030691
Forward: 15.69s

Saving...
Total: 16.02s

[Epoch 709]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0798][DIV: 0.1213][GRAD: 0.1625][VORT: 0.2241][Total: 0.5878]	5.2+16.9s
[1600/8000]	[L1: 0.0813][DIV: 0.1237][GRAD: 0.1659][VORT: 0.2240][Total: 0.5949]	4.8+3.1s
[2400/8000]	[L1: 0.0846][DIV: 0.1272][GRAD: 0.1729][VORT: 0.2319][Total: 0.6167]	4.8+3.1s
[3200/8000]	[L1: 0.0863][DIV: 0.1290][GRAD: 0.1766][VORT: 0.2383][Total: 0.6303]	4.8+3.1s
[4000/8000]	[L1: 0.0867][DIV: 0.1295][GRAD: 0.1775][VORT: 0.2392][Total: 0.6329]	4.8+3.1s
[4800/8000]	[L1: 0.0867][DIV: 0.1292][GRAD: 0.1776][VORT: 0.2404][Total: 0.6339]	4.8+3.0s
[5600/8000]	[L1: 0.0868][DIV: 0.1296][GRAD: 0.1779][VORT: 0.2397][Total: 0.6340]	4.8+3.1s
[6400/8000]	[L1: 0.0872][DIV: 0.1297][GRAD: 0.1786][VORT: 0.2408][Total: 0.6363]	4.8+3.0s
[7200/8000]	[L1: 0.0870][DIV: 0.1294][GRAD: 0.1781][VORT: 0.2405][Total: 0.6350]	4.7+3.1s
[8000/8000]	[L1: 0.0858][DIV: 0.1279][GRAD: 0.1758][VORT: 0.2379][Total: 0.6275]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.090939	vorticity_error: 0.720263	mean_abs_divergence: 0.128628
[DIV2K x2]	rel_l2_error: 0.070065	vorticity_error: 1.062006	mean_abs_divergence: 0.067911
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.054008	vorticity_error: 0.776042	mean_abs_divergence: 0.033500
Forward: 15.83s

Saving...
Total: 16.23s

[Epoch 710]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0841][DIV: 0.1260][GRAD: 0.1724][VORT: 0.2369][Total: 0.6194]	5.1+16.9s
[1600/8000]	[L1: 0.0854][DIV: 0.1266][GRAD: 0.1751][VORT: 0.2389][Total: 0.6259]	4.8+3.0s
[2400/8000]	[L1: 0.0880][DIV: 0.1301][GRAD: 0.1805][VORT: 0.2442][Total: 0.6427]	4.7+3.1s
[3200/8000]	[L1: 0.0883][DIV: 0.1308][GRAD: 0.1807][VORT: 0.2435][Total: 0.6432]	4.8+3.1s
[4000/8000]	[L1: 0.0876][DIV: 0.1300][GRAD: 0.1793][VORT: 0.2404][Total: 0.6372]	4.8+3.1s
[4800/8000]	[L1: 0.0879][DIV: 0.1307][GRAD: 0.1800][VORT: 0.2410][Total: 0.6397]	4.8+3.1s
[5600/8000]	[L1: 0.0868][DIV: 0.1291][GRAD: 0.1777][VORT: 0.2391][Total: 0.6328]	4.7+3.1s
[6400/8000]	[L1: 0.0881][DIV: 0.1308][GRAD: 0.1805][VORT: 0.2427][Total: 0.6421]	4.8+3.0s
[7200/8000]	[L1: 0.0887][DIV: 0.1315][GRAD: 0.1818][VORT: 0.2447][Total: 0.6467]	4.8+3.1s
[8000/8000]	[L1: 0.0890][DIV: 0.1318][GRAD: 0.1823][VORT: 0.2446][Total: 0.6476]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.085332	vorticity_error: 0.618907	mean_abs_divergence: 0.122779
[DIV2K x2]	rel_l2_error: 0.059222	vorticity_error: 0.671305	mean_abs_divergence: 0.065092
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042483	vorticity_error: 0.493346	mean_abs_divergence: 0.032306
Forward: 15.57s

Saving...
Total: 15.92s

[Epoch 711]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0807][DIV: 0.1221][GRAD: 0.1656][VORT: 0.2258][Total: 0.5941]	5.0+16.8s
[1600/8000]	[L1: 0.0908][DIV: 0.1338][GRAD: 0.1860][VORT: 0.2511][Total: 0.6617]	4.8+3.0s
[2400/8000]	[L1: 0.0898][DIV: 0.1324][GRAD: 0.1837][VORT: 0.2447][Total: 0.6506]	4.8+3.0s
[3200/8000]	[L1: 0.0902][DIV: 0.1336][GRAD: 0.1844][VORT: 0.2454][Total: 0.6536]	4.8+3.0s
[4000/8000]	[L1: 0.0893][DIV: 0.1320][GRAD: 0.1827][VORT: 0.2437][Total: 0.6477]	4.8+3.0s
[4800/8000]	[L1: 0.0906][DIV: 0.1336][GRAD: 0.1852][VORT: 0.2462][Total: 0.6556]	4.8+3.0s
[5600/8000]	[L1: 0.0900][DIV: 0.1330][GRAD: 0.1840][VORT: 0.2445][Total: 0.6515]	4.8+3.0s
[6400/8000]	[L1: 0.0895][DIV: 0.1323][GRAD: 0.1831][VORT: 0.2440][Total: 0.6490]	4.8+3.1s
[7200/8000]	[L1: 0.0901][DIV: 0.1329][GRAD: 0.1844][VORT: 0.2459][Total: 0.6533]	4.8+3.0s
[8000/8000]	[L1: 0.0900][DIV: 0.1325][GRAD: 0.1843][VORT: 0.2463][Total: 0.6531]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.092182	vorticity_error: 0.945495	mean_abs_divergence: 0.136885
[DIV2K x2]	rel_l2_error: 0.066164	vorticity_error: 1.217735	mean_abs_divergence: 0.072532
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048861	vorticity_error: 0.920907	mean_abs_divergence: 0.035467
Forward: 15.71s

Saving...
Total: 16.05s

[Epoch 712]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0821][DIV: 0.1236][GRAD: 0.1675][VORT: 0.2242][Total: 0.5974]	5.0+16.9s
[1600/8000]	[L1: 0.0832][DIV: 0.1246][GRAD: 0.1699][VORT: 0.2248][Total: 0.6025]	4.8+3.1s
[2400/8000]	[L1: 0.0836][DIV: 0.1249][GRAD: 0.1708][VORT: 0.2264][Total: 0.6057]	4.9+3.0s
[3200/8000]	[L1: 0.0848][DIV: 0.1270][GRAD: 0.1733][VORT: 0.2298][Total: 0.6150]	4.8+3.1s
[4000/8000]	[L1: 0.0835][DIV: 0.1252][GRAD: 0.1708][VORT: 0.2277][Total: 0.6072]	4.8+3.0s
[4800/8000]	[L1: 0.0837][DIV: 0.1251][GRAD: 0.1713][VORT: 0.2280][Total: 0.6082]	4.8+3.1s
[5600/8000]	[L1: 0.0846][DIV: 0.1265][GRAD: 0.1728][VORT: 0.2289][Total: 0.6127]	4.8+3.1s
[6400/8000]	[L1: 0.0847][DIV: 0.1265][GRAD: 0.1731][VORT: 0.2295][Total: 0.6138]	4.8+3.1s
[7200/8000]	[L1: 0.0849][DIV: 0.1266][GRAD: 0.1736][VORT: 0.2313][Total: 0.6164]	4.8+3.0s
[8000/8000]	[L1: 0.0852][DIV: 0.1270][GRAD: 0.1742][VORT: 0.2317][Total: 0.6181]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.096048	vorticity_error: 0.811905	mean_abs_divergence: 0.128506
[DIV2K x2]	rel_l2_error: 0.070593	vorticity_error: 0.836744	mean_abs_divergence: 0.068339
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.046168	vorticity_error: 0.598266	mean_abs_divergence: 0.034011
Forward: 15.71s

Saving...
Total: 16.05s

[Epoch 713]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0905][DIV: 0.1337][GRAD: 0.1848][VORT: 0.2459][Total: 0.6549]	5.1+16.9s
[1600/8000]	[L1: 0.0879][DIV: 0.1302][GRAD: 0.1793][VORT: 0.2374][Total: 0.6348]	4.8+3.0s
[2400/8000]	[L1: 0.0894][DIV: 0.1317][GRAD: 0.1826][VORT: 0.2448][Total: 0.6484]	4.8+3.0s
[3200/8000]	[L1: 0.0872][DIV: 0.1286][GRAD: 0.1780][VORT: 0.2388][Total: 0.6327]	4.8+3.0s
[4000/8000]	[L1: 0.0882][DIV: 0.1296][GRAD: 0.1805][VORT: 0.2427][Total: 0.6409]	4.8+3.0s
[4800/8000]	[L1: 0.0873][DIV: 0.1285][GRAD: 0.1787][VORT: 0.2398][Total: 0.6343]	4.8+3.0s
[5600/8000]	[L1: 0.0873][DIV: 0.1281][GRAD: 0.1789][VORT: 0.2402][Total: 0.6346]	4.8+3.1s
[6400/8000]	[L1: 0.0870][DIV: 0.1279][GRAD: 0.1783][VORT: 0.2393][Total: 0.6325]	4.8+3.0s
[7200/8000]	[L1: 0.0869][DIV: 0.1279][GRAD: 0.1781][VORT: 0.2388][Total: 0.6317]	4.8+3.1s
[8000/8000]	[L1: 0.0870][DIV: 0.1282][GRAD: 0.1781][VORT: 0.2387][Total: 0.6321]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.088589	vorticity_error: 0.923814	mean_abs_divergence: 0.114373
[DIV2K x2]	rel_l2_error: 0.071476	vorticity_error: 1.235262	mean_abs_divergence: 0.060730
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.051306	vorticity_error: 1.059232	mean_abs_divergence: 0.029569
Forward: 15.73s

Saving...
Total: 16.11s

[Epoch 714]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0877][DIV: 0.1279][GRAD: 0.1791][VORT: 0.2374][Total: 0.6321]	5.1+17.0s
[1600/8000]	[L1: 0.0854][DIV: 0.1258][GRAD: 0.1748][VORT: 0.2334][Total: 0.6194]	4.8+3.1s
[2400/8000]	[L1: 0.0856][DIV: 0.1268][GRAD: 0.1749][VORT: 0.2338][Total: 0.6211]	4.8+3.1s
[3200/8000]	[L1: 0.0843][DIV: 0.1248][GRAD: 0.1723][VORT: 0.2312][Total: 0.6126]	4.8+3.0s
[4000/8000]	[L1: 0.0844][DIV: 0.1253][GRAD: 0.1724][VORT: 0.2306][Total: 0.6128]	4.8+3.0s
[4800/8000]	[L1: 0.0856][DIV: 0.1271][GRAD: 0.1748][VORT: 0.2334][Total: 0.6210]	4.8+3.0s
[5600/8000]	[L1: 0.0860][DIV: 0.1273][GRAD: 0.1755][VORT: 0.2342][Total: 0.6230]	4.8+3.1s
[6400/8000]	[L1: 0.0868][DIV: 0.1286][GRAD: 0.1772][VORT: 0.2363][Total: 0.6290]	4.8+3.0s
[7200/8000]	[L1: 0.0864][DIV: 0.1280][GRAD: 0.1764][VORT: 0.2353][Total: 0.6261]	4.7+3.1s
[8000/8000]	[L1: 0.0869][DIV: 0.1284][GRAD: 0.1774][VORT: 0.2365][Total: 0.6291]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.090560	vorticity_error: 0.860803	mean_abs_divergence: 0.119181
[DIV2K x2]	rel_l2_error: 0.065495	vorticity_error: 0.878024	mean_abs_divergence: 0.062958
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.049457	vorticity_error: 0.644300	mean_abs_divergence: 0.030433
Forward: 15.71s

Saving...
Total: 16.04s

[Epoch 715]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0943][DIV: 0.1375][GRAD: 0.1926][VORT: 0.2585][Total: 0.6830]	4.9+17.0s
[1600/8000]	[L1: 0.0910][DIV: 0.1335][GRAD: 0.1861][VORT: 0.2509][Total: 0.6615]	4.8+3.1s
[2400/8000]	[L1: 0.0921][DIV: 0.1351][GRAD: 0.1889][VORT: 0.2535][Total: 0.6696]	4.8+3.1s
[3200/8000]	[L1: 0.0898][DIV: 0.1323][GRAD: 0.1842][VORT: 0.2471][Total: 0.6534]	4.8+3.1s
[4000/8000]	[L1: 0.0878][DIV: 0.1302][GRAD: 0.1799][VORT: 0.2409][Total: 0.6388]	4.8+3.0s
[4800/8000]	[L1: 0.0878][DIV: 0.1302][GRAD: 0.1798][VORT: 0.2400][Total: 0.6378]	4.8+3.0s
[5600/8000]	[L1: 0.0876][DIV: 0.1301][GRAD: 0.1794][VORT: 0.2395][Total: 0.6366]	4.7+3.1s
[6400/8000]	[L1: 0.0876][DIV: 0.1301][GRAD: 0.1792][VORT: 0.2387][Total: 0.6356]	4.8+3.0s
[7200/8000]	[L1: 0.0876][DIV: 0.1302][GRAD: 0.1792][VORT: 0.2384][Total: 0.6354]	4.8+3.1s
[8000/8000]	[L1: 0.0878][DIV: 0.1303][GRAD: 0.1797][VORT: 0.2391][Total: 0.6370]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.110259	vorticity_error: 1.094611	mean_abs_divergence: 0.165220
[DIV2K x2]	rel_l2_error: 0.089729	vorticity_error: 1.058759	mean_abs_divergence: 0.086661
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.058410	vorticity_error: 0.944679	mean_abs_divergence: 0.042566
Forward: 15.73s

Saving...
Total: 16.06s

[Epoch 716]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0819][DIV: 0.1240][GRAD: 0.1683][VORT: 0.2266][Total: 0.6007]	5.0+16.9s
[1600/8000]	[L1: 0.0839][DIV: 0.1263][GRAD: 0.1722][VORT: 0.2324][Total: 0.6147]	4.8+3.1s
[2400/8000]	[L1: 0.0858][DIV: 0.1284][GRAD: 0.1759][VORT: 0.2365][Total: 0.6266]	4.8+3.0s
[3200/8000]	[L1: 0.0888][DIV: 0.1317][GRAD: 0.1824][VORT: 0.2452][Total: 0.6482]	4.8+3.1s
[4000/8000]	[L1: 0.0895][DIV: 0.1323][GRAD: 0.1839][VORT: 0.2477][Total: 0.6535]	4.8+3.1s
[4800/8000]	[L1: 0.0890][DIV: 0.1314][GRAD: 0.1827][VORT: 0.2456][Total: 0.6488]	4.7+3.1s
[5600/8000]	[L1: 0.0887][DIV: 0.1313][GRAD: 0.1821][VORT: 0.2447][Total: 0.6468]	4.8+3.1s
[6400/8000]	[L1: 0.0884][DIV: 0.1307][GRAD: 0.1814][VORT: 0.2443][Total: 0.6448]	4.8+3.1s
[7200/8000]	[L1: 0.0889][DIV: 0.1314][GRAD: 0.1822][VORT: 0.2447][Total: 0.6471]	4.8+3.0s
[8000/8000]	[L1: 0.0889][DIV: 0.1315][GRAD: 0.1823][VORT: 0.2452][Total: 0.6479]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.095241	vorticity_error: 1.109843	mean_abs_divergence: 0.128959
[DIV2K x2]	rel_l2_error: 0.070996	vorticity_error: 1.233241	mean_abs_divergence: 0.068035
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.058924	vorticity_error: 1.605289	mean_abs_divergence: 0.033224
Forward: 15.73s

Saving...
Total: 16.07s

[Epoch 717]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0865][DIV: 0.1302][GRAD: 0.1780][VORT: 0.2368][Total: 0.6315]	5.1+17.0s
[1600/8000]	[L1: 0.0887][DIV: 0.1312][GRAD: 0.1827][VORT: 0.2460][Total: 0.6486]	4.8+3.0s
[2400/8000]	[L1: 0.0926][DIV: 0.1360][GRAD: 0.1905][VORT: 0.2534][Total: 0.6725]	4.8+3.0s
[3200/8000]	[L1: 0.0902][DIV: 0.1329][GRAD: 0.1858][VORT: 0.2503][Total: 0.6593]	4.8+3.0s
[4000/8000]	[L1: 0.0896][DIV: 0.1320][GRAD: 0.1840][VORT: 0.2479][Total: 0.6536]	4.8+3.0s
[4800/8000]	[L1: 0.0888][DIV: 0.1311][GRAD: 0.1822][VORT: 0.2450][Total: 0.6471]	4.8+3.0s
[5600/8000]	[L1: 0.0881][DIV: 0.1305][GRAD: 0.1807][VORT: 0.2423][Total: 0.6417]	4.8+3.0s
[6400/8000]	[L1: 0.0886][DIV: 0.1313][GRAD: 0.1818][VORT: 0.2434][Total: 0.6451]	4.8+3.1s
[7200/8000]	[L1: 0.0888][DIV: 0.1312][GRAD: 0.1821][VORT: 0.2444][Total: 0.6464]	4.8+3.0s
[8000/8000]	[L1: 0.0897][DIV: 0.1324][GRAD: 0.1840][VORT: 0.2469][Total: 0.6530]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.089742	vorticity_error: 1.011149	mean_abs_divergence: 0.120677
[DIV2K x2]	rel_l2_error: 0.072072	vorticity_error: 1.296488	mean_abs_divergence: 0.061629
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.048797	vorticity_error: 1.294501	mean_abs_divergence: 0.030185
Forward: 15.75s

Saving...
Total: 16.14s

[Epoch 718]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0850][DIV: 0.1273][GRAD: 0.1738][VORT: 0.2329][Total: 0.6190]	5.1+17.0s
[1600/8000]	[L1: 0.0908][DIV: 0.1333][GRAD: 0.1856][VORT: 0.2461][Total: 0.6558]	4.8+3.1s
[2400/8000]	[L1: 0.0908][DIV: 0.1340][GRAD: 0.1857][VORT: 0.2479][Total: 0.6583]	4.8+3.0s
[3200/8000]	[L1: 0.0910][DIV: 0.1344][GRAD: 0.1864][VORT: 0.2492][Total: 0.6610]	4.8+3.1s
[4000/8000]	[L1: 0.0908][DIV: 0.1339][GRAD: 0.1859][VORT: 0.2473][Total: 0.6580]	4.8+3.0s
[4800/8000]	[L1: 0.0906][DIV: 0.1340][GRAD: 0.1854][VORT: 0.2453][Total: 0.6553]	4.8+3.1s
[5600/8000]	[L1: 0.0894][DIV: 0.1320][GRAD: 0.1830][VORT: 0.2436][Total: 0.6479]	4.8+3.1s
[6400/8000]	[L1: 0.0890][DIV: 0.1316][GRAD: 0.1823][VORT: 0.2427][Total: 0.6456]	4.9+3.0s
[7200/8000]	[L1: 0.0892][DIV: 0.1319][GRAD: 0.1827][VORT: 0.2441][Total: 0.6480]	4.8+3.1s
[8000/8000]	[L1: 0.0897][DIV: 0.1325][GRAD: 0.1838][VORT: 0.2452][Total: 0.6512]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.093513	vorticity_error: 1.029163	mean_abs_divergence: 0.127913
[DIV2K x2]	rel_l2_error: 0.069060	vorticity_error: 0.988910	mean_abs_divergence: 0.066360
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.055495	vorticity_error: 0.896879	mean_abs_divergence: 0.031777
Forward: 15.68s

Saving...
Total: 16.02s

[Epoch 719]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0910][DIV: 0.1345][GRAD: 0.1853][VORT: 0.2401][Total: 0.6509]	5.0+16.9s
[1600/8000]	[L1: 0.0877][DIV: 0.1291][GRAD: 0.1794][VORT: 0.2393][Total: 0.6356]	4.8+3.0s
[2400/8000]	[L1: 0.0870][DIV: 0.1280][GRAD: 0.1784][VORT: 0.2398][Total: 0.6332]	4.8+3.1s
[3200/8000]	[L1: 0.0876][DIV: 0.1293][GRAD: 0.1793][VORT: 0.2396][Total: 0.6358]	4.8+3.0s
[4000/8000]	[L1: 0.0869][DIV: 0.1285][GRAD: 0.1781][VORT: 0.2387][Total: 0.6322]	4.8+3.0s
[4800/8000]	[L1: 0.0873][DIV: 0.1290][GRAD: 0.1790][VORT: 0.2397][Total: 0.6351]	4.8+3.0s
[5600/8000]	[L1: 0.0875][DIV: 0.1297][GRAD: 0.1794][VORT: 0.2400][Total: 0.6367]	4.8+3.0s
[6400/8000]	[L1: 0.0879][DIV: 0.1301][GRAD: 0.1803][VORT: 0.2412][Total: 0.6395]	4.8+3.0s
[7200/8000]	[L1: 0.0885][DIV: 0.1307][GRAD: 0.1815][VORT: 0.2433][Total: 0.6440]	4.8+3.0s
[8000/8000]	[L1: 0.0878][DIV: 0.1300][GRAD: 0.1800][VORT: 0.2409][Total: 0.6388]	4.8+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.064577	vorticity_error: 0.721072	mean_abs_divergence: 0.086332
[DIV2K x2]	rel_l2_error: 0.054132	vorticity_error: 0.587479	mean_abs_divergence: 0.044928
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.041243	vorticity_error: 0.558463	mean_abs_divergence: 0.022050
Forward: 15.70s

Saving...
Total: 16.03s

[Epoch 720]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0932][DIV: 0.1357][GRAD: 0.1915][VORT: 0.2594][Total: 0.6797]	5.1+16.9s
[1600/8000]	[L1: 0.0925][DIV: 0.1348][GRAD: 0.1896][VORT: 0.2554][Total: 0.6723]	4.8+3.0s
[2400/8000]	[L1: 0.0918][DIV: 0.1340][GRAD: 0.1882][VORT: 0.2530][Total: 0.6669]	4.8+3.0s
[3200/8000]	[L1: 0.0938][DIV: 0.1368][GRAD: 0.1924][VORT: 0.2576][Total: 0.6806]	4.8+3.0s
[4000/8000]	[L1: 0.0935][DIV: 0.1370][GRAD: 0.1915][VORT: 0.2549][Total: 0.6769]	4.8+3.0s
[4800/8000]	[L1: 0.0921][DIV: 0.1349][GRAD: 0.1887][VORT: 0.2530][Total: 0.6687]	4.8+3.1s
[5600/8000]	[L1: 0.0919][DIV: 0.1347][GRAD: 0.1884][VORT: 0.2522][Total: 0.6673]	4.8+3.0s
[6400/8000]	[L1: 0.0925][DIV: 0.1354][GRAD: 0.1896][VORT: 0.2534][Total: 0.6709]	4.8+3.0s
[7200/8000]	[L1: 0.0917][DIV: 0.1345][GRAD: 0.1878][VORT: 0.2506][Total: 0.6646]	4.8+3.0s
[8000/8000]	[L1: 0.0909][DIV: 0.1337][GRAD: 0.1863][VORT: 0.2485][Total: 0.6594]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.069871	vorticity_error: 0.870832	mean_abs_divergence: 0.090906
[DIV2K x2]	rel_l2_error: 0.050219	vorticity_error: 0.806744	mean_abs_divergence: 0.048165
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.042000	vorticity_error: 0.598511	mean_abs_divergence: 0.024307
Forward: 15.55s

Saving...
Total: 15.89s

[Epoch 721]	Learning rate: 1.25e-5
[800/8000]	[L1: 0.0882][DIV: 0.1332][GRAD: 0.1816][VORT: 0.2445][Total: 0.6475]	5.1+16.8s
[1600/8000]	[L1: 0.0860][DIV: 0.1293][GRAD: 0.1767][VORT: 0.2356][Total: 0.6277]	4.8+3.0s
[2400/8000]	[L1: 0.0843][DIV: 0.1266][GRAD: 0.1730][VORT: 0.2303][Total: 0.6142]	4.8+3.1s
[3200/8000]	[L1: 0.0831][DIV: 0.1252][GRAD: 0.1704][VORT: 0.2284][Total: 0.6071]	4.8+3.1s
[4000/8000]	[L1: 0.0839][DIV: 0.1259][GRAD: 0.1720][VORT: 0.2298][Total: 0.6116]	4.8+3.0s
[4800/8000]	[L1: 0.0842][DIV: 0.1266][GRAD: 0.1727][VORT: 0.2309][Total: 0.6143]	4.8+3.1s
[5600/8000]	[L1: 0.0851][DIV: 0.1275][GRAD: 0.1746][VORT: 0.2351][Total: 0.6223]	4.8+3.1s
[6400/8000]	[L1: 0.0844][DIV: 0.1264][GRAD: 0.1732][VORT: 0.2334][Total: 0.6174]	4.8+3.1s
[7200/8000]	[L1: 0.0854][DIV: 0.1275][GRAD: 0.1752][VORT: 0.2355][Total: 0.6236]	4.8+3.0s
[8000/8000]	[L1: 0.0858][DIV: 0.1278][GRAD: 0.1760][VORT: 0.2367][Total: 0.6263]	4.7+3.1s

Evaluation:
[DIV2K x4]	rel_l2_error: 0.115822	vorticity_error: 1.243397	mean_abs_divergence: 0.119053
[DIV2K x2]	rel_l2_error: 0.079152	vorticity_error: 1.462476	mean_abs_divergence: 0.063659
[DIV2K x1 (Full Resolution)]	rel_l2_error: 0.072730	vorticity_error: 1.503282	mean_abs_divergence: 0.030874
Forward: 15.66s

Saving...
Total: 16.07s

LapSRN(
  (head_x8): Conv2d(2, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (head_x4): Conv2d(2, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (head_x2): Conv2d(2, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (feature_extractor_x4): FeatureExtraction(
    (body): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
  )
  (feature_extractor_x2): FeatureExtraction(
    (body): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
  )
  (upsample_block_x4): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (upsample_block_x2): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (upsample_block_x1): UpsampleBlock(
    (upsample): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (reconstruction): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
    )
    (output): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
